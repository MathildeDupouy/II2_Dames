
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026378  0800f150  0800f150  0001f150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080354c8  080354c8  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  080354c8  080354c8  000454c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080354d0  080354d0  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080354d0  080354d0  000454d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080354d4  080354d4  000454d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080354d8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e28  200000b4  0803558c  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008edc  0803558c  00058edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033768  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005da2  00000000  00000000  0008384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  000895f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002418  00000000  00000000  0008bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fcfb  00000000  00000000  000bc8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001179eb  00000000  00000000  000ec5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00203f8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a668  00000000  00000000  00203fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f138 	.word	0x0800f138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f138 	.word	0x0800f138

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f003 f942 	bl	80037d0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f003 f8fd 	bl	8003794 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f003 f8c7 	bl	8003794 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f003 f814 	bl	8003794 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f003 f806 	bl	8003794 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 ffeb 	bl	8003794 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 ffdd 	bl	8003794 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f002 ff90 	bl	8003760 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 ff7c 	bl	8003760 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 ff6d 	bl	8003794 <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fee2 	bl	8003794 <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fed2 	bl	8003794 <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fec4 	bl	8003794 <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f002 fe7b 	bl	800374c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <calculPossibilitesRec>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesRec(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites, uint8_t index, uint8_t nb_eaten)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08f      	sub	sp, #60	; 0x3c
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	72fb      	strb	r3, [r7, #11]
	int8_t pas   = (color == 0) ? 1 : -1; // en fonction couleur on regarde lignes croissantes ou decroissantes
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <calculPossibilitesRec+0x1e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e001      	b.n	8000b76 <calculPossibilitesRec+0x22>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t fin   = (color == 0) ? 7 : 0; // en fonction couleur pas meme arrivee
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <calculPossibilitesRec+0x30>
 8000b80:	2307      	movs	r3, #7
 8000b82:	e000      	b.n	8000b86 <calculPossibilitesRec+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t debut = (color == 0) ? 0 : 7; // en fonction couleur pas meme arrivee
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <calculPossibilitesRec+0x40>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <calculPossibilitesRec+0x42>
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Controle de la colonne de droite en avant :
	if(col < 7 && line != fin)
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	f200 80d5 	bhi.w	8000d4c <calculPossibilitesRec+0x1f8>
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f000 80cf 	beq.w	8000d4c <calculPossibilitesRec+0x1f8>
	{
		// Controle colonne de droite en avant : piece presente
		if(chessboard[line + pas][col + 1].isFilled == 1)
 8000bae:	89fa      	ldrh	r2, [r7, #14]
 8000bb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bb4:	18d1      	adds	r1, r2, r3
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	48c2      	ldr	r0, [pc, #776]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	441a      	add	r2, r3
 8000bc2:	0053      	lsls	r3, r2, #1
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4413      	add	r3, r2
 8000bd0:	4403      	add	r3, r0
 8000bd2:	3305      	adds	r3, #5
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 809a 	bne.w	8000d10 <calculPossibilitesRec+0x1bc>
		{
			if(chessboard[line + pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000bdc:	89fa      	ldrh	r2, [r7, #14]
 8000bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000be2:	18d1      	adds	r1, r2, r3
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	3301      	adds	r3, #1
 8000be8:	48b6      	ldr	r0, [pc, #728]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000bea:	461a      	mov	r2, r3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	441a      	add	r2, r3
 8000bf0:	0053      	lsls	r3, r2, #1
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4403      	add	r3, r0
 8000c00:	3307      	adds	r3, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	7afa      	ldrb	r2, [r7, #11]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	f000 80a0 	beq.w	8000d4c <calculPossibilitesRec+0x1f8>
			else if((col <= 5) && (line + pas != fin)) // Assez de cases pour sauter
 8000c0c:	89bb      	ldrh	r3, [r7, #12]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	f200 809c 	bhi.w	8000d4c <calculPossibilitesRec+0x1f8>
 8000c14:	89fa      	ldrh	r2, [r7, #14]
 8000c16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c1a:	441a      	add	r2, r3
 8000c1c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f000 8093 	beq.w	8000d4c <calculPossibilitesRec+0x1f8>
			{
				if(chessboard[line + 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000c26:	89fa      	ldrh	r2, [r7, #14]
 8000c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	18d1      	adds	r1, r2, r3
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	3302      	adds	r3, #2
 8000c34:	48a3      	ldr	r0, [pc, #652]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000c36:	461a      	mov	r2, r3
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	441a      	add	r2, r3
 8000c3c:	0053      	lsls	r3, r2, #1
 8000c3e:	461a      	mov	r2, r3
 8000c40:	460b      	mov	r3, r1
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	4403      	add	r3, r0
 8000c4c:	3305      	adds	r3, #5
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d17b      	bne.n	8000d4c <calculPossibilitesRec+0x1f8>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col + 2};
 8000c54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	4413      	add	r3, r2
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c66:	89bb      	ldrh	r3, [r7, #12]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	857b      	strh	r3, [r7, #42]	; 0x2a
					possibilites[index] = possible;
 8000c6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 8000c82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c86:	b298      	uxth	r0, r3
 8000c88:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000c8c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	4403      	add	r3, r0
 8000c94:	b29c      	uxth	r4, r3
 8000c96:	488c      	ldr	r0, [pc, #560]	; (8000ec8 <calculPossibilitesRec+0x374>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000ca8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000cac:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29c      	uxth	r4, r3
 8000cb6:	4884      	ldr	r0, [pc, #528]	; (8000ec8 <calculPossibilitesRec+0x374>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4403      	add	r3, r0
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	805a      	strh	r2, [r3, #2]
					index++;
 8000cca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 8000cd4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line + 2 * pas, col + 2, color, possibilites, index, nb_eaten);
 8000cde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	4413      	add	r3, r2
 8000cec:	b298      	uxth	r0, r3
 8000cee:	89bb      	ldrh	r3, [r7, #12]
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	7afa      	ldrb	r2, [r7, #11]
 8000cf6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f7ff ff26 	bl	8000b54 <calculPossibilitesRec>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000d0e:	e01d      	b.n	8000d4c <calculPossibilitesRec+0x1f8>
				}
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000d10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d119      	bne.n	8000d4c <calculPossibilitesRec+0x1f8>
		{
			struct cell possible = {line + pas, col + 1};
 8000d18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d26:	89bb      	ldrh	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
			possibilites[index] = possible;
 8000d2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	6010      	str	r0, [r2, #0]
			index++;
 8000d42:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d46:	3301      	adds	r3, #1
 8000d48:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col < 7 && line != debut)
 8000d4c:	89bb      	ldrh	r3, [r7, #12]
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	f200 80da 	bhi.w	8000f08 <calculPossibilitesRec+0x3b4>
 8000d54:	89fa      	ldrh	r2, [r7, #14]
 8000d56:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	f000 80d4 	beq.w	8000f08 <calculPossibilitesRec+0x3b4>
	{
		if(chessboard[line - pas][col + 1].isFilled == 1)
 8000d60:	89fa      	ldrh	r2, [r7, #14]
 8000d62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d66:	1ad1      	subs	r1, r2, r3
 8000d68:	89bb      	ldrh	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4855      	ldr	r0, [pc, #340]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000d6e:	461a      	mov	r2, r3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	441a      	add	r2, r3
 8000d74:	0053      	lsls	r3, r2, #1
 8000d76:	461a      	mov	r2, r3
 8000d78:	460b      	mov	r3, r1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4413      	add	r3, r2
 8000d82:	4403      	add	r3, r0
 8000d84:	3305      	adds	r3, #5
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	f040 809f 	bne.w	8000ecc <calculPossibilitesRec+0x378>
		{
			if(chessboard[line - pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000d8e:	89fa      	ldrh	r2, [r7, #14]
 8000d90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d94:	1ad1      	subs	r1, r2, r3
 8000d96:	89bb      	ldrh	r3, [r7, #12]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	484a      	ldr	r0, [pc, #296]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	441a      	add	r2, r3
 8000da2:	0053      	lsls	r3, r2, #1
 8000da4:	461a      	mov	r2, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4413      	add	r3, r2
 8000db0:	4403      	add	r3, r0
 8000db2:	3307      	adds	r3, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	7afa      	ldrb	r2, [r7, #11]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f000 80a5 	beq.w	8000f08 <calculPossibilitesRec+0x3b4>
			else if((col <= 5) && (line - pas != debut)) // Assez de cases pour sauter
 8000dbe:	89bb      	ldrh	r3, [r7, #12]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	f200 80a1 	bhi.w	8000f08 <calculPossibilitesRec+0x3b4>
 8000dc6:	89fa      	ldrh	r2, [r7, #14]
 8000dc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000dcc:	1ad2      	subs	r2, r2, r3
 8000dce:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	f000 8098 	beq.w	8000f08 <calculPossibilitesRec+0x3b4>
			{
				if(chessboard[line - 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000dd8:	89fa      	ldrh	r2, [r7, #14]
 8000dda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	1ad1      	subs	r1, r2, r3
 8000de2:	89bb      	ldrh	r3, [r7, #12]
 8000de4:	3302      	adds	r3, #2
 8000de6:	4837      	ldr	r0, [pc, #220]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000de8:	461a      	mov	r2, r3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	441a      	add	r2, r3
 8000dee:	0053      	lsls	r3, r2, #1
 8000df0:	461a      	mov	r2, r3
 8000df2:	460b      	mov	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4403      	add	r3, r0
 8000dfe:	3305      	adds	r3, #5
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8080 	bne.w	8000f08 <calculPossibilitesRec+0x3b4>
				{
					//=> Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col + 2};
 8000e08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	843b      	strh	r3, [r7, #32]
 8000e1a:	89bb      	ldrh	r3, [r7, #12]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	847b      	strh	r3, [r7, #34]	; 0x22
					possibilites[index] = possible;
 8000e22:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 8000e36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000e40:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000e44:	89f8      	ldrh	r0, [r7, #14]
 8000e46:	1ac3      	subs	r3, r0, r3
 8000e48:	b29c      	uxth	r4, r3
 8000e4a:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <calculPossibilitesRec+0x374>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	4622      	mov	r2, r4
 8000e58:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000e5c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000e60:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000e64:	89bb      	ldrh	r3, [r7, #12]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b29c      	uxth	r4, r3
 8000e6a:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <calculPossibilitesRec+0x374>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4403      	add	r3, r0
 8000e7a:	4622      	mov	r2, r4
 8000e7c:	805a      	strh	r2, [r3, #2]
					index++;
 8000e7e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e82:	3301      	adds	r3, #1
 8000e84:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 8000e88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line - 2 * pas, col + 2, color, possibilites, index, nb_eaten);
 8000e92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	89fa      	ldrh	r2, [r7, #14]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	89bb      	ldrh	r3, [r7, #12]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	7afa      	ldrb	r2, [r7, #11]
 8000eaa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f7ff fe4c 	bl	8000b54 <calculPossibilitesRec>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000ec2:	e021      	b.n	8000f08 <calculPossibilitesRec+0x3b4>
 8000ec4:	200080f8 	.word	0x200080f8
 8000ec8:	20008614 	.word	0x20008614
				}
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000ecc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d119      	bne.n	8000f08 <calculPossibilitesRec+0x3b4>
		{
			struct cell possible = {line + pas, col - 1};
 8000ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	83bb      	strh	r3, [r7, #28]
 8000ee2:	89bb      	ldrh	r3, [r7, #12]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	83fb      	strh	r3, [r7, #30]
			possibilites[index] = possible;
 8000eea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	6010      	str	r0, [r2, #0]
			index++;
 8000efe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f02:	3301      	adds	r3, #1
 8000f04:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		}
	}
	// Controle de la colonne de gauche en avant :
	if(col > 0 && line != fin)
 8000f08:	89bb      	ldrh	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80d5 	beq.w	80010ba <calculPossibilitesRec+0x566>
 8000f10:	89fa      	ldrh	r2, [r7, #14]
 8000f12:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000f16:	429a      	cmp	r2, r3
 8000f18:	f000 80cf 	beq.w	80010ba <calculPossibilitesRec+0x566>
	{
		// Controle colonne de gauche : piece presente
		if(chessboard[line + pas][col - 1].isFilled == 1)
 8000f1c:	89fa      	ldrh	r2, [r7, #14]
 8000f1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f22:	18d1      	adds	r1, r2, r3
 8000f24:	89bb      	ldrh	r3, [r7, #12]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	48c2      	ldr	r0, [pc, #776]	; (8001234 <calculPossibilitesRec+0x6e0>)
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	441a      	add	r2, r3
 8000f30:	0053      	lsls	r3, r2, #1
 8000f32:	461a      	mov	r2, r3
 8000f34:	460b      	mov	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4403      	add	r3, r0
 8000f40:	3305      	adds	r3, #5
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	f040 809a 	bne.w	800107e <calculPossibilitesRec+0x52a>
		{
			if(chessboard[line + pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000f4a:	89fa      	ldrh	r2, [r7, #14]
 8000f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f50:	18d1      	adds	r1, r2, r3
 8000f52:	89bb      	ldrh	r3, [r7, #12]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	48b7      	ldr	r0, [pc, #732]	; (8001234 <calculPossibilitesRec+0x6e0>)
 8000f58:	461a      	mov	r2, r3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	441a      	add	r2, r3
 8000f5e:	0053      	lsls	r3, r2, #1
 8000f60:	461a      	mov	r2, r3
 8000f62:	460b      	mov	r3, r1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4403      	add	r3, r0
 8000f6e:	3307      	adds	r3, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	7afa      	ldrb	r2, [r7, #11]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f000 80a0 	beq.w	80010ba <calculPossibilitesRec+0x566>
			else if((col >= 2) && (line + pas != fin)) // Assez de cases pour sauter
 8000f7a:	89bb      	ldrh	r3, [r7, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f240 809c 	bls.w	80010ba <calculPossibilitesRec+0x566>
 8000f82:	89fa      	ldrh	r2, [r7, #14]
 8000f84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f88:	441a      	add	r2, r3
 8000f8a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	f000 8093 	beq.w	80010ba <calculPossibilitesRec+0x566>
			{
				if(chessboard[line + 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8000f94:	89fa      	ldrh	r2, [r7, #14]
 8000f96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	18d1      	adds	r1, r2, r3
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	3b02      	subs	r3, #2
 8000fa2:	48a4      	ldr	r0, [pc, #656]	; (8001234 <calculPossibilitesRec+0x6e0>)
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	441a      	add	r2, r3
 8000faa:	0053      	lsls	r3, r2, #1
 8000fac:	461a      	mov	r2, r3
 8000fae:	460b      	mov	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4403      	add	r3, r0
 8000fba:	3305      	adds	r3, #5
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d17b      	bne.n	80010ba <calculPossibilitesRec+0x566>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col - 2};
 8000fc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	833b      	strh	r3, [r7, #24]
 8000fd4:	89bb      	ldrh	r3, [r7, #12]
 8000fd6:	3b02      	subs	r3, #2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	837b      	strh	r3, [r7, #26]
					possibilites[index] = possible;
 8000fdc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 8000ff0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ff4:	b298      	uxth	r0, r3
 8000ff6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000ffa:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
 8001000:	4403      	add	r3, r0
 8001002:	b29c      	uxth	r4, r3
 8001004:	488c      	ldr	r0, [pc, #560]	; (8001238 <calculPossibilitesRec+0x6e4>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	4622      	mov	r2, r4
 8001012:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 8001016:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800101a:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800101e:	89bb      	ldrh	r3, [r7, #12]
 8001020:	3b01      	subs	r3, #1
 8001022:	b29c      	uxth	r4, r3
 8001024:	4884      	ldr	r0, [pc, #528]	; (8001238 <calculPossibilitesRec+0x6e4>)
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4403      	add	r3, r0
 8001034:	4622      	mov	r2, r4
 8001036:	805a      	strh	r2, [r3, #2]
					index++;
 8001038:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800103c:	3301      	adds	r3, #1
 800103e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 8001042:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001046:	3301      	adds	r3, #1
 8001048:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line + 2 * pas, col - 2, color, possibilites, index, nb_eaten);
 800104c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001050:	b29b      	uxth	r3, r3
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b29a      	uxth	r2, r3
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	4413      	add	r3, r2
 800105a:	b298      	uxth	r0, r3
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	3b02      	subs	r3, #2
 8001060:	b299      	uxth	r1, r3
 8001062:	7afa      	ldrb	r2, [r7, #11]
 8001064:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f7ff fd6f 	bl	8000b54 <calculPossibilitesRec>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800107c:	e01d      	b.n	80010ba <calculPossibilitesRec+0x566>
				}
			}
		}
		// Controle colonne de gauche : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 800107e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001082:	2b00      	cmp	r3, #0
 8001084:	d119      	bne.n	80010ba <calculPossibilitesRec+0x566>
		{
			struct cell possible = {line + pas, col - 1};
 8001086:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800108a:	b29a      	uxth	r2, r3
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	4413      	add	r3, r2
 8001090:	b29b      	uxth	r3, r3
 8001092:	82bb      	strh	r3, [r7, #20]
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	3b01      	subs	r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	82fb      	strh	r3, [r7, #22]
			possibilites[index] = possible;
 800109c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	6010      	str	r0, [r2, #0]
			index++;
 80010b0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010b4:	3301      	adds	r3, #1
 80010b6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		}
	}
	// Controle colonne de gauche en arriere : piece presente
	if(col > 0 && line != debut)
 80010ba:	89bb      	ldrh	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80b3 	beq.w	8001228 <calculPossibilitesRec+0x6d4>
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f000 80ad 	beq.w	8001228 <calculPossibilitesRec+0x6d4>
	{
		if(chessboard[line - pas][col - 1].isFilled == 1)
 80010ce:	89fa      	ldrh	r2, [r7, #14]
 80010d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010d4:	1ad1      	subs	r1, r2, r3
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4856      	ldr	r0, [pc, #344]	; (8001234 <calculPossibilitesRec+0x6e0>)
 80010dc:	461a      	mov	r2, r3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	441a      	add	r2, r3
 80010e2:	0053      	lsls	r3, r2, #1
 80010e4:	461a      	mov	r2, r3
 80010e6:	460b      	mov	r3, r1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	4403      	add	r3, r0
 80010f2:	3305      	adds	r3, #5
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	f040 8096 	bne.w	8001228 <calculPossibilitesRec+0x6d4>
		{
			if(chessboard[line - pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 80010fc:	89fa      	ldrh	r2, [r7, #14]
 80010fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001102:	1ad1      	subs	r1, r2, r3
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	3b01      	subs	r3, #1
 8001108:	484a      	ldr	r0, [pc, #296]	; (8001234 <calculPossibilitesRec+0x6e0>)
 800110a:	461a      	mov	r2, r3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	441a      	add	r2, r3
 8001110:	0053      	lsls	r3, r2, #1
 8001112:	461a      	mov	r2, r3
 8001114:	460b      	mov	r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	4403      	add	r3, r0
 8001120:	3307      	adds	r3, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	7afa      	ldrb	r2, [r7, #11]
 8001126:	429a      	cmp	r2, r3
 8001128:	d07e      	beq.n	8001228 <calculPossibilitesRec+0x6d4>
			else if((col >= 2) && (line - pas != debut)) // Assez de cases pour sauter
 800112a:	89bb      	ldrh	r3, [r7, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d97b      	bls.n	8001228 <calculPossibilitesRec+0x6d4>
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800113c:	429a      	cmp	r2, r3
 800113e:	d073      	beq.n	8001228 <calculPossibilitesRec+0x6d4>
			{
				if(chessboard[line - 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8001140:	89fa      	ldrh	r2, [r7, #14]
 8001142:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	1ad1      	subs	r1, r2, r3
 800114a:	89bb      	ldrh	r3, [r7, #12]
 800114c:	3b02      	subs	r3, #2
 800114e:	4839      	ldr	r0, [pc, #228]	; (8001234 <calculPossibilitesRec+0x6e0>)
 8001150:	461a      	mov	r2, r3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	441a      	add	r2, r3
 8001156:	0053      	lsls	r3, r2, #1
 8001158:	461a      	mov	r2, r3
 800115a:	460b      	mov	r3, r1
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4413      	add	r3, r2
 8001164:	4403      	add	r3, r0
 8001166:	3305      	adds	r3, #5
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d15c      	bne.n	8001228 <calculPossibilitesRec+0x6d4>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col - 2};
 800116e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001172:	b29b      	uxth	r3, r3
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b29b      	uxth	r3, r3
 8001178:	89fa      	ldrh	r2, [r7, #14]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	823b      	strh	r3, [r7, #16]
 8001180:	89bb      	ldrh	r3, [r7, #12]
 8001182:	3b02      	subs	r3, #2
 8001184:	b29b      	uxth	r3, r3
 8001186:	827b      	strh	r3, [r7, #18]
					possibilites[index] = possible;
 8001188:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	461a      	mov	r2, r3
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 800119c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80011a6:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80011aa:	89f8      	ldrh	r0, [r7, #14]
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	b29c      	uxth	r4, r3
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <calculPossibilitesRec+0x6e4>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	4622      	mov	r2, r4
 80011be:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 80011c2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80011c6:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29c      	uxth	r4, r3
 80011d0:	4819      	ldr	r0, [pc, #100]	; (8001238 <calculPossibilitesRec+0x6e4>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4403      	add	r3, r0
 80011e0:	4622      	mov	r2, r4
 80011e2:	805a      	strh	r2, [r3, #2]
					index++;
 80011e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 80011ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80011f2:	3301      	adds	r3, #1
 80011f4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line - 2 * pas, col - 2, color, possibilites, index, nb_eaten);
 80011f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	89fa      	ldrh	r2, [r7, #14]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b298      	uxth	r0, r3
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	3b02      	subs	r3, #2
 800120c:	b299      	uxth	r1, r3
 800120e:	7afa      	ldrb	r2, [r7, #11]
 8001210:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f7ff fc99 	bl	8000b54 <calculPossibilitesRec>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				}
			}
		}
	}
	return index;
 8001228:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40

}
 800122c:	4618      	mov	r0, r3
 800122e:	3734      	adds	r7, #52	; 0x34
 8001230:	46bd      	mov	sp, r7
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	200080f8 	.word	0x200080f8
 8001238:	20008614 	.word	0x20008614

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b0ac      	sub	sp, #176	; 0xb0
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2301      	movs	r3, #1
 8001252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800125c:	f7ff fc10 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001260:	f7ff fc34 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f004 fe4c 	bl	8005f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f90c 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f000 fed4 	bl	8002018 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001270:	f000 f9cc 	bl	800160c <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001274:	f000 fa46 	bl	8001704 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001278:	f000 fe7e 	bl	8001f78 <MX_FMC_Init>
  MX_I2C1_Init();
 800127c:	f000 fa74 	bl	8001768 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001280:	f000 fab2 	bl	80017e8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001284:	f000 faf0 	bl	8001868 <MX_LTDC_Init>
  MX_RTC_Init();
 8001288:	f000 fb70 	bl	800196c <MX_RTC_Init>
  MX_SPI2_Init();
 800128c:	f000 fc14 	bl	8001ab8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001290:	f000 fc50 	bl	8001b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001294:	f000 fca2 	bl	8001bdc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001298:	f000 fcee 	bl	8001c78 <MX_TIM3_Init>
  MX_TIM5_Init();
 800129c:	f000 fd3a 	bl	8001d14 <MX_TIM5_Init>
  MX_TIM8_Init();
 80012a0:	f000 fd86 	bl	8001db0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80012a4:	f000 fe08 	bl	8001eb8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80012a8:	f000 fe36 	bl	8001f18 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80012ac:	f000 f95c 	bl	8001568 <MX_ADC1_Init>
  MX_DAC_Init();
 80012b0:	f000 f9fe 	bl	80016b0 <MX_DAC_Init>
  MX_UART7_Init();
 80012b4:	f000 fdd0 	bl	8001e58 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80012b8:	f002 fa96 	bl	80037e8 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80012bc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80012c0:	2000      	movs	r0, #0
 80012c2:	f002 fb29 	bl	8003918 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80012c6:	f002 faff 	bl	80038c8 <BSP_LCD_GetXSize>
 80012ca:	4604      	mov	r4, r0
 80012cc:	f002 fb10 	bl	80038f0 <BSP_LCD_GetYSize>
 80012d0:	4603      	mov	r3, r0
 80012d2:	fb03 f304 	mul.w	r3, r3, r4
 80012d6:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4619      	mov	r1, r3
 80012de:	2001      	movs	r0, #1
 80012e0:	f002 fb1a 	bl	8003918 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80012e4:	f003 f892 	bl	800440c <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f002 fb75 	bl	80039d8 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80012ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012f2:	f002 fbe3 	bl	8003abc <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80012f6:	4a52      	ldr	r2, [pc, #328]	; (8001440 <main+0x204>)
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f002 feba 	bl	8004074 <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f002 fb69 	bl	80039d8 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 8001306:	2000      	movs	r0, #0
 8001308:	f002 fbd8 	bl	8003abc <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 800130c:	484d      	ldr	r0, [pc, #308]	; (8001444 <main+0x208>)
 800130e:	f002 fba5 	bl	8003a5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001312:	f04f 30ff 	mov.w	r0, #4294967295
 8001316:	f002 fb6f 	bl	80039f8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800131a:	484b      	ldr	r0, [pc, #300]	; (8001448 <main+0x20c>)
 800131c:	f002 fb84 	bl	8003a28 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001320:	f002 fad2 	bl	80038c8 <BSP_LCD_GetXSize>
 8001324:	4603      	mov	r3, r0
 8001326:	b29c      	uxth	r4, r3
 8001328:	f002 fae2 	bl	80038f0 <BSP_LCD_GetYSize>
 800132c:	4603      	mov	r3, r0
 800132e:	b29b      	uxth	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	4620      	mov	r0, r4
 8001334:	f003 fc7c 	bl	8004c30 <BSP_TS_Init>
    BSP_TS_ITConfig();
 8001338:	f003 fcba 	bl	8004cb0 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 800133c:	2306      	movs	r3, #6
 800133e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001342:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001346:	4619      	mov	r1, r3
 8001348:	4840      	ldr	r0, [pc, #256]	; (800144c <main+0x210>)
 800134a:	f004 ff45 	bl	80061d8 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 800134e:	483f      	ldr	r0, [pc, #252]	; (800144c <main+0x210>)
 8001350:	f004 fe74 	bl	800603c <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8001354:	2001      	movs	r0, #1
 8001356:	f00b fc72 	bl	800cc3e <xQueueCreateMutex>
 800135a:	4603      	mov	r3, r0
 800135c:	4a3c      	ldr	r2, [pc, #240]	; (8001450 <main+0x214>)
 800135e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueSel */
  osMessageQDef(queueSel, 16, uint16_t);
 8001360:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <main+0x218>)
 8001362:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueSelHandle = osMessageCreate(osMessageQ(queueSel), NULL);
 800136c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00b fa1f 	bl	800c7b6 <osMessageCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a37      	ldr	r2, [pc, #220]	; (8001458 <main+0x21c>)
 800137c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityHigh, 0, 1024);
 800137e:	4b37      	ldr	r3, [pc, #220]	; (800145c <main+0x220>)
 8001380:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001384:	461d      	mov	r5, r3
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8001392:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f00b f9a0 	bl	800c6de <osThreadCreate>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <main+0x224>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <main+0x228>)
 80013a6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80013aa:	461d      	mov	r5, r3
 80013ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 80013b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b f98d 	bl	800c6de <osThreadCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a28      	ldr	r2, [pc, #160]	; (8001468 <main+0x22c>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityAboveNormal, 0, 256);
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <main+0x230>)
 80013cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80013d0:	461d      	mov	r5, r3
 80013d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 80013de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00b f97a 	bl	800c6de <osThreadCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a20      	ldr	r2, [pc, #128]	; (8001470 <main+0x234>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_calculPoss */
  osThreadDef(task_calculPoss, fonction_calculPossibilites, osPriorityBelowNormal, 0, 4096);
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <main+0x238>)
 80013f2:	f107 0420 	add.w	r4, r7, #32
 80013f6:	461d      	mov	r5, r3
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_calculPossHandle = osThreadCreate(osThread(task_calculPoss), NULL);
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f00b f967 	bl	800c6de <osThreadCreate>
 8001410:	4603      	mov	r3, r0
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <main+0x23c>)
 8001414:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_victory */
  osThreadDef(task_victory, fonctionVictory, osPriorityNormal, 0, 1024);
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <main+0x240>)
 8001418:	1d3c      	adds	r4, r7, #4
 800141a:	461d      	mov	r5, r3
 800141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_victoryHandle = osThreadCreate(osThread(task_victory), NULL);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f00b f956 	bl	800c6de <osThreadCreate>
 8001432:	4603      	mov	r3, r0
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <main+0x244>)
 8001436:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001438:	f00b f94a 	bl	800c6d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800143c:	e7fe      	b.n	800143c <main+0x200>
 800143e:	bf00      	nop
 8001440:	0800f2d4 	.word	0x0800f2d4
 8001444:	20000034 	.word	0x20000034
 8001448:	ff0000ff 	.word	0xff0000ff
 800144c:	2000850c 	.word	0x2000850c
 8001450:	200085d8 	.word	0x200085d8
 8001454:	0800f194 	.word	0x0800f194
 8001458:	200080a8 	.word	0x200080a8
 800145c:	0800f1a4 	.word	0x0800f1a4
 8001460:	20008058 	.word	0x20008058
 8001464:	0800f1c0 	.word	0x0800f1c0
 8001468:	20008508 	.word	0x20008508
 800146c:	0800f1dc 	.word	0x0800f1dc
 8001470:	200083c4 	.word	0x200083c4
 8001474:	0800f1f8 	.word	0x0800f1f8
 8001478:	200084bc 	.word	0x200084bc
 800147c:	0800f214 	.word	0x0800f214
 8001480:	200085f0 	.word	0x200085f0

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	2230      	movs	r2, #48	; 0x30
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00d fd82 	bl	800ef9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014a8:	f007 fd4a 	bl	8008f40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <SystemClock_Config+0xdc>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <SystemClock_Config+0xdc>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <SystemClock_Config+0xdc>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <SystemClock_Config+0xe0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <SystemClock_Config+0xe0>)
 80014ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <SystemClock_Config+0xe0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014dc:	2309      	movs	r3, #9
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014e6:	2301      	movs	r3, #1
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014f4:	2319      	movs	r3, #25
 80014f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80014f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001502:	2309      	movs	r3, #9
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fd78 	bl	8009000 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001516:	f001 ffbd 	bl	8003494 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800151a:	f007 fd21 	bl	8008f60 <HAL_PWREx_EnableOverDrive>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001524:	f001 ffb6 	bl	8003494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2106      	movs	r1, #6
 8001546:	4618      	mov	r0, r3
 8001548:	f007 fffe 	bl	8009548 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001552:	f001 ff9f 	bl	8003494 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	3750      	adds	r7, #80	; 0x50
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_ADC1_Init+0x98>)
 800157c:	4a21      	ldr	r2, [pc, #132]	; (8001604 <MX_ADC1_Init+0x9c>)
 800157e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_ADC1_Init+0x98>)
 8001582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_ADC1_Init+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_ADC1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_ADC1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_ADC1_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_ADC1_Init+0x98>)
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <MX_ADC1_Init+0xa0>)
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_ADC1_Init+0x98>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_ADC1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_ADC1_Init+0x98>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_ADC1_Init+0x98>)
 80015ca:	f004 fcf3 	bl	8005fb4 <HAL_ADC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015d4:	f001 ff5e 	bl	8003494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015dc:	2301      	movs	r3, #1
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_ADC1_Init+0x98>)
 80015ea:	f004 fdf5 	bl	80061d8 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015f4:	f001 ff4e 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200084c0 	.word	0x200084c0
 8001604:	40012000 	.word	0x40012000
 8001608:	0f000001 	.word	0x0f000001

0800160c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_ADC3_Init+0x9c>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800162a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_ADC3_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_ADC3_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_ADC3_Init+0x98>)
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <MX_ADC3_Init+0xa0>)
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_ADC3_Init+0x98>)
 800165a:	2201      	movs	r2, #1
 800165c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_ADC3_Init+0x98>)
 8001668:	2201      	movs	r2, #1
 800166a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_ADC3_Init+0x98>)
 800166e:	f004 fca1 	bl	8005fb4 <HAL_ADC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001678:	f001 ff0c 	bl	8003494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800167c:	2306      	movs	r3, #6
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001680:	2301      	movs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_ADC3_Init+0x98>)
 800168e:	f004 fda3 	bl	80061d8 <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001698:	f001 fefc 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000850c 	.word	0x2000850c
 80016a8:	40012200 	.word	0x40012200
 80016ac:	0f000001 	.word	0x0f000001

080016b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_DAC_Init+0x4c>)
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <MX_DAC_Init+0x50>)
 80016c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_DAC_Init+0x4c>)
 80016c6:	f005 f8b9 	bl	800683c <HAL_DAC_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016d0:	f001 fee0 	bl	8003494 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <MX_DAC_Init+0x4c>)
 80016e4:	f005 f930 	bl	8006948 <HAL_DAC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016ee:	f001 fed1 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200085dc 	.word	0x200085dc
 8001700:	40007400 	.word	0x40007400

08001704 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_DMA2D_Init+0x5c>)
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <MX_DMA2D_Init+0x60>)
 800170c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_DMA2D_Init+0x5c>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_DMA2D_Init+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_DMA2D_Init+0x5c>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_DMA2D_Init+0x5c>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_DMA2D_Init+0x5c>)
 8001728:	2200      	movs	r2, #0
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_DMA2D_Init+0x5c>)
 800172e:	2200      	movs	r2, #0
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_DMA2D_Init+0x5c>)
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <MX_DMA2D_Init+0x5c>)
 800173a:	f005 fbaf 	bl	8006e9c <HAL_DMA2D_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001744:	f001 fea6 	bl	8003494 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001748:	2101      	movs	r1, #1
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_DMA2D_Init+0x5c>)
 800174c:	f005 fe14 	bl	8007378 <HAL_DMA2D_ConfigLayer>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001756:	f001 fe9d 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20008ce4 	.word	0x20008ce4
 8001764:	4002b000 	.word	0x4002b000

08001768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_I2C1_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <MX_I2C1_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_I2C1_Init+0x74>)
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <MX_I2C1_Init+0x7c>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_I2C1_Init+0x74>)
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_I2C1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_I2C1_Init+0x74>)
 80017a4:	f006 fa1a 	bl	8007bdc <HAL_I2C_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ae:	f001 fe71 	bl	8003494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_I2C1_Init+0x74>)
 80017b6:	f006 ffb3 	bl	8008720 <HAL_I2CEx_ConfigAnalogFilter>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f001 fe68 	bl	8003494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_I2C1_Init+0x74>)
 80017c8:	f006 fff5 	bl	80087b6 <HAL_I2CEx_ConfigDigitalFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f001 fe5f 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200080ac 	.word	0x200080ac
 80017e0:	40005400 	.word	0x40005400
 80017e4:	00c0eaff 	.word	0x00c0eaff

080017e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_I2C3_Init+0x74>)
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <MX_I2C3_Init+0x78>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_I2C3_Init+0x74>)
 80017f4:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <MX_I2C3_Init+0x7c>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_I2C3_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_I2C3_Init+0x74>)
 8001800:	2201      	movs	r2, #1
 8001802:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_I2C3_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_I2C3_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_I2C3_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_I2C3_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_I2C3_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <MX_I2C3_Init+0x74>)
 8001824:	f006 f9da 	bl	8007bdc <HAL_I2C_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800182e:	f001 fe31 	bl	8003494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <MX_I2C3_Init+0x74>)
 8001836:	f006 ff73 	bl	8008720 <HAL_I2CEx_ConfigAnalogFilter>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001840:	f001 fe28 	bl	8003494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_I2C3_Init+0x74>)
 8001848:	f006 ffb5 	bl	80087b6 <HAL_I2CEx_ConfigDigitalFilter>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001852:	f001 fe1f 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20007f24 	.word	0x20007f24
 8001860:	40005c00 	.word	0x40005c00
 8001864:	00c0eaff 	.word	0x00c0eaff

08001868 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	; 0x38
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2234      	movs	r2, #52	; 0x34
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f00d fb91 	bl	800ef9c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <MX_LTDC_Init+0xfc>)
 800187c:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <MX_LTDC_Init+0x100>)
 800187e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001880:	4b38      	ldr	r3, [pc, #224]	; (8001964 <MX_LTDC_Init+0xfc>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <MX_LTDC_Init+0xfc>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800188c:	4b35      	ldr	r3, [pc, #212]	; (8001964 <MX_LTDC_Init+0xfc>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <MX_LTDC_Init+0xfc>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <MX_LTDC_Init+0xfc>)
 800189a:	2228      	movs	r2, #40	; 0x28
 800189c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800189e:	4b31      	ldr	r3, [pc, #196]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018a0:	2209      	movs	r2, #9
 80018a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018a6:	2235      	movs	r2, #53	; 0x35
 80018a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018ac:	220b      	movs	r2, #11
 80018ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018b2:	f240 2215 	movw	r2, #533	; 0x215
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018ba:	f240 121b 	movw	r2, #283	; 0x11b
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018c2:	f240 2235 	movw	r2, #565	; 0x235
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018ca:	f240 121d 	movw	r2, #285	; 0x11d
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018e8:	481e      	ldr	r0, [pc, #120]	; (8001964 <MX_LTDC_Init+0xfc>)
 80018ea:	f006 ffb1 	bl	8008850 <HAL_LTDC_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80018f4:	f001 fdce 	bl	8003494 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80018fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001900:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001906:	f44f 7388 	mov.w	r3, #272	; 0x110
 800190a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800190c:	2302      	movs	r3, #2
 800190e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001910:	23ff      	movs	r3, #255	; 0xff
 8001912:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001918:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800191c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800191e:	2307      	movs	r3, #7
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001922:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001928:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800192e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_LTDC_Init+0xfc>)
 800194e:	f007 f911 	bl	8008b74 <HAL_LTDC_ConfigLayer>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001958:	f001 fd9c 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3738      	adds	r7, #56	; 0x38
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20008414 	.word	0x20008414
 8001968:	40016800 	.word	0x40016800

0800196c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b092      	sub	sp, #72	; 0x48
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001988:	463b      	mov	r3, r7
 800198a:	222c      	movs	r2, #44	; 0x2c
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f00d fb04 	bl	800ef9c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001994:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <MX_RTC_Init+0x144>)
 8001996:	4a47      	ldr	r2, [pc, #284]	; (8001ab4 <MX_RTC_Init+0x148>)
 8001998:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800199a:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <MX_RTC_Init+0x144>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019a2:	227f      	movs	r2, #127	; 0x7f
 80019a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019a8:	22ff      	movs	r2, #255	; 0xff
 80019aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019ac:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019be:	483c      	ldr	r0, [pc, #240]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019c0:	f008 fbba 	bl	800a138 <HAL_RTC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80019ca:	f001 fd63 	bl	8003494 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ec:	2201      	movs	r2, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	482f      	ldr	r0, [pc, #188]	; (8001ab0 <MX_RTC_Init+0x144>)
 80019f2:	f008 fc33 	bl	800a25c <HAL_RTC_SetTime>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80019fc:	f001 fd4a 	bl	8003494 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <MX_RTC_Init+0x144>)
 8001a22:	f008 fcd9 	bl	800a3d8 <HAL_RTC_SetDate>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001a2c:	f001 fd32 	bl	8003494 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	4812      	ldr	r0, [pc, #72]	; (8001ab0 <MX_RTC_Init+0x144>)
 8001a68:	f008 fd5e 	bl	800a528 <HAL_RTC_SetAlarm>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a72:	f001 fd0f 	bl	8003494 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <MX_RTC_Init+0x144>)
 8001a84:	f008 fd50 	bl	800a528 <HAL_RTC_SetAlarm>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001a8e:	f001 fd01 	bl	8003494 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a92:	2202      	movs	r2, #2
 8001a94:	2100      	movs	r1, #0
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_RTC_Init+0x144>)
 8001a98:	f008 fed0 	bl	800a83c <HAL_RTCEx_SetTimeStamp>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001aa2:	f001 fcf7 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3748      	adds	r7, #72	; 0x48
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200085f4 	.word	0x200085f4
 8001ab4:	40002800 	.word	0x40002800

08001ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001abe:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <MX_SPI2_Init+0x78>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001ad2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ad6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001ae6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001aea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001b06:	2207      	movs	r2, #7
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001b12:	2208      	movs	r2, #8
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_SPI2_Init+0x74>)
 8001b18:	f008 ff77 	bl	800aa0a <HAL_SPI_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f001 fcb7 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20007f70 	.word	0x20007f70
 8001b30:	40003800 	.word	0x40003800

08001b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <MX_TIM1_Init+0xa4>)
 8001b56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b80:	f008 ffee 	bl	800ab60 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b8a:	f001 fc83 	bl	8003494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001b9c:	f009 f9d0 	bl	800af40 <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ba6:	f001 fc75 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM1_Init+0xa0>)
 8001bbc:	f009 fbec 	bl	800b398 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bc6:	f001 fc65 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20008c14 	.word	0x20008c14
 8001bd8:	40010000 	.word	0x40010000

08001bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c24:	f008 ff9c 	bl	800ab60 <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c2e:	f001 fc31 	bl	8003494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c40:	f009 f97e 	bl	800af40 <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c4a:	f001 fc23 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM2_Init+0x98>)
 8001c5c:	f009 fb9c 	bl	800b398 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c66:	f001 fc15 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20008d24 	.word	0x20008d24

08001c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <MX_TIM3_Init+0x98>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cbc:	4813      	ldr	r0, [pc, #76]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001cbe:	f008 ff4f 	bl	800ab60 <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001cc8:	f001 fbe4 	bl	8003494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001cda:	f009 f931 	bl	800af40 <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ce4:	f001 fbd6 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_TIM3_Init+0x94>)
 8001cf6:	f009 fb4f 	bl	800b398 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d00:	f001 fbc8 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200083c8 	.word	0x200083c8
 8001d10:	40000400 	.word	0x40000400

08001d14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <MX_TIM5_Init+0x98>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d58:	4813      	ldr	r0, [pc, #76]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d5a:	f008 ff01 	bl	800ab60 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001d64:	f001 fb96 	bl	8003494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d76:	f009 f8e3 	bl	800af40 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001d80:	f001 fb88 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d92:	f009 fb01 	bl	800b398 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d9c:	f001 fb7a 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20008378 	.word	0x20008378
 8001dac:	40000c00 	.word	0x40000c00

08001db0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <MX_TIM8_Init+0xa4>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001dfa:	4815      	ldr	r0, [pc, #84]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001dfc:	f008 feb0 	bl	800ab60 <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001e06:	f001 fb45 	bl	8003494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4619      	mov	r1, r3
 8001e16:	480e      	ldr	r0, [pc, #56]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001e18:	f009 f892 	bl	800af40 <HAL_TIM_ConfigClockSource>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001e22:	f001 fb37 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM8_Init+0xa0>)
 8001e38:	f009 faae 	bl	800b398 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001e42:	f001 fb27 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000805c 	.word	0x2000805c
 8001e54:	40010400 	.word	0x40010400

08001e58 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <MX_UART7_Init+0x5c>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_UART7_Init+0x58>)
 8001e9c:	f009 fb28 	bl	800b4f0 <HAL_UART_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001ea6:	f001 faf5 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20007fd4 	.word	0x20007fd4
 8001eb4:	40007800 	.word	0x40007800

08001eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <MX_USART1_UART_Init+0x5c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_USART1_UART_Init+0x58>)
 8001efc:	f009 faf8 	bl	800b4f0 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f06:	f001 fac5 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20008554 	.word	0x20008554
 8001f14:	40011000 	.word	0x40011000

08001f18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <MX_USART6_UART_Init+0x5c>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_USART6_UART_Init+0x58>)
 8001f5c:	f009 fac8 	bl	800b4f0 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001f66:	f001 fa95 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20008c60 	.word	0x20008c60
 8001f74:	40011400 	.word	0x40011400

08001f78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_FMC_Init+0x98>)
 8001f92:	4a20      	ldr	r2, [pc, #128]	; (8002014 <MX_FMC_Init+0x9c>)
 8001f94:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <MX_FMC_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_FMC_Init+0x98>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <MX_FMC_Init+0x98>)
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <MX_FMC_Init+0x98>)
 8001faa:	2210      	movs	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_FMC_Init+0x98>)
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_FMC_Init+0x98>)
 8001fb6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001fba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_FMC_Init+0x98>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_FMC_Init+0x98>)
 8001fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_FMC_Init+0x98>)
 8001fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_FMC_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001fdc:	2307      	movs	r3, #7
 8001fde:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_FMC_Init+0x98>)
 8001ffa:	f008 fc75 	bl	800a8e8 <HAL_SDRAM_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002004:	f001 fa46 	bl	8003494 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002008:	bf00      	nop
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20008d70 	.word	0x20008d70
 8002014:	a0000140 	.word	0xa0000140

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b090      	sub	sp, #64	; 0x40
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202e:	4baf      	ldr	r3, [pc, #700]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4aae      	ldr	r2, [pc, #696]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4bac      	ldr	r3, [pc, #688]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002046:	4ba9      	ldr	r3, [pc, #676]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4aa8      	ldr	r2, [pc, #672]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800204c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	4ba3      	ldr	r3, [pc, #652]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4aa2      	ldr	r2, [pc, #648]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	4b9d      	ldr	r3, [pc, #628]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a9c      	ldr	r2, [pc, #624]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b9a      	ldr	r3, [pc, #616]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	4b97      	ldr	r3, [pc, #604]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a96      	ldr	r2, [pc, #600]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b94      	ldr	r3, [pc, #592]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b91      	ldr	r3, [pc, #580]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a90      	ldr	r2, [pc, #576]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a8a      	ldr	r2, [pc, #552]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a84      	ldr	r2, [pc, #528]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80020ee:	4b7f      	ldr	r3, [pc, #508]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a7e      	ldr	r2, [pc, #504]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b7c      	ldr	r3, [pc, #496]	; (80022ec <MX_GPIO_Init+0x2d4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002106:	4b79      	ldr	r3, [pc, #484]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a78      	ldr	r2, [pc, #480]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a72      	ldr	r2, [pc, #456]	; (80022ec <MX_GPIO_Init+0x2d4>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <MX_GPIO_Init+0x2d4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	2160      	movs	r1, #96	; 0x60
 800213a:	486d      	ldr	r0, [pc, #436]	; (80022f0 <MX_GPIO_Init+0x2d8>)
 800213c:	f005 fd02 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	2120      	movs	r1, #32
 8002144:	486b      	ldr	r0, [pc, #428]	; (80022f4 <MX_GPIO_Init+0x2dc>)
 8002146:	f005 fcfd 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	2108      	movs	r1, #8
 800214e:	4869      	ldr	r0, [pc, #420]	; (80022f4 <MX_GPIO_Init+0x2dc>)
 8002150:	f005 fcf8 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2108      	movs	r1, #8
 8002158:	4867      	ldr	r0, [pc, #412]	; (80022f8 <MX_GPIO_Init+0x2e0>)
 800215a:	f005 fcf3 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002164:	4865      	ldr	r0, [pc, #404]	; (80022fc <MX_GPIO_Init+0x2e4>)
 8002166:	f005 fced 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800216a:	2200      	movs	r2, #0
 800216c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002170:	4863      	ldr	r0, [pc, #396]	; (8002300 <MX_GPIO_Init+0x2e8>)
 8002172:	f005 fce7 	bl	8007b44 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	21c8      	movs	r1, #200	; 0xc8
 800217a:	4862      	ldr	r0, [pc, #392]	; (8002304 <MX_GPIO_Init+0x2ec>)
 800217c:	f005 fce2 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002180:	2308      	movs	r3, #8
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002190:	4619      	mov	r1, r3
 8002192:	4857      	ldr	r0, [pc, #348]	; (80022f0 <MX_GPIO_Init+0x2d8>)
 8002194:	f005 fa1e 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002198:	2304      	movs	r3, #4
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021a8:	2309      	movs	r3, #9
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b0:	4619      	mov	r1, r3
 80021b2:	484f      	ldr	r0, [pc, #316]	; (80022f0 <MX_GPIO_Init+0x2d8>)
 80021b4:	f005 fa0e 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80021b8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021ca:	230b      	movs	r3, #11
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	484b      	ldr	r0, [pc, #300]	; (8002304 <MX_GPIO_Init+0x2ec>)
 80021d6:	f005 f9fd 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80021da:	f643 0323 	movw	r3, #14371	; 0x3823
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021ec:	230a      	movs	r3, #10
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f4:	4619      	mov	r1, r3
 80021f6:	4844      	ldr	r0, [pc, #272]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80021f8:	f005 f9ec 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800220c:	2308      	movs	r3, #8
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002214:	4619      	mov	r1, r3
 8002216:	4837      	ldr	r0, [pc, #220]	; (80022f4 <MX_GPIO_Init+0x2dc>)
 8002218:	f005 f9dc 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800221c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800222e:	230c      	movs	r3, #12
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002236:	4619      	mov	r1, r3
 8002238:	4834      	ldr	r0, [pc, #208]	; (800230c <MX_GPIO_Init+0x2f4>)
 800223a:	f005 f9cb 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 800223e:	f248 1340 	movw	r3, #33088	; 0x8140
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002250:	4619      	mov	r1, r3
 8002252:	482f      	ldr	r0, [pc, #188]	; (8002310 <MX_GPIO_Init+0x2f8>)
 8002254:	f005 f9be 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002258:	2360      	movs	r3, #96	; 0x60
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	4820      	ldr	r0, [pc, #128]	; (80022f0 <MX_GPIO_Init+0x2d8>)
 8002270:	f005 f9b0 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002274:	2340      	movs	r3, #64	; 0x40
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002284:	230a      	movs	r3, #10
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228c:	4619      	mov	r1, r3
 800228e:	481e      	ldr	r0, [pc, #120]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002290:	f005 f9a0 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a6:	4619      	mov	r1, r3
 80022a8:	481a      	ldr	r0, [pc, #104]	; (8002314 <MX_GPIO_Init+0x2fc>)
 80022aa:	f005 f993 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c0:	4619      	mov	r1, r3
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <MX_GPIO_Init+0x2dc>)
 80022c4:	f005 f986 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80022c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022da:	230a      	movs	r3, #10
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e2:	4619      	mov	r1, r3
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <MX_GPIO_Init+0x2f8>)
 80022e6:	f005 f975 	bl	80075d4 <HAL_GPIO_Init>
 80022ea:	e015      	b.n	8002318 <MX_GPIO_Init+0x300>
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40022800 	.word	0x40022800
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021c00 	.word	0x40021c00
 8002304:	40021800 	.word	0x40021800
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020000 	.word	0x40020000
 8002314:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002318:	23f0      	movs	r3, #240	; 0xf0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002328:	230a      	movs	r3, #10
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800232c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002330:	4619      	mov	r1, r3
 8002332:	4895      	ldr	r0, [pc, #596]	; (8002588 <MX_GPIO_Init+0x570>)
 8002334:	f005 f94e 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800234a:	230a      	movs	r3, #10
 800234c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002352:	4619      	mov	r1, r3
 8002354:	488d      	ldr	r0, [pc, #564]	; (800258c <MX_GPIO_Init+0x574>)
 8002356:	f005 f93d 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800235a:	2328      	movs	r3, #40	; 0x28
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236e:	4619      	mov	r1, r3
 8002370:	4887      	ldr	r0, [pc, #540]	; (8002590 <MX_GPIO_Init+0x578>)
 8002372:	f005 f92f 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002388:	4619      	mov	r1, r3
 800238a:	4882      	ldr	r0, [pc, #520]	; (8002594 <MX_GPIO_Init+0x57c>)
 800238c:	f005 f922 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002390:	2308      	movs	r3, #8
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a4:	4619      	mov	r1, r3
 80023a6:	487c      	ldr	r0, [pc, #496]	; (8002598 <MX_GPIO_Init+0x580>)
 80023a8:	f005 f914 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 80023ac:	f44f 7301 	mov.w	r3, #516	; 0x204
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023be:	4619      	mov	r1, r3
 80023c0:	4872      	ldr	r0, [pc, #456]	; (800258c <MX_GPIO_Init+0x574>)
 80023c2:	f005 f907 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023c6:	2310      	movs	r3, #16
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ca:	2300      	movs	r3, #0
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d6:	4619      	mov	r1, r3
 80023d8:	486d      	ldr	r0, [pc, #436]	; (8002590 <MX_GPIO_Init+0x578>)
 80023da:	f005 f8fb 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80023de:	2304      	movs	r3, #4
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023ee:	230c      	movs	r3, #12
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f6:	4619      	mov	r1, r3
 80023f8:	4865      	ldr	r0, [pc, #404]	; (8002590 <MX_GPIO_Init+0x578>)
 80023fa:	f005 f8eb 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80023fe:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800240c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002410:	4619      	mov	r1, r3
 8002412:	4862      	ldr	r0, [pc, #392]	; (800259c <MX_GPIO_Init+0x584>)
 8002414:	f005 f8de 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242e:	4619      	mov	r1, r3
 8002430:	4855      	ldr	r0, [pc, #340]	; (8002588 <MX_GPIO_Init+0x570>)
 8002432:	f005 f8cf 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002436:	f645 6340 	movw	r3, #24128	; 0x5e40
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243c:	2301      	movs	r3, #1
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244c:	4619      	mov	r1, r3
 800244e:	4853      	ldr	r0, [pc, #332]	; (800259c <MX_GPIO_Init+0x584>)
 8002450:	f005 f8c0 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	4619      	mov	r1, r3
 800246a:	4847      	ldr	r0, [pc, #284]	; (8002588 <MX_GPIO_Init+0x570>)
 800246c:	f005 f8b2 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002470:	2310      	movs	r3, #16
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002480:	230a      	movs	r3, #10
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002488:	4619      	mov	r1, r3
 800248a:	4844      	ldr	r0, [pc, #272]	; (800259c <MX_GPIO_Init+0x584>)
 800248c:	f005 f8a2 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002490:	23c8      	movs	r3, #200	; 0xc8
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	2301      	movs	r3, #1
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4839      	ldr	r0, [pc, #228]	; (800258c <MX_GPIO_Init+0x574>)
 80024a8:	f005 f894 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80024ac:	2305      	movs	r3, #5
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024bc:	230a      	movs	r3, #10
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4833      	ldr	r0, [pc, #204]	; (8002594 <MX_GPIO_Init+0x57c>)
 80024c8:	f005 f884 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024cc:	2332      	movs	r3, #50	; 0x32
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024dc:	230b      	movs	r3, #11
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e4:	4619      	mov	r1, r3
 80024e6:	482b      	ldr	r0, [pc, #172]	; (8002594 <MX_GPIO_Init+0x57c>)
 80024e8:	f005 f874 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024ec:	2304      	movs	r3, #4
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024fc:	2309      	movs	r3, #9
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4619      	mov	r1, r3
 8002506:	4826      	ldr	r0, [pc, #152]	; (80025a0 <MX_GPIO_Init+0x588>)
 8002508:	f005 f864 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800250c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800251e:	2309      	movs	r3, #9
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002526:	4619      	mov	r1, r3
 8002528:	4819      	ldr	r0, [pc, #100]	; (8002590 <MX_GPIO_Init+0x578>)
 800252a:	f005 f853 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800252e:	2386      	movs	r3, #134	; 0x86
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800253e:	230b      	movs	r3, #11
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	4816      	ldr	r0, [pc, #88]	; (80025a4 <MX_GPIO_Init+0x58c>)
 800254a:	f005 f843 	bl	80075d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800254e:	2328      	movs	r3, #40	; 0x28
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800255e:	230a      	movs	r3, #10
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	480e      	ldr	r0, [pc, #56]	; (80025a4 <MX_GPIO_Init+0x58c>)
 800256a:	f005 f833 	bl	80075d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2105      	movs	r1, #5
 8002572:	2028      	movs	r0, #40	; 0x28
 8002574:	f004 f938 	bl	80067e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002578:	2028      	movs	r0, #40	; 0x28
 800257a:	f004 f951 	bl	8006820 <HAL_NVIC_EnableIRQ>

}
 800257e:	bf00      	nop
 8002580:	3740      	adds	r7, #64	; 0x40
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000
 800258c:	40021800 	.word	0x40021800
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40020800 	.word	0x40020800
 8002598:	40022800 	.word	0x40022800
 800259c:	40021c00 	.word	0x40021c00
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40020000 	.word	0x40020000

080025a8 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 80025c8:	2314      	movs	r3, #20
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if(victory == 1)
 80025d8:	4ba0      	ldr	r3, [pc, #640]	; (800285c <fonction_init+0x29c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d11a      	bne.n	8002616 <fonction_init+0x56>
    {
    	osThreadTerminate(task_victoryHandle);
 80025e0:	4b9f      	ldr	r3, [pc, #636]	; (8002860 <fonction_init+0x2a0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00a f8c6 	bl	800c776 <osThreadTerminate>
    	osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 80025ea:	4b9e      	ldr	r3, [pc, #632]	; (8002864 <fonction_init+0x2a4>)
 80025ec:	f107 040c 	add.w	r4, r7, #12
 80025f0:	461d      	mov	r5, r3
 80025f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	affichageHandle = osThreadCreate(osThread(affichage), NULL);
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f00a f86a 	bl	800c6de <osThreadCreate>
 800260a:	4603      	mov	r3, r0
 800260c:	4a96      	ldr	r2, [pc, #600]	; (8002868 <fonction_init+0x2a8>)
 800260e:	6013      	str	r3, [r2, #0]
    	victory = 0;
 8002610:	4b92      	ldr	r3, [pc, #584]	; (800285c <fonction_init+0x29c>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
    }
  /* Infinite loop */
  for(;;)
  {
	  cpt_lignesw = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  cpt_colonnesw = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	  for (i = 0; i < 3; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002628:	e10b      	b.n	8002842 <fonction_init+0x282>
	  {
		  for (j = 0; j < 4; j++)
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002630:	e0ec      	b.n	800280c <fonction_init+0x24c>
		  {
			  taskENTER_CRITICAL();
 8002632:	f00c f9b3 	bl	800e99c <vPortEnterCritical>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 8002636:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800263a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800263e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002642:	b294      	uxth	r4, r2
 8002644:	4889      	ldr	r0, [pc, #548]	; (800286c <fonction_init+0x2ac>)
 8002646:	461a      	mov	r2, r3
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	441a      	add	r2, r3
 800264c:	0053      	lsls	r3, r2, #1
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	4403      	add	r3, r0
 800265c:	4622      	mov	r2, r4
 800265e:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 8002660:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002664:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002668:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800266c:	b294      	uxth	r4, r2
 800266e:	487f      	ldr	r0, [pc, #508]	; (800286c <fonction_init+0x2ac>)
 8002670:	461a      	mov	r2, r3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	441a      	add	r2, r3
 8002676:	0053      	lsls	r3, r2, #1
 8002678:	461a      	mov	r2, r3
 800267a:	460b      	mov	r3, r1
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	4403      	add	r3, r0
 8002686:	3302      	adds	r3, #2
 8002688:	4622      	mov	r2, r4
 800268a:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 800268c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002690:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002694:	4875      	ldr	r0, [pc, #468]	; (800286c <fonction_init+0x2ac>)
 8002696:	461a      	mov	r2, r3
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	441a      	add	r2, r3
 800269c:	0053      	lsls	r3, r2, #1
 800269e:	461a      	mov	r2, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	4403      	add	r3, r0
 80026ac:	3305      	adds	r3, #5
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 80026b2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80026b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026ba:	486c      	ldr	r0, [pc, #432]	; (800286c <fonction_init+0x2ac>)
 80026bc:	461a      	mov	r2, r3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	0053      	lsls	r3, r2, #1
 80026c4:	461a      	mov	r2, r3
 80026c6:	460b      	mov	r3, r1
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	4403      	add	r3, r0
 80026d2:	3308      	adds	r3, #8
 80026d4:	2209      	movs	r2, #9
 80026d6:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 80026d8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80026dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026e0:	4862      	ldr	r0, [pc, #392]	; (800286c <fonction_init+0x2ac>)
 80026e2:	461a      	mov	r2, r3
 80026e4:	0092      	lsls	r2, r2, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	0053      	lsls	r3, r2, #1
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	4403      	add	r3, r0
 80026f8:	3307      	adds	r3, #7
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
			  // init blue pieces
			  cpt_lignesb = cpt_lignesw + 5;
 80026fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002702:	3305      	adds	r3, #5
 8002704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 8002708:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <fonction_init+0x160>
 8002716:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800271a:	3301      	adds	r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e003      	b.n	8002728 <fonction_init+0x168>
 8002720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002724:	3b01      	subs	r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 800272c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002730:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002734:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002738:	b294      	uxth	r4, r2
 800273a:	484c      	ldr	r0, [pc, #304]	; (800286c <fonction_init+0x2ac>)
 800273c:	461a      	mov	r2, r3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	441a      	add	r2, r3
 8002742:	0053      	lsls	r3, r2, #1
 8002744:	461a      	mov	r2, r3
 8002746:	460b      	mov	r3, r1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4413      	add	r3, r2
 8002750:	4403      	add	r3, r0
 8002752:	4622      	mov	r2, r4
 8002754:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 8002756:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800275a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800275e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002762:	b294      	uxth	r4, r2
 8002764:	4841      	ldr	r0, [pc, #260]	; (800286c <fonction_init+0x2ac>)
 8002766:	461a      	mov	r2, r3
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	441a      	add	r2, r3
 800276c:	0053      	lsls	r3, r2, #1
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	4403      	add	r3, r0
 800277c:	3302      	adds	r3, #2
 800277e:	4622      	mov	r2, r4
 8002780:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 8002782:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002786:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800278a:	4838      	ldr	r0, [pc, #224]	; (800286c <fonction_init+0x2ac>)
 800278c:	461a      	mov	r2, r3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	441a      	add	r2, r3
 8002792:	0053      	lsls	r3, r2, #1
 8002794:	461a      	mov	r2, r3
 8002796:	460b      	mov	r3, r1
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	4413      	add	r3, r2
 80027a0:	4403      	add	r3, r0
 80027a2:	3305      	adds	r3, #5
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 80027a8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80027ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027b0:	482e      	ldr	r0, [pc, #184]	; (800286c <fonction_init+0x2ac>)
 80027b2:	461a      	mov	r2, r3
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	441a      	add	r2, r3
 80027b8:	0053      	lsls	r3, r2, #1
 80027ba:	461a      	mov	r2, r3
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	4403      	add	r3, r0
 80027c8:	3308      	adds	r3, #8
 80027ca:	2209      	movs	r2, #9
 80027cc:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 80027ce:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80027d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027d6:	4825      	ldr	r0, [pc, #148]	; (800286c <fonction_init+0x2ac>)
 80027d8:	461a      	mov	r2, r3
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	441a      	add	r2, r3
 80027de:	0053      	lsls	r3, r2, #1
 80027e0:	461a      	mov	r2, r3
 80027e2:	460b      	mov	r3, r1
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	4403      	add	r3, r0
 80027ee:	3307      	adds	r3, #7
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
			  taskEXIT_CRITICAL();
 80027f4:	f00c f906 	bl	800ea04 <vPortExitCritical>
			  cpt_colonnesw += 2;
 80027f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80027fc:	3302      	adds	r3, #2
 80027fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  for (j = 0; j < 4; j++)
 8002802:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002806:	3301      	adds	r3, #1
 8002808:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800280c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002810:	2b03      	cmp	r3, #3
 8002812:	f67f af0e 	bls.w	8002632 <fonction_init+0x72>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 8002816:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  cpt_lignesw++;
 800282e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002832:	3301      	adds	r3, #1
 8002834:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  for (i = 0; i < 3; i++)
 8002838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800283c:	3301      	adds	r3, #1
 800283e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002846:	2b02      	cmp	r3, #2
 8002848:	f67f aeef 	bls.w	800262a <fonction_init+0x6a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800284c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002852:	4618      	mov	r0, r3
 8002854:	f00b f878 	bl	800d948 <vTaskDelayUntil>
	  cpt_lignesw = 0;
 8002858:	e6dd      	b.n	8002616 <fonction_init+0x56>
 800285a:	bf00      	nop
 800285c:	2000038b 	.word	0x2000038b
 8002860:	200085f0 	.word	0x200085f0
 8002864:	0800f1c0 	.word	0x0800f1c0
 8002868:	20008508 	.word	0x20008508
 800286c:	200080f8 	.word	0x200080f8

08002870 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 8002878:	2332      	movs	r3, #50	; 0x32
 800287a:	61bb      	str	r3, [r7, #24]
	const uint8_t pasX 			= 30;
 800287c:	231e      	movs	r3, #30
 800287e:	75fb      	strb	r3, [r7, #23]
	const uint8_t pasY 			= 30;
 8002880:	231e      	movs	r3, #30
 8002882:	75bb      	strb	r3, [r7, #22]
	const uint8_t margeX		= 14;
 8002884:	230e      	movs	r3, #14
 8002886:	757b      	strb	r3, [r7, #21]
	const uint8_t margeY		= 14;
 8002888:	230e      	movs	r3, #14
 800288a:	753b      	strb	r3, [r7, #20]
	uint16_t pointeurX 			= margeX + pasX / 2;
 800288c:	7d7b      	ldrb	r3, [r7, #21]
 800288e:	b29a      	uxth	r2, r3
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	b29b      	uxth	r3, r3
 8002898:	4413      	add	r3, r2
 800289a:	827b      	strh	r3, [r7, #18]
	uint16_t pointeurY 			= margeY + pasY / 2;
 800289c:	7d3b      	ldrb	r3, [r7, #20]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	7dbb      	ldrb	r3, [r7, #22]
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	823b      	strh	r3, [r7, #16]
	uint8_t color				= 2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	73fb      	strb	r3, [r7, #15]
	uint8_t i, j;
	uint8_t filled = 0, possible = 0, dame = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73bb      	strb	r3, [r7, #14]
 80028b4:	2300      	movs	r3, #0
 80028b6:	737b      	strb	r3, [r7, #13]
 80028b8:	2300      	movs	r3, #0
 80028ba:	733b      	strb	r3, [r7, #12]
	osThreadTerminate(task_initHandle);
 80028bc:	4bb5      	ldr	r3, [pc, #724]	; (8002b94 <fonction_affichage+0x324>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f009 ff58 	bl	800c776 <osThreadTerminate>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 80028c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ca:	48b3      	ldr	r0, [pc, #716]	; (8002b98 <fonction_affichage+0x328>)
 80028cc:	f005 f953 	bl	8007b76 <HAL_GPIO_TogglePin>
	  // Clear que pour certains changements
	  taskENTER_CRITICAL();
 80028d0:	f00c f864 	bl	800e99c <vPortEnterCritical>
	  if(change == 1)
 80028d4:	4bb1      	ldr	r3, [pc, #708]	; (8002b9c <fonction_affichage+0x32c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <fonction_affichage+0x72>
	  {
		  BSP_LCD_Clear(0);
 80028dc:	2000      	movs	r0, #0
 80028de:	f001 f8ed 	bl	8003abc <BSP_LCD_Clear>
	  }
	  taskEXIT_CRITICAL();
 80028e2:	f00c f88f 	bl	800ea04 <vPortExitCritical>
	  BSP_LCD_FillCircle(margeX, margeY, 3);
 80028e6:	7d7b      	ldrb	r3, [r7, #21]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	7d3a      	ldrb	r2, [r7, #20]
 80028ec:	b291      	uxth	r1, r2
 80028ee:	2203      	movs	r2, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fceb 	bl	80042cc <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(margeX + pasX, margeY, 3);
 80028f6:	7d7b      	ldrb	r3, [r7, #21]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4413      	add	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	7d3a      	ldrb	r2, [r7, #20]
 8002904:	b291      	uxth	r1, r2
 8002906:	2203      	movs	r2, #3
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fcdf 	bl	80042cc <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(margeX, margeY  + pasY, 3);
 800290e:	7d7b      	ldrb	r3, [r7, #21]
 8002910:	b298      	uxth	r0, r3
 8002912:	7d3b      	ldrb	r3, [r7, #20]
 8002914:	b29a      	uxth	r2, r3
 8002916:	7dbb      	ldrb	r3, [r7, #22]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	2203      	movs	r2, #3
 8002920:	4619      	mov	r1, r3
 8002922:	f001 fcd3 	bl	80042cc <BSP_LCD_FillCircle>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002926:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800292a:	f001 f87d 	bl	8003a28 <BSP_LCD_SetBackColor>
	  if(isTurn == 0)
 800292e:	4b9c      	ldr	r3, [pc, #624]	; (8002ba0 <fonction_affichage+0x330>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <fonction_affichage+0xf4>
	  {
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002936:	f04f 30ff 	mov.w	r0, #4294967295
 800293a:	f001 f85d 	bl	80039f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(3 * margeX + 8 * pasX, margeY, (uint8_t *) "Au tour du joueur blanc", LEFT_MODE);
 800293e:	7d7b      	ldrb	r3, [r7, #21]
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	0052      	lsls	r2, r2, #1
 8002946:	4413      	add	r3, r2
 8002948:	b29a      	uxth	r2, r3
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	b29b      	uxth	r3, r3
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	b29b      	uxth	r3, r3
 8002952:	4413      	add	r3, r2
 8002954:	b298      	uxth	r0, r3
 8002956:	7d3b      	ldrb	r3, [r7, #20]
 8002958:	b299      	uxth	r1, r3
 800295a:	2303      	movs	r3, #3
 800295c:	4a91      	ldr	r2, [pc, #580]	; (8002ba4 <fonction_affichage+0x334>)
 800295e:	f001 f919 	bl	8003b94 <BSP_LCD_DisplayStringAt>
 8002962:	e01a      	b.n	800299a <fonction_affichage+0x12a>
	  }
	  else
	  {
		  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002964:	4890      	ldr	r0, [pc, #576]	; (8002ba8 <fonction_affichage+0x338>)
 8002966:	f001 f847 	bl	80039f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(3 * margeX + 8 * pasX, margeY + 8 * pasY, (uint8_t *) "Au tour du joueur bleu", LEFT_MODE);
 800296a:	7d7b      	ldrb	r3, [r7, #21]
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	0052      	lsls	r2, r2, #1
 8002972:	4413      	add	r3, r2
 8002974:	b29a      	uxth	r2, r3
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	b29b      	uxth	r3, r3
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	b29b      	uxth	r3, r3
 800297e:	4413      	add	r3, r2
 8002980:	b298      	uxth	r0, r3
 8002982:	7d3b      	ldrb	r3, [r7, #20]
 8002984:	b29a      	uxth	r2, r3
 8002986:	7dbb      	ldrb	r3, [r7, #22]
 8002988:	b29b      	uxth	r3, r3
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	b29b      	uxth	r3, r3
 800298e:	4413      	add	r3, r2
 8002990:	b299      	uxth	r1, r3
 8002992:	2303      	movs	r3, #3
 8002994:	4a85      	ldr	r2, [pc, #532]	; (8002bac <fonction_affichage+0x33c>)
 8002996:	f001 f8fd 	bl	8003b94 <BSP_LCD_DisplayStringAt>
	  }
	  for (i = 0; i < 8; i++)
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e16b      	b.n	8002c78 <fonction_affichage+0x408>
	  {
		  for (j = 0; j < 8; j++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	77bb      	strb	r3, [r7, #30]
 80029a4:	e161      	b.n	8002c6a <fonction_affichage+0x3fa>
		  {
			  taskENTER_CRITICAL();
 80029a6:	f00b fff9 	bl	800e99c <vPortEnterCritical>
			  filled = chessboard[i][j].isFilled;
 80029aa:	7ff9      	ldrb	r1, [r7, #31]
 80029ac:	7fbb      	ldrb	r3, [r7, #30]
 80029ae:	4880      	ldr	r0, [pc, #512]	; (8002bb0 <fonction_affichage+0x340>)
 80029b0:	461a      	mov	r2, r3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	0053      	lsls	r3, r2, #1
 80029b8:	461a      	mov	r2, r3
 80029ba:	460b      	mov	r3, r1
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	4403      	add	r3, r0
 80029c6:	3305      	adds	r3, #5
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	73bb      	strb	r3, [r7, #14]
			  possible = chessboard[i][j].isPossible;
 80029cc:	7ff9      	ldrb	r1, [r7, #31]
 80029ce:	7fbb      	ldrb	r3, [r7, #30]
 80029d0:	4877      	ldr	r0, [pc, #476]	; (8002bb0 <fonction_affichage+0x340>)
 80029d2:	461a      	mov	r2, r3
 80029d4:	0092      	lsls	r2, r2, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	0053      	lsls	r3, r2, #1
 80029da:	461a      	mov	r2, r3
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	4403      	add	r3, r0
 80029e8:	3304      	adds	r3, #4
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	737b      	strb	r3, [r7, #13]
			  dame = chessboard[i][j].isDame;
 80029ee:	7ff9      	ldrb	r1, [r7, #31]
 80029f0:	7fbb      	ldrb	r3, [r7, #30]
 80029f2:	486f      	ldr	r0, [pc, #444]	; (8002bb0 <fonction_affichage+0x340>)
 80029f4:	461a      	mov	r2, r3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	0053      	lsls	r3, r2, #1
 80029fc:	461a      	mov	r2, r3
 80029fe:	460b      	mov	r3, r1
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4413      	add	r3, r2
 8002a08:	4403      	add	r3, r0
 8002a0a:	3306      	adds	r3, #6
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	733b      	strb	r3, [r7, #12]
			  taskEXIT_CRITICAL();
 8002a10:	f00b fff8 	bl	800ea04 <vPortExitCritical>
			  // Case avec un pion
			  if ( filled != 0)
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80ce 	beq.w	8002bb8 <fonction_affichage+0x348>
			  {
				  color = chessboard[i][j].piece_color;
 8002a1c:	7ff9      	ldrb	r1, [r7, #31]
 8002a1e:	7fbb      	ldrb	r3, [r7, #30]
 8002a20:	4863      	ldr	r0, [pc, #396]	; (8002bb0 <fonction_affichage+0x340>)
 8002a22:	461a      	mov	r2, r3
 8002a24:	0092      	lsls	r2, r2, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	0053      	lsls	r3, r2, #1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	4403      	add	r3, r0
 8002a38:	3307      	adds	r3, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	73fb      	strb	r3, [r7, #15]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <fonction_affichage+0x344>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a fafe 	bl	800d048 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d103      	bne.n	8002a5a <fonction_affichage+0x1ea>
 8002a52:	4855      	ldr	r0, [pc, #340]	; (8002ba8 <fonction_affichage+0x338>)
 8002a54:	f000 ffd0 	bl	80039f8 <BSP_LCD_SetTextColor>
 8002a58:	e006      	b.n	8002a68 <fonction_affichage+0x1f8>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <fonction_affichage+0x1f8>
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 ffc8 	bl	80039f8 <BSP_LCD_SetTextColor>
			      pointeurX = margeX + pasX / 2 + j * pasX;
 8002a68:	7d7b      	ldrb	r3, [r7, #21]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	7fbb      	ldrb	r3, [r7, #30]
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	fb11 f303 	smulbb	r3, r1, r3
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	827b      	strh	r3, [r7, #18]
			      pointeurY = margeY + pasY / 2 + i * pasY;
 8002a8a:	7d3b      	ldrb	r3, [r7, #20]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	7dbb      	ldrb	r3, [r7, #22]
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	7dbb      	ldrb	r3, [r7, #22]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	fb11 f303 	smulbb	r3, r1, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	823b      	strh	r3, [r7, #16]
			      if (dame == 0) BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 8002aac:	7b3b      	ldrb	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <fonction_affichage+0x270>
 8002ab2:	7ff9      	ldrb	r1, [r7, #31]
 8002ab4:	7fbb      	ldrb	r3, [r7, #30]
 8002ab6:	483e      	ldr	r0, [pc, #248]	; (8002bb0 <fonction_affichage+0x340>)
 8002ab8:	461a      	mov	r2, r3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	0053      	lsls	r3, r2, #1
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	4403      	add	r3, r0
 8002ace:	3308      	adds	r3, #8
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	8a39      	ldrh	r1, [r7, #16]
 8002ad6:	8a7b      	ldrh	r3, [r7, #18]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fbf7 	bl	80042cc <BSP_LCD_FillCircle>
 8002ade:	e051      	b.n	8002b84 <fonction_affichage+0x314>
			      else BSP_LCD_FillRect(pointeurX - chessboard[i][j].rayon, pointeurY - chessboard[i][j].rayon, chessboard[i][j].rayon * 2, chessboard[i][j].rayon * 2);
 8002ae0:	7ff9      	ldrb	r1, [r7, #31]
 8002ae2:	7fbb      	ldrb	r3, [r7, #30]
 8002ae4:	4832      	ldr	r0, [pc, #200]	; (8002bb0 <fonction_affichage+0x340>)
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	0053      	lsls	r3, r2, #1
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	4403      	add	r3, r0
 8002afc:	3308      	adds	r3, #8
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	8a7a      	ldrh	r2, [r7, #18]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b298      	uxth	r0, r3
 8002b08:	7ff9      	ldrb	r1, [r7, #31]
 8002b0a:	7fbb      	ldrb	r3, [r7, #30]
 8002b0c:	4c28      	ldr	r4, [pc, #160]	; (8002bb0 <fonction_affichage+0x340>)
 8002b0e:	461a      	mov	r2, r3
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	0053      	lsls	r3, r2, #1
 8002b16:	461a      	mov	r2, r3
 8002b18:	460b      	mov	r3, r1
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	4423      	add	r3, r4
 8002b24:	3308      	adds	r3, #8
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	8a3a      	ldrh	r2, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	b29c      	uxth	r4, r3
 8002b30:	7ff9      	ldrb	r1, [r7, #31]
 8002b32:	7fbb      	ldrb	r3, [r7, #30]
 8002b34:	4d1e      	ldr	r5, [pc, #120]	; (8002bb0 <fonction_affichage+0x340>)
 8002b36:	461a      	mov	r2, r3
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	441a      	add	r2, r3
 8002b3c:	0053      	lsls	r3, r2, #1
 8002b3e:	461a      	mov	r2, r3
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4413      	add	r3, r2
 8002b4a:	442b      	add	r3, r5
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	b29d      	uxth	r5, r3
 8002b56:	7ff9      	ldrb	r1, [r7, #31]
 8002b58:	7fbb      	ldrb	r3, [r7, #30]
 8002b5a:	4e15      	ldr	r6, [pc, #84]	; (8002bb0 <fonction_affichage+0x340>)
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	0053      	lsls	r3, r2, #1
 8002b64:	461a      	mov	r2, r3
 8002b66:	460b      	mov	r3, r1
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	4433      	add	r3, r6
 8002b72:	3308      	adds	r3, #8
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	462a      	mov	r2, r5
 8002b7e:	4621      	mov	r1, r4
 8002b80:	f001 fb2a 	bl	80041d8 <BSP_LCD_FillRect>
				  xSemaphoreGive(mutexEcran);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <fonction_affichage+0x344>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f00a f86f 	bl	800cc70 <xQueueGenericSend>
 8002b92:	e067      	b.n	8002c64 <fonction_affichage+0x3f4>
 8002b94:	20008058 	.word	0x20008058
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	20000028 	.word	0x20000028
 8002ba0:	2000038a 	.word	0x2000038a
 8002ba4:	0800f230 	.word	0x0800f230
 8002ba8:	ff0000ff 	.word	0xff0000ff
 8002bac:	0800f248 	.word	0x0800f248
 8002bb0:	200080f8 	.word	0x200080f8
 8002bb4:	200085d8 	.word	0x200085d8
			  }
			  //Case possible
			  else if (possible != 0)
 8002bb8:	7b7b      	ldrb	r3, [r7, #13]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d052      	beq.n	8002c64 <fonction_affichage+0x3f4>
			  {
				  if (change == 1) // Il y a eu une deselection, reinitialisation des possibles et pas d'affichage
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <fonction_affichage+0x42c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d115      	bne.n	8002bf2 <fonction_affichage+0x382>
				  {
					  taskENTER_CRITICAL();
 8002bc6:	f00b fee9 	bl	800e99c <vPortEnterCritical>
					  chessboard[i][j].isPossible = 0;
 8002bca:	7ff9      	ldrb	r1, [r7, #31]
 8002bcc:	7fbb      	ldrb	r3, [r7, #30]
 8002bce:	4834      	ldr	r0, [pc, #208]	; (8002ca0 <fonction_affichage+0x430>)
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	0053      	lsls	r3, r2, #1
 8002bd8:	461a      	mov	r2, r3
 8002bda:	460b      	mov	r3, r1
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	4403      	add	r3, r0
 8002be6:	3304      	adds	r3, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
					  taskEXIT_CRITICAL();
 8002bec:	f00b ff0a 	bl	800ea04 <vPortExitCritical>
 8002bf0:	e038      	b.n	8002c64 <fonction_affichage+0x3f4>
				  }
				  else
				  {
					  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <fonction_affichage+0x434>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f00a fa24 	bl	800d048 <xQueueSemaphoreTake>
					  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002c00:	4829      	ldr	r0, [pc, #164]	; (8002ca8 <fonction_affichage+0x438>)
 8002c02:	f000 fef9 	bl	80039f8 <BSP_LCD_SetTextColor>
				      pointeurX = margeX + pasX / 2 + j * pasX;
 8002c06:	7d7b      	ldrb	r3, [r7, #21]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	7fbb      	ldrb	r3, [r7, #30]
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	fb11 f303 	smulbb	r3, r1, r3
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	827b      	strh	r3, [r7, #18]
				      pointeurY = margeY + pasY / 2 + i * pasY;
 8002c28:	7d3b      	ldrb	r3, [r7, #20]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	7dbb      	ldrb	r3, [r7, #22]
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	7ffb      	ldrb	r3, [r7, #31]
 8002c3a:	b299      	uxth	r1, r3
 8002c3c:	7dbb      	ldrb	r3, [r7, #22]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	fb11 f303 	smulbb	r3, r1, r3
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	823b      	strh	r3, [r7, #16]
					  BSP_LCD_FillCircle(pointeurX, pointeurY, 9);
 8002c4a:	8a39      	ldrh	r1, [r7, #16]
 8002c4c:	8a7b      	ldrh	r3, [r7, #18]
 8002c4e:	2209      	movs	r2, #9
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 fb3b 	bl	80042cc <BSP_LCD_FillCircle>
					  xSemaphoreGive(mutexEcran);
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <fonction_affichage+0x434>)
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f00a f806 	bl	800cc70 <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 8002c64:	7fbb      	ldrb	r3, [r7, #30]
 8002c66:	3301      	adds	r3, #1
 8002c68:	77bb      	strb	r3, [r7, #30]
 8002c6a:	7fbb      	ldrb	r3, [r7, #30]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	f67f ae9a 	bls.w	80029a6 <fonction_affichage+0x136>
	  for (i = 0; i < 8; i++)
 8002c72:	7ffb      	ldrb	r3, [r7, #31]
 8002c74:	3301      	adds	r3, #1
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	f67f ae90 	bls.w	80029a0 <fonction_affichage+0x130>
				  }

			  }
		  }
	  }
	taskENTER_CRITICAL();
 8002c80:	f00b fe8c 	bl	800e99c <vPortEnterCritical>
	change = 0; // S'il y avait des changements, ils on ete pris en compte
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <fonction_affichage+0x42c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 8002c8a:	f00b febb 	bl	800ea04 <vPortExitCritical>

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f00a fe57 	bl	800d948 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8002c9a:	e614      	b.n	80028c6 <fonction_affichage+0x56>
 8002c9c:	20000028 	.word	0x20000028
 8002ca0:	200080f8 	.word	0x200080f8
 8002ca4:	200085d8 	.word	0x200085d8
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 8002cac:	b5b0      	push	{r4, r5, r7, lr}
 8002cae:	b090      	sub	sp, #64	; 0x40
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8002cb4:	2364      	movs	r3, #100	; 0x64
 8002cb6:	63bb      	str	r3, [r7, #56]	; 0x38
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t line = 0, col = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	const uint8_t pas 			= 30;
 8002cd0:	231e      	movs	r3, #30
 8002cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	const uint8_t marge			= 15;
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t selected 			= 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t line_selected		= 8;
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t col_selected		= 8;
 8002ce8:	2308      	movs	r3, #8
 8002cea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t message[1];
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 8002cee:	489b      	ldr	r0, [pc, #620]	; (8002f5c <fonction_select+0x2b0>)
 8002cf0:	f002 f80c 	bl	8004d0c <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 8002cf4:	4b99      	ldr	r3, [pc, #612]	; (8002f5c <fonction_select+0x2b0>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 823a 	beq.w	8003172 <fonction_select+0x4c6>
	  {
		  posx = TS_State.touchX[0];
 8002cfe:	4b97      	ldr	r3, [pc, #604]	; (8002f5c <fonction_select+0x2b0>)
 8002d00:	885b      	ldrh	r3, [r3, #2]
 8002d02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  posy = TS_State.touchY[0];
 8002d06:	4b95      	ldr	r3, [pc, #596]	; (8002f5c <fonction_select+0x2b0>)
 8002d08:	899b      	ldrh	r3, [r3, #12]
 8002d0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		  col = (posx - marge) / pas;
 8002d0e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002d12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d20:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  line = (posy - marge) / pas;
 8002d24:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002d28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  taskENTER_CRITICAL();
 8002d3a:	f00b fe2f 	bl	800e99c <vPortEnterCritical>
		  // Selection d'un pion
		  if(chessboard[line][col].isFilled && (chessboard[line][col].piece_color == isTurn))
 8002d3e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d46:	4886      	ldr	r0, [pc, #536]	; (8002f60 <fonction_select+0x2b4>)
 8002d48:	461a      	mov	r2, r3
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	0053      	lsls	r3, r2, #1
 8002d50:	461a      	mov	r2, r3
 8002d52:	460b      	mov	r3, r1
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3305      	adds	r3, #5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 808d 	beq.w	8002e82 <fonction_select+0x1d6>
 8002d68:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d6c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d70:	487b      	ldr	r0, [pc, #492]	; (8002f60 <fonction_select+0x2b4>)
 8002d72:	461a      	mov	r2, r3
 8002d74:	0092      	lsls	r2, r2, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	0053      	lsls	r3, r2, #1
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4413      	add	r3, r2
 8002d86:	4403      	add	r3, r0
 8002d88:	3307      	adds	r3, #7
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <fonction_select+0x2b8>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d176      	bne.n	8002e82 <fonction_select+0x1d6>
		  {
			  // Aucun pion n'etait selectionne
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 8002d94:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d98:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d9c:	4870      	ldr	r0, [pc, #448]	; (8002f60 <fonction_select+0x2b4>)
 8002d9e:	461a      	mov	r2, r3
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	0053      	lsls	r3, r2, #1
 8002da6:	461a      	mov	r2, r3
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	4403      	add	r3, r0
 8002db4:	3308      	adds	r3, #8
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b0b      	cmp	r3, #11
 8002dba:	d835      	bhi.n	8002e28 <fonction_select+0x17c>
 8002dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d131      	bne.n	8002e28 <fonction_select+0x17c>
			  {
				  chessboard[line][col].rayon = 12;
 8002dc4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002dc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dcc:	4864      	ldr	r0, [pc, #400]	; (8002f60 <fonction_select+0x2b4>)
 8002dce:	461a      	mov	r2, r3
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	0053      	lsls	r3, r2, #1
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	4403      	add	r3, r0
 8002de4:	3308      	adds	r3, #8
 8002de6:	220c      	movs	r2, #12
 8002de8:	701a      	strb	r2, [r3, #0]
				  selected = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  line_selected = line;
 8002df0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002df4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				  col_selected = col;
 8002df8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dfc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  message[0] = (line << 8) + col;
 8002e00:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	84bb      	strh	r3, [r7, #36]	; 0x24
				  xQueueSend(queueSelHandle, &message, 0);
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <fonction_select+0x2bc>)
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2200      	movs	r2, #0
 8002e22:	f009 ff25 	bl	800cc70 <xQueueGenericSend>
 8002e26:	e02c      	b.n	8002e82 <fonction_select+0x1d6>
			  }
			  /// Ce pion etait selectionne
			  else if (chessboard[line][col].rayon == 12)
 8002e28:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002e2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e30:	484b      	ldr	r0, [pc, #300]	; (8002f60 <fonction_select+0x2b4>)
 8002e32:	461a      	mov	r2, r3
 8002e34:	0092      	lsls	r2, r2, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	0053      	lsls	r3, r2, #1
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	4413      	add	r3, r2
 8002e46:	4403      	add	r3, r0
 8002e48:	3308      	adds	r3, #8
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d118      	bne.n	8002e82 <fonction_select+0x1d6>
			  {
				  chessboard[line][col].rayon = 9;
 8002e50:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002e54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e58:	4841      	ldr	r0, [pc, #260]	; (8002f60 <fonction_select+0x2b4>)
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	0053      	lsls	r3, r2, #1
 8002e62:	461a      	mov	r2, r3
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4413      	add	r3, r2
 8002e6e:	4403      	add	r3, r0
 8002e70:	3308      	adds	r3, #8
 8002e72:	2209      	movs	r2, #9
 8002e74:	701a      	strb	r2, [r3, #0]
				  change = 1;
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <fonction_select+0x2c0>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  }
		  }

		  // Case pour un deplacement
		  if(chessboard[line][col].isPossible > 0)
 8002e82:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002e86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e8a:	4835      	ldr	r0, [pc, #212]	; (8002f60 <fonction_select+0x2b4>)
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	0053      	lsls	r3, r2, #1
 8002e94:	461a      	mov	r2, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4403      	add	r3, r0
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8161 	beq.w	800316e <fonction_select+0x4c2>
		  {
			  chessboard[line_selected][col_selected].isFilled = 0;
 8002eac:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8002eb0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002eb4:	482a      	ldr	r0, [pc, #168]	; (8002f60 <fonction_select+0x2b4>)
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	0053      	lsls	r3, r2, #1
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	4413      	add	r3, r2
 8002eca:	4403      	add	r3, r0
 8002ecc:	3305      	adds	r3, #5
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
			  // Suppression des pions manges
			  for (p = 0; p < 12; p++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002ed8:	e059      	b.n	8002f8e <fonction_select+0x2e2>
			  {
				  eaten_piece = possible_eaten[chessboard[line][col].isPossible - 1][p];
 8002eda:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002ede:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ee2:	481f      	ldr	r0, [pc, #124]	; (8002f60 <fonction_select+0x2b4>)
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	441a      	add	r2, r3
 8002eea:	0053      	lsls	r3, r2, #1
 8002eec:	461a      	mov	r2, r3
 8002eee:	460b      	mov	r3, r1
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4403      	add	r3, r0
 8002efa:	3304      	adds	r3, #4
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8002f04:	481a      	ldr	r0, [pc, #104]	; (8002f70 <fonction_select+0x2c4>)
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4403      	add	r3, r0
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	6010      	str	r0, [r2, #0]
				  if(eaten_piece.ligne != 8)
 8002f1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d030      	beq.n	8002f84 <fonction_select+0x2d8>
				  {
					  chessboard[eaten_piece.ligne][eaten_piece.colonne].isFilled = 0;
 8002f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f24:	4618      	mov	r0, r3
 8002f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f28:	490d      	ldr	r1, [pc, #52]	; (8002f60 <fonction_select+0x2b4>)
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	0092      	lsls	r2, r2, #2
 8002f2e:	441a      	add	r2, r3
 8002f30:	0053      	lsls	r3, r2, #1
 8002f32:	461a      	mov	r2, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4403      	add	r3, r0
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	4413      	add	r3, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3305      	adds	r3, #5
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
			          if(isTurn == 0)
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <fonction_select+0x2b8>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d114      	bne.n	8002f78 <fonction_select+0x2cc>
			              nb_blue--;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <fonction_select+0x2c8>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <fonction_select+0x2c8>)
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e013      	b.n	8002f84 <fonction_select+0x2d8>
 8002f5c:	2000038c 	.word	0x2000038c
 8002f60:	200080f8 	.word	0x200080f8
 8002f64:	2000038a 	.word	0x2000038a
 8002f68:	200080a8 	.word	0x200080a8
 8002f6c:	20000028 	.word	0x20000028
 8002f70:	20008614 	.word	0x20008614
 8002f74:	20000029 	.word	0x20000029
			          else
			              nb_white--;
 8002f78:	4b81      	ldr	r3, [pc, #516]	; (8003180 <fonction_select+0x4d4>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <fonction_select+0x4d4>)
 8002f82:	701a      	strb	r2, [r3, #0]
			  for (p = 0; p < 12; p++)
 8002f84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002f8e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002f92:	2b0b      	cmp	r3, #11
 8002f94:	d9a1      	bls.n	8002eda <fonction_select+0x22e>
				  }
			  }

			  chessboard[line][col].isFilled = 1;
 8002f96:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002f9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f9e:	4879      	ldr	r0, [pc, #484]	; (8003184 <fonction_select+0x4d8>)
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	0053      	lsls	r3, r2, #1
 8002fa8:	461a      	mov	r2, r3
 8002faa:	460b      	mov	r3, r1
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	3305      	adds	r3, #5
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].isPossible = 0;
 8002fbc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002fc0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002fc4:	486f      	ldr	r0, [pc, #444]	; (8003184 <fonction_select+0x4d8>)
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	0053      	lsls	r3, r2, #1
 8002fce:	461a      	mov	r2, r3
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	4403      	add	r3, r0
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].piece_color = chessboard[line_selected][col_selected].piece_color;
 8002fe2:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 8002fe6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fea:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002fee:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8002ff2:	4d64      	ldr	r5, [pc, #400]	; (8003184 <fonction_select+0x4d8>)
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	0053      	lsls	r3, r2, #1
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4623      	mov	r3, r4
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4423      	add	r3, r4
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	4413      	add	r3, r2
 8003008:	442b      	add	r3, r5
 800300a:	3307      	adds	r3, #7
 800300c:	781d      	ldrb	r5, [r3, #0]
 800300e:	4c5d      	ldr	r4, [pc, #372]	; (8003184 <fonction_select+0x4d8>)
 8003010:	4602      	mov	r2, r0
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	4402      	add	r2, r0
 8003016:	0053      	lsls	r3, r2, #1
 8003018:	461a      	mov	r2, r3
 800301a:	460b      	mov	r3, r1
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	4413      	add	r3, r2
 8003024:	4423      	add	r3, r4
 8003026:	3307      	adds	r3, #7
 8003028:	462a      	mov	r2, r5
 800302a:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].rayon = 9;
 800302c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003030:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003034:	4853      	ldr	r0, [pc, #332]	; (8003184 <fonction_select+0x4d8>)
 8003036:	461a      	mov	r2, r3
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	441a      	add	r2, r3
 800303c:	0053      	lsls	r3, r2, #1
 800303e:	461a      	mov	r2, r3
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	4413      	add	r3, r2
 800304a:	4403      	add	r3, r0
 800304c:	3308      	adds	r3, #8
 800304e:	2209      	movs	r2, #9
 8003050:	701a      	strb	r2, [r3, #0]
			  // La ligne de la dame est atteinte !
			  if((isTurn == 0 && line == 7) || (isTurn == 1 && line == 0)) chessboard[line][col].isDame = 1;
 8003052:	4b4d      	ldr	r3, [pc, #308]	; (8003188 <fonction_select+0x4dc>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <fonction_select+0x3b6>
 800305a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800305e:	2b07      	cmp	r3, #7
 8003060:	d007      	beq.n	8003072 <fonction_select+0x3c6>
 8003062:	4b49      	ldr	r3, [pc, #292]	; (8003188 <fonction_select+0x4dc>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d116      	bne.n	8003098 <fonction_select+0x3ec>
 800306a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800306e:	2b00      	cmp	r3, #0
 8003070:	d112      	bne.n	8003098 <fonction_select+0x3ec>
 8003072:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003076:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800307a:	4842      	ldr	r0, [pc, #264]	; (8003184 <fonction_select+0x4d8>)
 800307c:	461a      	mov	r2, r3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	441a      	add	r2, r3
 8003082:	0053      	lsls	r3, r2, #1
 8003084:	461a      	mov	r2, r3
 8003086:	460b      	mov	r3, r1
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4413      	add	r3, r2
 8003090:	4403      	add	r3, r0
 8003092:	3306      	adds	r3, #6
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
			  // Si le pion etait une dame, il le reste
			  if(chessboard[line_selected][col_selected].isDame == 1)
 8003098:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800309c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80030a0:	4838      	ldr	r0, [pc, #224]	; (8003184 <fonction_select+0x4d8>)
 80030a2:	461a      	mov	r2, r3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	0053      	lsls	r3, r2, #1
 80030aa:	461a      	mov	r2, r3
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	4403      	add	r3, r0
 80030b8:	3306      	adds	r3, #6
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d125      	bne.n	800310c <fonction_select+0x460>
			  {
				  chessboard[line][col].isDame = 1;
 80030c0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80030c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030c8:	482e      	ldr	r0, [pc, #184]	; (8003184 <fonction_select+0x4d8>)
 80030ca:	461a      	mov	r2, r3
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	0053      	lsls	r3, r2, #1
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	4413      	add	r3, r2
 80030de:	4403      	add	r3, r0
 80030e0:	3306      	adds	r3, #6
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
				  chessboard[line_selected][col_selected].isDame = 0;
 80030e6:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80030ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80030ee:	4825      	ldr	r0, [pc, #148]	; (8003184 <fonction_select+0x4d8>)
 80030f0:	461a      	mov	r2, r3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	0053      	lsls	r3, r2, #1
 80030f8:	461a      	mov	r2, r3
 80030fa:	460b      	mov	r3, r1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	4403      	add	r3, r0
 8003106:	3306      	adds	r3, #6
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
			  }
			  selected = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  change = 1;
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <fonction_select+0x4e0>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]

	          // Check la fin de jeu
	          if(nb_blue == 0 || nb_white == 0)
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <fonction_select+0x4e4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <fonction_select+0x47c>
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <fonction_select+0x4d4>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d118      	bne.n	800315a <fonction_select+0x4ae>
	          {

	        	  osThreadDef(task_victory, fonctionVictory, osPriorityNormal, 0, 1024);
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <fonction_select+0x4e8>)
 800312a:	f107 0408 	add.w	r4, r7, #8
 800312e:	461d      	mov	r5, r3
 8003130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003134:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	        	  task_victoryHandle = osThreadCreate(osThread(task_victory), NULL);
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f009 facb 	bl	800c6de <osThreadCreate>
 8003148:	4603      	mov	r3, r0
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <fonction_select+0x4ec>)
 800314c:	6013      	str	r3, [r2, #0]
				  nb_blue = 12;
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <fonction_select+0x4e4>)
 8003150:	220c      	movs	r2, #12
 8003152:	701a      	strb	r2, [r3, #0]
				  nb_white = 12;
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <fonction_select+0x4d4>)
 8003156:	220c      	movs	r2, #12
 8003158:	701a      	strb	r2, [r3, #0]
				  }
*/
	          }

			  // Changement de tour
			  isTurn = (isTurn == 0) ? 1 : 0;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <fonction_select+0x4dc>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <fonction_select+0x4dc>)
 800316c:	701a      	strb	r2, [r3, #0]
		  }

		  taskEXIT_CRITICAL();
 800316e:	f00b fc49 	bl	800ea04 <vPortExitCritical>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8003172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003178:	4618      	mov	r0, r3
 800317a:	f00a fbe5 	bl	800d948 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 800317e:	e5b6      	b.n	8002cee <fonction_select+0x42>
 8003180:	2000002a 	.word	0x2000002a
 8003184:	200080f8 	.word	0x200080f8
 8003188:	2000038a 	.word	0x2000038a
 800318c:	20000028 	.word	0x20000028
 8003190:	20000029 	.word	0x20000029
 8003194:	0800f214 	.word	0x0800f214
 8003198:	200085f0 	.word	0x200085f0

0800319c <fonction_calculPossibilites>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_calculPossibilites */
void fonction_calculPossibilites(void const * argument)
{
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b0a8      	sub	sp, #160	; 0xa0
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Recuperation information selection
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 80031a4:	4b57      	ldr	r3, [pc, #348]	; (8003304 <fonction_calculPossibilites+0x168>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	4618      	mov	r0, r3
 80031b2:	f009 fe63 	bl	800ce7c <xQueueReceive>
	  line = (uint8_t) (message[0] >> 8);
 80031b6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  col  = (uint8_t)  message[0];
 80031c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80031c6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  taskENTER_CRITICAL();
 80031ca:	f00b fbe7 	bl	800e99c <vPortEnterCritical>
	  color = chessboard[line][col].piece_color;
 80031ce:	f897 1094 	ldrb.w	r1, [r7, #148]	; 0x94
 80031d2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80031d6:	484c      	ldr	r0, [pc, #304]	; (8003308 <fonction_calculPossibilites+0x16c>)
 80031d8:	461a      	mov	r2, r3
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	441a      	add	r2, r3
 80031de:	0053      	lsls	r3, r2, #1
 80031e0:	461a      	mov	r2, r3
 80031e2:	460b      	mov	r3, r1
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	4403      	add	r3, r0
 80031ee:	3307      	adds	r3, #7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	  taskEXIT_CRITICAL();
 80031f6:	f00b fc05 	bl	800ea04 <vPortExitCritical>

	  // Calcul des possibilites
	  	  // Reinitialisation des cases possibles
	  for(m = 0; m < 32; m++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003200:	e02c      	b.n	800325c <fonction_calculPossibilites+0xc0>
	  {
		  for(n = 0; n < 12; n++)
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003208:	e01f      	b.n	800324a <fonction_calculPossibilites+0xae>
		  {
			  possible_eaten[m][n].colonne = 8;
 800320a:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800320e:	f897 1095 	ldrb.w	r1, [r7, #149]	; 0x95
 8003212:	483e      	ldr	r0, [pc, #248]	; (800330c <fonction_calculPossibilites+0x170>)
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4403      	add	r3, r0
 8003222:	2208      	movs	r2, #8
 8003224:	805a      	strh	r2, [r3, #2]
			  possible_eaten[m][n].ligne   = 8;
 8003226:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800322a:	f897 1095 	ldrb.w	r1, [r7, #149]	; 0x95
 800322e:	4837      	ldr	r0, [pc, #220]	; (800330c <fonction_calculPossibilites+0x170>)
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	2208      	movs	r2, #8
 800323c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
		  for(n = 0; n < 12; n++)
 8003240:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003244:	3301      	adds	r3, #1
 8003246:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800324a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800324e:	2b0b      	cmp	r3, #11
 8003250:	d9db      	bls.n	800320a <fonction_calculPossibilites+0x6e>
	  for(m = 0; m < 32; m++)
 8003252:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003256:	3301      	adds	r3, #1
 8003258:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800325c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003260:	2b1f      	cmp	r3, #31
 8003262:	d9ce      	bls.n	8003202 <fonction_calculPossibilites+0x66>
		  }
	  }
	  length = calculPossibilitesRec(line, col, color, possibilites, 0, 0);
 8003264:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003268:	b298      	uxth	r0, r3
 800326a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800326e:	b299      	uxth	r1, r3
 8003270:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003274:	b2da      	uxtb	r2, r3
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	2400      	movs	r4, #0
 800327c:	9401      	str	r4, [sp, #4]
 800327e:	2400      	movs	r4, #0
 8003280:	9400      	str	r4, [sp, #0]
 8003282:	f7fd fc67 	bl	8000b54 <calculPossibilitesRec>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	  // Modification de l'echiquier avec cases possibles
	  taskENTER_CRITICAL();
 800328c:	f00b fb86 	bl	800e99c <vPortEnterCritical>
	  for(i = 0; i < length; i++)
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003296:	e029      	b.n	80032ec <fonction_calculPossibilites+0x150>
	  {
		  chessboard[possibilites[i].ligne][possibilites[i].colonne].isPossible = i + 1;
 8003298:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80032a2:	4413      	add	r3, r2
 80032a4:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80032b4:	4413      	add	r3, r2
 80032b6:	f833 3c8a 	ldrh.w	r3, [r3, #-138]
 80032ba:	461c      	mov	r4, r3
 80032bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80032c0:	3301      	adds	r3, #1
 80032c2:	b2dd      	uxtb	r5, r3
 80032c4:	4910      	ldr	r1, [pc, #64]	; (8003308 <fonction_calculPossibilites+0x16c>)
 80032c6:	4622      	mov	r2, r4
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	4422      	add	r2, r4
 80032cc:	0053      	lsls	r3, r2, #1
 80032ce:	461a      	mov	r2, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4403      	add	r3, r0
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	440b      	add	r3, r1
 80032dc:	3304      	adds	r3, #4
 80032de:	462a      	mov	r2, r5
 80032e0:	701a      	strb	r2, [r3, #0]
	  for(i = 0; i < length; i++)
 80032e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80032e6:	3301      	adds	r3, #1
 80032e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80032ec:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80032f0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3cf      	bcc.n	8003298 <fonction_calculPossibilites+0xfc>
	  }
	  taskEXIT_CRITICAL();
 80032f8:	f00b fb84 	bl	800ea04 <vPortExitCritical>
      osDelay(1);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f009 fa46 	bl	800c78e <osDelay>
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8003302:	e74f      	b.n	80031a4 <fonction_calculPossibilites+0x8>
 8003304:	200080a8 	.word	0x200080a8
 8003308:	200080f8 	.word	0x200080f8
 800330c:	20008614 	.word	0x20008614

08003310 <fonctionVictory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonctionVictory */
void fonctionVictory(void const * argument)
{
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonctionVictory */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8003318:	2364      	movs	r3, #100	; 0x64
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t init = 1;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static TS_StateTypeDef TS_State;
  /* Infinite loop */
  for(;;)
  {
	  if (init == 1)
 8003322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <fonctionVictory+0x2a>
	  {
		  osThreadTerminate(affichageHandle);
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <fonctionVictory+0x128>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f009 fa21 	bl	800c776 <osThreadTerminate>
		  init = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }
	  BSP_LCD_SelectLayer(0);
 800333a:	2000      	movs	r0, #0
 800333c:	f000 fb4c 	bl	80039d8 <BSP_LCD_SelectLayer>
	  if (isTurn == 1)
 8003340:	4b3e      	ldr	r3, [pc, #248]	; (800343c <fonctionVictory+0x12c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d121      	bne.n	800338c <fonctionVictory+0x7c>
	  {
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f000 fbb6 	bl	8003abc <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 8003350:	2001      	movs	r0, #1
 8003352:	f000 fb41 	bl	80039d8 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003356:	f04f 30ff 	mov.w	r0, #4294967295
 800335a:	f000 fbaf 	bl	8003abc <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800335e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003362:	f000 fb49 	bl	80039f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003366:	f04f 30ff 	mov.w	r0, #4294967295
 800336a:	f000 fb5d 	bl	8003a28 <BSP_LCD_SetBackColor>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"VICTOIRE des BLANCS !");
 800336e:	4934      	ldr	r1, [pc, #208]	; (8003440 <fonctionVictory+0x130>)
 8003370:	200a      	movs	r0, #10
 8003372:	f000 fcd7 	bl	8003d24 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"Felicitations au gagnant !");
 8003376:	4933      	ldr	r1, [pc, #204]	; (8003444 <fonctionVictory+0x134>)
 8003378:	200c      	movs	r0, #12
 800337a:	f000 fcd3 	bl	8003d24 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800337e:	4832      	ldr	r0, [pc, #200]	; (8003448 <fonctionVictory+0x138>)
 8003380:	f000 fb3a 	bl	80039f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Touchez l'ecran pour rejouer");
 8003384:	4931      	ldr	r1, [pc, #196]	; (800344c <fonctionVictory+0x13c>)
 8003386:	200e      	movs	r0, #14
 8003388:	f000 fccc 	bl	8003d24 <BSP_LCD_DisplayStringAtLine>
	  }
	  if (isTurn == 0)
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <fonctionVictory+0x12c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d12d      	bne.n	80033f0 <fonctionVictory+0xe0>
	  {
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003394:	482e      	ldr	r0, [pc, #184]	; (8003450 <fonctionVictory+0x140>)
 8003396:	f000 fb91 	bl	8003abc <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 800339a:	2001      	movs	r0, #1
 800339c:	f000 fb1c 	bl	80039d8 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80033a0:	482b      	ldr	r0, [pc, #172]	; (8003450 <fonctionVictory+0x140>)
 80033a2:	f000 fb8b 	bl	8003abc <BSP_LCD_Clear>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80033a6:	482a      	ldr	r0, [pc, #168]	; (8003450 <fonctionVictory+0x140>)
 80033a8:	f000 fb88 	bl	8003abc <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f000 fb13 	bl	80039d8 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80033b2:	4827      	ldr	r0, [pc, #156]	; (8003450 <fonctionVictory+0x140>)
 80033b4:	f000 fb82 	bl	8003abc <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f000 fb1c 	bl	80039f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"VICTOIRE des BLEUS !");
 80033c0:	4924      	ldr	r1, [pc, #144]	; (8003454 <fonctionVictory+0x144>)
 80033c2:	200a      	movs	r0, #10
 80033c4:	f000 fcae 	bl	8003d24 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"Felicitations au gagnant !");
 80033c8:	491e      	ldr	r1, [pc, #120]	; (8003444 <fonctionVictory+0x134>)
 80033ca:	200c      	movs	r0, #12
 80033cc:	f000 fcaa 	bl	8003d24 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80033d0:	481d      	ldr	r0, [pc, #116]	; (8003448 <fonctionVictory+0x138>)
 80033d2:	f000 fb11 	bl	80039f8 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80033d6:	481e      	ldr	r0, [pc, #120]	; (8003450 <fonctionVictory+0x140>)
 80033d8:	f000 fb26 	bl	8003a28 <BSP_LCD_SetBackColor>
		  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Touchez l'ecran pour rejouer");
 80033dc:	491b      	ldr	r1, [pc, #108]	; (800344c <fonctionVictory+0x13c>)
 80033de:	200e      	movs	r0, #14
 80033e0:	f000 fca0 	bl	8003d24 <BSP_LCD_DisplayStringAtLine>
		  nb_blue = 1;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <fonctionVictory+0x148>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
		  nb_white = 1;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <fonctionVictory+0x14c>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
	  }
	  BSP_TS_GetState(&TS_State);
 80033f0:	481b      	ldr	r0, [pc, #108]	; (8003460 <fonctionVictory+0x150>)
 80033f2:	f001 fc8b 	bl	8004d0c <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <fonctionVictory+0x150>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <fonctionVictory+0x11a>
	  {
		  victory = 1;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <fonctionVictory+0x154>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
		  osThreadDef(task_init, fonction_init, osPriorityHigh, 0, 1024);
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <fonctionVictory+0x158>)
 8003406:	f107 0408 	add.w	r4, r7, #8
 800340a:	461d      	mov	r5, r3
 800340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f009 f95d 	bl	800c6de <osThreadCreate>
 8003424:	4603      	mov	r3, r0
 8003426:	4a11      	ldr	r2, [pc, #68]	; (800346c <fonctionVictory+0x15c>)
 8003428:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 800342a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003430:	4618      	mov	r0, r3
 8003432:	f00a fa89 	bl	800d948 <vTaskDelayUntil>
	  if (init == 1)
 8003436:	e774      	b.n	8003322 <fonctionVictory+0x12>
 8003438:	20008508 	.word	0x20008508
 800343c:	2000038a 	.word	0x2000038a
 8003440:	0800f260 	.word	0x0800f260
 8003444:	0800f278 	.word	0x0800f278
 8003448:	ffff0000 	.word	0xffff0000
 800344c:	0800f294 	.word	0x0800f294
 8003450:	ff0000ff 	.word	0xff0000ff
 8003454:	0800f2b4 	.word	0x0800f2b4
 8003458:	20000029 	.word	0x20000029
 800345c:	2000002a 	.word	0x2000002a
 8003460:	200003b8 	.word	0x200003b8
 8003464:	2000038b 	.word	0x2000038b
 8003468:	0800f1a4 	.word	0x0800f1a4
 800346c:	20008058 	.word	0x20008058

08003470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003482:	f002 fd53 	bl	8005f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40001000 	.word	0x40001000

08003494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003498:	b672      	cpsid	i
}
 800349a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800349c:	e7fe      	b.n	800349c <Error_Handler+0x8>
	...

080034a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <I2Cx_MspInit+0x150>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d14d      	bne.n	800354c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <I2Cx_MspInit+0x154>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4a4f      	ldr	r2, [pc, #316]	; (80035f4 <I2Cx_MspInit+0x154>)
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	6313      	str	r3, [r2, #48]	; 0x30
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <I2Cx_MspInit+0x154>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80034cc:	2312      	movs	r3, #18
 80034ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80034d4:	2302      	movs	r3, #2
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80034d8:	2304      	movs	r3, #4
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	4619      	mov	r1, r3
 80034e2:	4845      	ldr	r0, [pc, #276]	; (80035f8 <I2Cx_MspInit+0x158>)
 80034e4:	f004 f876 	bl	80075d4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80034e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80034ee:	f107 031c 	add.w	r3, r7, #28
 80034f2:	4619      	mov	r1, r3
 80034f4:	4840      	ldr	r0, [pc, #256]	; (80035f8 <I2Cx_MspInit+0x158>)
 80034f6:	f004 f86d 	bl	80075d4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80034fa:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <I2Cx_MspInit+0x154>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003512:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800351c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800351e:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003528:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	210f      	movs	r1, #15
 800352e:	2048      	movs	r0, #72	; 0x48
 8003530:	f003 f95a 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003534:	2048      	movs	r0, #72	; 0x48
 8003536:	f003 f973 	bl	8006820 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800353a:	2200      	movs	r2, #0
 800353c:	210f      	movs	r1, #15
 800353e:	2049      	movs	r0, #73	; 0x49
 8003540:	f003 f952 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003544:	2049      	movs	r0, #73	; 0x49
 8003546:	f003 f96b 	bl	8006820 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800354a:	e04d      	b.n	80035e8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <I2Cx_MspInit+0x154>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <I2Cx_MspInit+0x154>)
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <I2Cx_MspInit+0x154>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003568:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800356a:	2312      	movs	r3, #18
 800356c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003572:	2302      	movs	r3, #2
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003576:	2304      	movs	r3, #4
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800357a:	f107 031c 	add.w	r3, r7, #28
 800357e:	4619      	mov	r1, r3
 8003580:	481e      	ldr	r0, [pc, #120]	; (80035fc <I2Cx_MspInit+0x15c>)
 8003582:	f004 f827 	bl	80075d4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800358a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	481a      	ldr	r0, [pc, #104]	; (80035fc <I2Cx_MspInit+0x15c>)
 8003594:	f004 f81e 	bl	80075d4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <I2Cx_MspInit+0x154>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <I2Cx_MspInit+0x154>)
 800359e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035a2:	6413      	str	r3, [r2, #64]	; 0x40
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <I2Cx_MspInit+0x154>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <I2Cx_MspInit+0x154>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <I2Cx_MspInit+0x154>)
 80035b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035ba:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <I2Cx_MspInit+0x154>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <I2Cx_MspInit+0x154>)
 80035c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035c6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80035c8:	2200      	movs	r2, #0
 80035ca:	210f      	movs	r1, #15
 80035cc:	201f      	movs	r0, #31
 80035ce:	f003 f90b 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80035d2:	201f      	movs	r0, #31
 80035d4:	f003 f924 	bl	8006820 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	210f      	movs	r1, #15
 80035dc:	2020      	movs	r0, #32
 80035de:	f003 f903 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80035e2:	2020      	movs	r0, #32
 80035e4:	f003 f91c 	bl	8006820 <HAL_NVIC_EnableIRQ>
}
 80035e8:	bf00      	nop
 80035ea:	3730      	adds	r7, #48	; 0x30
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200003e4 	.word	0x200003e4
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40021c00 	.word	0x40021c00
 80035fc:	40020400 	.word	0x40020400

08003600 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f004 fdd5 	bl	80081b8 <HAL_I2C_GetState>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d125      	bne.n	8003660 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a14      	ldr	r2, [pc, #80]	; (8003668 <I2Cx_Init+0x68>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <I2Cx_Init+0x6c>)
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e002      	b.n	800362a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <I2Cx_Init+0x70>)
 8003628:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a11      	ldr	r2, [pc, #68]	; (8003674 <I2Cx_Init+0x74>)
 800362e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff23 	bl	80034a0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 fabe 	bl	8007bdc <HAL_I2C_Init>
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	200003e4 	.word	0x200003e4
 800366c:	40005c00 	.word	0x40005c00
 8003670:	40005400 	.word	0x40005400
 8003674:	40912732 	.word	0x40912732

08003678 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af04      	add	r7, sp, #16
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4603      	mov	r3, r0
 8003688:	72fb      	strb	r3, [r7, #11]
 800368a:	460b      	mov	r3, r1
 800368c:	813b      	strh	r3, [r7, #8]
 800368e:	4613      	mov	r3, r2
 8003690:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003696:	7afb      	ldrb	r3, [r7, #11]
 8003698:	b299      	uxth	r1, r3
 800369a:	88f8      	ldrh	r0, [r7, #6]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4603      	mov	r3, r0
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f004 fc68 	bl	8007f84 <HAL_I2C_Mem_Read>
 80036b4:	4603      	mov	r3, r0
 80036b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	4619      	mov	r1, r3
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f832 	bl	800372c <I2Cx_Error>
  }
  return status;    
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08a      	sub	sp, #40	; 0x28
 80036d6:	af04      	add	r7, sp, #16
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	461a      	mov	r2, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	72fb      	strb	r3, [r7, #11]
 80036e4:	460b      	mov	r3, r1
 80036e6:	813b      	strh	r3, [r7, #8]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	b299      	uxth	r1, r3
 80036f4:	88f8      	ldrh	r0, [r7, #6]
 80036f6:	893a      	ldrh	r2, [r7, #8]
 80036f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	4603      	mov	r3, r0
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f004 fb27 	bl	8007d5c <HAL_I2C_Mem_Write>
 800370e:	4603      	mov	r3, r0
 8003710:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f805 	bl	800372c <I2Cx_Error>
  }
  return status;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f004 fadf 	bl	8007cfc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff5e 	bl	8003600 <I2Cx_Init>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003750:	4802      	ldr	r0, [pc, #8]	; (800375c <TS_IO_Init+0x10>)
 8003752:	f7ff ff55 	bl	8003600 <I2Cx_Init>
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200003e4 	.word	0x200003e4

08003760 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af02      	add	r7, sp, #8
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
 800376a:	460b      	mov	r3, r1
 800376c:	71bb      	strb	r3, [r7, #6]
 800376e:	4613      	mov	r3, r2
 8003770:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003772:	79bb      	ldrb	r3, [r7, #6]
 8003774:	b29a      	uxth	r2, r3
 8003776:	79f9      	ldrb	r1, [r7, #7]
 8003778:	2301      	movs	r3, #1
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	1d7b      	adds	r3, r7, #5
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2301      	movs	r3, #1
 8003782:	4803      	ldr	r0, [pc, #12]	; (8003790 <TS_IO_Write+0x30>)
 8003784:	f7ff ffa5 	bl	80036d2 <I2Cx_WriteMultiple>
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200003e4 	.word	0x200003e4

08003794 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	4603      	mov	r3, r0
 800379c:	460a      	mov	r2, r1
 800379e:	71fb      	strb	r3, [r7, #7]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80037a8:	79bb      	ldrb	r3, [r7, #6]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	79f9      	ldrb	r1, [r7, #7]
 80037ae:	2301      	movs	r3, #1
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	f107 030f 	add.w	r3, r7, #15
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	2301      	movs	r3, #1
 80037ba:	4804      	ldr	r0, [pc, #16]	; (80037cc <TS_IO_Read+0x38>)
 80037bc:	f7ff ff5c 	bl	8003678 <I2Cx_ReadMultiple>

  return read_value;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200003e4 	.word	0x200003e4

080037d0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f002 fbc7 	bl	8005f6c <HAL_Delay>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <BSP_LCD_Init+0xcc>)
 80037ee:	2228      	movs	r2, #40	; 0x28
 80037f0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <BSP_LCD_Init+0xcc>)
 80037f4:	2209      	movs	r2, #9
 80037f6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80037f8:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <BSP_LCD_Init+0xcc>)
 80037fa:	2235      	movs	r2, #53	; 0x35
 80037fc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80037fe:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003800:	220b      	movs	r2, #11
 8003802:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003806:	f240 121b 	movw	r2, #283	; 0x11b
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800380e:	f240 2215 	movw	r2, #533	; 0x215
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003816:	f240 121d 	movw	r2, #285	; 0x11d
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800381e:	f240 2235 	movw	r2, #565	; 0x235
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003824:	2100      	movs	r1, #0
 8003826:	4823      	ldr	r0, [pc, #140]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003828:	f000 fee8 	bl	80045fc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800382e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003832:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003834:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003836:	f44f 7288 	mov.w	r2, #272	; 0x110
 800383a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003856:	2200      	movs	r2, #0
 8003858:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <BSP_LCD_Init+0xcc>)
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <BSP_LCD_Init+0xd0>)
 8003870:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003872:	4810      	ldr	r0, [pc, #64]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003874:	f005 f9bc 	bl	8008bf0 <HAL_LTDC_GetState>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800387e:	2100      	movs	r1, #0
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003882:	f000 fde1 	bl	8004448 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003886:	480b      	ldr	r0, [pc, #44]	; (80038b4 <BSP_LCD_Init+0xcc>)
 8003888:	f004 ffe2 	bl	8008850 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800388c:	2201      	movs	r2, #1
 800388e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003892:	480a      	ldr	r0, [pc, #40]	; (80038bc <BSP_LCD_Init+0xd4>)
 8003894:	f004 f956 	bl	8007b44 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003898:	2201      	movs	r2, #1
 800389a:	2108      	movs	r1, #8
 800389c:	4808      	ldr	r0, [pc, #32]	; (80038c0 <BSP_LCD_Init+0xd8>)
 800389e:	f004 f951 	bl	8007b44 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80038a2:	f001 f80f 	bl	80048c4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80038a6:	4807      	ldr	r0, [pc, #28]	; (80038c4 <BSP_LCD_Init+0xdc>)
 80038a8:	f000 f8d8 	bl	8003a5c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20008da4 	.word	0x20008da4
 80038b8:	40016800 	.word	0x40016800
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40022800 	.word	0x40022800
 80038c4:	2000002c 	.word	0x2000002c

080038c8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <BSP_LCD_GetXSize+0x20>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a06      	ldr	r2, [pc, #24]	; (80038ec <BSP_LCD_GetXSize+0x24>)
 80038d2:	2134      	movs	r1, #52	; 0x34
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3360      	adds	r3, #96	; 0x60
 80038dc:	681b      	ldr	r3, [r3, #0]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000470 	.word	0x20000470
 80038ec:	20008da4 	.word	0x20008da4

080038f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <BSP_LCD_GetYSize+0x20>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a06      	ldr	r2, [pc, #24]	; (8003914 <BSP_LCD_GetYSize+0x24>)
 80038fa:	2134      	movs	r1, #52	; 0x34
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3364      	adds	r3, #100	; 0x64
 8003904:	681b      	ldr	r3, [r3, #0]
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	20000470 	.word	0x20000470
 8003914:	20008da4 	.word	0x20008da4

08003918 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003918:	b580      	push	{r7, lr}
 800391a:	b090      	sub	sp, #64	; 0x40
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003928:	f7ff ffce 	bl	80038c8 <BSP_LCD_GetXSize>
 800392c:	4603      	mov	r3, r0
 800392e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003934:	f7ff ffdc 	bl	80038f0 <BSP_LCD_GetYSize>
 8003938:	4603      	mov	r3, r0
 800393a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003944:	23ff      	movs	r3, #255	; 0xff
 8003946:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800395e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003964:	2307      	movs	r3, #7
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003968:	f7ff ffae 	bl	80038c8 <BSP_LCD_GetXSize>
 800396c:	4603      	mov	r3, r0
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003970:	f7ff ffbe 	bl	80038f0 <BSP_LCD_GetYSize>
 8003974:	4603      	mov	r3, r0
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	4619      	mov	r1, r3
 8003980:	4812      	ldr	r0, [pc, #72]	; (80039cc <BSP_LCD_LayerDefaultInit+0xb4>)
 8003982:	f005 f8f7 	bl	8008b74 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	4911      	ldr	r1, [pc, #68]	; (80039d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3304      	adds	r3, #4
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	490c      	ldr	r1, [pc, #48]	; (80039d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3308      	adds	r3, #8
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80039ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	4907      	ldr	r1, [pc, #28]	; (80039d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	bf00      	nop
 80039c6:	3740      	adds	r7, #64	; 0x40
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20008da4 	.word	0x20008da4
 80039d0:	20000474 	.word	0x20000474
 80039d4:	2000002c 	.word	0x2000002c

080039d8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <BSP_LCD_SelectLayer+0x1c>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]
} 
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000470 	.word	0x20000470

080039f8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <BSP_LCD_SetTextColor+0x28>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4907      	ldr	r1, [pc, #28]	; (8003a24 <BSP_LCD_SetTextColor+0x2c>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20000470 	.word	0x20000470
 8003a24:	20000474 	.word	0x20000474

08003a28 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <BSP_LCD_SetBackColor+0x2c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4908      	ldr	r1, [pc, #32]	; (8003a58 <BSP_LCD_SetBackColor+0x30>)
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3304      	adds	r3, #4
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000470 	.word	0x20000470
 8003a58:	20000474 	.word	0x20000474

08003a5c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <BSP_LCD_SetFont+0x2c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4908      	ldr	r1, [pc, #32]	; (8003a8c <BSP_LCD_SetFont+0x30>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3308      	adds	r3, #8
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000470 	.word	0x20000470
 8003a8c:	20000474 	.word	0x20000474

08003a90 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003a94:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <BSP_LCD_GetFont+0x24>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <BSP_LCD_GetFont+0x28>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000470 	.word	0x20000470
 8003ab8:	20000474 	.word	0x20000474

08003abc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <BSP_LCD_Clear+0x48>)
 8003ac6:	681c      	ldr	r4, [r3, #0]
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <BSP_LCD_Clear+0x48>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <BSP_LCD_Clear+0x4c>)
 8003ace:	2134      	movs	r1, #52	; 0x34
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	335c      	adds	r3, #92	; 0x5c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461e      	mov	r6, r3
 8003adc:	f7ff fef4 	bl	80038c8 <BSP_LCD_GetXSize>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	f7ff ff05 	bl	80038f0 <BSP_LCD_GetYSize>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	2300      	movs	r3, #0
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	462a      	mov	r2, r5
 8003af4:	4631      	mov	r1, r6
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 fe54 	bl	80047a4 <LL_FillBuffer>
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b04:	20000470 	.word	0x20000470
 8003b08:	20008da4 	.word	0x20008da4

08003b0c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
 8003b16:	460b      	mov	r3, r1
 8003b18:	80bb      	strh	r3, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <BSP_LCD_DisplayChar+0x80>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	491b      	ldr	r1, [pc, #108]	; (8003b90 <BSP_LCD_DisplayChar+0x84>)
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3308      	adds	r3, #8
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <BSP_LCD_DisplayChar+0x80>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4c14      	ldr	r4, [pc, #80]	; (8003b90 <BSP_LCD_DisplayChar+0x84>)
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4423      	add	r3, r4
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b50:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <BSP_LCD_DisplayChar+0x80>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <BSP_LCD_DisplayChar+0x84>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4423      	add	r3, r4
 8003b64:	3308      	adds	r3, #8
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	889b      	ldrh	r3, [r3, #4]
 8003b6a:	3307      	adds	r3, #7
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da00      	bge.n	8003b72 <BSP_LCD_DisplayChar+0x66>
 8003b70:	3307      	adds	r3, #7
 8003b72:	10db      	asrs	r3, r3, #3
 8003b74:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b78:	18ca      	adds	r2, r1, r3
 8003b7a:	88b9      	ldrh	r1, [r7, #4]
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fd58 	bl	8004634 <DrawChar>
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}
 8003b8c:	20000470 	.word	0x20000470
 8003b90:	20000474 	.word	0x20000474

08003b94 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60ba      	str	r2, [r7, #8]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	81fb      	strh	r3, [r7, #14]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	81bb      	strh	r3, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003baa:	2301      	movs	r3, #1
 8003bac:	83fb      	strh	r3, [r7, #30]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003bbe:	e002      	b.n	8003bc6 <BSP_LCD_DisplayStringAt+0x32>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	617a      	str	r2, [r7, #20]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f6      	bne.n	8003bc0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003bd2:	f7ff fe79 	bl	80038c8 <BSP_LCD_GetXSize>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <BSP_LCD_DisplayStringAt+0x188>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4850      	ldr	r0, [pc, #320]	; (8003d20 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4403      	add	r3, r0
 8003be8:	3308      	adds	r3, #8
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	889b      	ldrh	r3, [r3, #4]
 8003bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d01c      	beq.n	8003c34 <BSP_LCD_DisplayStringAt+0xa0>
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	dc33      	bgt.n	8003c66 <BSP_LCD_DisplayStringAt+0xd2>
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d002      	beq.n	8003c08 <BSP_LCD_DisplayStringAt+0x74>
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d019      	beq.n	8003c3a <BSP_LCD_DisplayStringAt+0xa6>
 8003c06:	e02e      	b.n	8003c66 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	1ad1      	subs	r1, r2, r3
 8003c0e:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <BSP_LCD_DisplayStringAt+0x188>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4843      	ldr	r0, [pc, #268]	; (8003d20 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4403      	add	r3, r0
 8003c1e:	3308      	adds	r3, #8
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	889b      	ldrh	r3, [r3, #4]
 8003c24:	fb03 f301 	mul.w	r3, r3, r1
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	4413      	add	r3, r2
 8003c30:	83fb      	strh	r3, [r7, #30]
      break;
 8003c32:	e01b      	b.n	8003c6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003c34:	89fb      	ldrh	r3, [r7, #14]
 8003c36:	83fb      	strh	r3, [r7, #30]
      break;
 8003c38:	e018      	b.n	8003c6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b299      	uxth	r1, r3
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <BSP_LCD_DisplayStringAt+0x188>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4836      	ldr	r0, [pc, #216]	; (8003d20 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4403      	add	r3, r0
 8003c52:	3308      	adds	r3, #8
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	889b      	ldrh	r3, [r3, #4]
 8003c58:	fb11 f303 	smulbb	r3, r1, r3
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	89fb      	ldrh	r3, [r7, #14]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	83fb      	strh	r3, [r7, #30]
      break;
 8003c64:	e002      	b.n	8003c6c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003c66:	89fb      	ldrh	r3, [r7, #14]
 8003c68:	83fb      	strh	r3, [r7, #30]
      break;
 8003c6a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003c6c:	8bfb      	ldrh	r3, [r7, #30]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <BSP_LCD_DisplayStringAt+0xe6>
 8003c72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da1d      	bge.n	8003cb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c7e:	e01a      	b.n	8003cb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	89b9      	ldrh	r1, [r7, #12]
 8003c86:	8bfb      	ldrh	r3, [r7, #30]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff3f 	bl	8003b0c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <BSP_LCD_DisplayStringAt+0x188>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4923      	ldr	r1, [pc, #140]	; (8003d20 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	889a      	ldrh	r2, [r3, #4]
 8003ca4:	8bfb      	ldrh	r3, [r7, #30]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
    i++;
 8003cb0:	8bbb      	ldrh	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2dc      	uxtb	r4, r3
 8003cc4:	f7ff fe00 	bl	80038c8 <BSP_LCD_GetXSize>
 8003cc8:	8bb9      	ldrh	r1, [r7, #28]
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <BSP_LCD_DisplayStringAt+0x188>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4d14      	ldr	r5, [pc, #80]	; (8003d20 <BSP_LCD_DisplayStringAt+0x18c>)
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	442b      	add	r3, r5
 8003cda:	3308      	adds	r3, #8
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	889b      	ldrh	r3, [r3, #4]
 8003ce0:	fb03 f301 	mul.w	r3, r3, r1
 8003ce4:	1ac3      	subs	r3, r0, r3
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <BSP_LCD_DisplayStringAt+0x188>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	480c      	ldr	r0, [pc, #48]	; (8003d20 <BSP_LCD_DisplayStringAt+0x18c>)
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	889b      	ldrh	r3, [r3, #4]
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	bf2c      	ite	cs
 8003d02:	2301      	movcs	r3, #1
 8003d04:	2300      	movcc	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	4023      	ands	r3, r4
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1b7      	bne.n	8003c80 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bdb0      	pop	{r4, r5, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000470 	.word	0x20000470
 8003d20:	20000474 	.word	0x20000474

08003d24 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003d30:	f7ff feae 	bl	8003a90 <BSP_LCD_GetFont>
 8003d34:	4603      	mov	r3, r0
 8003d36:	88db      	ldrh	r3, [r3, #6]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	fb12 f303 	smulbb	r3, r2, r3
 8003d3e:	b299      	uxth	r1, r3
 8003d40:	2303      	movs	r3, #3
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	2000      	movs	r0, #0
 8003d46:	f7ff ff25 	bl	8003b94 <BSP_LCD_DisplayStringAt>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	80fb      	strh	r3, [r7, #6]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	80bb      	strh	r3, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <BSP_LCD_DrawHLine+0xb0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <BSP_LCD_DrawHLine+0xb4>)
 8003d70:	2134      	movs	r1, #52	; 0x34
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3348      	adds	r3, #72	; 0x48
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d114      	bne.n	8003daa <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003d80:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <BSP_LCD_DrawHLine+0xb0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <BSP_LCD_DrawHLine+0xb4>)
 8003d86:	2134      	movs	r1, #52	; 0x34
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	335c      	adds	r3, #92	; 0x5c
 8003d90:	681c      	ldr	r4, [r3, #0]
 8003d92:	f7ff fd99 	bl	80038c8 <BSP_LCD_GetXSize>
 8003d96:	4602      	mov	r2, r0
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	fb03 f202 	mul.w	r2, r3, r2
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	4413      	add	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4423      	add	r3, r4
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e013      	b.n	8003dd2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <BSP_LCD_DrawHLine+0xb0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <BSP_LCD_DrawHLine+0xb4>)
 8003db0:	2134      	movs	r1, #52	; 0x34
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	335c      	adds	r3, #92	; 0x5c
 8003dba:	681c      	ldr	r4, [r3, #0]
 8003dbc:	f7ff fd84 	bl	80038c8 <BSP_LCD_GetXSize>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	88bb      	ldrh	r3, [r7, #4]
 8003dc4:	fb03 f202 	mul.w	r2, r3, r2
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4423      	add	r3, r4
 8003dd0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <BSP_LCD_DrawHLine+0xb0>)
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	887c      	ldrh	r4, [r7, #2]
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <BSP_LCD_DrawHLine+0xb0>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4d0b      	ldr	r5, [pc, #44]	; (8003e0c <BSP_LCD_DrawHLine+0xb8>)
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	442b      	add	r3, r5
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2301      	movs	r3, #1
 8003df4:	4622      	mov	r2, r4
 8003df6:	f000 fcd5 	bl	80047a4 <LL_FillBuffer>
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000470 	.word	0x20000470
 8003e08:	20008da4 	.word	0x20008da4
 8003e0c:	20000474 	.word	0x20000474

08003e10 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	80fb      	strh	r3, [r7, #6]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	80bb      	strh	r3, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	f1c3 0303 	rsb	r3, r3, #3
 8003e2a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003e34:	e0c7      	b.n	8003fc6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	b298      	uxth	r0, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	88ba      	ldrh	r2, [r7, #4]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	b299      	uxth	r1, r3
 8003e4a:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4c64      	ldr	r4, [pc, #400]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4423      	add	r3, r4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f000 f8c1 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	b298      	uxth	r0, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	88ba      	ldrh	r2, [r7, #4]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	b299      	uxth	r1, r3
 8003e76:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4c59      	ldr	r4, [pc, #356]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4423      	add	r3, r4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f000 f8ab 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	4413      	add	r3, r2
 8003e96:	b298      	uxth	r0, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	88ba      	ldrh	r2, [r7, #4]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	b299      	uxth	r1, r3
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4c4e      	ldr	r4, [pc, #312]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4423      	add	r3, r4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f000 f895 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	b298      	uxth	r0, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	88ba      	ldrh	r2, [r7, #4]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	b299      	uxth	r1, r3
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4c43      	ldr	r4, [pc, #268]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4423      	add	r3, r4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f000 f87f 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	4413      	add	r3, r2
 8003eee:	b298      	uxth	r0, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	88bb      	ldrh	r3, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b299      	uxth	r1, r3
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4c38      	ldr	r4, [pc, #224]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4423      	add	r3, r4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f000 f869 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	b298      	uxth	r0, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	88bb      	ldrh	r3, [r7, #4]
 8003f22:	4413      	add	r3, r2
 8003f24:	b299      	uxth	r1, r3
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4c2d      	ldr	r4, [pc, #180]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4423      	add	r3, r4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f853 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	4413      	add	r3, r2
 8003f46:	b298      	uxth	r0, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	88bb      	ldrh	r3, [r7, #4]
 8003f4e:	4413      	add	r3, r2
 8003f50:	b299      	uxth	r1, r3
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4c22      	ldr	r4, [pc, #136]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4423      	add	r3, r4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f000 f83d 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	b298      	uxth	r0, r3
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	88bb      	ldrh	r3, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b299      	uxth	r1, r3
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <BSP_LCD_DrawCircle+0x1cc>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4c17      	ldr	r4, [pc, #92]	; (8003fe0 <BSP_LCD_DrawCircle+0x1d0>)
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4423      	add	r3, r4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 f827 	bl	8003fe4 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da06      	bge.n	8003faa <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3306      	adds	r3, #6
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e00a      	b.n	8003fc0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	330a      	adds	r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]
      current_y--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	f67f af33 	bls.w	8003e36 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000470 	.word	0x20000470
 8003fe0:	20000474 	.word	0x20000474

08003fe4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003fe4:	b5b0      	push	{r4, r5, r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	603a      	str	r2, [r7, #0]
 8003fee:	80fb      	strh	r3, [r7, #6]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <BSP_LCD_DrawPixel+0x88>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <BSP_LCD_DrawPixel+0x8c>)
 8003ffa:	2134      	movs	r1, #52	; 0x34
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	3348      	adds	r3, #72	; 0x48
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d116      	bne.n	8004038 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <BSP_LCD_DrawPixel+0x88>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a18      	ldr	r2, [pc, #96]	; (8004070 <BSP_LCD_DrawPixel+0x8c>)
 8004010:	2134      	movs	r1, #52	; 0x34
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	335c      	adds	r3, #92	; 0x5c
 800401a:	681c      	ldr	r4, [r3, #0]
 800401c:	88bd      	ldrh	r5, [r7, #4]
 800401e:	f7ff fc53 	bl	80038c8 <BSP_LCD_GetXSize>
 8004022:	4603      	mov	r3, r0
 8004024:	fb03 f205 	mul.w	r2, r3, r5
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	4413      	add	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4423      	add	r3, r4
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b292      	uxth	r2, r2
 8004034:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004036:	e015      	b.n	8004064 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <BSP_LCD_DrawPixel+0x88>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <BSP_LCD_DrawPixel+0x8c>)
 800403e:	2134      	movs	r1, #52	; 0x34
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	335c      	adds	r3, #92	; 0x5c
 8004048:	681c      	ldr	r4, [r3, #0]
 800404a:	88bd      	ldrh	r5, [r7, #4]
 800404c:	f7ff fc3c 	bl	80038c8 <BSP_LCD_GetXSize>
 8004050:	4603      	mov	r3, r0
 8004052:	fb03 f205 	mul.w	r2, r3, r5
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4423      	add	r3, r4
 800405e:	461a      	mov	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bdb0      	pop	{r4, r5, r7, pc}
 800406c:	20000470 	.word	0x20000470
 8004070:	20008da4 	.word	0x20008da4

08004074 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b08b      	sub	sp, #44	; 0x2c
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	330a      	adds	r3, #10
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	330b      	adds	r3, #11
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	330c      	adds	r3, #12
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	441a      	add	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	330d      	adds	r3, #13
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	4413      	add	r3, r2
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3312      	adds	r3, #18
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3313      	adds	r3, #19
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3314      	adds	r3, #20
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3315      	adds	r3, #21
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	4413      	add	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3316      	adds	r3, #22
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3317      	adds	r3, #23
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3318      	adds	r3, #24
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3319      	adds	r3, #25
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	331c      	adds	r3, #28
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	331d      	adds	r3, #29
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	4413      	add	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <BSP_LCD_DrawBitmap+0x15c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <BSP_LCD_DrawBitmap+0x160>)
 8004126:	2134      	movs	r1, #52	; 0x34
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	335c      	adds	r3, #92	; 0x5c
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	f7ff fbc9 	bl	80038c8 <BSP_LCD_GetXSize>
 8004136:	4602      	mov	r2, r0
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	fb03 f202 	mul.w	r2, r3, r2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4423      	add	r3, r4
 8004146:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	3b20      	subs	r3, #32
 800414c:	2b07      	cmp	r3, #7
 800414e:	d802      	bhi.n	8004156 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e008      	b.n	8004168 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3b10      	subs	r3, #16
 800415a:	2b07      	cmp	r3, #7
 800415c:	d802      	bhi.n	8004164 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800415e:	2302      	movs	r3, #2
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e001      	b.n	8004168 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8004164:	2301      	movs	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3b01      	subs	r3, #1
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	08d2      	lsrs	r2, r2, #3
 8004176:	fb02 f203 	mul.w	r2, r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	4413      	add	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
 8004188:	e018      	b.n	80041bc <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fb53 	bl	800483c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8004196:	f7ff fb97 	bl	80038c8 <BSP_LCD_GetXSize>
 800419a:	4603      	mov	r3, r0
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	6a3a      	ldr	r2, [r7, #32]
 80041a0:	4413      	add	r3, r2
 80041a2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	08db      	lsrs	r3, r3, #3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	425b      	negs	r3, r3
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	3301      	adds	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d3e2      	bcc.n	800418a <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	372c      	adds	r7, #44	; 0x2c
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd90      	pop	{r4, r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000470 	.word	0x20000470
 80041d4:	20008da4 	.word	0x20008da4

080041d8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80041d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af02      	add	r7, sp, #8
 80041e0:	4604      	mov	r4, r0
 80041e2:	4608      	mov	r0, r1
 80041e4:	4611      	mov	r1, r2
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	80fb      	strh	r3, [r7, #6]
 80041ec:	4603      	mov	r3, r0
 80041ee:	80bb      	strh	r3, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
 80041f4:	4613      	mov	r3, r2
 80041f6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <BSP_LCD_FillRect+0xe8>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4930      	ldr	r1, [pc, #192]	; (80042c4 <BSP_LCD_FillRect+0xec>)
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fbf2 	bl	80039f8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004214:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <BSP_LCD_FillRect+0xe8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <BSP_LCD_FillRect+0xf0>)
 800421a:	2134      	movs	r1, #52	; 0x34
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	4413      	add	r3, r2
 8004222:	3348      	adds	r3, #72	; 0x48
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d114      	bne.n	8004254 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <BSP_LCD_FillRect+0xe8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <BSP_LCD_FillRect+0xf0>)
 8004230:	2134      	movs	r1, #52	; 0x34
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	335c      	adds	r3, #92	; 0x5c
 800423a:	681c      	ldr	r4, [r3, #0]
 800423c:	f7ff fb44 	bl	80038c8 <BSP_LCD_GetXSize>
 8004240:	4602      	mov	r2, r0
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	fb03 f202 	mul.w	r2, r3, r2
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	4413      	add	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4423      	add	r3, r4
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e013      	b.n	800427c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <BSP_LCD_FillRect+0xe8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <BSP_LCD_FillRect+0xf0>)
 800425a:	2134      	movs	r1, #52	; 0x34
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	335c      	adds	r3, #92	; 0x5c
 8004264:	681c      	ldr	r4, [r3, #0]
 8004266:	f7ff fb2f 	bl	80038c8 <BSP_LCD_GetXSize>
 800426a:	4602      	mov	r2, r0
 800426c:	88bb      	ldrh	r3, [r7, #4]
 800426e:	fb03 f202 	mul.w	r2, r3, r2
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4423      	add	r3, r4
 800427a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <BSP_LCD_FillRect+0xe8>)
 800427e:	681c      	ldr	r4, [r3, #0]
 8004280:	68fd      	ldr	r5, [r7, #12]
 8004282:	887e      	ldrh	r6, [r7, #2]
 8004284:	f8b7 8000 	ldrh.w	r8, [r7]
 8004288:	f7ff fb1e 	bl	80038c8 <BSP_LCD_GetXSize>
 800428c:	4602      	mov	r2, r0
 800428e:	887b      	ldrh	r3, [r7, #2]
 8004290:	1ad1      	subs	r1, r2, r3
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <BSP_LCD_FillRect+0xe8>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	480b      	ldr	r0, [pc, #44]	; (80042c4 <BSP_LCD_FillRect+0xec>)
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4403      	add	r3, r0
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	9100      	str	r1, [sp, #0]
 80042a8:	4643      	mov	r3, r8
 80042aa:	4632      	mov	r2, r6
 80042ac:	4629      	mov	r1, r5
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 fa78 	bl	80047a4 <LL_FillBuffer>
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042be:	bf00      	nop
 80042c0:	20000470 	.word	0x20000470
 80042c4:	20000474 	.word	0x20000474
 80042c8:	20008da4 	.word	0x20008da4

080042cc <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	80fb      	strh	r3, [r7, #6]
 80042d6:	460b      	mov	r3, r1
 80042d8:	80bb      	strh	r3, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	f1c3 0303 	rsb	r3, r3, #3
 80042e6:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80042ec:	887b      	ldrh	r3, [r7, #2]
 80042ee:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80042f0:	4b44      	ldr	r3, [pc, #272]	; (8004404 <BSP_LCD_FillCircle+0x138>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4944      	ldr	r1, [pc, #272]	; (8004408 <BSP_LCD_FillCircle+0x13c>)
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fb78 	bl	80039f8 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004308:	e061      	b.n	80043ce <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d021      	beq.n	8004354 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	b29b      	uxth	r3, r3
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	b298      	uxth	r0, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	b29a      	uxth	r2, r3
 800431e:	88bb      	ldrh	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	b299      	uxth	r1, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	b29b      	uxth	r3, r3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	f7ff fd11 	bl	8003d54 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	b29b      	uxth	r3, r3
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	b298      	uxth	r0, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	b29b      	uxth	r3, r3
 8004340:	88ba      	ldrh	r2, [r7, #4]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	b299      	uxth	r1, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	b29b      	uxth	r3, r3
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	f7ff fd00 	bl	8003d54 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d021      	beq.n	800439e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	b29b      	uxth	r3, r3
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	b298      	uxth	r0, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	b29b      	uxth	r3, r3
 8004368:	88ba      	ldrh	r2, [r7, #4]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	b299      	uxth	r1, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	b29b      	uxth	r3, r3
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	f7ff fcec 	bl	8003d54 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	b29b      	uxth	r3, r3
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	b298      	uxth	r0, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	b29a      	uxth	r2, r3
 800438a:	88bb      	ldrh	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	b299      	uxth	r1, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	b29b      	uxth	r3, r3
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	f7ff fcdb 	bl	8003d54 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da06      	bge.n	80043b2 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	009a      	lsls	r2, r3, #2
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	3306      	adds	r3, #6
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e00a      	b.n	80043c8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	009a      	lsls	r2, r3, #2
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4413      	add	r3, r2
 80043be:	330a      	adds	r3, #10
 80043c0:	617b      	str	r3, [r7, #20]
      current_y--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3301      	adds	r3, #1
 80043cc:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d999      	bls.n	800430a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <BSP_LCD_FillCircle+0x138>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	490b      	ldr	r1, [pc, #44]	; (8004408 <BSP_LCD_FillCircle+0x13c>)
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fb05 	bl	80039f8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	88b9      	ldrh	r1, [r7, #4]
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fd0b 	bl	8003e10 <BSP_LCD_DrawCircle>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000470 	.word	0x20000470
 8004408:	20000474 	.word	0x20000474

0800440c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <BSP_LCD_DisplayOn+0x30>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <BSP_LCD_DisplayOn+0x30>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004420:	2201      	movs	r2, #1
 8004422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004426:	4806      	ldr	r0, [pc, #24]	; (8004440 <BSP_LCD_DisplayOn+0x34>)
 8004428:	f003 fb8c 	bl	8007b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800442c:	2201      	movs	r2, #1
 800442e:	2108      	movs	r1, #8
 8004430:	4804      	ldr	r0, [pc, #16]	; (8004444 <BSP_LCD_DisplayOn+0x38>)
 8004432:	f003 fb87 	bl	8007b44 <HAL_GPIO_WritePin>
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20008da4 	.word	0x20008da4
 8004440:	40022000 	.word	0x40022000
 8004444:	40022800 	.word	0x40022800

08004448 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b090      	sub	sp, #64	; 0x40
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004452:	4b64      	ldr	r3, [pc, #400]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	4a63      	ldr	r2, [pc, #396]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800445c:	6453      	str	r3, [r2, #68]	; 0x44
 800445e:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800446a:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a5d      	ldr	r2, [pc, #372]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004470:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004482:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a57      	ldr	r2, [pc, #348]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800449a:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a51      	ldr	r2, [pc, #324]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044b2:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a4b      	ldr	r2, [pc, #300]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
 80044be:	4b49      	ldr	r3, [pc, #292]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80044ca:	4b46      	ldr	r3, [pc, #280]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	4a45      	ldr	r2, [pc, #276]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d4:	6313      	str	r3, [r2, #48]	; 0x30
 80044d6:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80044e2:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a3f      	ldr	r2, [pc, #252]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80044fa:	4b3a      	ldr	r3, [pc, #232]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	4a39      	ldr	r2, [pc, #228]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	6313      	str	r3, [r2, #48]	; 0x30
 8004506:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	4a33      	ldr	r2, [pc, #204]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800451c:	6313      	str	r3, [r2, #48]	; 0x30
 800451e:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <BSP_LCD_MspInit+0x19c>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800452a:	2310      	movs	r3, #16
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800452e:	2302      	movs	r3, #2
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004536:	2302      	movs	r3, #2
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800453a:	230e      	movs	r3, #14
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800453e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004542:	4619      	mov	r1, r3
 8004544:	4828      	ldr	r0, [pc, #160]	; (80045e8 <BSP_LCD_MspInit+0x1a0>)
 8004546:	f003 f845 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800454a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004554:	2309      	movs	r3, #9
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800455c:	4619      	mov	r1, r3
 800455e:	4823      	ldr	r0, [pc, #140]	; (80045ec <BSP_LCD_MspInit+0x1a4>)
 8004560:	f003 f838 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004564:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800456a:	2302      	movs	r3, #2
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800456e:	230e      	movs	r3, #14
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	481d      	ldr	r0, [pc, #116]	; (80045f0 <BSP_LCD_MspInit+0x1a8>)
 800457a:	f003 f82b 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800457e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004584:	2302      	movs	r3, #2
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004588:	230e      	movs	r3, #14
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800458c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004590:	4619      	mov	r1, r3
 8004592:	4818      	ldr	r0, [pc, #96]	; (80045f4 <BSP_LCD_MspInit+0x1ac>)
 8004594:	f003 f81e 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004598:	23f7      	movs	r3, #247	; 0xf7
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80045a0:	230e      	movs	r3, #14
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80045a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045a8:	4619      	mov	r1, r3
 80045aa:	4813      	ldr	r0, [pc, #76]	; (80045f8 <BSP_LCD_MspInit+0x1b0>)
 80045ac:	f003 f812 	bl	80075d4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80045b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80045b6:	2301      	movs	r3, #1
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80045ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045be:	4619      	mov	r1, r3
 80045c0:	480b      	ldr	r0, [pc, #44]	; (80045f0 <BSP_LCD_MspInit+0x1a8>)
 80045c2:	f003 f807 	bl	80075d4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80045c6:	2308      	movs	r3, #8
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80045ca:	2301      	movs	r3, #1
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80045ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d2:	4619      	mov	r1, r3
 80045d4:	4808      	ldr	r0, [pc, #32]	; (80045f8 <BSP_LCD_MspInit+0x1b0>)
 80045d6:	f002 fffd 	bl	80075d4 <HAL_GPIO_Init>
}
 80045da:	bf00      	nop
 80045dc:	3740      	adds	r7, #64	; 0x40
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40021800 	.word	0x40021800
 80045f0:	40022000 	.word	0x40022000
 80045f4:	40022400 	.word	0x40022400
 80045f8:	40022800 	.word	0x40022800

080045fc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <BSP_LCD_ClockConfig+0x34>)
 8004608:	2208      	movs	r2, #8
 800460a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <BSP_LCD_ClockConfig+0x34>)
 800460e:	22c0      	movs	r2, #192	; 0xc0
 8004610:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <BSP_LCD_ClockConfig+0x34>)
 8004614:	2205      	movs	r2, #5
 8004616:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <BSP_LCD_ClockConfig+0x34>)
 800461a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004620:	4803      	ldr	r0, [pc, #12]	; (8004630 <BSP_LCD_ClockConfig+0x34>)
 8004622:	f005 f999 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000048c 	.word	0x2000048c

08004634 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	603a      	str	r2, [r7, #0]
 800463e:	80fb      	strh	r3, [r7, #6]
 8004640:	460b      	mov	r3, r1
 8004642:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <DrawChar+0x168>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4953      	ldr	r1, [pc, #332]	; (80047a0 <DrawChar+0x16c>)
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	3308      	adds	r3, #8
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	88db      	ldrh	r3, [r3, #6]
 8004662:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <DrawChar+0x168>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	494d      	ldr	r1, [pc, #308]	; (80047a0 <DrawChar+0x16c>)
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3308      	adds	r3, #8
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	889b      	ldrh	r3, [r3, #4]
 800467a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800467c:	8a3b      	ldrh	r3, [r7, #16]
 800467e:	3307      	adds	r3, #7
 8004680:	2b00      	cmp	r3, #0
 8004682:	da00      	bge.n	8004686 <DrawChar+0x52>
 8004684:	3307      	adds	r3, #7
 8004686:	10db      	asrs	r3, r3, #3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	b2da      	uxtb	r2, r3
 800468e:	8a3b      	ldrh	r3, [r7, #16]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e076      	b.n	800478a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800469c:	8a3b      	ldrh	r3, [r7, #16]
 800469e:	3307      	adds	r3, #7
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	da00      	bge.n	80046a6 <DrawChar+0x72>
 80046a4:	3307      	adds	r3, #7
 80046a6:	10db      	asrs	r3, r3, #3
 80046a8:	461a      	mov	r2, r3
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fb03 f302 	mul.w	r3, r3, r2
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80046b6:	8a3b      	ldrh	r3, [r7, #16]
 80046b8:	3307      	adds	r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da00      	bge.n	80046c0 <DrawChar+0x8c>
 80046be:	3307      	adds	r3, #7
 80046c0:	10db      	asrs	r3, r3, #3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d002      	beq.n	80046cc <DrawChar+0x98>
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d004      	beq.n	80046d4 <DrawChar+0xa0>
 80046ca:	e00c      	b.n	80046e6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	617b      	str	r3, [r7, #20]
      break;
 80046d2:	e016      	b.n	8004702 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	3201      	adds	r2, #1
 80046de:	7812      	ldrb	r2, [r2, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
      break;
 80046e4:	e00d      	b.n	8004702 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	041a      	lsls	r2, r3, #16
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3301      	adds	r3, #1
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	4313      	orrs	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	3202      	adds	r2, #2
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
      break;
 8004700:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e036      	b.n	8004776 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004708:	8a3a      	ldrh	r2, [r7, #16]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	1ad2      	subs	r2, r2, r3
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	4413      	add	r3, r2
 8004712:	3b01      	subs	r3, #1
 8004714:	2201      	movs	r2, #1
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	461a      	mov	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d012      	beq.n	800474a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	b29a      	uxth	r2, r3
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	4413      	add	r3, r2
 800472c:	b298      	uxth	r0, r3
 800472e:	4b1b      	ldr	r3, [pc, #108]	; (800479c <DrawChar+0x168>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	491b      	ldr	r1, [pc, #108]	; (80047a0 <DrawChar+0x16c>)
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	88bb      	ldrh	r3, [r7, #4]
 8004742:	4619      	mov	r1, r3
 8004744:	f7ff fc4e 	bl	8003fe4 <BSP_LCD_DrawPixel>
 8004748:	e012      	b.n	8004770 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	b29a      	uxth	r2, r3
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	4413      	add	r3, r2
 8004752:	b298      	uxth	r0, r3
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <DrawChar+0x168>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4911      	ldr	r1, [pc, #68]	; (80047a0 <DrawChar+0x16c>)
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	3304      	adds	r3, #4
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	88bb      	ldrh	r3, [r7, #4]
 800476a:	4619      	mov	r1, r3
 800476c:	f7ff fc3a 	bl	8003fe4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	3301      	adds	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	8a3b      	ldrh	r3, [r7, #16]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3c4      	bcc.n	8004708 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800477e:	88bb      	ldrh	r3, [r7, #4]
 8004780:	3301      	adds	r3, #1
 8004782:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3301      	adds	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	8a7b      	ldrh	r3, [r7, #18]
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	429a      	cmp	r2, r3
 8004790:	d384      	bcc.n	800469c <DrawChar+0x68>
  }
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000470 	.word	0x20000470
 80047a0:	20000474 	.word	0x20000474

080047a4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80047b2:	4b1e      	ldr	r3, [pc, #120]	; (800482c <LL_FillBuffer+0x88>)
 80047b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047b8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <LL_FillBuffer+0x8c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <LL_FillBuffer+0x90>)
 80047c0:	2134      	movs	r1, #52	; 0x34
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3348      	adds	r3, #72	; 0x48
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d103      	bne.n	80047d8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80047d0:	4b16      	ldr	r3, [pc, #88]	; (800482c <LL_FillBuffer+0x88>)
 80047d2:	2202      	movs	r2, #2
 80047d4:	609a      	str	r2, [r3, #8]
 80047d6:	e002      	b.n	80047de <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <LL_FillBuffer+0x88>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80047de:	4a13      	ldr	r2, [pc, #76]	; (800482c <LL_FillBuffer+0x88>)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <LL_FillBuffer+0x88>)
 80047e6:	4a14      	ldr	r2, [pc, #80]	; (8004838 <LL_FillBuffer+0x94>)
 80047e8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80047ea:	4810      	ldr	r0, [pc, #64]	; (800482c <LL_FillBuffer+0x88>)
 80047ec:	f002 fb56 	bl	8006e9c <HAL_DMA2D_Init>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d115      	bne.n	8004822 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	480c      	ldr	r0, [pc, #48]	; (800482c <LL_FillBuffer+0x88>)
 80047fa:	f002 fdbd 	bl	8007378 <HAL_DMA2D_ConfigLayer>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10e      	bne.n	8004822 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	4807      	ldr	r0, [pc, #28]	; (800482c <LL_FillBuffer+0x88>)
 8004810:	f002 fb8e 	bl	8006f30 <HAL_DMA2D_Start>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800481a:	210a      	movs	r1, #10
 800481c:	4803      	ldr	r0, [pc, #12]	; (800482c <LL_FillBuffer+0x88>)
 800481e:	f002 fbb2 	bl	8006f86 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000430 	.word	0x20000430
 8004830:	20000470 	.word	0x20000470
 8004834:	20008da4 	.word	0x20008da4
 8004838:	4002b000 	.word	0x4002b000

0800483c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 800484c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004850:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004852:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 800485a:	2200      	movs	r2, #0
 800485c:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004864:	4b15      	ldr	r3, [pc, #84]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 8004866:	22ff      	movs	r2, #255	; 0xff
 8004868:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800486a:	4a14      	ldr	r2, [pc, #80]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004870:	4b12      	ldr	r3, [pc, #72]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 8004872:	2200      	movs	r2, #0
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <LL_ConvertLineToARGB8888+0x84>)
 800487a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800487c:	480f      	ldr	r0, [pc, #60]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 800487e:	f002 fb0d 	bl	8006e9c <HAL_DMA2D_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004888:	2101      	movs	r1, #1
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 800488c:	f002 fd74 	bl	8007378 <HAL_DMA2D_ConfigLayer>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10e      	bne.n	80048b4 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004896:	68f9      	ldr	r1, [r7, #12]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	2301      	movs	r3, #1
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4806      	ldr	r0, [pc, #24]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 80048a2:	f002 fb45 	bl	8006f30 <HAL_DMA2D_Start>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80048ac:	210a      	movs	r1, #10
 80048ae:	4803      	ldr	r0, [pc, #12]	; (80048bc <LL_ConvertLineToARGB8888+0x80>)
 80048b0:	f002 fb69 	bl	8006f86 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000430 	.word	0x20000430
 80048c0:	4002b000 	.word	0x4002b000

080048c4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80048c8:	4b29      	ldr	r3, [pc, #164]	; (8004970 <BSP_SDRAM_Init+0xac>)
 80048ca:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <BSP_SDRAM_Init+0xb0>)
 80048cc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048d0:	2202      	movs	r2, #2
 80048d2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048d6:	2207      	movs	r2, #7
 80048d8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048dc:	2204      	movs	r2, #4
 80048de:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048e2:	2207      	movs	r2, #7
 80048e4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048e8:	2202      	movs	r2, #2
 80048ea:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048ee:	2202      	movs	r2, #2
 80048f0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 80048f4:	2202      	movs	r2, #2
 80048f6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <BSP_SDRAM_Init+0xac>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004906:	2204      	movs	r2, #4
 8004908:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <BSP_SDRAM_Init+0xac>)
 800490c:	2210      	movs	r2, #16
 800490e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004910:	4b17      	ldr	r3, [pc, #92]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004912:	2240      	movs	r2, #64	; 0x40
 8004914:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004916:	4b16      	ldr	r3, [pc, #88]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004920:	2200      	movs	r2, #0
 8004922:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800492a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <BSP_SDRAM_Init+0xac>)
 800492e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800493a:	2100      	movs	r1, #0
 800493c:	480c      	ldr	r0, [pc, #48]	; (8004970 <BSP_SDRAM_Init+0xac>)
 800493e:	f000 f87f 	bl	8004a40 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004942:	490d      	ldr	r1, [pc, #52]	; (8004978 <BSP_SDRAM_Init+0xb4>)
 8004944:	480a      	ldr	r0, [pc, #40]	; (8004970 <BSP_SDRAM_Init+0xac>)
 8004946:	f005 ffcf 	bl	800a8e8 <HAL_SDRAM_Init>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <BSP_SDRAM_Init+0xb8>)
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e002      	b.n	800495e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <BSP_SDRAM_Init+0xb8>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800495e:	f240 6003 	movw	r0, #1539	; 0x603
 8004962:	f000 f80d 	bl	8004980 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004966:	4b05      	ldr	r3, [pc, #20]	; (800497c <BSP_SDRAM_Init+0xb8>)
 8004968:	781b      	ldrb	r3, [r3, #0]
}
 800496a:	4618      	mov	r0, r3
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20008e4c 	.word	0x20008e4c
 8004974:	a0000140 	.word	0xa0000140
 8004978:	20000510 	.word	0x20000510
 800497c:	2000003c 	.word	0x2000003c

08004980 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800498c:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004994:	2210      	movs	r2, #16
 8004996:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800499a:	2201      	movs	r2, #1
 800499c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80049a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049a8:	4923      	ldr	r1, [pc, #140]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049aa:	4824      	ldr	r0, [pc, #144]	; (8004a3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80049ac:	f005 ffd0 	bl	800a950 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80049b0:	2001      	movs	r0, #1
 80049b2:	f001 fadb 	bl	8005f6c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049b8:	2202      	movs	r2, #2
 80049ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049be:	2210      	movs	r2, #16
 80049c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80049c2:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80049ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049d2:	4919      	ldr	r1, [pc, #100]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049d4:	4819      	ldr	r0, [pc, #100]	; (8004a3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80049d6:	f005 ffbb 	bl	800a950 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049dc:	2203      	movs	r2, #3
 80049de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049e2:	2210      	movs	r2, #16
 80049e4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049e8:	2208      	movs	r2, #8
 80049ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80049f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f6:	4910      	ldr	r1, [pc, #64]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80049f8:	4810      	ldr	r0, [pc, #64]	; (8004a3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80049fa:	f005 ffa9 	bl	800a950 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80049fe:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004a02:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a06:	2204      	movs	r2, #4
 8004a08:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a1a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a20:	4905      	ldr	r1, [pc, #20]	; (8004a38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a22:	4806      	ldr	r0, [pc, #24]	; (8004a3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a24:	f005 ff94 	bl	800a950 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4804      	ldr	r0, [pc, #16]	; (8004a3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a2c:	f005 ffc5 	bl	800a9ba <HAL_SDRAM_ProgramRefreshRate>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	2000052c 	.word	0x2000052c
 8004a3c:	20008e4c 	.word	0x20008e4c

08004a40 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b090      	sub	sp, #64	; 0x40
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004a4a:	4b70      	ldr	r3, [pc, #448]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	4a6f      	ldr	r2, [pc, #444]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6393      	str	r3, [r2, #56]	; 0x38
 8004a56:	4b6d      	ldr	r3, [pc, #436]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004a62:	4b6a      	ldr	r3, [pc, #424]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a69      	ldr	r2, [pc, #420]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b67      	ldr	r3, [pc, #412]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a7a:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a63      	ldr	r2, [pc, #396]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	623b      	str	r3, [r7, #32]
 8004a90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a92:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a5d      	ldr	r2, [pc, #372]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aaa:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4a57      	ldr	r2, [pc, #348]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ab0:	f043 0310 	orr.w	r3, r3, #16
 8004ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab6:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ac2:	4b52      	ldr	r3, [pc, #328]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a51      	ldr	r2, [pc, #324]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ac8:	f043 0320 	orr.w	r3, r3, #32
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004af2:	4b46      	ldr	r3, [pc, #280]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	4a45      	ldr	r2, [pc, #276]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afc:	6313      	str	r3, [r2, #48]	; 0x30
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <BSP_SDRAM_MspInit+0x1cc>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004b12:	2302      	movs	r3, #2
 8004b14:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004b16:	230c      	movs	r3, #12
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b22:	4619      	mov	r1, r3
 8004b24:	483a      	ldr	r0, [pc, #232]	; (8004c10 <BSP_SDRAM_MspInit+0x1d0>)
 8004b26:	f002 fd55 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004b2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b34:	4619      	mov	r1, r3
 8004b36:	4837      	ldr	r0, [pc, #220]	; (8004c14 <BSP_SDRAM_MspInit+0x1d4>)
 8004b38:	f002 fd4c 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004b3c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b46:	4619      	mov	r1, r3
 8004b48:	4833      	ldr	r0, [pc, #204]	; (8004c18 <BSP_SDRAM_MspInit+0x1d8>)
 8004b4a:	f002 fd43 	bl	80075d4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004b4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4830      	ldr	r0, [pc, #192]	; (8004c1c <BSP_SDRAM_MspInit+0x1dc>)
 8004b5c:	f002 fd3a 	bl	80075d4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004b60:	f248 1333 	movw	r3, #33075	; 0x8133
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	482c      	ldr	r0, [pc, #176]	; (8004c20 <BSP_SDRAM_MspInit+0x1e0>)
 8004b6e:	f002 fd31 	bl	80075d4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004b72:	2328      	movs	r3, #40	; 0x28
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4829      	ldr	r0, [pc, #164]	; (8004c24 <BSP_SDRAM_MspInit+0x1e4>)
 8004b7e:	f002 fd29 	bl	80075d4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004b8a:	2280      	movs	r2, #128	; 0x80
 8004b8c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004b8e:	4b26      	ldr	r3, [pc, #152]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b94:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b9c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004ba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ba4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004ba8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bac:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bba:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004bd4:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bd6:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <BSP_SDRAM_MspInit+0x1ec>)
 8004bd8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a12      	ldr	r2, [pc, #72]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004be6:	4810      	ldr	r0, [pc, #64]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004be8:	f001 ffb6 	bl	8006b58 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004bec:	480e      	ldr	r0, [pc, #56]	; (8004c28 <BSP_SDRAM_MspInit+0x1e8>)
 8004bee:	f001 ff05 	bl	80069fc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	210f      	movs	r1, #15
 8004bf6:	2038      	movs	r0, #56	; 0x38
 8004bf8:	f001 fdf6 	bl	80067e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004bfc:	2038      	movs	r0, #56	; 0x38
 8004bfe:	f001 fe0f 	bl	8006820 <HAL_NVIC_EnableIRQ>
}
 8004c02:	bf00      	nop
 8004c04:	3740      	adds	r7, #64	; 0x40
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40020800 	.word	0x40020800
 8004c14:	40020c00 	.word	0x40020c00
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40021400 	.word	0x40021400
 8004c20:	40021800 	.word	0x40021800
 8004c24:	40021c00 	.word	0x40021c00
 8004c28:	2000053c 	.word	0x2000053c
 8004c2c:	40026410 	.word	0x40026410

08004c30 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	460a      	mov	r2, r1
 8004c3a:	80fb      	strh	r3, [r7, #6]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <BSP_TS_Init+0x68>)
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <BSP_TS_Init+0x6c>)
 8004c4c:	88bb      	ldrh	r3, [r7, #4]
 8004c4e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <BSP_TS_Init+0x70>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2070      	movs	r0, #112	; 0x70
 8004c56:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <BSP_TS_Init+0x70>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2070      	movs	r0, #112	; 0x70
 8004c5e:	4798      	blx	r3
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b51      	cmp	r3, #81	; 0x51
 8004c64:	d111      	bne.n	8004c8a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <BSP_TS_Init+0x74>)
 8004c68:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <BSP_TS_Init+0x70>)
 8004c6a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <BSP_TS_Init+0x78>)
 8004c6e:	2270      	movs	r2, #112	; 0x70
 8004c70:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <BSP_TS_Init+0x7c>)
 8004c74:	2208      	movs	r2, #8
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <BSP_TS_Init+0x74>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <BSP_TS_Init+0x78>)
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	b292      	uxth	r2, r2
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
 8004c88:	e001      	b.n	8004c8e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200005a0 	.word	0x200005a0
 8004c9c:	200005a2 	.word	0x200005a2
 8004ca0:	20000000 	.word	0x20000000
 8004ca4:	2000059c 	.word	0x2000059c
 8004ca8:	200005a5 	.word	0x200005a5
 8004cac:	200005a4 	.word	0x200005a4

08004cb0 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8004cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cba:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004cc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004cc8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8004cca:	1d3b      	adds	r3, r7, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	480c      	ldr	r0, [pc, #48]	; (8004d00 <BSP_TS_ITConfig+0x50>)
 8004cd0:	f002 fc80 	bl	80075d4 <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	210f      	movs	r1, #15
 8004cd8:	2028      	movs	r0, #40	; 0x28
 8004cda:	f001 fd85 	bl	80067e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8004cde:	2028      	movs	r0, #40	; 0x28
 8004ce0:	f001 fd9e 	bl	8006820 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <BSP_TS_ITConfig+0x54>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <BSP_TS_ITConfig+0x58>)
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	b292      	uxth	r2, r2
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4798      	blx	r3

  return TS_OK;  
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40022000 	.word	0x40022000
 8004d04:	2000059c 	.word	0x2000059c
 8004d08:	200005a5 	.word	0x200005a5

08004d0c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b097      	sub	sp, #92	; 0x5c
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004d26:	4b97      	ldr	r3, [pc, #604]	; (8004f84 <BSP_TS_GetState+0x278>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	4a96      	ldr	r2, [pc, #600]	; (8004f88 <BSP_TS_GetState+0x27c>)
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	b292      	uxth	r2, r2
 8004d32:	4610      	mov	r0, r2
 8004d34:	4798      	blx	r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 81a8 	beq.w	8005098 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d4c:	e197      	b.n	800507e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004d4e:	4b8d      	ldr	r3, [pc, #564]	; (8004f84 <BSP_TS_GetState+0x278>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	4a8c      	ldr	r2, [pc, #560]	; (8004f88 <BSP_TS_GetState+0x27c>)
 8004d56:	7812      	ldrb	r2, [r2, #0]
 8004d58:	b290      	uxth	r0, r2
 8004d5a:	f107 0120 	add.w	r1, r7, #32
 8004d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d60:	0052      	lsls	r2, r2, #1
 8004d62:	188c      	adds	r4, r1, r2
 8004d64:	f107 0114 	add.w	r1, r7, #20
 8004d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6a:	0052      	lsls	r2, r2, #1
 8004d6c:	440a      	add	r2, r1
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004d72:	4b86      	ldr	r3, [pc, #536]	; (8004f8c <BSP_TS_GetState+0x280>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d11b      	bne.n	8004db2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d82:	4413      	add	r3, r2
 8004d84:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004d90:	440b      	add	r3, r1
 8004d92:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d9e:	4413      	add	r3, r2
 8004da0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004dac:	440b      	add	r3, r1
 8004dae:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004db2:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <BSP_TS_GetState+0x280>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d010      	beq.n	8004de0 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004dcc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004dda:	440b      	add	r3, r1
 8004ddc:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004de0:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <BSP_TS_GetState+0x280>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004df4:	4413      	add	r3, r2
 8004df6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004dfa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e08:	440b      	add	r3, r1
 8004e0a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004e0e:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <BSP_TS_GetState+0x280>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01b      	beq.n	8004e52 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8004e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e22:	4413      	add	r3, r2
 8004e24:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e30:	440b      	add	r3, r1
 8004e32:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e3e:	4413      	add	r3, r2
 8004e40:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004e60:	4619      	mov	r1, r3
 8004e62:	4a4b      	ldr	r2, [pc, #300]	; (8004f90 <BSP_TS_GetState+0x284>)
 8004e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	d90e      	bls.n	8004e8c <BSP_TS_GetState+0x180>
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e76:	4413      	add	r3, r2
 8004e78:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004e7c:	4944      	ldr	r1, [pc, #272]	; (8004f90 <BSP_TS_GetState+0x284>)
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	e00d      	b.n	8004ea8 <BSP_TS_GetState+0x19c>
 8004e8c:	4a40      	ldr	r2, [pc, #256]	; (8004f90 <BSP_TS_GetState+0x284>)
 8004e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4a35      	ldr	r2, [pc, #212]	; (8004f94 <BSP_TS_GetState+0x288>)
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	d90e      	bls.n	8004ee6 <BSP_TS_GetState+0x1da>
 8004ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004ed6:	492f      	ldr	r1, [pc, #188]	; (8004f94 <BSP_TS_GetState+0x288>)
 8004ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	e00d      	b.n	8004f02 <BSP_TS_GetState+0x1f6>
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <BSP_TS_GetState+0x288>)
 8004ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004ef8:	440b      	add	r3, r1
 8004efa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004f06:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004f0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f0e:	4413      	add	r3, r2
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	dd17      	ble.n	8004f44 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f22:	4619      	mov	r1, r3
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <BSP_TS_GetState+0x284>)
 8004f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f34:	4413      	add	r3, r2
 8004f36:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <BSP_TS_GetState+0x288>)
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <BSP_TS_GetState+0x27c>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b70      	cmp	r3, #112	; 0x70
 8004f4a:	d125      	bne.n	8004f98 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f54:	4413      	add	r3, r2
 8004f56:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	460a      	mov	r2, r1
 8004f64:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f6e:	4413      	add	r3, r2
 8004f70:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f78:	3304      	adds	r3, #4
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	460a      	mov	r2, r1
 8004f80:	809a      	strh	r2, [r3, #4]
 8004f82:	e02c      	b.n	8004fde <BSP_TS_GetState+0x2d2>
 8004f84:	2000059c 	.word	0x2000059c
 8004f88:	200005a5 	.word	0x200005a5
 8004f8c:	200005a4 	.word	0x200005a4
 8004f90:	200005a8 	.word	0x200005a8
 8004f94:	200005bc 	.word	0x200005bc
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004f98:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <BSP_TS_GetState+0x398>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4a42      	ldr	r2, [pc, #264]	; (80050a8 <BSP_TS_GetState+0x39c>)
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa6:	fb03 f301 	mul.w	r3, r3, r1
 8004faa:	0b1b      	lsrs	r3, r3, #12
 8004fac:	b299      	uxth	r1, r3
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4413      	add	r3, r2
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004fba:	4b3c      	ldr	r3, [pc, #240]	; (80050ac <BSP_TS_GetState+0x3a0>)
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <BSP_TS_GetState+0x3a4>)
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc8:	fb03 f301 	mul.w	r3, r3, r1
 8004fcc:	0b1b      	lsrs	r3, r3, #12
 8004fce:	b299      	uxth	r1, r3
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	460a      	mov	r2, r1
 8004fdc:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004fde:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <BSP_TS_GetState+0x3a8>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b298      	uxth	r0, r3
 8004fe4:	f107 010c 	add.w	r1, r7, #12
 8004fe8:	f107 0210 	add.w	r2, r7, #16
 8004fec:	f107 0308 	add.w	r3, r7, #8
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ff6:	f7fb fc6b 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	b2d9      	uxtb	r1, r3
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005002:	4413      	add	r3, r2
 8005004:	3316      	adds	r3, #22
 8005006:	460a      	mov	r2, r1
 8005008:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	b2d9      	uxtb	r1, r3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005012:	4413      	add	r3, r2
 8005014:	3320      	adds	r3, #32
 8005016:	460a      	mov	r2, r1
 8005018:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d827      	bhi.n	8005070 <BSP_TS_GetState+0x364>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <BSP_TS_GetState+0x31c>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005039 	.word	0x08005039
 800502c:	08005047 	.word	0x08005047
 8005030:	08005055 	.word	0x08005055
 8005034:	08005063 	.word	0x08005063
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503c:	4413      	add	r3, r2
 800503e:	331b      	adds	r3, #27
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
          break;
 8005044:	e018      	b.n	8005078 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504a:	4413      	add	r3, r2
 800504c:	331b      	adds	r3, #27
 800504e:	2202      	movs	r2, #2
 8005050:	701a      	strb	r2, [r3, #0]
          break;
 8005052:	e011      	b.n	8005078 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005058:	4413      	add	r3, r2
 800505a:	331b      	adds	r3, #27
 800505c:	2203      	movs	r2, #3
 800505e:	701a      	strb	r2, [r3, #0]
          break;
 8005060:	e00a      	b.n	8005078 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005066:	4413      	add	r3, r2
 8005068:	331b      	adds	r3, #27
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
          break;
 800506e:	e003      	b.n	8005078 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005076:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507a:	3301      	adds	r3, #1
 800507c:	64bb      	str	r3, [r7, #72]	; 0x48
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005086:	4293      	cmp	r3, r2
 8005088:	f4ff ae61 	bcc.w	8004d4e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f813 	bl	80050b8 <BSP_TS_Get_GestureId>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005098:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800509c:	4618      	mov	r0, r3
 800509e:	3754      	adds	r7, #84	; 0x54
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd90      	pop	{r4, r7, pc}
 80050a4:	200005a0 	.word	0x200005a0
 80050a8:	200005a8 	.word	0x200005a8
 80050ac:	200005a2 	.word	0x200005a2
 80050b0:	200005bc 	.word	0x200005bc
 80050b4:	200005a5 	.word	0x200005a5

080050b8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80050c8:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <BSP_TS_Get_GestureId+0x100>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f107 0208 	add.w	r2, r7, #8
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fb fbe2 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b49      	cmp	r3, #73	; 0x49
 80050de:	d05e      	beq.n	800519e <BSP_TS_Get_GestureId+0xe6>
 80050e0:	2b49      	cmp	r3, #73	; 0x49
 80050e2:	d860      	bhi.n	80051a6 <BSP_TS_Get_GestureId+0xee>
 80050e4:	2b1c      	cmp	r3, #28
 80050e6:	d83f      	bhi.n	8005168 <BSP_TS_Get_GestureId+0xb0>
 80050e8:	2b1c      	cmp	r3, #28
 80050ea:	d85c      	bhi.n	80051a6 <BSP_TS_Get_GestureId+0xee>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <BSP_TS_Get_GestureId+0x3c>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	0800516f 	.word	0x0800516f
 80050f8:	080051a7 	.word	0x080051a7
 80050fc:	080051a7 	.word	0x080051a7
 8005100:	080051a7 	.word	0x080051a7
 8005104:	080051a7 	.word	0x080051a7
 8005108:	080051a7 	.word	0x080051a7
 800510c:	080051a7 	.word	0x080051a7
 8005110:	080051a7 	.word	0x080051a7
 8005114:	080051a7 	.word	0x080051a7
 8005118:	080051a7 	.word	0x080051a7
 800511c:	080051a7 	.word	0x080051a7
 8005120:	080051a7 	.word	0x080051a7
 8005124:	080051a7 	.word	0x080051a7
 8005128:	080051a7 	.word	0x080051a7
 800512c:	080051a7 	.word	0x080051a7
 8005130:	080051a7 	.word	0x080051a7
 8005134:	08005177 	.word	0x08005177
 8005138:	080051a7 	.word	0x080051a7
 800513c:	080051a7 	.word	0x080051a7
 8005140:	080051a7 	.word	0x080051a7
 8005144:	0800517f 	.word	0x0800517f
 8005148:	080051a7 	.word	0x080051a7
 800514c:	080051a7 	.word	0x080051a7
 8005150:	080051a7 	.word	0x080051a7
 8005154:	08005187 	.word	0x08005187
 8005158:	080051a7 	.word	0x080051a7
 800515c:	080051a7 	.word	0x080051a7
 8005160:	080051a7 	.word	0x080051a7
 8005164:	0800518f 	.word	0x0800518f
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d014      	beq.n	8005196 <BSP_TS_Get_GestureId+0xde>
 800516c:	e01b      	b.n	80051a6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005174:	e01a      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800517c:	e016      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005184:	e012      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2203      	movs	r2, #3
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800518c:	e00e      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2204      	movs	r2, #4
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005194:	e00a      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2205      	movs	r2, #5
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800519c:	e006      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2206      	movs	r2, #6
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80051a4:	e002      	b.n	80051ac <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      break;
 80051aa:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200005a5 	.word	0x200005a5

080051bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_MspInit+0x4c>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <HAL_MspInit+0x4c>)
 80051c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_MspInit+0x4c>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d6:	607b      	str	r3, [r7, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_MspInit+0x4c>)
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_MspInit+0x4c>)
 80051e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051e4:	6453      	str	r3, [r2, #68]	; 0x44
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_MspInit+0x4c>)
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	210f      	movs	r1, #15
 80051f6:	f06f 0001 	mvn.w	r0, #1
 80051fa:	f001 faf5 	bl	80067e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40023800 	.word	0x40023800

0800520c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005214:	f107 031c 	add.w	r3, r7, #28
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <HAL_ADC_MspInit+0xc8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d124      	bne.n	8005278 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005238:	6453      	str	r3, [r2, #68]	; 0x44
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	4a23      	ldr	r2, [pc, #140]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	6313      	str	r3, [r2, #48]	; 0x30
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800525e:	2301      	movs	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005262:	2303      	movs	r3, #3
 8005264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526a:	f107 031c 	add.w	r3, r7, #28
 800526e:	4619      	mov	r1, r3
 8005270:	481a      	ldr	r0, [pc, #104]	; (80052dc <HAL_ADC_MspInit+0xd0>)
 8005272:	f002 f9af 	bl	80075d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005276:	e029      	b.n	80052cc <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_ADC_MspInit+0xd4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d124      	bne.n	80052cc <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800528c:	6453      	str	r3, [r2, #68]	; 0x44
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 80052a0:	f043 0320 	orr.w	r3, r3, #32
 80052a4:	6313      	str	r3, [r2, #48]	; 0x30
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_ADC_MspInit+0xcc>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80052b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80052b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052b8:	2303      	movs	r3, #3
 80052ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052c0:	f107 031c 	add.w	r3, r7, #28
 80052c4:	4619      	mov	r1, r3
 80052c6:	4807      	ldr	r0, [pc, #28]	; (80052e4 <HAL_ADC_MspInit+0xd8>)
 80052c8:	f002 f984 	bl	80075d4 <HAL_GPIO_Init>
}
 80052cc:	bf00      	nop
 80052ce:	3730      	adds	r7, #48	; 0x30
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40012000 	.word	0x40012000
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40020000 	.word	0x40020000
 80052e0:	40012200 	.word	0x40012200
 80052e4:	40021400 	.word	0x40021400

080052e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_DAC_MspInit+0x84>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d12b      	bne.n	8005362 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800530a:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_DAC_MspInit+0x88>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a18      	ldr	r2, [pc, #96]	; (8005370 <HAL_DAC_MspInit+0x88>)
 8005310:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
 8005316:	4b16      	ldr	r3, [pc, #88]	; (8005370 <HAL_DAC_MspInit+0x88>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <HAL_DAC_MspInit+0x88>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <HAL_DAC_MspInit+0x88>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6313      	str	r3, [r2, #48]	; 0x30
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_DAC_MspInit+0x88>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800533a:	2310      	movs	r3, #16
 800533c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800533e:	2303      	movs	r3, #3
 8005340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4619      	mov	r1, r3
 800534c:	4809      	ldr	r0, [pc, #36]	; (8005374 <HAL_DAC_MspInit+0x8c>)
 800534e:	f002 f941 	bl	80075d4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8005352:	2200      	movs	r2, #0
 8005354:	210f      	movs	r1, #15
 8005356:	2036      	movs	r0, #54	; 0x36
 8005358:	f001 fa46 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800535c:	2036      	movs	r0, #54	; 0x36
 800535e:	f001 fa5f 	bl	8006820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005362:	bf00      	nop
 8005364:	3728      	adds	r7, #40	; 0x28
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40007400 	.word	0x40007400
 8005370:	40023800 	.word	0x40023800
 8005374:	40020000 	.word	0x40020000

08005378 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <HAL_DMA2D_MspInit+0x44>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d113      	bne.n	80053b2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_DMA2D_MspInit+0x48>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <HAL_DMA2D_MspInit+0x48>)
 8005390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <HAL_DMA2D_MspInit+0x48>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2105      	movs	r1, #5
 80053a6:	205a      	movs	r0, #90	; 0x5a
 80053a8:	f001 fa1e 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80053ac:	205a      	movs	r0, #90	; 0x5a
 80053ae:	f001 fa37 	bl	8006820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	4002b000 	.word	0x4002b000
 80053c0:	40023800 	.word	0x40023800

080053c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b0ac      	sub	sp, #176	; 0xb0
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053dc:	f107 0318 	add.w	r3, r7, #24
 80053e0:	2284      	movs	r2, #132	; 0x84
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f009 fdd9 	bl	800ef9c <memset>
  if(hi2c->Instance==I2C1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a44      	ldr	r2, [pc, #272]	; (8005500 <HAL_I2C_MspInit+0x13c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d13d      	bne.n	8005470 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80053f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80053fa:	2300      	movs	r3, #0
 80053fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053fe:	f107 0318 	add.w	r3, r7, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f004 faa8 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800540e:	f7fe f841 	bl	8003494 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005412:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <HAL_I2C_MspInit+0x140>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a3b      	ldr	r2, [pc, #236]	; (8005504 <HAL_I2C_MspInit+0x140>)
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
 800541e:	4b39      	ldr	r3, [pc, #228]	; (8005504 <HAL_I2C_MspInit+0x140>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800542a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800542e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005432:	2312      	movs	r3, #18
 8005434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800543e:	2303      	movs	r3, #3
 8005440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005444:	2304      	movs	r3, #4
 8005446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800544a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800544e:	4619      	mov	r1, r3
 8005450:	482d      	ldr	r0, [pc, #180]	; (8005508 <HAL_I2C_MspInit+0x144>)
 8005452:	f002 f8bf 	bl	80075d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_I2C_MspInit+0x140>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <HAL_I2C_MspInit+0x140>)
 800545c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b28      	ldr	r3, [pc, #160]	; (8005504 <HAL_I2C_MspInit+0x140>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800546e:	e042      	b.n	80054f6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_I2C_MspInit+0x148>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d13d      	bne.n	80054f6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800547a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800547e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005486:	f107 0318 	add.w	r3, r7, #24
 800548a:	4618      	mov	r0, r3
 800548c:	f004 fa64 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8005496:	f7fd fffd 	bl	8003494 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800549a:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <HAL_I2C_MspInit+0x140>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_I2C_MspInit+0x140>)
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	6313      	str	r3, [r2, #48]	; 0x30
 80054a6:	4b17      	ldr	r3, [pc, #92]	; (8005504 <HAL_I2C_MspInit+0x140>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80054b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80054b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054ba:	2312      	movs	r3, #18
 80054bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c6:	2303      	movs	r3, #3
 80054c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80054cc:	2304      	movs	r3, #4
 80054ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80054d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80054d6:	4619      	mov	r1, r3
 80054d8:	480d      	ldr	r0, [pc, #52]	; (8005510 <HAL_I2C_MspInit+0x14c>)
 80054da:	f002 f87b 	bl	80075d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_I2C_MspInit+0x140>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <HAL_I2C_MspInit+0x140>)
 80054e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054e8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_I2C_MspInit+0x140>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]
}
 80054f6:	bf00      	nop
 80054f8:	37b0      	adds	r7, #176	; 0xb0
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40005400 	.word	0x40005400
 8005504:	40023800 	.word	0x40023800
 8005508:	40020400 	.word	0x40020400
 800550c:	40005c00 	.word	0x40005c00
 8005510:	40021c00 	.word	0x40021c00

08005514 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a15      	ldr	r2, [pc, #84]	; (8005578 <HAL_I2C_MspDeInit+0x64>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d110      	bne.n	8005548 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <HAL_I2C_MspDeInit+0x68>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	4a14      	ldr	r2, [pc, #80]	; (800557c <HAL_I2C_MspDeInit+0x68>)
 800552c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005530:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005536:	4812      	ldr	r0, [pc, #72]	; (8005580 <HAL_I2C_MspDeInit+0x6c>)
 8005538:	f002 f9f8 	bl	800792c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800553c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005540:	480f      	ldr	r0, [pc, #60]	; (8005580 <HAL_I2C_MspDeInit+0x6c>)
 8005542:	f002 f9f3 	bl	800792c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005546:	e013      	b.n	8005570 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <HAL_I2C_MspDeInit+0x70>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10e      	bne.n	8005570 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_I2C_MspDeInit+0x68>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	4a09      	ldr	r2, [pc, #36]	; (800557c <HAL_I2C_MspDeInit+0x68>)
 8005558:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800555c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <HAL_I2C_MspDeInit+0x74>)
 8005562:	f002 f9e3 	bl	800792c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800556a:	4807      	ldr	r0, [pc, #28]	; (8005588 <HAL_I2C_MspDeInit+0x74>)
 800556c:	f002 f9de 	bl	800792c <HAL_GPIO_DeInit>
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40005400 	.word	0x40005400
 800557c:	40023800 	.word	0x40023800
 8005580:	40020400 	.word	0x40020400
 8005584:	40005c00 	.word	0x40005c00
 8005588:	40021c00 	.word	0x40021c00

0800558c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b0ae      	sub	sp, #184	; 0xb8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055a4:	f107 0320 	add.w	r3, r7, #32
 80055a8:	2284      	movs	r2, #132	; 0x84
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f009 fcf5 	bl	800ef9c <memset>
  if(hltdc->Instance==LTDC)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6f      	ldr	r2, [pc, #444]	; (8005774 <HAL_LTDC_MspInit+0x1e8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	f040 80d6 	bne.w	800576a <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80055be:	2308      	movs	r3, #8
 80055c0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80055c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80055c8:	2305      	movs	r3, #5
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80055cc:	2302      	movs	r3, #2
 80055ce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80055d0:	2303      	movs	r3, #3
 80055d2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80055d4:	2301      	movs	r3, #1
 80055d6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80055d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055de:	f107 0320 	add.w	r3, r7, #32
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 f9b8 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80055ee:	f7fd ff51 	bl	8003494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80055f2:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	4a60      	ldr	r2, [pc, #384]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 80055f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055fc:	6453      	str	r3, [r2, #68]	; 0x44
 80055fe:	4b5e      	ldr	r3, [pc, #376]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800560a:	4b5b      	ldr	r3, [pc, #364]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4a5a      	ldr	r2, [pc, #360]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005610:	f043 0310 	orr.w	r3, r3, #16
 8005614:	6313      	str	r3, [r2, #48]	; 0x30
 8005616:	4b58      	ldr	r3, [pc, #352]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005622:	4b55      	ldr	r3, [pc, #340]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	4a54      	ldr	r2, [pc, #336]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562c:	6313      	str	r3, [r2, #48]	; 0x30
 800562e:	4b52      	ldr	r3, [pc, #328]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800563a:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	4a4e      	ldr	r2, [pc, #312]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005644:	6313      	str	r3, [r2, #48]	; 0x30
 8005646:	4b4c      	ldr	r3, [pc, #304]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005652:	4b49      	ldr	r3, [pc, #292]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a48      	ldr	r2, [pc, #288]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565c:	6313      	str	r3, [r2, #48]	; 0x30
 800565e:	4b46      	ldr	r3, [pc, #280]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800566a:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	4a42      	ldr	r2, [pc, #264]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005674:	6313      	str	r3, [r2, #48]	; 0x30
 8005676:	4b40      	ldr	r3, [pc, #256]	; (8005778 <HAL_LTDC_MspInit+0x1ec>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005682:	2310      	movs	r3, #16
 8005684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005688:	2302      	movs	r3, #2
 800568a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800569a:	230e      	movs	r3, #14
 800569c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80056a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4835      	ldr	r0, [pc, #212]	; (800577c <HAL_LTDC_MspInit+0x1f0>)
 80056a8:	f001 ff94 	bl	80075d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80056ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80056b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b4:	2302      	movs	r3, #2
 80056b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056c6:	230e      	movs	r3, #14
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80056cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80056d0:	4619      	mov	r1, r3
 80056d2:	482b      	ldr	r0, [pc, #172]	; (8005780 <HAL_LTDC_MspInit+0x1f4>)
 80056d4:	f001 ff7e 	bl	80075d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80056d8:	23f7      	movs	r3, #247	; 0xf7
 80056da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80056f0:	230e      	movs	r3, #14
 80056f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80056f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4821      	ldr	r0, [pc, #132]	; (8005784 <HAL_LTDC_MspInit+0x1f8>)
 80056fe:	f001 ff69 	bl	80075d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570a:	2302      	movs	r3, #2
 800570c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005716:	2300      	movs	r3, #0
 8005718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800571c:	2309      	movs	r3, #9
 800571e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005726:	4619      	mov	r1, r3
 8005728:	4817      	ldr	r0, [pc, #92]	; (8005788 <HAL_LTDC_MspInit+0x1fc>)
 800572a:	f001 ff53 	bl	80075d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800572e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005736:	2302      	movs	r3, #2
 8005738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573c:	2300      	movs	r3, #0
 800573e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005748:	230e      	movs	r3, #14
 800574a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800574e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005752:	4619      	mov	r1, r3
 8005754:	480d      	ldr	r0, [pc, #52]	; (800578c <HAL_LTDC_MspInit+0x200>)
 8005756:	f001 ff3d 	bl	80075d4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800575a:	2200      	movs	r2, #0
 800575c:	2105      	movs	r1, #5
 800575e:	2058      	movs	r0, #88	; 0x58
 8005760:	f001 f842 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005764:	2058      	movs	r0, #88	; 0x58
 8005766:	f001 f85b 	bl	8006820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800576a:	bf00      	nop
 800576c:	37b8      	adds	r7, #184	; 0xb8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40016800 	.word	0x40016800
 8005778:	40023800 	.word	0x40023800
 800577c:	40021000 	.word	0x40021000
 8005780:	40022400 	.word	0x40022400
 8005784:	40022800 	.word	0x40022800
 8005788:	40021800 	.word	0x40021800
 800578c:	40022000 	.word	0x40022000

08005790 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b0a4      	sub	sp, #144	; 0x90
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	2284      	movs	r2, #132	; 0x84
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f009 fbfb 	bl	800ef9c <memset>
  if(hrtc->Instance==RTC)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a0e      	ldr	r2, [pc, #56]	; (80057e4 <HAL_RTC_MspInit+0x54>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d114      	bne.n	80057da <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80057b0:	2320      	movs	r3, #32
 80057b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80057b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4618      	mov	r0, r3
 80057c0:	f004 f8ca 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80057ca:	f7fd fe63 	bl	8003494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_RTC_MspInit+0x58>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	4a05      	ldr	r2, [pc, #20]	; (80057e8 <HAL_RTC_MspInit+0x58>)
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80057da:	bf00      	nop
 80057dc:	3790      	adds	r7, #144	; 0x90
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40002800 	.word	0x40002800
 80057e8:	40023800 	.word	0x40023800

080057ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <HAL_SPI_MspInit+0xb4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d144      	bne.n	8005898 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800580e:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	4a24      	ldr	r2, [pc, #144]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 8005814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005818:	6413      	str	r3, [r2, #64]	; 0x40
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005826:	4b1f      	ldr	r3, [pc, #124]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	6313      	str	r3, [r2, #48]	; 0x30
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800583e:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <HAL_SPI_MspInit+0xb8>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005856:	2303      	movs	r3, #3
 8005858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585a:	2302      	movs	r3, #2
 800585c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005862:	2303      	movs	r3, #3
 8005864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005866:	2305      	movs	r3, #5
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800586a:	f107 0314 	add.w	r3, r7, #20
 800586e:	4619      	mov	r1, r3
 8005870:	480d      	ldr	r0, [pc, #52]	; (80058a8 <HAL_SPI_MspInit+0xbc>)
 8005872:	f001 feaf 	bl	80075d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8005876:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800587a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587c:	2302      	movs	r3, #2
 800587e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005884:	2300      	movs	r3, #0
 8005886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005888:	2305      	movs	r3, #5
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	4619      	mov	r1, r3
 8005892:	4806      	ldr	r0, [pc, #24]	; (80058ac <HAL_SPI_MspInit+0xc0>)
 8005894:	f001 fe9e 	bl	80075d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005898:	bf00      	nop
 800589a:	3728      	adds	r7, #40	; 0x28
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40003800 	.word	0x40003800
 80058a4:	40023800 	.word	0x40023800
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40020400 	.word	0x40020400

080058b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	; 0x38
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <HAL_TIM_Base_MspInit+0x10c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10c      	bne.n	80058ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	4a3a      	ldr	r2, [pc, #232]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 80058d8:	f043 0301 	orr.w	r3, r3, #1
 80058dc:	6453      	str	r3, [r2, #68]	; 0x44
 80058de:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	623b      	str	r3, [r7, #32]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80058ea:	e062      	b.n	80059b2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d10c      	bne.n	8005910 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058f6:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	4a31      	ldr	r2, [pc, #196]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6413      	str	r3, [r2, #64]	; 0x40
 8005902:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	e050      	b.n	80059b2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2b      	ldr	r2, [pc, #172]	; (80059c4 <HAL_TIM_Base_MspInit+0x114>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10c      	bne.n	8005934 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	6413      	str	r3, [r2, #64]	; 0x40
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	69bb      	ldr	r3, [r7, #24]
}
 8005932:	e03e      	b.n	80059b2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a23      	ldr	r2, [pc, #140]	; (80059c8 <HAL_TIM_Base_MspInit+0x118>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005944:	f043 0308 	orr.w	r3, r3, #8
 8005948:	6413      	str	r3, [r2, #64]	; 0x40
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697b      	ldr	r3, [r7, #20]
}
 8005956:	e02c      	b.n	80059b2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIM_Base_MspInit+0x11c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d127      	bne.n	80059b2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005968:	f043 0302 	orr.w	r3, r3, #2
 800596c:	6453      	str	r3, [r2, #68]	; 0x44
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005984:	6313      	str	r3, [r2, #48]	; 0x30
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <HAL_TIM_Base_MspInit+0x110>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005992:	2304      	movs	r3, #4
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005996:	2302      	movs	r3, #2
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	2300      	movs	r3, #0
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800599e:	2300      	movs	r3, #0
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80059a2:	2303      	movs	r3, #3
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80059a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059aa:	4619      	mov	r1, r3
 80059ac:	4808      	ldr	r0, [pc, #32]	; (80059d0 <HAL_TIM_Base_MspInit+0x120>)
 80059ae:	f001 fe11 	bl	80075d4 <HAL_GPIO_Init>
}
 80059b2:	bf00      	nop
 80059b4:	3738      	adds	r7, #56	; 0x38
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40022000 	.word	0x40022000

080059d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b0b0      	sub	sp, #192	; 0xc0
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059f0:	2284      	movs	r2, #132	; 0x84
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f009 fad1 	bl	800ef9c <memset>
  if(huart->Instance==UART7)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a79      	ldr	r2, [pc, #484]	; (8005be4 <HAL_UART_MspInit+0x210>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d13d      	bne.n	8005a80 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a14:	4618      	mov	r0, r3
 8005a16:	f003 ff9f 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005a20:	f7fd fd38 	bl	8003494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005a24:	4b70      	ldr	r3, [pc, #448]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	4a6f      	ldr	r2, [pc, #444]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a30:	4b6d      	ldr	r3, [pc, #436]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a3c:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	4a69      	ldr	r2, [pc, #420]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005a42:	f043 0320 	orr.w	r3, r3, #32
 8005a46:	6313      	str	r3, [r2, #48]	; 0x30
 8005a48:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005a54:	23c0      	movs	r3, #192	; 0xc0
 8005a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a66:	2303      	movs	r3, #3
 8005a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a76:	4619      	mov	r1, r3
 8005a78:	485c      	ldr	r0, [pc, #368]	; (8005bec <HAL_UART_MspInit+0x218>)
 8005a7a:	f001 fdab 	bl	80075d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005a7e:	e0ac      	b.n	8005bda <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a5a      	ldr	r2, [pc, #360]	; (8005bf0 <HAL_UART_MspInit+0x21c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d165      	bne.n	8005b56 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a96:	4618      	mov	r0, r3
 8005a98:	f003 ff5e 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005aa2:	f7fd fcf7 	bl	8003494 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005aa6:	4b50      	ldr	r3, [pc, #320]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	4a4f      	ldr	r2, [pc, #316]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005aac:	f043 0310 	orr.w	r3, r3, #16
 8005ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ab2:	4b4d      	ldr	r3, [pc, #308]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005abe:	4b4a      	ldr	r3, [pc, #296]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	4a49      	ldr	r2, [pc, #292]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aca:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ad6:	4b44      	ldr	r3, [pc, #272]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	4a43      	ldr	r2, [pc, #268]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae2:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af4:	2302      	movs	r3, #2
 8005af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b06:	2307      	movs	r3, #7
 8005b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005b0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005b10:	4619      	mov	r1, r3
 8005b12:	4838      	ldr	r0, [pc, #224]	; (8005bf4 <HAL_UART_MspInit+0x220>)
 8005b14:	f001 fd5e 	bl	80075d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b20:	2302      	movs	r3, #2
 8005b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b32:	2307      	movs	r3, #7
 8005b34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005b38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	482e      	ldr	r0, [pc, #184]	; (8005bf8 <HAL_UART_MspInit+0x224>)
 8005b40:	f001 fd48 	bl	80075d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b44:	2200      	movs	r2, #0
 8005b46:	2105      	movs	r1, #5
 8005b48:	2025      	movs	r0, #37	; 0x25
 8005b4a:	f000 fe4d 	bl	80067e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b4e:	2025      	movs	r0, #37	; 0x25
 8005b50:	f000 fe66 	bl	8006820 <HAL_NVIC_EnableIRQ>
}
 8005b54:	e041      	b.n	8005bda <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_UART_MspInit+0x228>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d13c      	bne.n	8005bda <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b70:	4618      	mov	r0, r3
 8005b72:	f003 fef1 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8005b7c:	f7fd fc8a 	bl	8003494 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005b80:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005b86:	f043 0320 	orr.w	r3, r3, #32
 8005b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b98:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <HAL_UART_MspInit+0x214>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005bb0:	23c0      	movs	r3, #192	; 0xc0
 8005bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	480a      	ldr	r0, [pc, #40]	; (8005c00 <HAL_UART_MspInit+0x22c>)
 8005bd6:	f001 fcfd 	bl	80075d4 <HAL_GPIO_Init>
}
 8005bda:	bf00      	nop
 8005bdc:	37c0      	adds	r7, #192	; 0xc0
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40007800 	.word	0x40007800
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40021400 	.word	0x40021400
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	40020400 	.word	0x40020400
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	40011400 	.word	0x40011400
 8005c00:	40020800 	.word	0x40020800

08005c04 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005c18:	4b3a      	ldr	r3, [pc, #232]	; (8005d04 <HAL_FMC_MspInit+0x100>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d16d      	bne.n	8005cfc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005c20:	4b38      	ldr	r3, [pc, #224]	; (8005d04 <HAL_FMC_MspInit+0x100>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c26:	4b38      	ldr	r3, [pc, #224]	; (8005d08 <HAL_FMC_MspInit+0x104>)
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <HAL_FMC_MspInit+0x104>)
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	6393      	str	r3, [r2, #56]	; 0x38
 8005c32:	4b35      	ldr	r3, [pc, #212]	; (8005d08 <HAL_FMC_MspInit+0x104>)
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005c3e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005c42:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c44:	2302      	movs	r3, #2
 8005c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c50:	230c      	movs	r3, #12
 8005c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	482c      	ldr	r0, [pc, #176]	; (8005d0c <HAL_FMC_MspInit+0x108>)
 8005c5a:	f001 fcbb 	bl	80075d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005c5e:	f248 1333 	movw	r3, #33075	; 0x8133
 8005c62:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c64:	2302      	movs	r3, #2
 8005c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c70:	230c      	movs	r3, #12
 8005c72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c74:	1d3b      	adds	r3, r7, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4825      	ldr	r0, [pc, #148]	; (8005d10 <HAL_FMC_MspInit+0x10c>)
 8005c7a:	f001 fcab 	bl	80075d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005c7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005c82:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c84:	2302      	movs	r3, #2
 8005c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c90:	230c      	movs	r3, #12
 8005c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	481e      	ldr	r0, [pc, #120]	; (8005d14 <HAL_FMC_MspInit+0x110>)
 8005c9a:	f001 fc9b 	bl	80075d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005c9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005ca2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cac:	2303      	movs	r3, #3
 8005cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4817      	ldr	r0, [pc, #92]	; (8005d18 <HAL_FMC_MspInit+0x114>)
 8005cba:	f001 fc8b 	bl	80075d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005cbe:	2328      	movs	r3, #40	; 0x28
 8005cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005cce:	230c      	movs	r3, #12
 8005cd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4811      	ldr	r0, [pc, #68]	; (8005d1c <HAL_FMC_MspInit+0x118>)
 8005cd8:	f001 fc7c 	bl	80075d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005cdc:	2308      	movs	r3, #8
 8005cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005cec:	230c      	movs	r3, #12
 8005cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005cf0:	1d3b      	adds	r3, r7, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	480a      	ldr	r0, [pc, #40]	; (8005d20 <HAL_FMC_MspInit+0x11c>)
 8005cf6:	f001 fc6d 	bl	80075d4 <HAL_GPIO_Init>
 8005cfa:	e000      	b.n	8005cfe <HAL_FMC_MspInit+0xfa>
    return;
 8005cfc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	200005d0 	.word	0x200005d0
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40021800 	.word	0x40021800
 8005d14:	40020c00 	.word	0x40020c00
 8005d18:	40021400 	.word	0x40021400
 8005d1c:	40021c00 	.word	0x40021c00
 8005d20:	40020800 	.word	0x40020800

08005d24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005d2c:	f7ff ff6a 	bl	8005c04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	; 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	2036      	movs	r0, #54	; 0x36
 8005d4e:	f000 fd4b 	bl	80067e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d52:	2036      	movs	r0, #54	; 0x36
 8005d54:	f000 fd64 	bl	8006820 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005d58:	4b1f      	ldr	r3, [pc, #124]	; (8005dd8 <HAL_InitTick+0xa0>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <HAL_InitTick+0xa0>)
 8005d5e:	f043 0310 	orr.w	r3, r3, #16
 8005d62:	6413      	str	r3, [r2, #64]	; 0x40
 8005d64:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <HAL_InitTick+0xa0>)
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d70:	f107 0210 	add.w	r2, r7, #16
 8005d74:	f107 0314 	add.w	r3, r7, #20
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 fdba 	bl	80098f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005d80:	f003 fd90 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 8005d84:	4603      	mov	r3, r0
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <HAL_InitTick+0xa4>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0c9b      	lsrs	r3, r3, #18
 8005d94:	3b01      	subs	r3, #1
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005d98:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <HAL_InitTick+0xa8>)
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <HAL_InitTick+0xac>)
 8005d9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_InitTick+0xa8>)
 8005da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005da4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <HAL_InitTick+0xa8>)
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <HAL_InitTick+0xa8>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_InitTick+0xa8>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005db8:	4809      	ldr	r0, [pc, #36]	; (8005de0 <HAL_InitTick+0xa8>)
 8005dba:	f004 fed1 	bl	800ab60 <HAL_TIM_Base_Init>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005dc4:	4806      	ldr	r0, [pc, #24]	; (8005de0 <HAL_InitTick+0xa8>)
 8005dc6:	f004 ff23 	bl	800ac10 <HAL_TIM_Base_Start_IT>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	e000      	b.n	8005dd0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3730      	adds	r7, #48	; 0x30
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	431bde83 	.word	0x431bde83
 8005de0:	20008e80 	.word	0x20008e80
 8005de4:	40001000 	.word	0x40001000

08005de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005dec:	e7fe      	b.n	8005dec <NMI_Handler+0x4>

08005dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005df2:	e7fe      	b.n	8005df2 <HardFault_Handler+0x4>

08005df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005df8:	e7fe      	b.n	8005df8 <MemManage_Handler+0x4>

08005dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dfe:	e7fe      	b.n	8005dfe <BusFault_Handler+0x4>

08005e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e04:	e7fe      	b.n	8005e04 <UsageFault_Handler+0x4>

08005e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e06:	b480      	push	{r7}
 8005e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <USART1_IRQHandler+0x10>)
 8005e1a:	f005 fbb7 	bl	800b58c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20008554 	.word	0x20008554

08005e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 8005e2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005e30:	f001 febc 	bl	8007bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005e34:	bf00      	nop
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <TIM6_DAC_IRQHandler+0x20>)
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005e46:	4804      	ldr	r0, [pc, #16]	; (8005e58 <TIM6_DAC_IRQHandler+0x20>)
 8005e48:	f000 fd1a 	bl	8006880 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005e4c:	4803      	ldr	r0, [pc, #12]	; (8005e5c <TIM6_DAC_IRQHandler+0x24>)
 8005e4e:	f004 ff57 	bl	800ad00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200085dc 	.word	0x200085dc
 8005e5c:	20008e80 	.word	0x20008e80

08005e60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005e64:	4802      	ldr	r0, [pc, #8]	; (8005e70 <LTDC_IRQHandler+0x10>)
 8005e66:	f002 fdc3 	bl	80089f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20008414 	.word	0x20008414

08005e74 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005e78:	4802      	ldr	r0, [pc, #8]	; (8005e84 <DMA2D_IRQHandler+0x10>)
 8005e7a:	f001 f96d 	bl	8007158 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20008ce4 	.word	0x20008ce4

08005e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <SystemInit+0x20>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	4a05      	ldr	r2, [pc, #20]	; (8005ea8 <SystemInit+0x20>)
 8005e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	e000ed00 	.word	0xe000ed00

08005eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005eb0:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005eb2:	490e      	ldr	r1, [pc, #56]	; (8005eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005eb4:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005eb8:	e002      	b.n	8005ec0 <LoopCopyDataInit>

08005eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ebe:	3304      	adds	r3, #4

08005ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ec4:	d3f9      	bcc.n	8005eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ec6:	4a0b      	ldr	r2, [pc, #44]	; (8005ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ec8:	4c0b      	ldr	r4, [pc, #44]	; (8005ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ecc:	e001      	b.n	8005ed2 <LoopFillZerobss>

08005ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ed0:	3204      	adds	r2, #4

08005ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ed4:	d3fb      	bcc.n	8005ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005ed6:	f7ff ffd7 	bl	8005e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005eda:	f009 f82b 	bl	800ef34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ede:	f7fb f9ad 	bl	800123c <main>
  bx  lr    
 8005ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ee4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eec:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005ef0:	080354d8 	.word	0x080354d8
  ldr r2, =_sbss
 8005ef4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8005ef8:	20008edc 	.word	0x20008edc

08005efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005efc:	e7fe      	b.n	8005efc <ADC_IRQHandler>
	...

08005f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <HAL_Init+0x28>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a07      	ldr	r2, [pc, #28]	; (8005f28 <HAL_Init+0x28>)
 8005f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f10:	2003      	movs	r0, #3
 8005f12:	f000 fc5e 	bl	80067d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f16:	200f      	movs	r0, #15
 8005f18:	f7ff ff0e 	bl	8005d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f1c:	f7ff f94e 	bl	80051bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40023c00 	.word	0x40023c00

08005f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <HAL_IncTick+0x20>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_IncTick+0x24>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <HAL_IncTick+0x24>)
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000048 	.word	0x20000048
 8005f50:	20008ecc 	.word	0x20008ecc

08005f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return uwTick;
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <HAL_GetTick+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20008ecc 	.word	0x20008ecc

08005f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f74:	f7ff ffee 	bl	8005f54 <HAL_GetTick>
 8005f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d005      	beq.n	8005f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_Delay+0x44>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f92:	bf00      	nop
 8005f94:	f7ff ffde 	bl	8005f54 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d8f7      	bhi.n	8005f94 <HAL_Delay+0x28>
  {
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000048 	.word	0x20000048

08005fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e031      	b.n	800602e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff f91a 	bl	800520c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d116      	bne.n	8006020 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <HAL_ADC_Init+0x84>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	f043 0202 	orr.w	r2, r3, #2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa3e 	bl	8006484 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
 800601e:	e001      	b.n	8006024 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	ffffeefd 	.word	0xffffeefd

0800603c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_ADC_Start+0x1a>
 8006052:	2302      	movs	r3, #2
 8006054:	e0ad      	b.n	80061b2 <HAL_ADC_Start+0x176>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	d018      	beq.n	800609e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800607c:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <HAL_ADC_Start+0x184>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a50      	ldr	r2, [pc, #320]	; (80061c4 <HAL_ADC_Start+0x188>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0c9a      	lsrs	r2, r3, #18
 8006088:	4613      	mov	r3, r2
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4413      	add	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006090:	e002      	b.n	8006098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3b01      	subs	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f9      	bne.n	8006092 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d175      	bne.n	8006198 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b0:	4b45      	ldr	r3, [pc, #276]	; (80061c8 <HAL_ADC_Start+0x18c>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e6:	d106      	bne.n	80060f6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	f023 0206 	bic.w	r2, r3, #6
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44
 80060f4:	e002      	b.n	80060fc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800610c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800610e:	4b2f      	ldr	r3, [pc, #188]	; (80061cc <HAL_ADC_Start+0x190>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d143      	bne.n	80061b0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006136:	609a      	str	r2, [r3, #8]
 8006138:	e03a      	b.n	80061b0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a24      	ldr	r2, [pc, #144]	; (80061d0 <HAL_ADC_Start+0x194>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10e      	bne.n	8006162 <HAL_ADC_Start+0x126>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d107      	bne.n	8006162 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006160:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006162:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_ADC_Start+0x190>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d120      	bne.n	80061b0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_ADC_Start+0x198>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d11b      	bne.n	80061b0 <HAL_ADC_Start+0x174>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d114      	bne.n	80061b0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006194:	609a      	str	r2, [r3, #8]
 8006196:	e00b      	b.n	80061b0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f043 0210 	orr.w	r2, r3, #16
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000040 	.word	0x20000040
 80061c4:	431bde83 	.word	0x431bde83
 80061c8:	fffff8fe 	.word	0xfffff8fe
 80061cc:	40012300 	.word	0x40012300
 80061d0:	40012000 	.word	0x40012000
 80061d4:	40012200 	.word	0x40012200

080061d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_ADC_ConfigChannel+0x1c>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e136      	b.n	8006462 <HAL_ADC_ConfigChannel+0x28a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b09      	cmp	r3, #9
 8006202:	d93a      	bls.n	800627a <HAL_ADC_ConfigChannel+0xa2>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800620c:	d035      	beq.n	800627a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68d9      	ldr	r1, [r3, #12]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	4613      	mov	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	4413      	add	r3, r2
 8006222:	3b1e      	subs	r3, #30
 8006224:	2207      	movs	r2, #7
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43da      	mvns	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	400a      	ands	r2, r1
 8006232:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a8d      	ldr	r2, [pc, #564]	; (8006470 <HAL_ADC_ConfigChannel+0x298>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10a      	bne.n	8006254 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68d9      	ldr	r1, [r3, #12]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	061a      	lsls	r2, r3, #24
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006252:	e035      	b.n	80062c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68d9      	ldr	r1, [r3, #12]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	4618      	mov	r0, r3
 8006266:	4603      	mov	r3, r0
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4403      	add	r3, r0
 800626c:	3b1e      	subs	r3, #30
 800626e:	409a      	lsls	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006278:	e022      	b.n	80062c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6919      	ldr	r1, [r3, #16]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	4613      	mov	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4413      	add	r3, r2
 800628e:	2207      	movs	r2, #7
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43da      	mvns	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	400a      	ands	r2, r1
 800629c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6919      	ldr	r1, [r3, #16]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	4618      	mov	r0, r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4403      	add	r3, r0
 80062b6:	409a      	lsls	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b06      	cmp	r3, #6
 80062c6:	d824      	bhi.n	8006312 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	3b05      	subs	r3, #5
 80062da:	221f      	movs	r2, #31
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43da      	mvns	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	400a      	ands	r2, r1
 80062e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4618      	mov	r0, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	3b05      	subs	r3, #5
 8006304:	fa00 f203 	lsl.w	r2, r0, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	635a      	str	r2, [r3, #52]	; 0x34
 8006310:	e04c      	b.n	80063ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b0c      	cmp	r3, #12
 8006318:	d824      	bhi.n	8006364 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	3b23      	subs	r3, #35	; 0x23
 800632c:	221f      	movs	r2, #31
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43da      	mvns	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	400a      	ands	r2, r1
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	4618      	mov	r0, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	3b23      	subs	r3, #35	; 0x23
 8006356:	fa00 f203 	lsl.w	r2, r0, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	631a      	str	r2, [r3, #48]	; 0x30
 8006362:	e023      	b.n	80063ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	3b41      	subs	r3, #65	; 0x41
 8006376:	221f      	movs	r2, #31
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43da      	mvns	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	400a      	ands	r2, r1
 8006384:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	4618      	mov	r0, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	3b41      	subs	r3, #65	; 0x41
 80063a0:	fa00 f203 	lsl.w	r2, r0, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a30      	ldr	r2, [pc, #192]	; (8006474 <HAL_ADC_ConfigChannel+0x29c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10a      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x1f4>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063be:	d105      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80063c0:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 80063c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80063ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a28      	ldr	r2, [pc, #160]	; (8006474 <HAL_ADC_ConfigChannel+0x29c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10f      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x21e>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b12      	cmp	r3, #18
 80063dc:	d10b      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80063de:	4b26      	ldr	r3, [pc, #152]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4a25      	ldr	r2, [pc, #148]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 80063e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80063ea:	4b23      	ldr	r3, [pc, #140]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4a22      	ldr	r2, [pc, #136]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 80063f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <HAL_ADC_ConfigChannel+0x29c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d12b      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x280>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <HAL_ADC_ConfigChannel+0x298>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <HAL_ADC_ConfigChannel+0x23a>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b11      	cmp	r3, #17
 8006410:	d122      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006412:	4b19      	ldr	r3, [pc, #100]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4a18      	ldr	r2, [pc, #96]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 8006418:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800641c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800641e:	4b16      	ldr	r3, [pc, #88]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <HAL_ADC_ConfigChannel+0x2a0>)
 8006424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006428:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a10      	ldr	r2, [pc, #64]	; (8006470 <HAL_ADC_ConfigChannel+0x298>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d111      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006434:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_ADC_ConfigChannel+0x2a4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a11      	ldr	r2, [pc, #68]	; (8006480 <HAL_ADC_ConfigChannel+0x2a8>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	0c9a      	lsrs	r2, r3, #18
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800644a:	e002      	b.n	8006452 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3b01      	subs	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f9      	bne.n	800644c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	10000012 	.word	0x10000012
 8006474:	40012000 	.word	0x40012000
 8006478:	40012300 	.word	0x40012300
 800647c:	20000040 	.word	0x20000040
 8006480:	431bde83 	.word	0x431bde83

08006484 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800648c:	4b78      	ldr	r3, [pc, #480]	; (8006670 <ADC_Init+0x1ec>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4a77      	ldr	r2, [pc, #476]	; (8006670 <ADC_Init+0x1ec>)
 8006492:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006496:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006498:	4b75      	ldr	r3, [pc, #468]	; (8006670 <ADC_Init+0x1ec>)
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4973      	ldr	r1, [pc, #460]	; (8006670 <ADC_Init+0x1ec>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	021a      	lsls	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80064d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6859      	ldr	r1, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	4a58      	ldr	r2, [pc, #352]	; (8006674 <ADC_Init+0x1f0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d022      	beq.n	800655e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6899      	ldr	r1, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6899      	ldr	r1, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	e00f      	b.n	800657e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800656c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800657c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0202 	bic.w	r2, r2, #2
 800658c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	005a      	lsls	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01b      	beq.n	80065e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80065ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	3b01      	subs	r3, #1
 80065d8:	035a      	lsls	r2, r3, #13
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e007      	b.n	80065f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	3b01      	subs	r3, #1
 8006610:	051a      	lsls	r2, r3, #20
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6899      	ldr	r1, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006636:	025a      	lsls	r2, r3, #9
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6899      	ldr	r1, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	029a      	lsls	r2, r3, #10
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012300 	.word	0x40012300
 8006674:	0f000001 	.word	0x0f000001

08006678 <__NVIC_SetPriorityGrouping>:
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <__NVIC_SetPriorityGrouping+0x40>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006694:	4013      	ands	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <__NVIC_SetPriorityGrouping+0x44>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066a6:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <__NVIC_SetPriorityGrouping+0x40>)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	60d3      	str	r3, [r2, #12]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	e000ed00 	.word	0xe000ed00
 80066bc:	05fa0000 	.word	0x05fa0000

080066c0 <__NVIC_GetPriorityGrouping>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066c4:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <__NVIC_GetPriorityGrouping+0x18>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	0a1b      	lsrs	r3, r3, #8
 80066ca:	f003 0307 	and.w	r3, r3, #7
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	e000ed00 	.word	0xe000ed00

080066dc <__NVIC_EnableIRQ>:
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	db0b      	blt.n	8006706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	f003 021f 	and.w	r2, r3, #31
 80066f4:	4907      	ldr	r1, [pc, #28]	; (8006714 <__NVIC_EnableIRQ+0x38>)
 80066f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	2001      	movs	r0, #1
 80066fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	e000e100 	.word	0xe000e100

08006718 <__NVIC_SetPriority>:
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006728:	2b00      	cmp	r3, #0
 800672a:	db0a      	blt.n	8006742 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	490c      	ldr	r1, [pc, #48]	; (8006764 <__NVIC_SetPriority+0x4c>)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	0112      	lsls	r2, r2, #4
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	440b      	add	r3, r1
 800673c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006740:	e00a      	b.n	8006758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4908      	ldr	r1, [pc, #32]	; (8006768 <__NVIC_SetPriority+0x50>)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	3b04      	subs	r3, #4
 8006750:	0112      	lsls	r2, r2, #4
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	440b      	add	r3, r1
 8006756:	761a      	strb	r2, [r3, #24]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	e000e100 	.word	0xe000e100
 8006768:	e000ed00 	.word	0xe000ed00

0800676c <NVIC_EncodePriority>:
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f1c3 0307 	rsb	r3, r3, #7
 8006786:	2b04      	cmp	r3, #4
 8006788:	bf28      	it	cs
 800678a:	2304      	movcs	r3, #4
 800678c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3304      	adds	r3, #4
 8006792:	2b06      	cmp	r3, #6
 8006794:	d902      	bls.n	800679c <NVIC_EncodePriority+0x30>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3b03      	subs	r3, #3
 800679a:	e000      	b.n	800679e <NVIC_EncodePriority+0x32>
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	401a      	ands	r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067b4:	f04f 31ff 	mov.w	r1, #4294967295
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	43d9      	mvns	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067c4:	4313      	orrs	r3, r2
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3724      	adds	r7, #36	; 0x24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff ff4c 	bl	8006678 <__NVIC_SetPriorityGrouping>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067fa:	f7ff ff61 	bl	80066c0 <__NVIC_GetPriorityGrouping>
 80067fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	6978      	ldr	r0, [r7, #20]
 8006806:	f7ff ffb1 	bl	800676c <NVIC_EncodePriority>
 800680a:	4602      	mov	r2, r0
 800680c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006810:	4611      	mov	r1, r2
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ff80 	bl	8006718 <__NVIC_SetPriority>
}
 8006818:	bf00      	nop
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800682a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff54 	bl	80066dc <__NVIC_EnableIRQ>
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e014      	b.n	8006878 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	791b      	ldrb	r3, [r3, #4]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fe fd42 	bl	80052e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006896:	d120      	bne.n	80068da <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	d118      	bne.n	80068da <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2204      	movs	r2, #4
 80068ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f043 0201 	orr.w	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f82d 	bl	8006934 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e8:	d120      	bne.n	800692c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f8:	d118      	bne.n	800692c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f043 0202 	orr.w	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006914:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006924:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f85d 	bl	80069e6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	795b      	ldrb	r3, [r3, #5]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_DAC_ConfigChannel+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e03c      	b.n	80069da <HAL_DAC_ConfigChannel+0x92>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2202      	movs	r2, #2
 800696a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	43db      	mvns	r3, r3
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4013      	ands	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6819      	ldr	r1, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	22c0      	movs	r2, #192	; 0xc0
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	43da      	mvns	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	400a      	ands	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a08:	f7ff faa4 	bl	8005f54 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e099      	b.n	8006b4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a38:	e00f      	b.n	8006a5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a3a:	f7ff fa8b 	bl	8005f54 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d908      	bls.n	8006a5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e078      	b.n	8006b4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e8      	bne.n	8006a3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4b38      	ldr	r3, [pc, #224]	; (8006b54 <HAL_DMA_Init+0x158>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d107      	bne.n	8006ac4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	4313      	orrs	r3, r2
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d117      	bne.n	8006b1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f94f 	bl	8006da4 <DMA_CheckFifoParam>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2240      	movs	r2, #64	; 0x40
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e016      	b.n	8006b4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f906 	bl	8006d38 <DMA_CalcBaseAndBitshift>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	223f      	movs	r2, #63	; 0x3f
 8006b36:	409a      	lsls	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	f010803f 	.word	0xf010803f

08006b58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e050      	b.n	8006c0c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d101      	bne.n	8006b7a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
 8006b78:	e048      	b.n	8006c0c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2221      	movs	r2, #33	; 0x21
 8006bb8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8bc 	bl	8006d38 <DMA_CalcBaseAndBitshift>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	223f      	movs	r2, #63	; 0x3f
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c22:	f7ff f997 	bl	8005f54 <HAL_GetTick>
 8006c26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d008      	beq.n	8006c46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e052      	b.n	8006cec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0216 	bic.w	r2, r2, #22
 8006c54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <HAL_DMA_Abort+0x62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0208 	bic.w	r2, r2, #8
 8006c84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c96:	e013      	b.n	8006cc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c98:	f7ff f95c 	bl	8005f54 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d90c      	bls.n	8006cc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e015      	b.n	8006cec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e4      	bne.n	8006c98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	223f      	movs	r2, #63	; 0x3f
 8006cd4:	409a      	lsls	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d004      	beq.n	8006d12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e00c      	b.n	8006d2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2205      	movs	r2, #5
 8006d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0201 	bic.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	3b10      	subs	r3, #16
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <DMA_CalcBaseAndBitshift+0x60>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	091b      	lsrs	r3, r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d52:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <DMA_CalcBaseAndBitshift+0x64>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d908      	bls.n	8006d78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <DMA_CalcBaseAndBitshift+0x68>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	659a      	str	r2, [r3, #88]	; 0x58
 8006d76:	e006      	b.n	8006d86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <DMA_CalcBaseAndBitshift+0x68>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	aaaaaaab 	.word	0xaaaaaaab
 8006d9c:	08035460 	.word	0x08035460
 8006da0:	fffffc00 	.word	0xfffffc00

08006da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11f      	bne.n	8006dfe <DMA_CheckFifoParam+0x5a>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d856      	bhi.n	8006e72 <DMA_CheckFifoParam+0xce>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <DMA_CheckFifoParam+0x28>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006ddd 	.word	0x08006ddd
 8006dd0:	08006def 	.word	0x08006def
 8006dd4:	08006ddd 	.word	0x08006ddd
 8006dd8:	08006e73 	.word	0x08006e73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d046      	beq.n	8006e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dec:	e043      	b.n	8006e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006df6:	d140      	bne.n	8006e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dfc:	e03d      	b.n	8006e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	d121      	bne.n	8006e4c <DMA_CheckFifoParam+0xa8>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d837      	bhi.n	8006e7e <DMA_CheckFifoParam+0xda>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <DMA_CheckFifoParam+0x70>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e2b 	.word	0x08006e2b
 8006e1c:	08006e25 	.word	0x08006e25
 8006e20:	08006e3d 	.word	0x08006e3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
      break;
 8006e28:	e030      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d025      	beq.n	8006e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e3a:	e022      	b.n	8006e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e44:	d11f      	bne.n	8006e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e4a:	e01c      	b.n	8006e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d903      	bls.n	8006e5a <DMA_CheckFifoParam+0xb6>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d003      	beq.n	8006e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e58:	e018      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5e:	e015      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00e      	beq.n	8006e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e70:	e00b      	b.n	8006e8a <DMA_CheckFifoParam+0xe6>
      break;
 8006e72:	bf00      	nop
 8006e74:	e00a      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e76:	bf00      	nop
 8006e78:	e008      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e006      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e7e:	bf00      	nop
 8006e80:	e004      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e82:	bf00      	nop
 8006e84:	e002      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <DMA_CheckFifoParam+0xe8>
      break;
 8006e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop

08006e9c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e039      	b.n	8006f22 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe fa58 	bl	8005378 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	f023 0107 	bic.w	r1, r3, #7
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <HAL_DMA2D_Init+0x90>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68d1      	ldr	r1, [r2, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	ffffc000 	.word	0xffffc000

08006f30 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_DMA2D_Start+0x1c>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e018      	b.n	8006f7e <HAL_DMA2D_Start+0x4e>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fa98 	bl	800749c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d056      	beq.n	8007050 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fa2:	f7fe ffd7 	bl	8005f54 <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006fa8:	e04b      	b.n	8007042 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d023      	beq.n	8007004 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	f043 0202 	orr.w	r2, r3, #2
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2221      	movs	r2, #33	; 0x21
 8006fee:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0a5      	b.n	8007150 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d01a      	beq.n	8007042 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800700c:	f7fe ffa2 	bl	8005f54 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d302      	bcc.n	8007022 <HAL_DMA2D_PollForTransfer+0x9c>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10f      	bne.n	8007042 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	f043 0220 	orr.w	r2, r3, #32
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2203      	movs	r2, #3
 8007032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e086      	b.n	8007150 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0ac      	beq.n	8006faa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d061      	beq.n	8007136 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007072:	f7fe ff6f 	bl	8005f54 <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007078:	e056      	b.n	8007128 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02e      	beq.n	80070ea <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	f043 0204 	orr.w	r2, r3, #4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	f043 0202 	orr.w	r2, r3, #2
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	f043 0201 	orr.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2229      	movs	r2, #41	; 0x29
 80070d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2204      	movs	r2, #4
 80070da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e032      	b.n	8007150 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d01a      	beq.n	8007128 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070f2:	f7fe ff2f 	bl	8005f54 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <HAL_DMA2D_PollForTransfer+0x182>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10f      	bne.n	8007128 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	f043 0220 	orr.w	r2, r3, #32
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2203      	movs	r2, #3
 8007118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e013      	b.n	8007150 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0a1      	beq.n	800707a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2212      	movs	r2, #18
 800713c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d026      	beq.n	80071c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007180:	2b00      	cmp	r3, #0
 8007182:	d021      	beq.n	80071c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007192:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007198:	f043 0201 	orr.w	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2201      	movs	r2, #1
 80071a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2204      	movs	r2, #4
 80071ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d026      	beq.n	8007220 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d021      	beq.n	8007220 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2220      	movs	r2, #32
 80071f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	f043 0202 	orr.w	r2, r3, #2
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2204      	movs	r2, #4
 8007204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d026      	beq.n	8007278 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	2b00      	cmp	r3, #0
 8007232:	d021      	beq.n	8007278 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007242:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2208      	movs	r2, #8
 800724a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007250:	f043 0204 	orr.w	r2, r3, #4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2204      	movs	r2, #4
 800725c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d013      	beq.n	80072aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00e      	beq.n	80072aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2204      	movs	r2, #4
 80072a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f853 	bl	8007350 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d024      	beq.n	80072fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01f      	beq.n	80072fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2202      	movs	r2, #2
 80072d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01f      	beq.n	8007348 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01a      	beq.n	8007348 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007320:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2210      	movs	r2, #16
 8007328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f80e 	bl	8007364 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_DMA2D_ConfigLayer+0x20>
 8007394:	2302      	movs	r3, #2
 8007396:	e079      	b.n	800748c <HAL_DMA2D_ConfigLayer+0x114>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	3318      	adds	r3, #24
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80073c2:	4b35      	ldr	r3, [pc, #212]	; (8007498 <HAL_DMA2D_ConfigLayer+0x120>)
 80073c4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b0a      	cmp	r3, #10
 80073cc:	d003      	beq.n	80073d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	d107      	bne.n	80073e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e005      	b.n	80073f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	061b      	lsls	r3, r3, #24
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d120      	bne.n	800743a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	43db      	mvns	r3, r3
 8007402:	ea02 0103 	and.w	r1, r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	430a      	orrs	r2, r1
 800740e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b0a      	cmp	r3, #10
 8007420:	d003      	beq.n	800742a <HAL_DMA2D_ConfigLayer+0xb2>
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b09      	cmp	r3, #9
 8007428:	d127      	bne.n	800747a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
 8007438:	e01f      	b.n	800747a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	43db      	mvns	r3, r3
 8007444:	ea02 0103 	and.w	r1, r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	430a      	orrs	r2, r1
 8007450:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b0a      	cmp	r3, #10
 8007462:	d003      	beq.n	800746c <HAL_DMA2D_ConfigLayer+0xf4>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b09      	cmp	r3, #9
 800746a:	d106      	bne.n	800747a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007478:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	ff03000f 	.word	0xff03000f

0800749c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800749c:	b480      	push	{r7}
 800749e:	b08b      	sub	sp, #44	; 0x2c
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	041a      	lsls	r2, r3, #16
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	431a      	orrs	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074d4:	d174      	bne.n	80075c0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80074dc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074ec:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d108      	bne.n	800750e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	431a      	orrs	r2, r3
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	4313      	orrs	r3, r2
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
 800750c:	e053      	b.n	80075b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d106      	bne.n	8007524 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4313      	orrs	r3, r2
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
 8007522:	e048      	b.n	80075b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d111      	bne.n	8007550 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	0cdb      	lsrs	r3, r3, #19
 8007530:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	0a9b      	lsrs	r3, r3, #10
 8007536:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	02db      	lsls	r3, r3, #11
 8007546:	4313      	orrs	r3, r2
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
 800754e:	e032      	b.n	80075b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b03      	cmp	r3, #3
 8007556:	d117      	bne.n	8007588 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	0fdb      	lsrs	r3, r3, #31
 800755c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	0cdb      	lsrs	r3, r3, #19
 8007562:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	0adb      	lsrs	r3, r3, #11
 8007568:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	431a      	orrs	r2, r3
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	03db      	lsls	r3, r3, #15
 800757e:	4313      	orrs	r3, r2
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
 8007586:	e016      	b.n	80075b6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	0f1b      	lsrs	r3, r3, #28
 800758c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	0b1b      	lsrs	r3, r3, #12
 8007598:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	011a      	lsls	r2, r3, #4
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	431a      	orrs	r2, r3
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	4313      	orrs	r3, r2
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80075be:	e003      	b.n	80075c8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	60da      	str	r2, [r3, #12]
}
 80075c8:	bf00      	nop
 80075ca:	372c      	adds	r7, #44	; 0x2c
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b089      	sub	sp, #36	; 0x24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80075e6:	2300      	movs	r3, #0
 80075e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e175      	b.n	80078e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80075f4:	2201      	movs	r2, #1
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4013      	ands	r3, r2
 8007606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	f040 8164 	bne.w	80078da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b01      	cmp	r3, #1
 800761c:	d005      	beq.n	800762a <HAL_GPIO_Init+0x56>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d130      	bne.n	800768c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	2203      	movs	r2, #3
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4313      	orrs	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007660:	2201      	movs	r2, #1
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	43db      	mvns	r3, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	091b      	lsrs	r3, r3, #4
 8007676:	f003 0201 	and.w	r2, r3, #1
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	4313      	orrs	r3, r2
 8007684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	2b03      	cmp	r3, #3
 8007696:	d017      	beq.n	80076c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	2203      	movs	r2, #3
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	43db      	mvns	r3, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d123      	bne.n	800771c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	08da      	lsrs	r2, r3, #3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3208      	adds	r2, #8
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	220f      	movs	r2, #15
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4313      	orrs	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	08da      	lsrs	r2, r3, #3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3208      	adds	r2, #8
 8007716:	69b9      	ldr	r1, [r7, #24]
 8007718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	2203      	movs	r2, #3
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	43db      	mvns	r3, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4013      	ands	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0203 	and.w	r2, r3, #3
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4313      	orrs	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80be 	beq.w	80078da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775e:	4b66      	ldr	r3, [pc, #408]	; (80078f8 <HAL_GPIO_Init+0x324>)
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	4a65      	ldr	r2, [pc, #404]	; (80078f8 <HAL_GPIO_Init+0x324>)
 8007764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007768:	6453      	str	r3, [r2, #68]	; 0x44
 800776a:	4b63      	ldr	r3, [pc, #396]	; (80078f8 <HAL_GPIO_Init+0x324>)
 800776c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007776:	4a61      	ldr	r2, [pc, #388]	; (80078fc <HAL_GPIO_Init+0x328>)
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	089b      	lsrs	r3, r3, #2
 800777c:	3302      	adds	r3, #2
 800777e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007782:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	220f      	movs	r2, #15
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	4013      	ands	r3, r2
 8007798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a58      	ldr	r2, [pc, #352]	; (8007900 <HAL_GPIO_Init+0x32c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d037      	beq.n	8007812 <HAL_GPIO_Init+0x23e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a57      	ldr	r2, [pc, #348]	; (8007904 <HAL_GPIO_Init+0x330>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d031      	beq.n	800780e <HAL_GPIO_Init+0x23a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a56      	ldr	r2, [pc, #344]	; (8007908 <HAL_GPIO_Init+0x334>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d02b      	beq.n	800780a <HAL_GPIO_Init+0x236>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a55      	ldr	r2, [pc, #340]	; (800790c <HAL_GPIO_Init+0x338>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d025      	beq.n	8007806 <HAL_GPIO_Init+0x232>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a54      	ldr	r2, [pc, #336]	; (8007910 <HAL_GPIO_Init+0x33c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01f      	beq.n	8007802 <HAL_GPIO_Init+0x22e>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a53      	ldr	r2, [pc, #332]	; (8007914 <HAL_GPIO_Init+0x340>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d019      	beq.n	80077fe <HAL_GPIO_Init+0x22a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a52      	ldr	r2, [pc, #328]	; (8007918 <HAL_GPIO_Init+0x344>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <HAL_GPIO_Init+0x226>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a51      	ldr	r2, [pc, #324]	; (800791c <HAL_GPIO_Init+0x348>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00d      	beq.n	80077f6 <HAL_GPIO_Init+0x222>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a50      	ldr	r2, [pc, #320]	; (8007920 <HAL_GPIO_Init+0x34c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d007      	beq.n	80077f2 <HAL_GPIO_Init+0x21e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a4f      	ldr	r2, [pc, #316]	; (8007924 <HAL_GPIO_Init+0x350>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d101      	bne.n	80077ee <HAL_GPIO_Init+0x21a>
 80077ea:	2309      	movs	r3, #9
 80077ec:	e012      	b.n	8007814 <HAL_GPIO_Init+0x240>
 80077ee:	230a      	movs	r3, #10
 80077f0:	e010      	b.n	8007814 <HAL_GPIO_Init+0x240>
 80077f2:	2308      	movs	r3, #8
 80077f4:	e00e      	b.n	8007814 <HAL_GPIO_Init+0x240>
 80077f6:	2307      	movs	r3, #7
 80077f8:	e00c      	b.n	8007814 <HAL_GPIO_Init+0x240>
 80077fa:	2306      	movs	r3, #6
 80077fc:	e00a      	b.n	8007814 <HAL_GPIO_Init+0x240>
 80077fe:	2305      	movs	r3, #5
 8007800:	e008      	b.n	8007814 <HAL_GPIO_Init+0x240>
 8007802:	2304      	movs	r3, #4
 8007804:	e006      	b.n	8007814 <HAL_GPIO_Init+0x240>
 8007806:	2303      	movs	r3, #3
 8007808:	e004      	b.n	8007814 <HAL_GPIO_Init+0x240>
 800780a:	2302      	movs	r3, #2
 800780c:	e002      	b.n	8007814 <HAL_GPIO_Init+0x240>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <HAL_GPIO_Init+0x240>
 8007812:	2300      	movs	r3, #0
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	f002 0203 	and.w	r2, r2, #3
 800781a:	0092      	lsls	r2, r2, #2
 800781c:	4093      	lsls	r3, r2
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007824:	4935      	ldr	r1, [pc, #212]	; (80078fc <HAL_GPIO_Init+0x328>)
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	089b      	lsrs	r3, r3, #2
 800782a:	3302      	adds	r3, #2
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007832:	4b3d      	ldr	r3, [pc, #244]	; (8007928 <HAL_GPIO_Init+0x354>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	43db      	mvns	r3, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	4013      	ands	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007856:	4a34      	ldr	r2, [pc, #208]	; (8007928 <HAL_GPIO_Init+0x354>)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800785c:	4b32      	ldr	r3, [pc, #200]	; (8007928 <HAL_GPIO_Init+0x354>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	43db      	mvns	r3, r3
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007880:	4a29      	ldr	r2, [pc, #164]	; (8007928 <HAL_GPIO_Init+0x354>)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007886:	4b28      	ldr	r3, [pc, #160]	; (8007928 <HAL_GPIO_Init+0x354>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	43db      	mvns	r3, r3
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	4013      	ands	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078aa:	4a1f      	ldr	r2, [pc, #124]	; (8007928 <HAL_GPIO_Init+0x354>)
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078b0:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <HAL_GPIO_Init+0x354>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	43db      	mvns	r3, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078d4:	4a14      	ldr	r2, [pc, #80]	; (8007928 <HAL_GPIO_Init+0x354>)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	3301      	adds	r3, #1
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	f67f ae86 	bls.w	80075f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	3724      	adds	r7, #36	; 0x24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40023800 	.word	0x40023800
 80078fc:	40013800 	.word	0x40013800
 8007900:	40020000 	.word	0x40020000
 8007904:	40020400 	.word	0x40020400
 8007908:	40020800 	.word	0x40020800
 800790c:	40020c00 	.word	0x40020c00
 8007910:	40021000 	.word	0x40021000
 8007914:	40021400 	.word	0x40021400
 8007918:	40021800 	.word	0x40021800
 800791c:	40021c00 	.word	0x40021c00
 8007920:	40022000 	.word	0x40022000
 8007924:	40022400 	.word	0x40022400
 8007928:	40013c00 	.word	0x40013c00

0800792c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007936:	2300      	movs	r3, #0
 8007938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800793e:	2300      	movs	r3, #0
 8007940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	e0d9      	b.n	8007afc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007948:	2201      	movs	r2, #1
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4013      	ands	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	429a      	cmp	r2, r3
 8007960:	f040 80c9 	bne.w	8007af6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007964:	4a6b      	ldr	r2, [pc, #428]	; (8007b14 <HAL_GPIO_DeInit+0x1e8>)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	089b      	lsrs	r3, r3, #2
 800796a:	3302      	adds	r3, #2
 800796c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007970:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	220f      	movs	r2, #15
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a63      	ldr	r2, [pc, #396]	; (8007b18 <HAL_GPIO_DeInit+0x1ec>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d037      	beq.n	80079fe <HAL_GPIO_DeInit+0xd2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a62      	ldr	r2, [pc, #392]	; (8007b1c <HAL_GPIO_DeInit+0x1f0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d031      	beq.n	80079fa <HAL_GPIO_DeInit+0xce>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a61      	ldr	r2, [pc, #388]	; (8007b20 <HAL_GPIO_DeInit+0x1f4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d02b      	beq.n	80079f6 <HAL_GPIO_DeInit+0xca>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a60      	ldr	r2, [pc, #384]	; (8007b24 <HAL_GPIO_DeInit+0x1f8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d025      	beq.n	80079f2 <HAL_GPIO_DeInit+0xc6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a5f      	ldr	r2, [pc, #380]	; (8007b28 <HAL_GPIO_DeInit+0x1fc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01f      	beq.n	80079ee <HAL_GPIO_DeInit+0xc2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a5e      	ldr	r2, [pc, #376]	; (8007b2c <HAL_GPIO_DeInit+0x200>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d019      	beq.n	80079ea <HAL_GPIO_DeInit+0xbe>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a5d      	ldr	r2, [pc, #372]	; (8007b30 <HAL_GPIO_DeInit+0x204>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <HAL_GPIO_DeInit+0xba>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a5c      	ldr	r2, [pc, #368]	; (8007b34 <HAL_GPIO_DeInit+0x208>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00d      	beq.n	80079e2 <HAL_GPIO_DeInit+0xb6>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a5b      	ldr	r2, [pc, #364]	; (8007b38 <HAL_GPIO_DeInit+0x20c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d007      	beq.n	80079de <HAL_GPIO_DeInit+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a5a      	ldr	r2, [pc, #360]	; (8007b3c <HAL_GPIO_DeInit+0x210>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <HAL_GPIO_DeInit+0xae>
 80079d6:	2309      	movs	r3, #9
 80079d8:	e012      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079da:	230a      	movs	r3, #10
 80079dc:	e010      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079de:	2308      	movs	r3, #8
 80079e0:	e00e      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079e2:	2307      	movs	r3, #7
 80079e4:	e00c      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079e6:	2306      	movs	r3, #6
 80079e8:	e00a      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079ea:	2305      	movs	r3, #5
 80079ec:	e008      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079ee:	2304      	movs	r3, #4
 80079f0:	e006      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079f2:	2303      	movs	r3, #3
 80079f4:	e004      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e002      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <HAL_GPIO_DeInit+0xd4>
 80079fe:	2300      	movs	r3, #0
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	f002 0203 	and.w	r2, r2, #3
 8007a06:	0092      	lsls	r2, r2, #2
 8007a08:	4093      	lsls	r3, r2
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d132      	bne.n	8007a76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007a10:	4b4b      	ldr	r3, [pc, #300]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	43db      	mvns	r3, r3
 8007a18:	4949      	ldr	r1, [pc, #292]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007a1e:	4b48      	ldr	r3, [pc, #288]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	43db      	mvns	r3, r3
 8007a26:	4946      	ldr	r1, [pc, #280]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007a2c:	4b44      	ldr	r3, [pc, #272]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	43db      	mvns	r3, r3
 8007a34:	4942      	ldr	r1, [pc, #264]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007a3a:	4b41      	ldr	r3, [pc, #260]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	493f      	ldr	r1, [pc, #252]	; (8007b40 <HAL_GPIO_DeInit+0x214>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	220f      	movs	r2, #15
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007a58:	4a2e      	ldr	r2, [pc, #184]	; (8007b14 <HAL_GPIO_DeInit+0x1e8>)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	089b      	lsrs	r3, r3, #2
 8007a5e:	3302      	adds	r3, #2
 8007a60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	43da      	mvns	r2, r3
 8007a68:	482a      	ldr	r0, [pc, #168]	; (8007b14 <HAL_GPIO_DeInit+0x1e8>)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	089b      	lsrs	r3, r3, #2
 8007a6e:	400a      	ands	r2, r1
 8007a70:	3302      	adds	r3, #2
 8007a72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	2103      	movs	r1, #3
 8007a80:	fa01 f303 	lsl.w	r3, r1, r3
 8007a84:	43db      	mvns	r3, r3
 8007a86:	401a      	ands	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	08da      	lsrs	r2, r3, #3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3208      	adds	r2, #8
 8007a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	220f      	movs	r2, #15
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	08d2      	lsrs	r2, r2, #3
 8007aac:	4019      	ands	r1, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3208      	adds	r2, #8
 8007ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	2103      	movs	r1, #3
 8007ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	401a      	ands	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	401a      	ands	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	2103      	movs	r1, #3
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	43db      	mvns	r3, r3
 8007af0:	401a      	ands	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	3301      	adds	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	f67f af22 	bls.w	8007948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40013800 	.word	0x40013800
 8007b18:	40020000 	.word	0x40020000
 8007b1c:	40020400 	.word	0x40020400
 8007b20:	40020800 	.word	0x40020800
 8007b24:	40020c00 	.word	0x40020c00
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	40021400 	.word	0x40021400
 8007b30:	40021800 	.word	0x40021800
 8007b34:	40021c00 	.word	0x40021c00
 8007b38:	40022000 	.word	0x40022000
 8007b3c:	40022400 	.word	0x40022400
 8007b40:	40013c00 	.word	0x40013c00

08007b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
 8007b50:	4613      	mov	r3, r2
 8007b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b54:	787b      	ldrb	r3, [r7, #1]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b5a:	887a      	ldrh	r2, [r7, #2]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007b60:	e003      	b.n	8007b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007b62:	887b      	ldrh	r3, [r7, #2]
 8007b64:	041a      	lsls	r2, r3, #16
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	619a      	str	r2, [r3, #24]
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b88:	887a      	ldrh	r2, [r7, #2]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	041a      	lsls	r2, r3, #16
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	43d9      	mvns	r1, r3
 8007b94:	887b      	ldrh	r3, [r7, #2]
 8007b96:	400b      	ands	r3, r1
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	619a      	str	r2, [r3, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bb6:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d006      	beq.n	8007bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007bc2:	4a05      	ldr	r2, [pc, #20]	; (8007bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fa fcec 	bl	80025a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40013c00 	.word	0x40013c00

08007bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e07f      	b.n	8007cee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fd fbde 	bl	80053c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d107      	bne.n	8007c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c52:	609a      	str	r2, [r3, #8]
 8007c54:	e006      	b.n	8007c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d104      	bne.n	8007c76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6859      	ldr	r1, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <HAL_I2C_Init+0x11c>)
 8007c82:	430b      	orrs	r3, r1
 8007c84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69d9      	ldr	r1, [r3, #28]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	02008000 	.word	0x02008000

08007cfc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e021      	b.n	8007d52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2224      	movs	r2, #36	; 0x24
 8007d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0201 	bic.w	r2, r2, #1
 8007d24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fd fbf4 	bl	8005514 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	4608      	mov	r0, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	817b      	strh	r3, [r7, #10]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	813b      	strh	r3, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	f040 80f9 	bne.w	8007f76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_I2C_Mem_Write+0x34>
 8007d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0ed      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_I2C_Mem_Write+0x4e>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e0e6      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007db2:	f7fe f8cf 	bl	8005f54 <HAL_GetTick>
 8007db6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	2319      	movs	r3, #25
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fad1 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e0d1      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2221      	movs	r2, #33	; 0x21
 8007dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2240      	movs	r2, #64	; 0x40
 8007de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a3a      	ldr	r2, [r7, #32]
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dfc:	88f8      	ldrh	r0, [r7, #6]
 8007dfe:	893a      	ldrh	r2, [r7, #8]
 8007e00:	8979      	ldrh	r1, [r7, #10]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f9e1 	bl	80081d4 <I2C_RequestMemoryWrite>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0a9      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2bff      	cmp	r3, #255	; 0xff
 8007e2c:	d90e      	bls.n	8007e4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	22ff      	movs	r2, #255	; 0xff
 8007e32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	8979      	ldrh	r1, [r7, #10]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fc39 	bl	80086bc <I2C_TransferConfig>
 8007e4a:	e00f      	b.n	8007e6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	8979      	ldrh	r1, [r7, #10]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fc28 	bl	80086bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fabb 	bl	80083ec <I2C_WaitOnTXISFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e07b      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d034      	beq.n	8007f24 <HAL_I2C_Mem_Write+0x1c8>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d130      	bne.n	8007f24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fa4d 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e04d      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2bff      	cmp	r3, #255	; 0xff
 8007ee4:	d90e      	bls.n	8007f04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	8979      	ldrh	r1, [r7, #10]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fbdd 	bl	80086bc <I2C_TransferConfig>
 8007f02:	e00f      	b.n	8007f24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	8979      	ldrh	r1, [r7, #10]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 fbcc 	bl	80086bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d19e      	bne.n	8007e6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fa9a 	bl	800846c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e01a      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2220      	movs	r2, #32
 8007f48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6859      	ldr	r1, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <HAL_I2C_Mem_Write+0x224>)
 8007f56:	400b      	ands	r3, r1
 8007f58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007f76:	2302      	movs	r3, #2
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	fe00e800 	.word	0xfe00e800

08007f84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4611      	mov	r1, r2
 8007f90:	461a      	mov	r2, r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	817b      	strh	r3, [r7, #10]
 8007f96:	460b      	mov	r3, r1
 8007f98:	813b      	strh	r3, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	f040 80fd 	bne.w	80081a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <HAL_I2C_Mem_Read+0x34>
 8007fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d105      	bne.n	8007fc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e0f1      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <HAL_I2C_Mem_Read+0x4e>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e0ea      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fda:	f7fd ffbb 	bl	8005f54 <HAL_GetTick>
 8007fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	2319      	movs	r3, #25
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f9bd 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0d5      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2222      	movs	r2, #34	; 0x22
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800801c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008024:	88f8      	ldrh	r0, [r7, #6]
 8008026:	893a      	ldrh	r2, [r7, #8]
 8008028:	8979      	ldrh	r1, [r7, #10]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4603      	mov	r3, r0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f921 	bl	800827c <I2C_RequestMemoryRead>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e0ad      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29b      	uxth	r3, r3
 8008052:	2bff      	cmp	r3, #255	; 0xff
 8008054:	d90e      	bls.n	8008074 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008060:	b2da      	uxtb	r2, r3
 8008062:	8979      	ldrh	r1, [r7, #10]
 8008064:	4b52      	ldr	r3, [pc, #328]	; (80081b0 <HAL_I2C_Mem_Read+0x22c>)
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 fb25 	bl	80086bc <I2C_TransferConfig>
 8008072:	e00f      	b.n	8008094 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008078:	b29a      	uxth	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008082:	b2da      	uxtb	r2, r3
 8008084:	8979      	ldrh	r1, [r7, #10]
 8008086:	4b4a      	ldr	r3, [pc, #296]	; (80081b0 <HAL_I2C_Mem_Read+0x22c>)
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 fb14 	bl	80086bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2200      	movs	r2, #0
 800809c:	2104      	movs	r1, #4
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f964 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e07c      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d034      	beq.n	8008154 <HAL_I2C_Mem_Read+0x1d0>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d130      	bne.n	8008154 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2200      	movs	r2, #0
 80080fa:	2180      	movs	r1, #128	; 0x80
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f935 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e04d      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2bff      	cmp	r3, #255	; 0xff
 8008114:	d90e      	bls.n	8008134 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008120:	b2da      	uxtb	r2, r3
 8008122:	8979      	ldrh	r1, [r7, #10]
 8008124:	2300      	movs	r3, #0
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fac5 	bl	80086bc <I2C_TransferConfig>
 8008132:	e00f      	b.n	8008154 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008142:	b2da      	uxtb	r2, r3
 8008144:	8979      	ldrh	r1, [r7, #10]
 8008146:	2300      	movs	r3, #0
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 fab4 	bl	80086bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d19a      	bne.n	8008094 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f982 	bl	800846c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e01a      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2220      	movs	r2, #32
 8008178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6859      	ldr	r1, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_I2C_Mem_Read+0x230>)
 8008186:	400b      	ands	r3, r1
 8008188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2220      	movs	r2, #32
 800818e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	80002400 	.word	0x80002400
 80081b4:	fe00e800 	.word	0xfe00e800

080081b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c6:	b2db      	uxtb	r3, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	817b      	strh	r3, [r7, #10]
 80081e6:	460b      	mov	r3, r1
 80081e8:	813b      	strh	r3, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80081ee:	88fb      	ldrh	r3, [r7, #6]
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	8979      	ldrh	r1, [r7, #10]
 80081f4:	4b20      	ldr	r3, [pc, #128]	; (8008278 <I2C_RequestMemoryWrite+0xa4>)
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fa5d 	bl	80086bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	69b9      	ldr	r1, [r7, #24]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 f8f0 	bl	80083ec <I2C_WaitOnTXISFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e02c      	b.n	8008270 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d105      	bne.n	8008228 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800821c:	893b      	ldrh	r3, [r7, #8]
 800821e:	b2da      	uxtb	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	629a      	str	r2, [r3, #40]	; 0x28
 8008226:	e015      	b.n	8008254 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008228:	893b      	ldrh	r3, [r7, #8]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	b2da      	uxtb	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	69b9      	ldr	r1, [r7, #24]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 f8d6 	bl	80083ec <I2C_WaitOnTXISFlagUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e012      	b.n	8008270 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800824a:	893b      	ldrh	r3, [r7, #8]
 800824c:	b2da      	uxtb	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2200      	movs	r2, #0
 800825c:	2180      	movs	r1, #128	; 0x80
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f884 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	80002000 	.word	0x80002000

0800827c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	4608      	mov	r0, r1
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	4603      	mov	r3, r0
 800828c:	817b      	strh	r3, [r7, #10]
 800828e:	460b      	mov	r3, r1
 8008290:	813b      	strh	r3, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	8979      	ldrh	r1, [r7, #10]
 800829c:	4b20      	ldr	r3, [pc, #128]	; (8008320 <I2C_RequestMemoryRead+0xa4>)
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fa0a 	bl	80086bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	69b9      	ldr	r1, [r7, #24]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f89d 	bl	80083ec <I2C_WaitOnTXISFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e02c      	b.n	8008316 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082c2:	893b      	ldrh	r3, [r7, #8]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28
 80082cc:	e015      	b.n	80082fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082ce:	893b      	ldrh	r3, [r7, #8]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	69b9      	ldr	r1, [r7, #24]
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f883 	bl	80083ec <I2C_WaitOnTXISFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e012      	b.n	8008316 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082f0:	893b      	ldrh	r3, [r7, #8]
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2200      	movs	r2, #0
 8008302:	2140      	movs	r1, #64	; 0x40
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f831 	bl	800836c <I2C_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	80002000 	.word	0x80002000

08008324 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b02      	cmp	r3, #2
 8008338:	d103      	bne.n	8008342 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b01      	cmp	r3, #1
 800834e:	d007      	beq.n	8008360 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	619a      	str	r2, [r3, #24]
  }
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800837c:	e022      	b.n	80083c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008384:	d01e      	beq.n	80083c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008386:	f7fd fde5 	bl	8005f54 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d302      	bcc.n	800839c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d113      	bne.n	80083c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	f043 0220 	orr.w	r2, r3, #32
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e00f      	b.n	80083e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4013      	ands	r3, r2
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d0cd      	beq.n	800837e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083f8:	e02c      	b.n	8008454 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 f870 	bl	80084e4 <I2C_IsErrorOccurred>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e02a      	b.n	8008464 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008414:	d01e      	beq.n	8008454 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008416:	f7fd fd9d 	bl	8005f54 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	429a      	cmp	r2, r3
 8008424:	d302      	bcc.n	800842c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d113      	bne.n	8008454 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	f043 0220 	orr.w	r2, r3, #32
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e007      	b.n	8008464 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d1cb      	bne.n	80083fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008478:	e028      	b.n	80084cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 f830 	bl	80084e4 <I2C_IsErrorOccurred>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e026      	b.n	80084dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848e:	f7fd fd61 	bl	8005f54 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	429a      	cmp	r2, r3
 800849c:	d302      	bcc.n	80084a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d113      	bne.n	80084cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a8:	f043 0220 	orr.w	r2, r3, #32
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e007      	b.n	80084dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d1cf      	bne.n	800847a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	; 0x28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d075      	beq.n	80085fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2210      	movs	r2, #16
 8008516:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008518:	e056      	b.n	80085c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008520:	d052      	beq.n	80085c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008522:	f7fd fd17 	bl	8005f54 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	429a      	cmp	r2, r3
 8008530:	d302      	bcc.n	8008538 <I2C_IsErrorOccurred+0x54>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d147      	bne.n	80085c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008542:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800854a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855a:	d12e      	bne.n	80085ba <I2C_IsErrorOccurred+0xd6>
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008562:	d02a      	beq.n	80085ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008564:	7cfb      	ldrb	r3, [r7, #19]
 8008566:	2b20      	cmp	r3, #32
 8008568:	d027      	beq.n	80085ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008578:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800857a:	f7fd fceb 	bl	8005f54 <HAL_GetTick>
 800857e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008580:	e01b      	b.n	80085ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008582:	f7fd fce7 	bl	8005f54 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b19      	cmp	r3, #25
 800858e:	d914      	bls.n	80085ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008594:	f043 0220 	orr.w	r2, r3, #32
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d1dc      	bne.n	8008582 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d003      	beq.n	80085de <I2C_IsErrorOccurred+0xfa>
 80085d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d09d      	beq.n	800851a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80085de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2220      	movs	r2, #32
 80085ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f043 0304 	orr.w	r3, r3, #4
 80085f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	f043 0301 	orr.w	r3, r3, #1
 8008614:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800861e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	f043 0308 	orr.w	r3, r3, #8
 8008636:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	f043 0302 	orr.w	r3, r3, #2
 8008658:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800866a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01c      	beq.n	80086ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff fe56 	bl	8008324 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6859      	ldr	r1, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <I2C_IsErrorOccurred+0x1d4>)
 8008684:	400b      	ands	r3, r1
 8008686:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	431a      	orrs	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80086ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3728      	adds	r7, #40	; 0x28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	fe00e800 	.word	0xfe00e800

080086bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	817b      	strh	r3, [r7, #10]
 80086ca:	4613      	mov	r3, r2
 80086cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086ce:	897b      	ldrh	r3, [r7, #10]
 80086d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086d4:	7a7b      	ldrb	r3, [r7, #9]
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086dc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086ea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	0d5b      	lsrs	r3, r3, #21
 80086f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <I2C_TransferConfig+0x60>)
 80086fc:	430b      	orrs	r3, r1
 80086fe:	43db      	mvns	r3, r3
 8008700:	ea02 0103 	and.w	r1, r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	03ff63ff 	.word	0x03ff63ff

08008720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b20      	cmp	r3, #32
 8008734:	d138      	bne.n	80087a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008740:	2302      	movs	r3, #2
 8008742:	e032      	b.n	80087aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2224      	movs	r2, #36	; 0x24
 8008750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6819      	ldr	r1, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0201 	orr.w	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e000      	b.n	80087aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087a8:	2302      	movs	r3, #2
  }
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d139      	bne.n	8008840 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e033      	b.n	8008842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2224      	movs	r2, #36	; 0x24
 80087e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0201 	bic.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008808:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	e000      	b.n	8008842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008840:	2302      	movs	r3, #2
  }
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e0bf      	b.n	80089e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fc fe88 	bl	800558c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008892:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6899      	ldr	r1, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b4a      	ldr	r3, [pc, #296]	; (80089ec <HAL_LTDC_Init+0x19c>)
 80088c4:	400b      	ands	r3, r1
 80088c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6899      	ldr	r1, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68d9      	ldr	r1, [r3, #12]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	4b3e      	ldr	r3, [pc, #248]	; (80089ec <HAL_LTDC_Init+0x19c>)
 80088f2:	400b      	ands	r3, r1
 80088f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68d9      	ldr	r1, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1a      	ldr	r2, [r3, #32]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6919      	ldr	r1, [r3, #16]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4b33      	ldr	r3, [pc, #204]	; (80089ec <HAL_LTDC_Init+0x19c>)
 8008920:	400b      	ands	r3, r1
 8008922:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	041b      	lsls	r3, r3, #16
 800892a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6919      	ldr	r1, [r3, #16]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6959      	ldr	r1, [r3, #20]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b27      	ldr	r3, [pc, #156]	; (80089ec <HAL_LTDC_Init+0x19c>)
 800894e:	400b      	ands	r3, r1
 8008950:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	041b      	lsls	r3, r3, #16
 8008958:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6959      	ldr	r1, [r3, #20]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008992:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80089a6:	431a      	orrs	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0206 	orr.w	r2, r2, #6
 80089be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0201 	orr.w	r2, r2, #1
 80089ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	f000f800 	.word	0xf000f800

080089f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d023      	beq.n	8008a5a <HAL_LTDC_IRQHandler+0x6a>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01e      	beq.n	8008a5a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0204 	bic.w	r2, r2, #4
 8008a2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2204      	movs	r2, #4
 8008a32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a3a:	f043 0201 	orr.w	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2204      	movs	r2, #4
 8008a48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f86f 	bl	8008b38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d023      	beq.n	8008aac <HAL_LTDC_IRQHandler+0xbc>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01e      	beq.n	8008aac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0202 	bic.w	r2, r2, #2
 8008a7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2202      	movs	r2, #2
 8008a84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a8c:	f043 0202 	orr.w	r2, r3, #2
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2204      	movs	r2, #4
 8008a9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f846 	bl	8008b38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01b      	beq.n	8008aee <HAL_LTDC_IRQHandler+0xfe>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d016      	beq.n	8008aee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 0201 	bic.w	r2, r2, #1
 8008ace:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f82f 	bl	8008b4c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f003 0308 	and.w	r3, r3, #8
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01b      	beq.n	8008b30 <HAL_LTDC_IRQHandler+0x140>
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d016      	beq.n	8008b30 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0208 	bic.w	r2, r2, #8
 8008b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2208      	movs	r2, #8
 8008b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f818 	bl	8008b60 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b74:	b5b0      	push	{r4, r5, r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_LTDC_ConfigLayer+0x1a>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e02c      	b.n	8008be8 <HAL_LTDC_ConfigLayer+0x74>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2134      	movs	r1, #52	; 0x34
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	4413      	add	r3, r2
 8008baa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f81f 	bl	8008c0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bdb0      	pop	{r4, r5, r7, pc}

08008bf0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008bfe:	b2db      	uxtb	r3, r3
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b089      	sub	sp, #36	; 0x24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c28:	4413      	add	r3, r2
 8008c2a:	041b      	lsls	r3, r3, #16
 8008c2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	01db      	lsls	r3, r3, #7
 8008c38:	4413      	add	r3, r2
 8008c3a:	3384      	adds	r3, #132	; 0x84
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	4611      	mov	r1, r2
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	01d2      	lsls	r2, r2, #7
 8008c48:	440a      	add	r2, r1
 8008c4a:	3284      	adds	r2, #132	; 0x84
 8008c4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008c50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c62:	4413      	add	r3, r2
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	01db      	lsls	r3, r3, #7
 8008c70:	440b      	add	r3, r1
 8008c72:	3384      	adds	r3, #132	; 0x84
 8008c74:	4619      	mov	r1, r3
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c8a:	4413      	add	r3, r2
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	01db      	lsls	r3, r3, #7
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3384      	adds	r3, #132	; 0x84
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	01d2      	lsls	r2, r2, #7
 8008caa:	440a      	add	r2, r1
 8008cac:	3284      	adds	r2, #132	; 0x84
 8008cae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008cb2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cc2:	4413      	add	r3, r2
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	01db      	lsls	r3, r3, #7
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3384      	adds	r3, #132	; 0x84
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	01db      	lsls	r3, r3, #7
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3384      	adds	r3, #132	; 0x84
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	01d2      	lsls	r2, r2, #7
 8008cf6:	440a      	add	r2, r1
 8008cf8:	3284      	adds	r2, #132	; 0x84
 8008cfa:	f023 0307 	bic.w	r3, r3, #7
 8008cfe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	01db      	lsls	r3, r3, #7
 8008d0a:	4413      	add	r3, r2
 8008d0c:	3384      	adds	r3, #132	; 0x84
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d1c:	021b      	lsls	r3, r3, #8
 8008d1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	061b      	lsls	r3, r3, #24
 8008d30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	01db      	lsls	r3, r3, #7
 8008d3c:	4413      	add	r3, r2
 8008d3e:	3384      	adds	r3, #132	; 0x84
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	01db      	lsls	r3, r3, #7
 8008d4c:	4413      	add	r3, r2
 8008d4e:	3384      	adds	r3, #132	; 0x84
 8008d50:	461a      	mov	r2, r3
 8008d52:	2300      	movs	r3, #0
 8008d54:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	431a      	orrs	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	01db      	lsls	r3, r3, #7
 8008d70:	440b      	add	r3, r1
 8008d72:	3384      	adds	r3, #132	; 0x84
 8008d74:	4619      	mov	r1, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	01db      	lsls	r3, r3, #7
 8008d86:	4413      	add	r3, r2
 8008d88:	3384      	adds	r3, #132	; 0x84
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	4611      	mov	r1, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	01d2      	lsls	r2, r2, #7
 8008d96:	440a      	add	r2, r1
 8008d98:	3284      	adds	r2, #132	; 0x84
 8008d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	01db      	lsls	r3, r3, #7
 8008daa:	4413      	add	r3, r2
 8008dac:	3384      	adds	r3, #132	; 0x84
 8008dae:	461a      	mov	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	01db      	lsls	r3, r3, #7
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3384      	adds	r3, #132	; 0x84
 8008dc4:	69da      	ldr	r2, [r3, #28]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	01db      	lsls	r3, r3, #7
 8008dd0:	440b      	add	r3, r1
 8008dd2:	3384      	adds	r3, #132	; 0x84
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4b58      	ldr	r3, [pc, #352]	; (8008f38 <LTDC_SetConfig+0x32c>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	69da      	ldr	r2, [r3, #28]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	6809      	ldr	r1, [r1, #0]
 8008de8:	4608      	mov	r0, r1
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	01c9      	lsls	r1, r1, #7
 8008dee:	4401      	add	r1, r0
 8008df0:	3184      	adds	r1, #132	; 0x84
 8008df2:	4313      	orrs	r3, r2
 8008df4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	01db      	lsls	r3, r3, #7
 8008e00:	4413      	add	r3, r2
 8008e02:	3384      	adds	r3, #132	; 0x84
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	01db      	lsls	r3, r3, #7
 8008e10:	4413      	add	r3, r2
 8008e12:	3384      	adds	r3, #132	; 0x84
 8008e14:	461a      	mov	r2, r3
 8008e16:	2300      	movs	r3, #0
 8008e18:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	01db      	lsls	r3, r3, #7
 8008e24:	4413      	add	r3, r2
 8008e26:	3384      	adds	r3, #132	; 0x84
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008e38:	2304      	movs	r3, #4
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e01b      	b.n	8008e76 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d102      	bne.n	8008e4c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008e46:	2303      	movs	r3, #3
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e014      	b.n	8008e76 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d00b      	beq.n	8008e6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d007      	beq.n	8008e6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d003      	beq.n	8008e6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e68:	2b07      	cmp	r3, #7
 8008e6a:	d102      	bne.n	8008e72 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	e001      	b.n	8008e76 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008e72:	2301      	movs	r3, #1
 8008e74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	01db      	lsls	r3, r3, #7
 8008e80:	4413      	add	r3, r2
 8008e82:	3384      	adds	r3, #132	; 0x84
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	01d2      	lsls	r2, r2, #7
 8008e90:	440a      	add	r2, r1
 8008e92:	3284      	adds	r2, #132	; 0x84
 8008e94:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008e98:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	fb02 f303 	mul.w	r3, r2, r3
 8008ea4:	041a      	lsls	r2, r3, #16
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6859      	ldr	r1, [r3, #4]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	1acb      	subs	r3, r1, r3
 8008eb0:	69f9      	ldr	r1, [r7, #28]
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	3303      	adds	r3, #3
 8008eb8:	68f9      	ldr	r1, [r7, #12]
 8008eba:	6809      	ldr	r1, [r1, #0]
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	01c9      	lsls	r1, r1, #7
 8008ec2:	4401      	add	r1, r0
 8008ec4:	3184      	adds	r1, #132	; 0x84
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	01db      	lsls	r3, r3, #7
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3384      	adds	r3, #132	; 0x84
 8008ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	01db      	lsls	r3, r3, #7
 8008ee4:	440b      	add	r3, r1
 8008ee6:	3384      	adds	r3, #132	; 0x84
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <LTDC_SetConfig+0x330>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	01db      	lsls	r3, r3, #7
 8008efa:	4413      	add	r3, r2
 8008efc:	3384      	adds	r3, #132	; 0x84
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	01db      	lsls	r3, r3, #7
 8008f10:	4413      	add	r3, r2
 8008f12:	3384      	adds	r3, #132	; 0x84
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	6812      	ldr	r2, [r2, #0]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	01d2      	lsls	r2, r2, #7
 8008f20:	440a      	add	r2, r1
 8008f22:	3284      	adds	r2, #132	; 0x84
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	6013      	str	r3, [r2, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	3724      	adds	r7, #36	; 0x24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	fffff8f8 	.word	0xfffff8f8
 8008f3c:	fffff800 	.word	0xfffff800

08008f40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a04      	ldr	r2, [pc, #16]	; (8008f5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f4e:	6013      	str	r3, [r2, #0]
}
 8008f50:	bf00      	nop
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	40007000 	.word	0x40007000

08008f60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f6a:	4b23      	ldr	r3, [pc, #140]	; (8008ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	4a22      	ldr	r2, [pc, #136]	; (8008ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6413      	str	r3, [r2, #64]	; 0x40
 8008f76:	4b20      	ldr	r3, [pc, #128]	; (8008ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f82:	4b1e      	ldr	r3, [pc, #120]	; (8008ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a1d      	ldr	r2, [pc, #116]	; (8008ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f8e:	f7fc ffe1 	bl	8005f54 <HAL_GetTick>
 8008f92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f94:	e009      	b.n	8008faa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f96:	f7fc ffdd 	bl	8005f54 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fa4:	d901      	bls.n	8008faa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e022      	b.n	8008ff0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008faa:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb6:	d1ee      	bne.n	8008f96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008fb8:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0f      	ldr	r2, [pc, #60]	; (8008ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fc4:	f7fc ffc6 	bl	8005f54 <HAL_GetTick>
 8008fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fca:	e009      	b.n	8008fe0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008fcc:	f7fc ffc2 	bl	8005f54 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fda:	d901      	bls.n	8008fe0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e007      	b.n	8008ff0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fec:	d1ee      	bne.n	8008fcc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40007000 	.word	0x40007000

08009000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e291      	b.n	800953a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 8087 	beq.w	8009132 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009024:	4b96      	ldr	r3, [pc, #600]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 030c 	and.w	r3, r3, #12
 800902c:	2b04      	cmp	r3, #4
 800902e:	d00c      	beq.n	800904a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009030:	4b93      	ldr	r3, [pc, #588]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 030c 	and.w	r3, r3, #12
 8009038:	2b08      	cmp	r3, #8
 800903a:	d112      	bne.n	8009062 <HAL_RCC_OscConfig+0x62>
 800903c:	4b90      	ldr	r3, [pc, #576]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009048:	d10b      	bne.n	8009062 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800904a:	4b8d      	ldr	r3, [pc, #564]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d06c      	beq.n	8009130 <HAL_RCC_OscConfig+0x130>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d168      	bne.n	8009130 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e26b      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906a:	d106      	bne.n	800907a <HAL_RCC_OscConfig+0x7a>
 800906c:	4b84      	ldr	r3, [pc, #528]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a83      	ldr	r2, [pc, #524]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	e02e      	b.n	80090d8 <HAL_RCC_OscConfig+0xd8>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10c      	bne.n	800909c <HAL_RCC_OscConfig+0x9c>
 8009082:	4b7f      	ldr	r3, [pc, #508]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a7e      	ldr	r2, [pc, #504]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	4b7c      	ldr	r3, [pc, #496]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a7b      	ldr	r2, [pc, #492]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e01d      	b.n	80090d8 <HAL_RCC_OscConfig+0xd8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090a4:	d10c      	bne.n	80090c0 <HAL_RCC_OscConfig+0xc0>
 80090a6:	4b76      	ldr	r3, [pc, #472]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a75      	ldr	r2, [pc, #468]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	4b73      	ldr	r3, [pc, #460]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a72      	ldr	r2, [pc, #456]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	e00b      	b.n	80090d8 <HAL_RCC_OscConfig+0xd8>
 80090c0:	4b6f      	ldr	r3, [pc, #444]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a6e      	ldr	r2, [pc, #440]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	4b6c      	ldr	r3, [pc, #432]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a6b      	ldr	r2, [pc, #428]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d013      	beq.n	8009108 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e0:	f7fc ff38 	bl	8005f54 <HAL_GetTick>
 80090e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090e6:	e008      	b.n	80090fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090e8:	f7fc ff34 	bl	8005f54 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b64      	cmp	r3, #100	; 0x64
 80090f4:	d901      	bls.n	80090fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e21f      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090fa:	4b61      	ldr	r3, [pc, #388]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0f0      	beq.n	80090e8 <HAL_RCC_OscConfig+0xe8>
 8009106:	e014      	b.n	8009132 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009108:	f7fc ff24 	bl	8005f54 <HAL_GetTick>
 800910c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009110:	f7fc ff20 	bl	8005f54 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b64      	cmp	r3, #100	; 0x64
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e20b      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009122:	4b57      	ldr	r3, [pc, #348]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f0      	bne.n	8009110 <HAL_RCC_OscConfig+0x110>
 800912e:	e000      	b.n	8009132 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d069      	beq.n	8009212 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800913e:	4b50      	ldr	r3, [pc, #320]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 030c 	and.w	r3, r3, #12
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800914a:	4b4d      	ldr	r3, [pc, #308]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 030c 	and.w	r3, r3, #12
 8009152:	2b08      	cmp	r3, #8
 8009154:	d11c      	bne.n	8009190 <HAL_RCC_OscConfig+0x190>
 8009156:	4b4a      	ldr	r3, [pc, #296]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d116      	bne.n	8009190 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009162:	4b47      	ldr	r3, [pc, #284]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <HAL_RCC_OscConfig+0x17a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d001      	beq.n	800917a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e1df      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800917a:	4b41      	ldr	r3, [pc, #260]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	493d      	ldr	r1, [pc, #244]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800918a:	4313      	orrs	r3, r2
 800918c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800918e:	e040      	b.n	8009212 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d023      	beq.n	80091e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009198:	4b39      	ldr	r3, [pc, #228]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a38      	ldr	r2, [pc, #224]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800919e:	f043 0301 	orr.w	r3, r3, #1
 80091a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a4:	f7fc fed6 	bl	8005f54 <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091ac:	f7fc fed2 	bl	8005f54 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e1bd      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091be:	4b30      	ldr	r3, [pc, #192]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0f0      	beq.n	80091ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ca:	4b2d      	ldr	r3, [pc, #180]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	4929      	ldr	r1, [pc, #164]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	600b      	str	r3, [r1, #0]
 80091de:	e018      	b.n	8009212 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091e0:	4b27      	ldr	r3, [pc, #156]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a26      	ldr	r2, [pc, #152]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 80091e6:	f023 0301 	bic.w	r3, r3, #1
 80091ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ec:	f7fc feb2 	bl	8005f54 <HAL_GetTick>
 80091f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091f2:	e008      	b.n	8009206 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091f4:	f7fc feae 	bl	8005f54 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d901      	bls.n	8009206 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e199      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009206:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f0      	bne.n	80091f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0308 	and.w	r3, r3, #8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d038      	beq.n	8009290 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d019      	beq.n	800925a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009226:	4b16      	ldr	r3, [pc, #88]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009232:	f7fc fe8f 	bl	8005f54 <HAL_GetTick>
 8009236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009238:	e008      	b.n	800924c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800923a:	f7fc fe8b 	bl	8005f54 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d901      	bls.n	800924c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e176      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800924c:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800924e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0f0      	beq.n	800923a <HAL_RCC_OscConfig+0x23a>
 8009258:	e01a      	b.n	8009290 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800925a:	4b09      	ldr	r3, [pc, #36]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 800925c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925e:	4a08      	ldr	r2, [pc, #32]	; (8009280 <HAL_RCC_OscConfig+0x280>)
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009266:	f7fc fe75 	bl	8005f54 <HAL_GetTick>
 800926a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800926c:	e00a      	b.n	8009284 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800926e:	f7fc fe71 	bl	8005f54 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d903      	bls.n	8009284 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e15c      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
 8009280:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009284:	4b91      	ldr	r3, [pc, #580]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1ee      	bne.n	800926e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 80a4 	beq.w	80093e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800929e:	4b8b      	ldr	r3, [pc, #556]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80092aa:	4b88      	ldr	r3, [pc, #544]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	4a87      	ldr	r2, [pc, #540]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80092b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b4:	6413      	str	r3, [r2, #64]	; 0x40
 80092b6:	4b85      	ldr	r3, [pc, #532]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092be:	60bb      	str	r3, [r7, #8]
 80092c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092c2:	2301      	movs	r3, #1
 80092c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092c6:	4b82      	ldr	r3, [pc, #520]	; (80094d0 <HAL_RCC_OscConfig+0x4d0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d118      	bne.n	8009304 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80092d2:	4b7f      	ldr	r3, [pc, #508]	; (80094d0 <HAL_RCC_OscConfig+0x4d0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a7e      	ldr	r2, [pc, #504]	; (80094d0 <HAL_RCC_OscConfig+0x4d0>)
 80092d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092de:	f7fc fe39 	bl	8005f54 <HAL_GetTick>
 80092e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092e4:	e008      	b.n	80092f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092e6:	f7fc fe35 	bl	8005f54 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b64      	cmp	r3, #100	; 0x64
 80092f2:	d901      	bls.n	80092f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e120      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092f8:	4b75      	ldr	r3, [pc, #468]	; (80094d0 <HAL_RCC_OscConfig+0x4d0>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0f0      	beq.n	80092e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d106      	bne.n	800931a <HAL_RCC_OscConfig+0x31a>
 800930c:	4b6f      	ldr	r3, [pc, #444]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800930e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009310:	4a6e      	ldr	r2, [pc, #440]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	6713      	str	r3, [r2, #112]	; 0x70
 8009318:	e02d      	b.n	8009376 <HAL_RCC_OscConfig+0x376>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10c      	bne.n	800933c <HAL_RCC_OscConfig+0x33c>
 8009322:	4b6a      	ldr	r3, [pc, #424]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	4a69      	ldr	r2, [pc, #420]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009328:	f023 0301 	bic.w	r3, r3, #1
 800932c:	6713      	str	r3, [r2, #112]	; 0x70
 800932e:	4b67      	ldr	r3, [pc, #412]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009332:	4a66      	ldr	r2, [pc, #408]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009334:	f023 0304 	bic.w	r3, r3, #4
 8009338:	6713      	str	r3, [r2, #112]	; 0x70
 800933a:	e01c      	b.n	8009376 <HAL_RCC_OscConfig+0x376>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	2b05      	cmp	r3, #5
 8009342:	d10c      	bne.n	800935e <HAL_RCC_OscConfig+0x35e>
 8009344:	4b61      	ldr	r3, [pc, #388]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009348:	4a60      	ldr	r2, [pc, #384]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800934a:	f043 0304 	orr.w	r3, r3, #4
 800934e:	6713      	str	r3, [r2, #112]	; 0x70
 8009350:	4b5e      	ldr	r3, [pc, #376]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009354:	4a5d      	ldr	r2, [pc, #372]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009356:	f043 0301 	orr.w	r3, r3, #1
 800935a:	6713      	str	r3, [r2, #112]	; 0x70
 800935c:	e00b      	b.n	8009376 <HAL_RCC_OscConfig+0x376>
 800935e:	4b5b      	ldr	r3, [pc, #364]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	4a5a      	ldr	r2, [pc, #360]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	6713      	str	r3, [r2, #112]	; 0x70
 800936a:	4b58      	ldr	r3, [pc, #352]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	4a57      	ldr	r2, [pc, #348]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009370:	f023 0304 	bic.w	r3, r3, #4
 8009374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d015      	beq.n	80093aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800937e:	f7fc fde9 	bl	8005f54 <HAL_GetTick>
 8009382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009384:	e00a      	b.n	800939c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009386:	f7fc fde5 	bl	8005f54 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	f241 3288 	movw	r2, #5000	; 0x1388
 8009394:	4293      	cmp	r3, r2
 8009396:	d901      	bls.n	800939c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e0ce      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800939c:	4b4b      	ldr	r3, [pc, #300]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0ee      	beq.n	8009386 <HAL_RCC_OscConfig+0x386>
 80093a8:	e014      	b.n	80093d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093aa:	f7fc fdd3 	bl	8005f54 <HAL_GetTick>
 80093ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093b0:	e00a      	b.n	80093c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093b2:	f7fc fdcf 	bl	8005f54 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e0b8      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093c8:	4b40      	ldr	r3, [pc, #256]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80093ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1ee      	bne.n	80093b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d105      	bne.n	80093e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093da:	4b3c      	ldr	r3, [pc, #240]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	4a3b      	ldr	r2, [pc, #236]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80093e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 80a4 	beq.w	8009538 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093f0:	4b36      	ldr	r3, [pc, #216]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f003 030c 	and.w	r3, r3, #12
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d06b      	beq.n	80094d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d149      	bne.n	8009498 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009404:	4b31      	ldr	r3, [pc, #196]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a30      	ldr	r2, [pc, #192]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800940a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800940e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009410:	f7fc fda0 	bl	8005f54 <HAL_GetTick>
 8009414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009416:	e008      	b.n	800942a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009418:	f7fc fd9c 	bl	8005f54 <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	2b02      	cmp	r3, #2
 8009424:	d901      	bls.n	800942a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e087      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800942a:	4b28      	ldr	r3, [pc, #160]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f0      	bne.n	8009418 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	69da      	ldr	r2, [r3, #28]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	019b      	lsls	r3, r3, #6
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944c:	085b      	lsrs	r3, r3, #1
 800944e:	3b01      	subs	r3, #1
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	431a      	orrs	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	061b      	lsls	r3, r3, #24
 800945a:	4313      	orrs	r3, r2
 800945c:	4a1b      	ldr	r2, [pc, #108]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800945e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009462:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009464:	4b19      	ldr	r3, [pc, #100]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800946a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800946e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009470:	f7fc fd70 	bl	8005f54 <HAL_GetTick>
 8009474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009476:	e008      	b.n	800948a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009478:	f7fc fd6c 	bl	8005f54 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e057      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800948a:	4b10      	ldr	r3, [pc, #64]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCC_OscConfig+0x478>
 8009496:	e04f      	b.n	8009538 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 800949e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a4:	f7fc fd56 	bl	8005f54 <HAL_GetTick>
 80094a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094aa:	e008      	b.n	80094be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ac:	f7fc fd52 	bl	8005f54 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d901      	bls.n	80094be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e03d      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094be:	4b03      	ldr	r3, [pc, #12]	; (80094cc <HAL_RCC_OscConfig+0x4cc>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f0      	bne.n	80094ac <HAL_RCC_OscConfig+0x4ac>
 80094ca:	e035      	b.n	8009538 <HAL_RCC_OscConfig+0x538>
 80094cc:	40023800 	.word	0x40023800
 80094d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80094d4:	4b1b      	ldr	r3, [pc, #108]	; (8009544 <HAL_RCC_OscConfig+0x544>)
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d028      	beq.n	8009534 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d121      	bne.n	8009534 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d11a      	bne.n	8009534 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009504:	4013      	ands	r3, r2
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800950a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800950c:	4293      	cmp	r3, r2
 800950e:	d111      	bne.n	8009534 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	085b      	lsrs	r3, r3, #1
 800951c:	3b01      	subs	r3, #1
 800951e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009520:	429a      	cmp	r2, r3
 8009522:	d107      	bne.n	8009534 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009530:	429a      	cmp	r2, r3
 8009532:	d001      	beq.n	8009538 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	40023800 	.word	0x40023800

08009548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0d0      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009560:	4b6a      	ldr	r3, [pc, #424]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 030f 	and.w	r3, r3, #15
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d910      	bls.n	8009590 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800956e:	4b67      	ldr	r3, [pc, #412]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f023 020f 	bic.w	r2, r3, #15
 8009576:	4965      	ldr	r1, [pc, #404]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	4313      	orrs	r3, r2
 800957c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800957e:	4b63      	ldr	r3, [pc, #396]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d001      	beq.n	8009590 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0b8      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d020      	beq.n	80095de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095a8:	4b59      	ldr	r3, [pc, #356]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	4a58      	ldr	r2, [pc, #352]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80095b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0308 	and.w	r3, r3, #8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095c0:	4b53      	ldr	r3, [pc, #332]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	4a52      	ldr	r2, [pc, #328]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80095ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095cc:	4b50      	ldr	r3, [pc, #320]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	494d      	ldr	r1, [pc, #308]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d040      	beq.n	800966c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d107      	bne.n	8009602 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095f2:	4b47      	ldr	r3, [pc, #284]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d115      	bne.n	800962a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e07f      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	2b02      	cmp	r3, #2
 8009608:	d107      	bne.n	800961a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800960a:	4b41      	ldr	r3, [pc, #260]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e073      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800961a:	4b3d      	ldr	r3, [pc, #244]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e06b      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800962a:	4b39      	ldr	r3, [pc, #228]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f023 0203 	bic.w	r2, r3, #3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4936      	ldr	r1, [pc, #216]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 8009638:	4313      	orrs	r3, r2
 800963a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800963c:	f7fc fc8a 	bl	8005f54 <HAL_GetTick>
 8009640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009642:	e00a      	b.n	800965a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009644:	f7fc fc86 	bl	8005f54 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009652:	4293      	cmp	r3, r2
 8009654:	d901      	bls.n	800965a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e053      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800965a:	4b2d      	ldr	r3, [pc, #180]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 020c 	and.w	r2, r3, #12
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	429a      	cmp	r2, r3
 800966a:	d1eb      	bne.n	8009644 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800966c:	4b27      	ldr	r3, [pc, #156]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 030f 	and.w	r3, r3, #15
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d210      	bcs.n	800969c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f023 020f 	bic.w	r2, r3, #15
 8009682:	4922      	ldr	r1, [pc, #136]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	4313      	orrs	r3, r2
 8009688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800968a:	4b20      	ldr	r3, [pc, #128]	; (800970c <HAL_RCC_ClockConfig+0x1c4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d001      	beq.n	800969c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e032      	b.n	8009702 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d008      	beq.n	80096ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096a8:	4b19      	ldr	r3, [pc, #100]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	4916      	ldr	r1, [pc, #88]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0308 	and.w	r3, r3, #8
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d009      	beq.n	80096da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80096c6:	4b12      	ldr	r3, [pc, #72]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	490e      	ldr	r1, [pc, #56]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80096da:	f000 f821 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	091b      	lsrs	r3, r3, #4
 80096e6:	f003 030f 	and.w	r3, r3, #15
 80096ea:	490a      	ldr	r1, [pc, #40]	; (8009714 <HAL_RCC_ClockConfig+0x1cc>)
 80096ec:	5ccb      	ldrb	r3, [r1, r3]
 80096ee:	fa22 f303 	lsr.w	r3, r2, r3
 80096f2:	4a09      	ldr	r2, [pc, #36]	; (8009718 <HAL_RCC_ClockConfig+0x1d0>)
 80096f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80096f6:	4b09      	ldr	r3, [pc, #36]	; (800971c <HAL_RCC_ClockConfig+0x1d4>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fc fb1c 	bl	8005d38 <HAL_InitTick>

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40023c00 	.word	0x40023c00
 8009710:	40023800 	.word	0x40023800
 8009714:	08035448 	.word	0x08035448
 8009718:	20000040 	.word	0x20000040
 800971c:	20000044 	.word	0x20000044

08009720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009720:	b5b0      	push	{r4, r5, r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009726:	2100      	movs	r1, #0
 8009728:	6079      	str	r1, [r7, #4]
 800972a:	2100      	movs	r1, #0
 800972c:	60f9      	str	r1, [r7, #12]
 800972e:	2100      	movs	r1, #0
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009732:	2100      	movs	r1, #0
 8009734:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009736:	4952      	ldr	r1, [pc, #328]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 8009738:	6889      	ldr	r1, [r1, #8]
 800973a:	f001 010c 	and.w	r1, r1, #12
 800973e:	2908      	cmp	r1, #8
 8009740:	d00d      	beq.n	800975e <HAL_RCC_GetSysClockFreq+0x3e>
 8009742:	2908      	cmp	r1, #8
 8009744:	f200 8094 	bhi.w	8009870 <HAL_RCC_GetSysClockFreq+0x150>
 8009748:	2900      	cmp	r1, #0
 800974a:	d002      	beq.n	8009752 <HAL_RCC_GetSysClockFreq+0x32>
 800974c:	2904      	cmp	r1, #4
 800974e:	d003      	beq.n	8009758 <HAL_RCC_GetSysClockFreq+0x38>
 8009750:	e08e      	b.n	8009870 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009752:	4b4c      	ldr	r3, [pc, #304]	; (8009884 <HAL_RCC_GetSysClockFreq+0x164>)
 8009754:	60bb      	str	r3, [r7, #8]
      break;
 8009756:	e08e      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009758:	4b4b      	ldr	r3, [pc, #300]	; (8009888 <HAL_RCC_GetSysClockFreq+0x168>)
 800975a:	60bb      	str	r3, [r7, #8]
      break;
 800975c:	e08b      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800975e:	4948      	ldr	r1, [pc, #288]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 8009760:	6849      	ldr	r1, [r1, #4]
 8009762:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009766:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009768:	4945      	ldr	r1, [pc, #276]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 800976a:	6849      	ldr	r1, [r1, #4]
 800976c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009770:	2900      	cmp	r1, #0
 8009772:	d024      	beq.n	80097be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009774:	4942      	ldr	r1, [pc, #264]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 8009776:	6849      	ldr	r1, [r1, #4]
 8009778:	0989      	lsrs	r1, r1, #6
 800977a:	4608      	mov	r0, r1
 800977c:	f04f 0100 	mov.w	r1, #0
 8009780:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009784:	f04f 0500 	mov.w	r5, #0
 8009788:	ea00 0204 	and.w	r2, r0, r4
 800978c:	ea01 0305 	and.w	r3, r1, r5
 8009790:	493d      	ldr	r1, [pc, #244]	; (8009888 <HAL_RCC_GetSysClockFreq+0x168>)
 8009792:	fb01 f003 	mul.w	r0, r1, r3
 8009796:	2100      	movs	r1, #0
 8009798:	fb01 f102 	mul.w	r1, r1, r2
 800979c:	1844      	adds	r4, r0, r1
 800979e:	493a      	ldr	r1, [pc, #232]	; (8009888 <HAL_RCC_GetSysClockFreq+0x168>)
 80097a0:	fba2 0101 	umull	r0, r1, r2, r1
 80097a4:	1863      	adds	r3, r4, r1
 80097a6:	4619      	mov	r1, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f04f 0300 	mov.w	r3, #0
 80097b0:	f7f6 fd2e 	bl	8000210 <__aeabi_uldivmod>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4613      	mov	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e04a      	b.n	8009854 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097be:	4b30      	ldr	r3, [pc, #192]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	099b      	lsrs	r3, r3, #6
 80097c4:	461a      	mov	r2, r3
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80097ce:	f04f 0100 	mov.w	r1, #0
 80097d2:	ea02 0400 	and.w	r4, r2, r0
 80097d6:	ea03 0501 	and.w	r5, r3, r1
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	014b      	lsls	r3, r1, #5
 80097e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80097ec:	0142      	lsls	r2, r0, #5
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	1b00      	subs	r0, r0, r4
 80097f4:	eb61 0105 	sbc.w	r1, r1, r5
 80097f8:	f04f 0200 	mov.w	r2, #0
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	018b      	lsls	r3, r1, #6
 8009802:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009806:	0182      	lsls	r2, r0, #6
 8009808:	1a12      	subs	r2, r2, r0
 800980a:	eb63 0301 	sbc.w	r3, r3, r1
 800980e:	f04f 0000 	mov.w	r0, #0
 8009812:	f04f 0100 	mov.w	r1, #0
 8009816:	00d9      	lsls	r1, r3, #3
 8009818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800981c:	00d0      	lsls	r0, r2, #3
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	1912      	adds	r2, r2, r4
 8009824:	eb45 0303 	adc.w	r3, r5, r3
 8009828:	f04f 0000 	mov.w	r0, #0
 800982c:	f04f 0100 	mov.w	r1, #0
 8009830:	0299      	lsls	r1, r3, #10
 8009832:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009836:	0290      	lsls	r0, r2, #10
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4610      	mov	r0, r2
 800983e:	4619      	mov	r1, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	461a      	mov	r2, r3
 8009844:	f04f 0300 	mov.w	r3, #0
 8009848:	f7f6 fce2 	bl	8000210 <__aeabi_uldivmod>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4613      	mov	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	3301      	adds	r3, #1
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	fbb2 f3f3 	udiv	r3, r2, r3
 800986c:	60bb      	str	r3, [r7, #8]
      break;
 800986e:	e002      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <HAL_RCC_GetSysClockFreq+0x164>)
 8009872:	60bb      	str	r3, [r7, #8]
      break;
 8009874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009876:	68bb      	ldr	r3, [r7, #8]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bdb0      	pop	{r4, r5, r7, pc}
 8009880:	40023800 	.word	0x40023800
 8009884:	00f42400 	.word	0x00f42400
 8009888:	017d7840 	.word	0x017d7840

0800988c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009890:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009892:	681b      	ldr	r3, [r3, #0]
}
 8009894:	4618      	mov	r0, r3
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20000040 	.word	0x20000040

080098a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80098a8:	f7ff fff0 	bl	800988c <HAL_RCC_GetHCLKFreq>
 80098ac:	4602      	mov	r2, r0
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	0a9b      	lsrs	r3, r3, #10
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	4903      	ldr	r1, [pc, #12]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098ba:	5ccb      	ldrb	r3, [r1, r3]
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40023800 	.word	0x40023800
 80098c8:	08035458 	.word	0x08035458

080098cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80098d0:	f7ff ffdc 	bl	800988c <HAL_RCC_GetHCLKFreq>
 80098d4:	4602      	mov	r2, r0
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	0b5b      	lsrs	r3, r3, #13
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	4903      	ldr	r1, [pc, #12]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e2:	5ccb      	ldrb	r3, [r1, r3]
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	40023800 	.word	0x40023800
 80098f0:	08035458 	.word	0x08035458

080098f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	220f      	movs	r2, #15
 8009902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009904:	4b12      	ldr	r3, [pc, #72]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f003 0203 	and.w	r2, r3, #3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800991c:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <HAL_RCC_GetClockConfig+0x60>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	601a      	str	r2, [r3, #0]
}
 8009942:	bf00      	nop
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40023800 	.word	0x40023800
 8009954:	40023c00 	.word	0x40023c00

08009958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d012      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009980:	4b69      	ldr	r3, [pc, #420]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	4a68      	ldr	r2, [pc, #416]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009986:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800998a:	6093      	str	r3, [r2, #8]
 800998c:	4b66      	ldr	r3, [pc, #408]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009994:	4964      	ldr	r1, [pc, #400]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009996:	4313      	orrs	r3, r2
 8009998:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80099a2:	2301      	movs	r3, #1
 80099a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d017      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099b2:	4b5d      	ldr	r3, [pc, #372]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c0:	4959      	ldr	r1, [pc, #356]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d0:	d101      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80099d2:	2301      	movs	r3, #1
 80099d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80099de:	2301      	movs	r3, #1
 80099e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d017      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099ee:	4b4e      	ldr	r3, [pc, #312]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	494a      	ldr	r1, [pc, #296]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a0c:	d101      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 808b 	beq.w	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a3c:	4b3a      	ldr	r3, [pc, #232]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a40:	4a39      	ldr	r2, [pc, #228]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a46:	6413      	str	r3, [r2, #64]	; 0x40
 8009a48:	4b37      	ldr	r3, [pc, #220]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a50:	60bb      	str	r3, [r7, #8]
 8009a52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a54:	4b35      	ldr	r3, [pc, #212]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a34      	ldr	r2, [pc, #208]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a60:	f7fc fa78 	bl	8005f54 <HAL_GetTick>
 8009a64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a66:	e008      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a68:	f7fc fa74 	bl	8005f54 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	2b64      	cmp	r3, #100	; 0x64
 8009a74:	d901      	bls.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e357      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009a7a:	4b2c      	ldr	r3, [pc, #176]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0f0      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a86:	4b28      	ldr	r3, [pc, #160]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d035      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d02e      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009aa4:	4b20      	ldr	r3, [pc, #128]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009aae:	4b1e      	ldr	r3, [pc, #120]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab2:	4a1d      	ldr	r2, [pc, #116]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ab8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	4a1a      	ldr	r2, [pc, #104]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009ac6:	4a18      	ldr	r2, [pc, #96]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009acc:	4b16      	ldr	r3, [pc, #88]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d114      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad8:	f7fc fa3c 	bl	8005f54 <HAL_GetTick>
 8009adc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ade:	e00a      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ae0:	f7fc fa38 	bl	8005f54 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e319      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0ee      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b0e:	d111      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009b10:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009b1e:	400b      	ands	r3, r1
 8009b20:	4901      	ldr	r1, [pc, #4]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	608b      	str	r3, [r1, #8]
 8009b26:	e00b      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009b28:	40023800 	.word	0x40023800
 8009b2c:	40007000 	.word	0x40007000
 8009b30:	0ffffcff 	.word	0x0ffffcff
 8009b34:	4bb1      	ldr	r3, [pc, #708]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	4ab0      	ldr	r2, [pc, #704]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009b3e:	6093      	str	r3, [r2, #8]
 8009b40:	4bae      	ldr	r3, [pc, #696]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b4c:	49ab      	ldr	r1, [pc, #684]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0310 	and.w	r3, r3, #16
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d010      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b5e:	4ba7      	ldr	r3, [pc, #668]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b64:	4aa5      	ldr	r2, [pc, #660]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009b6e:	4ba3      	ldr	r3, [pc, #652]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	49a0      	ldr	r1, [pc, #640]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b8c:	4b9b      	ldr	r3, [pc, #620]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b9a:	4998      	ldr	r1, [pc, #608]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009bae:	4b93      	ldr	r3, [pc, #588]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bbc:	498f      	ldr	r1, [pc, #572]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00a      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bd0:	4b8a      	ldr	r3, [pc, #552]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bde:	4987      	ldr	r1, [pc, #540]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00a      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bf2:	4b82      	ldr	r3, [pc, #520]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	497e      	ldr	r1, [pc, #504]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00a      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c14:	4b79      	ldr	r3, [pc, #484]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1a:	f023 0203 	bic.w	r2, r3, #3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c22:	4976      	ldr	r1, [pc, #472]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c36:	4b71      	ldr	r3, [pc, #452]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3c:	f023 020c 	bic.w	r2, r3, #12
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c44:	496d      	ldr	r1, [pc, #436]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c58:	4b68      	ldr	r3, [pc, #416]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c66:	4965      	ldr	r1, [pc, #404]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c7a:	4b60      	ldr	r3, [pc, #384]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c88:	495c      	ldr	r1, [pc, #368]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c9c:	4b57      	ldr	r3, [pc, #348]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009caa:	4954      	ldr	r1, [pc, #336]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cac:	4313      	orrs	r3, r2
 8009cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009cbe:	4b4f      	ldr	r3, [pc, #316]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ccc:	494b      	ldr	r1, [pc, #300]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009ce0:	4b46      	ldr	r3, [pc, #280]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cee:	4943      	ldr	r1, [pc, #268]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009d02:	4b3e      	ldr	r3, [pc, #248]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d10:	493a      	ldr	r1, [pc, #232]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00a      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d24:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d32:	4932      	ldr	r1, [pc, #200]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d011      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009d46:	4b2d      	ldr	r3, [pc, #180]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d54:	4929      	ldr	r1, [pc, #164]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d64:	d101      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009d66:	2301      	movs	r3, #1
 8009d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0308 	and.w	r3, r3, #8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009d76:	2301      	movs	r3, #1
 8009d78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d86:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d94:	4919      	ldr	r1, [pc, #100]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009da8:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db8:	4910      	ldr	r1, [pc, #64]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d006      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80d9 	beq.w	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009dd4:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009de0:	f7fc f8b8 	bl	8005f54 <HAL_GetTick>
 8009de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009de6:	e00b      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009de8:	f7fc f8b4 	bl	8005f54 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b64      	cmp	r3, #100	; 0x64
 8009df4:	d904      	bls.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e197      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009dfa:	bf00      	nop
 8009dfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009e00:	4b6c      	ldr	r3, [pc, #432]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1ed      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d021      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11d      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e20:	4b64      	ldr	r3, [pc, #400]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e2e:	4b61      	ldr	r3, [pc, #388]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e34:	0e1b      	lsrs	r3, r3, #24
 8009e36:	f003 030f 	and.w	r3, r3, #15
 8009e3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	019a      	lsls	r2, r3, #6
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	041b      	lsls	r3, r3, #16
 8009e46:	431a      	orrs	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	061b      	lsls	r3, r3, #24
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	071b      	lsls	r3, r3, #28
 8009e54:	4957      	ldr	r1, [pc, #348]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e70:	d00a      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d02e      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e86:	d129      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009e88:	4b4a      	ldr	r3, [pc, #296]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e96:	4b47      	ldr	r3, [pc, #284]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e9c:	0f1b      	lsrs	r3, r3, #28
 8009e9e:	f003 0307 	and.w	r3, r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	019a      	lsls	r2, r3, #6
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	061b      	lsls	r3, r3, #24
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	071b      	lsls	r3, r3, #28
 8009ebc:	493d      	ldr	r1, [pc, #244]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ec4:	4b3b      	ldr	r3, [pc, #236]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eca:	f023 021f 	bic.w	r2, r3, #31
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	4937      	ldr	r1, [pc, #220]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01d      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ee8:	4b32      	ldr	r3, [pc, #200]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eee:	0e1b      	lsrs	r3, r3, #24
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ef6:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009efc:	0f1b      	lsrs	r3, r3, #28
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	019a      	lsls	r2, r3, #6
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	041b      	lsls	r3, r3, #16
 8009f10:	431a      	orrs	r2, r3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	061b      	lsls	r3, r3, #24
 8009f16:	431a      	orrs	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	071b      	lsls	r3, r3, #28
 8009f1c:	4925      	ldr	r1, [pc, #148]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d011      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	019a      	lsls	r2, r3, #6
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	041b      	lsls	r3, r3, #16
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	061b      	lsls	r3, r3, #24
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	071b      	lsls	r3, r3, #28
 8009f4c:	4919      	ldr	r1, [pc, #100]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f54:	4b17      	ldr	r3, [pc, #92]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a16      	ldr	r2, [pc, #88]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f60:	f7fb fff8 	bl	8005f54 <HAL_GetTick>
 8009f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f66:	e008      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009f68:	f7fb fff4 	bl	8005f54 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b64      	cmp	r3, #100	; 0x64
 8009f74:	d901      	bls.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e0d7      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0f0      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	f040 80cd 	bne.w	800a128 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a08      	ldr	r2, [pc, #32]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f9a:	f7fb ffdb 	bl	8005f54 <HAL_GetTick>
 8009f9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fa0:	e00a      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009fa2:	f7fb ffd7 	bl	8005f54 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b64      	cmp	r3, #100	; 0x64
 8009fae:	d903      	bls.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e0ba      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009fb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009fb8:	4b5e      	ldr	r3, [pc, #376]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc4:	d0ed      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d02e      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d12a      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009fee:	4b51      	ldr	r3, [pc, #324]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff4:	0c1b      	lsrs	r3, r3, #16
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ffc:	4b4d      	ldr	r3, [pc, #308]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a002:	0f1b      	lsrs	r3, r3, #28
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	019a      	lsls	r2, r3, #6
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	431a      	orrs	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	071b      	lsls	r3, r3, #28
 800a022:	4944      	ldr	r1, [pc, #272]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a024:	4313      	orrs	r3, r2
 800a026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a02a:	4b42      	ldr	r3, [pc, #264]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a030:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	3b01      	subs	r3, #1
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	493d      	ldr	r1, [pc, #244]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d022      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a058:	d11d      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a05a:	4b36      	ldr	r3, [pc, #216]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	0e1b      	lsrs	r3, r3, #24
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a068:	4b32      	ldr	r3, [pc, #200]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06e:	0f1b      	lsrs	r3, r3, #28
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	019a      	lsls	r2, r3, #6
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	431a      	orrs	r2, r3
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	061b      	lsls	r3, r3, #24
 800a088:	431a      	orrs	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	071b      	lsls	r3, r3, #28
 800a08e:	4929      	ldr	r1, [pc, #164]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a090:	4313      	orrs	r3, r2
 800a092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d028      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a8:	0e1b      	lsrs	r3, r3, #24
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a0b0:	4b20      	ldr	r3, [pc, #128]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b6:	0c1b      	lsrs	r3, r3, #16
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	019a      	lsls	r2, r3, #6
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	061b      	lsls	r3, r3, #24
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	071b      	lsls	r3, r3, #28
 800a0d6:	4917      	ldr	r1, [pc, #92]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a0de:	4b15      	ldr	r3, [pc, #84]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4911      	ldr	r1, [pc, #68]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a0f4:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a100:	f7fb ff28 	bl	8005f54 <HAL_GetTick>
 800a104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a106:	e008      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a108:	f7fb ff24 	bl	8005f54 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b64      	cmp	r3, #100	; 0x64
 800a114:	d901      	bls.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e007      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a126:	d1ef      	bne.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	40023800 	.word	0x40023800

0800a138 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e081      	b.n	800a24e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	7f5b      	ldrb	r3, [r3, #29]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	d105      	bne.n	800a160 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7fb fb18 	bl	8005790 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	22ca      	movs	r2, #202	; 0xca
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2253      	movs	r2, #83	; 0x53
 800a174:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fb16 	bl	800a7a8 <RTC_EnterInitMode>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	22ff      	movs	r2, #255	; 0xff
 800a188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2204      	movs	r2, #4
 800a18e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e05c      	b.n	800a24e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6899      	ldr	r1, [r3, #8]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	4b2e      	ldr	r3, [pc, #184]	; (800a258 <HAL_RTC_Init+0x120>)
 800a1a0:	400b      	ands	r3, r1
 800a1a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6899      	ldr	r1, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	68d2      	ldr	r2, [r2, #12]
 800a1ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6919      	ldr	r1, [r3, #16]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	041a      	lsls	r2, r3, #16
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1ee:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10e      	bne.n	800a21c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 faaa 	bl	800a758 <HAL_RTC_WaitForSynchro>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d008      	beq.n	800a21c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	22ff      	movs	r2, #255	; 0xff
 800a210:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2204      	movs	r2, #4
 800a216:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e018      	b.n	800a24e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0208 	bic.w	r2, r2, #8
 800a22a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	22ff      	movs	r2, #255	; 0xff
 800a244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a24c:	2300      	movs	r3, #0
  }
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	ff8fffbf 	.word	0xff8fffbf

0800a25c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a25c:	b590      	push	{r4, r7, lr}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	7f1b      	ldrb	r3, [r3, #28]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d101      	bne.n	800a278 <HAL_RTC_SetTime+0x1c>
 800a274:	2302      	movs	r3, #2
 800a276:	e0a8      	b.n	800a3ca <HAL_RTC_SetTime+0x16e>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2202      	movs	r2, #2
 800a282:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d126      	bne.n	800a2d8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 faac 	bl	800a800 <RTC_ByteToBcd2>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 faa5 	bl	800a800 <RTC_ByteToBcd2>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a2ba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	789b      	ldrb	r3, [r3, #2]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fa9d 	bl	800a800 <RTC_ByteToBcd2>
 800a2c6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a2c8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	7b1b      	ldrb	r3, [r3, #12]
 800a2d0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e018      	b.n	800a30a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	785b      	ldrb	r3, [r3, #1]
 800a2f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a2f8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a2fe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	7b1b      	ldrb	r3, [r3, #12]
 800a304:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a306:	4313      	orrs	r3, r2
 800a308:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	22ca      	movs	r2, #202	; 0xca
 800a310:	625a      	str	r2, [r3, #36]	; 0x24
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2253      	movs	r2, #83	; 0x53
 800a318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fa44 	bl	800a7a8 <RTC_EnterInitMode>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	22ff      	movs	r2, #255	; 0xff
 800a32c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2204      	movs	r2, #4
 800a332:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e045      	b.n	800a3ca <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	4b23      	ldr	r3, [pc, #140]	; (800a3d4 <HAL_RTC_SetTime+0x178>)
 800a346:	400b      	ands	r3, r1
 800a348:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a358:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6899      	ldr	r1, [r3, #8]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	691a      	ldr	r2, [r3, #16]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	431a      	orrs	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a380:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d111      	bne.n	800a3b4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 f9e1 	bl	800a758 <HAL_RTC_WaitForSynchro>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	22ff      	movs	r2, #255	; 0xff
 800a3a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2204      	movs	r2, #4
 800a3a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e00a      	b.n	800a3ca <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	22ff      	movs	r2, #255	; 0xff
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
  }
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd90      	pop	{r4, r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	007f7f7f 	.word	0x007f7f7f

0800a3d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	7f1b      	ldrb	r3, [r3, #28]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d101      	bne.n	800a3f4 <HAL_RTC_SetDate+0x1c>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e092      	b.n	800a51a <HAL_RTC_SetDate+0x142>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10e      	bne.n	800a424 <HAL_RTC_SetDate+0x4c>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	785b      	ldrb	r3, [r3, #1]
 800a416:	f023 0310 	bic.w	r3, r3, #16
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	330a      	adds	r3, #10
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d11c      	bne.n	800a464 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	78db      	ldrb	r3, [r3, #3]
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f9e6 	bl	800a800 <RTC_ByteToBcd2>
 800a434:	4603      	mov	r3, r0
 800a436:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	785b      	ldrb	r3, [r3, #1]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f9df 	bl	800a800 <RTC_ByteToBcd2>
 800a442:	4603      	mov	r3, r0
 800a444:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a446:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	789b      	ldrb	r3, [r3, #2]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 f9d7 	bl	800a800 <RTC_ByteToBcd2>
 800a452:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a454:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a45e:	4313      	orrs	r3, r2
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e00e      	b.n	800a482 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	78db      	ldrb	r3, [r3, #3]
 800a468:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a470:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a476:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	22ca      	movs	r2, #202	; 0xca
 800a488:	625a      	str	r2, [r3, #36]	; 0x24
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2253      	movs	r2, #83	; 0x53
 800a490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 f988 	bl	800a7a8 <RTC_EnterInitMode>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	22ff      	movs	r2, #255	; 0xff
 800a4a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e031      	b.n	800a51a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	6979      	ldr	r1, [r7, #20]
 800a4bc:	4b19      	ldr	r3, [pc, #100]	; (800a524 <HAL_RTC_SetDate+0x14c>)
 800a4be:	400b      	ands	r3, r1
 800a4c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d111      	bne.n	800a504 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f939 	bl	800a758 <HAL_RTC_WaitForSynchro>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00b      	beq.n	800a504 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	22ff      	movs	r2, #255	; 0xff
 800a4f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e00a      	b.n	800a51a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	22ff      	movs	r2, #255	; 0xff
 800a50a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a518:	2300      	movs	r3, #0
  }
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd90      	pop	{r4, r7, pc}
 800a522:	bf00      	nop
 800a524:	00ffff3f 	.word	0x00ffff3f

0800a528 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b089      	sub	sp, #36	; 0x24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	61fb      	str	r3, [r7, #28]
 800a53c:	2300      	movs	r3, #0
 800a53e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	7f1b      	ldrb	r3, [r3, #28]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_RTC_SetAlarm+0x24>
 800a548:	2302      	movs	r3, #2
 800a54a:	e101      	b.n	800a750 <HAL_RTC_SetAlarm+0x228>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2201      	movs	r2, #1
 800a550:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2202      	movs	r2, #2
 800a556:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d137      	bne.n	800a5ce <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2200      	movs	r2, #0
 800a570:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f942 	bl	800a800 <RTC_ByteToBcd2>
 800a57c:	4603      	mov	r3, r0
 800a57e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	785b      	ldrb	r3, [r3, #1]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 f93b 	bl	800a800 <RTC_ByteToBcd2>
 800a58a:	4603      	mov	r3, r0
 800a58c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a58e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	789b      	ldrb	r3, [r3, #2]
 800a594:	4618      	mov	r0, r3
 800a596:	f000 f933 	bl	800a800 <RTC_ByteToBcd2>
 800a59a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a59c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	7b1b      	ldrb	r3, [r3, #12]
 800a5a4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a5a6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f925 	bl	800a800 <RTC_ByteToBcd2>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	61fb      	str	r3, [r7, #28]
 800a5cc:	e023      	b.n	800a616 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d102      	bne.n	800a5e2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	785b      	ldrb	r3, [r3, #1]
 800a5ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a5ee:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a5f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	7b1b      	ldrb	r3, [r3, #12]
 800a5fa:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a5fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a604:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a606:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a60c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a612:	4313      	orrs	r3, r2
 800a614:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	22ca      	movs	r2, #202	; 0xca
 800a628:	625a      	str	r2, [r3, #36]	; 0x24
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2253      	movs	r2, #83	; 0x53
 800a630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63a:	d13f      	bne.n	800a6bc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a64a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689a      	ldr	r2, [r3, #8]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a65a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a65c:	f7fb fc7a 	bl	8005f54 <HAL_GetTick>
 800a660:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a662:	e013      	b.n	800a68c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a664:	f7fb fc76 	bl	8005f54 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a672:	d90b      	bls.n	800a68c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	22ff      	movs	r2, #255	; 0xff
 800a67a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2203      	movs	r2, #3
 800a680:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e061      	b.n	800a750 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0e4      	beq.n	800a664 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69fa      	ldr	r2, [r7, #28]
 800a6a0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6b8:	609a      	str	r2, [r3, #8]
 800a6ba:	e03e      	b.n	800a73a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a6ca:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6da:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6dc:	f7fb fc3a 	bl	8005f54 <HAL_GetTick>
 800a6e0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a6e2:	e013      	b.n	800a70c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6e4:	f7fb fc36 	bl	8005f54 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6f2:	d90b      	bls.n	800a70c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	22ff      	movs	r2, #255	; 0xff
 800a6fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2203      	movs	r2, #3
 800a700:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e021      	b.n	800a750 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0e4      	beq.n	800a6e4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689a      	ldr	r2, [r3, #8]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a738:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	22ff      	movs	r2, #255	; 0xff
 800a740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2201      	movs	r2, #1
 800a746:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3724      	adds	r7, #36	; 0x24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd90      	pop	{r4, r7, pc}

0800a758 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68da      	ldr	r2, [r3, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a772:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a774:	f7fb fbee 	bl	8005f54 <HAL_GetTick>
 800a778:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a77a:	e009      	b.n	800a790 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a77c:	f7fb fbea 	bl	8005f54 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a78a:	d901      	bls.n	800a790 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e007      	b.n	800a7a0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0ee      	beq.n	800a77c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d119      	bne.n	800a7f6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7cc:	f7fb fbc2 	bl	8005f54 <HAL_GetTick>
 800a7d0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7d2:	e009      	b.n	800a7e8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7d4:	f7fb fbbe 	bl	8005f54 <HAL_GetTick>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7e2:	d901      	bls.n	800a7e8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e007      	b.n	800a7f8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0ee      	beq.n	800a7d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	4603      	mov	r3, r0
 800a808:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a80e:	e005      	b.n	800a81c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3301      	adds	r3, #1
 800a814:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	3b0a      	subs	r3, #10
 800a81a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	2b09      	cmp	r3, #9
 800a820:	d8f6      	bhi.n	800a810 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	b2db      	uxtb	r3, r3
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	7f1b      	ldrb	r3, [r3, #28]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a854:	2302      	movs	r3, #2
 800a856:	e03e      	b.n	800a8d6 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2202      	movs	r2, #2
 800a862:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689a      	ldr	r2, [r3, #8]
 800a86a:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a86c:	4013      	ands	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	22ca      	movs	r2, #202	; 0xca
 800a87e:	625a      	str	r2, [r3, #36]	; 0x24
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2253      	movs	r2, #83	; 0x53
 800a886:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0206 	bic.w	r2, r2, #6
 800a896:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	22ff      	movs	r2, #255	; 0xff
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	fffff7f7 	.word	0xfffff7f7

0800a8e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e025      	b.n	800a948 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7fb fa07 	bl	8005d24 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2202      	movs	r2, #2
 800a91a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3304      	adds	r3, #4
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f001 fdb7 	bl	800c49c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	461a      	mov	r2, r3
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	f001 fe0b 	bl	800c554 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a962:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d101      	bne.n	800a96e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a96a:	2302      	movs	r3, #2
 800a96c:	e021      	b.n	800a9b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d002      	beq.n	800a97a <HAL_SDRAM_SendCommand+0x2a>
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b05      	cmp	r3, #5
 800a978:	d118      	bne.n	800a9ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2202      	movs	r2, #2
 800a97e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 fe4c 	bl	800c628 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d104      	bne.n	800a9a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2205      	movs	r2, #5
 800a99c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a9a0:	e006      	b.n	800a9b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a9aa:	e001      	b.n	800a9b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e000      	b.n	800a9b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d101      	bne.n	800a9d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e016      	b.n	800aa02 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d10f      	bne.n	800aa00 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fe3e 	bl	800c670 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e000      	b.n	800aa02 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e09d      	b.n	800ab58 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d108      	bne.n	800aa36 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa2c:	d009      	beq.n	800aa42 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	61da      	str	r2, [r3, #28]
 800aa34:	e005      	b.n	800aa42 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d106      	bne.n	800aa62 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7fa fec5 	bl	80057ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2202      	movs	r2, #2
 800aa66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa78:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa82:	d902      	bls.n	800aa8a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	e002      	b.n	800aa90 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aa98:	d007      	beq.n	800aaaa <HAL_SPI_Init+0xa0>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aaa2:	d002      	beq.n	800aaaa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aad8:	431a      	orrs	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aae2:	431a      	orrs	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaec:	ea42 0103 	orr.w	r1, r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	0c1b      	lsrs	r3, r3, #16
 800ab06:	f003 0204 	and.w	r2, r3, #4
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	f003 0310 	and.w	r3, r3, #16
 800ab12:	431a      	orrs	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab26:	ea42 0103 	orr.w	r1, r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	69da      	ldr	r2, [r3, #28]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e049      	b.n	800ac06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7fa fe92 	bl	80058b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f000 fac0 	bl	800b124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d001      	beq.n	800ac28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e054      	b.n	800acd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a26      	ldr	r2, [pc, #152]	; (800ace0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d022      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac52:	d01d      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a22      	ldr	r2, [pc, #136]	; (800ace4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d018      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a21      	ldr	r2, [pc, #132]	; (800ace8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d013      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a1f      	ldr	r2, [pc, #124]	; (800acec <HAL_TIM_Base_Start_IT+0xdc>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d00e      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a1e      	ldr	r2, [pc, #120]	; (800acf0 <HAL_TIM_Base_Start_IT+0xe0>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d009      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a1c      	ldr	r2, [pc, #112]	; (800acf4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d004      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x80>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a1b      	ldr	r2, [pc, #108]	; (800acf8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d115      	bne.n	800acbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	4b19      	ldr	r3, [pc, #100]	; (800acfc <HAL_TIM_Base_Start_IT+0xec>)
 800ac98:	4013      	ands	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b06      	cmp	r3, #6
 800aca0:	d015      	beq.n	800acce <HAL_TIM_Base_Start_IT+0xbe>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca8:	d011      	beq.n	800acce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f042 0201 	orr.w	r2, r2, #1
 800acb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acba:	e008      	b.n	800acce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f042 0201 	orr.w	r2, r2, #1
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	e000      	b.n	800acd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	40010000 	.word	0x40010000
 800ace4:	40000400 	.word	0x40000400
 800ace8:	40000800 	.word	0x40000800
 800acec:	40000c00 	.word	0x40000c00
 800acf0:	40010400 	.word	0x40010400
 800acf4:	40014000 	.word	0x40014000
 800acf8:	40001800 	.word	0x40001800
 800acfc:	00010007 	.word	0x00010007

0800ad00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d122      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d11b      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f06f 0202 	mvn.w	r2, #2
 800ad2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9d0 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800ad48:	e005      	b.n	800ad56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9c2 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f9d3 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0304 	and.w	r3, r3, #4
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d122      	bne.n	800adb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	d11b      	bne.n	800adb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0204 	mvn.w	r2, #4
 800ad80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f9a6 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800ad9c:	e005      	b.n	800adaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f998 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f9a9 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	f003 0308 	and.w	r3, r3, #8
 800adba:	2b08      	cmp	r3, #8
 800adbc:	d122      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0308 	and.w	r3, r3, #8
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d11b      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f06f 0208 	mvn.w	r2, #8
 800add4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2204      	movs	r2, #4
 800adda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	f003 0303 	and.w	r3, r3, #3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f97c 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800adf0:	e005      	b.n	800adfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f96e 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f97f 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f003 0310 	and.w	r3, r3, #16
 800ae0e:	2b10      	cmp	r3, #16
 800ae10:	d122      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f003 0310 	and.w	r3, r3, #16
 800ae1c:	2b10      	cmp	r3, #16
 800ae1e:	d11b      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f06f 0210 	mvn.w	r2, #16
 800ae28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d003      	beq.n	800ae46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f952 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800ae44:	e005      	b.n	800ae52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f944 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f955 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d10e      	bne.n	800ae84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d107      	bne.n	800ae84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f06f 0201 	mvn.w	r2, #1
 800ae7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7f8 faf6 	bl	8003470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae8e:	2b80      	cmp	r3, #128	; 0x80
 800ae90:	d10e      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae9c:	2b80      	cmp	r3, #128	; 0x80
 800ae9e:	d107      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fb0c 	bl	800b4c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aebe:	d10e      	bne.n	800aede <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeca:	2b80      	cmp	r3, #128	; 0x80
 800aecc:	d107      	bne.n	800aede <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 faff 	bl	800b4dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee8:	2b40      	cmp	r3, #64	; 0x40
 800aeea:	d10e      	bne.n	800af0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef6:	2b40      	cmp	r3, #64	; 0x40
 800aef8:	d107      	bne.n	800af0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f903 	bl	800b110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	f003 0320 	and.w	r3, r3, #32
 800af14:	2b20      	cmp	r3, #32
 800af16:	d10e      	bne.n	800af36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b20      	cmp	r3, #32
 800af24:	d107      	bne.n	800af36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f06f 0220 	mvn.w	r2, #32
 800af2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fabf 	bl	800b4b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af36:	bf00      	nop
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_TIM_ConfigClockSource+0x1c>
 800af58:	2302      	movs	r3, #2
 800af5a:	e0b4      	b.n	800b0c6 <HAL_TIM_ConfigClockSource+0x186>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	4b56      	ldr	r3, [pc, #344]	; (800b0d0 <HAL_TIM_ConfigClockSource+0x190>)
 800af78:	4013      	ands	r3, r2
 800af7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af94:	d03e      	beq.n	800b014 <HAL_TIM_ConfigClockSource+0xd4>
 800af96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af9a:	f200 8087 	bhi.w	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800af9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afa2:	f000 8086 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x172>
 800afa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afaa:	d87f      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afac:	2b70      	cmp	r3, #112	; 0x70
 800afae:	d01a      	beq.n	800afe6 <HAL_TIM_ConfigClockSource+0xa6>
 800afb0:	2b70      	cmp	r3, #112	; 0x70
 800afb2:	d87b      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afb4:	2b60      	cmp	r3, #96	; 0x60
 800afb6:	d050      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0x11a>
 800afb8:	2b60      	cmp	r3, #96	; 0x60
 800afba:	d877      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afbc:	2b50      	cmp	r3, #80	; 0x50
 800afbe:	d03c      	beq.n	800b03a <HAL_TIM_ConfigClockSource+0xfa>
 800afc0:	2b50      	cmp	r3, #80	; 0x50
 800afc2:	d873      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afc4:	2b40      	cmp	r3, #64	; 0x40
 800afc6:	d058      	beq.n	800b07a <HAL_TIM_ConfigClockSource+0x13a>
 800afc8:	2b40      	cmp	r3, #64	; 0x40
 800afca:	d86f      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afcc:	2b30      	cmp	r3, #48	; 0x30
 800afce:	d064      	beq.n	800b09a <HAL_TIM_ConfigClockSource+0x15a>
 800afd0:	2b30      	cmp	r3, #48	; 0x30
 800afd2:	d86b      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d060      	beq.n	800b09a <HAL_TIM_ConfigClockSource+0x15a>
 800afd8:	2b20      	cmp	r3, #32
 800afda:	d867      	bhi.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d05c      	beq.n	800b09a <HAL_TIM_ConfigClockSource+0x15a>
 800afe0:	2b10      	cmp	r3, #16
 800afe2:	d05a      	beq.n	800b09a <HAL_TIM_ConfigClockSource+0x15a>
 800afe4:	e062      	b.n	800b0ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	6899      	ldr	r1, [r3, #8]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f000 f9af 	bl	800b358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	609a      	str	r2, [r3, #8]
      break;
 800b012:	e04f      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	6899      	ldr	r1, [r3, #8]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f000 f998 	bl	800b358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689a      	ldr	r2, [r3, #8]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b036:	609a      	str	r2, [r3, #8]
      break;
 800b038:	e03c      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6818      	ldr	r0, [r3, #0]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	6859      	ldr	r1, [r3, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	461a      	mov	r2, r3
 800b048:	f000 f90c 	bl	800b264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2150      	movs	r1, #80	; 0x50
 800b052:	4618      	mov	r0, r3
 800b054:	f000 f965 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800b058:	e02c      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	6859      	ldr	r1, [r3, #4]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	461a      	mov	r2, r3
 800b068:	f000 f92b 	bl	800b2c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2160      	movs	r1, #96	; 0x60
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f955 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800b078:	e01c      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	6859      	ldr	r1, [r3, #4]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	461a      	mov	r2, r3
 800b088:	f000 f8ec 	bl	800b264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2140      	movs	r1, #64	; 0x40
 800b092:	4618      	mov	r0, r3
 800b094:	f000 f945 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800b098:	e00c      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f000 f93c 	bl	800b322 <TIM_ITRx_SetConfig>
      break;
 800b0aa:	e003      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b0:	e000      	b.n	800b0b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	fffeff88 	.word	0xfffeff88

0800b0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a40      	ldr	r2, [pc, #256]	; (800b238 <TIM_Base_SetConfig+0x114>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d013      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b142:	d00f      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a3d      	ldr	r2, [pc, #244]	; (800b23c <TIM_Base_SetConfig+0x118>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00b      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a3c      	ldr	r2, [pc, #240]	; (800b240 <TIM_Base_SetConfig+0x11c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d007      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a3b      	ldr	r2, [pc, #236]	; (800b244 <TIM_Base_SetConfig+0x120>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d003      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a3a      	ldr	r2, [pc, #232]	; (800b248 <TIM_Base_SetConfig+0x124>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d108      	bne.n	800b176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a2f      	ldr	r2, [pc, #188]	; (800b238 <TIM_Base_SetConfig+0x114>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d02b      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b184:	d027      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a2c      	ldr	r2, [pc, #176]	; (800b23c <TIM_Base_SetConfig+0x118>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d023      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a2b      	ldr	r2, [pc, #172]	; (800b240 <TIM_Base_SetConfig+0x11c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d01f      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a2a      	ldr	r2, [pc, #168]	; (800b244 <TIM_Base_SetConfig+0x120>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d01b      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a29      	ldr	r2, [pc, #164]	; (800b248 <TIM_Base_SetConfig+0x124>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d017      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a28      	ldr	r2, [pc, #160]	; (800b24c <TIM_Base_SetConfig+0x128>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d013      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a27      	ldr	r2, [pc, #156]	; (800b250 <TIM_Base_SetConfig+0x12c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00f      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a26      	ldr	r2, [pc, #152]	; (800b254 <TIM_Base_SetConfig+0x130>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d00b      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a25      	ldr	r2, [pc, #148]	; (800b258 <TIM_Base_SetConfig+0x134>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d007      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a24      	ldr	r2, [pc, #144]	; (800b25c <TIM_Base_SetConfig+0x138>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d003      	beq.n	800b1d6 <TIM_Base_SetConfig+0xb2>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a23      	ldr	r2, [pc, #140]	; (800b260 <TIM_Base_SetConfig+0x13c>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d108      	bne.n	800b1e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	689a      	ldr	r2, [r3, #8]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a0a      	ldr	r2, [pc, #40]	; (800b238 <TIM_Base_SetConfig+0x114>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_Base_SetConfig+0xf8>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <TIM_Base_SetConfig+0x124>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d103      	bne.n	800b224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	691a      	ldr	r2, [r3, #16]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	615a      	str	r2, [r3, #20]
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	40010000 	.word	0x40010000
 800b23c:	40000400 	.word	0x40000400
 800b240:	40000800 	.word	0x40000800
 800b244:	40000c00 	.word	0x40000c00
 800b248:	40010400 	.word	0x40010400
 800b24c:	40014000 	.word	0x40014000
 800b250:	40014400 	.word	0x40014400
 800b254:	40014800 	.word	0x40014800
 800b258:	40001800 	.word	0x40001800
 800b25c:	40001c00 	.word	0x40001c00
 800b260:	40002000 	.word	0x40002000

0800b264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	f023 0201 	bic.w	r2, r3, #1
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b28e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	4313      	orrs	r3, r2
 800b298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f023 030a 	bic.w	r3, r3, #10
 800b2a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	621a      	str	r2, [r3, #32]
}
 800b2b6:	bf00      	nop
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b087      	sub	sp, #28
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	f023 0210 	bic.w	r2, r3, #16
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	031b      	lsls	r3, r3, #12
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	011b      	lsls	r3, r3, #4
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	621a      	str	r2, [r3, #32]
}
 800b316:	bf00      	nop
 800b318:	371c      	adds	r7, #28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b322:	b480      	push	{r7}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4313      	orrs	r3, r2
 800b340:	f043 0307 	orr.w	r3, r3, #7
 800b344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	609a      	str	r2, [r3, #8]
}
 800b34c:	bf00      	nop
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	021a      	lsls	r2, r3, #8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	431a      	orrs	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	4313      	orrs	r3, r2
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	609a      	str	r2, [r3, #8]
}
 800b38c:	bf00      	nop
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d101      	bne.n	800b3b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e06d      	b.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a30      	ldr	r2, [pc, #192]	; (800b498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d004      	beq.n	800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a2f      	ldr	r2, [pc, #188]	; (800b49c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d108      	bne.n	800b3f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	4313      	orrs	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a20      	ldr	r2, [pc, #128]	; (800b498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d022      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b422:	d01d      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a1d      	ldr	r2, [pc, #116]	; (800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d018      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a1c      	ldr	r2, [pc, #112]	; (800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d013      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a1a      	ldr	r2, [pc, #104]	; (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d00e      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a15      	ldr	r2, [pc, #84]	; (800b49c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d009      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a16      	ldr	r2, [pc, #88]	; (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d004      	beq.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a15      	ldr	r2, [pc, #84]	; (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d10c      	bne.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	40010000 	.word	0x40010000
 800b49c:	40010400 	.word	0x40010400
 800b4a0:	40000400 	.word	0x40000400
 800b4a4:	40000800 	.word	0x40000800
 800b4a8:	40000c00 	.word	0x40000c00
 800b4ac:	40014000 	.word	0x40014000
 800b4b0:	40001800 	.word	0x40001800

0800b4b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e040      	b.n	800b584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7fa fa5e 	bl	80059d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2224      	movs	r2, #36	; 0x24
 800b51c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f022 0201 	bic.w	r2, r2, #1
 800b52c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fb16 	bl	800bb60 <UART_SetConfig>
 800b534:	4603      	mov	r3, r0
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e022      	b.n	800b584 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fd6c 	bl	800c024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b55a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b56a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fdf3 	bl	800c168 <UART_CheckIdleState>
 800b582:	4603      	mov	r3, r0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b0ba      	sub	sp, #232	; 0xe8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b5b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b5c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d115      	bne.n	800b5f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5cc:	f003 0320 	and.w	r3, r3, #32
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00f      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d009      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 828f 	beq.w	800bb08 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	4798      	blx	r3
      }
      return;
 800b5f2:	e289      	b.n	800bb08 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 8117 	beq.w	800b82c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b60a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b60e:	4b85      	ldr	r3, [pc, #532]	; (800b824 <HAL_UART_IRQHandler+0x298>)
 800b610:	4013      	ands	r3, r2
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 810a 	beq.w	800b82c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	d011      	beq.n	800b648 <HAL_UART_IRQHandler+0xbc>
 800b624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2201      	movs	r2, #1
 800b636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b63e:	f043 0201 	orr.w	r2, r3, #1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d011      	beq.n	800b678 <HAL_UART_IRQHandler+0xec>
 800b654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00b      	beq.n	800b678 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2202      	movs	r2, #2
 800b666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b66e:	f043 0204 	orr.w	r2, r3, #4
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d011      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x11c>
 800b684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2204      	movs	r2, #4
 800b696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b69e:	f043 0202 	orr.w	r2, r3, #2
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ac:	f003 0308 	and.w	r3, r3, #8
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d017      	beq.n	800b6e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b8:	f003 0320 	and.w	r3, r3, #32
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d105      	bne.n	800b6cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b6c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2208      	movs	r2, #8
 800b6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6da:	f043 0208 	orr.w	r2, r3, #8
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d012      	beq.n	800b716 <HAL_UART_IRQHandler+0x18a>
 800b6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00c      	beq.n	800b716 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b70c:	f043 0220 	orr.w	r2, r3, #32
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 81f5 	beq.w	800bb0c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b726:	f003 0320 	and.w	r3, r3, #32
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00d      	beq.n	800b74a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d007      	beq.n	800b74a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b75e:	2b40      	cmp	r3, #64	; 0x40
 800b760:	d005      	beq.n	800b76e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b766:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d04f      	beq.n	800b80e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fdf1 	bl	800c356 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d141      	bne.n	800b806 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3308      	adds	r3, #8
 800b788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1d9      	bne.n	800b782 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7da:	4a13      	ldr	r2, [pc, #76]	; (800b828 <HAL_UART_IRQHandler+0x29c>)
 800b7dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fb fa86 	bl	8006cf4 <HAL_DMA_Abort_IT>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d017      	beq.n	800b81e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7fc:	e00f      	b.n	800b81e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f998 	bl	800bb34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b804:	e00b      	b.n	800b81e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f994 	bl	800bb34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80c:	e007      	b.n	800b81e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f990 	bl	800bb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b81c:	e176      	b.n	800bb0c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b81e:	bf00      	nop
    return;
 800b820:	e174      	b.n	800bb0c <HAL_UART_IRQHandler+0x580>
 800b822:	bf00      	nop
 800b824:	04000120 	.word	0x04000120
 800b828:	0800c41d 	.word	0x0800c41d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b830:	2b01      	cmp	r3, #1
 800b832:	f040 8144 	bne.w	800babe <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b83a:	f003 0310 	and.w	r3, r3, #16
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 813d 	beq.w	800babe <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b848:	f003 0310 	and.w	r3, r3, #16
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 8136 	beq.w	800babe <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2210      	movs	r2, #16
 800b858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	f040 80b2 	bne.w	800b9ce <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b876:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 8148 	beq.w	800bb10 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b88a:	429a      	cmp	r2, r3
 800b88c:	f080 8140 	bcs.w	800bb10 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	69db      	ldr	r3, [r3, #28]
 800b8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a4:	f000 8085 	beq.w	800b9b2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1da      	bne.n	800b8a8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b904:	f023 0301 	bic.w	r3, r3, #1
 800b908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3308      	adds	r3, #8
 800b912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b916:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b91a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b91e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e1      	bne.n	800b8f2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3308      	adds	r3, #8
 800b934:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3308      	adds	r3, #8
 800b94e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b952:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e3      	bne.n	800b92e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2220      	movs	r2, #32
 800b96a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97a:	e853 3f00 	ldrex	r3, [r3]
 800b97e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b982:	f023 0310 	bic.w	r3, r3, #16
 800b986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b994:	65bb      	str	r3, [r7, #88]	; 0x58
 800b996:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b99a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b99c:	e841 2300 	strex	r3, r2, [r1]
 800b9a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e4      	bne.n	800b972 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fb f931 	bl	8006c14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f8be 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b9cc:	e0a0      	b.n	800bb10 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 8092 	beq.w	800bb14 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800b9f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 808d 	beq.w	800bb14 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ba1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e4      	bne.n	800b9fa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3308      	adds	r3, #8
 800ba36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	623b      	str	r3, [r7, #32]
   return(result);
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	f023 0301 	bic.w	r3, r3, #1
 800ba46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba54:	633a      	str	r2, [r7, #48]	; 0x30
 800ba56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5c:	e841 2300 	strex	r3, r2, [r1]
 800ba60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e3      	bne.n	800ba30 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	e853 3f00 	ldrex	r3, [r3]
 800ba86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f023 0310 	bic.w	r3, r3, #16
 800ba8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba9c:	61fb      	str	r3, [r7, #28]
 800ba9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	69fa      	ldr	r2, [r7, #28]
 800baa4:	e841 2300 	strex	r3, r2, [r1]
 800baa8:	617b      	str	r3, [r7, #20]
   return(result);
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e4      	bne.n	800ba7a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f846 	bl	800bb48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800babc:	e02a      	b.n	800bb14 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800babe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00e      	beq.n	800bae8 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800baca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bada:	2b00      	cmp	r3, #0
 800badc:	d01c      	beq.n	800bb18 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
    }
    return;
 800bae6:	e017      	b.n	800bb18 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d012      	beq.n	800bb1a <HAL_UART_IRQHandler+0x58e>
 800baf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00c      	beq.n	800bb1a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fca1 	bl	800c448 <UART_EndTransmit_IT>
    return;
 800bb06:	e008      	b.n	800bb1a <HAL_UART_IRQHandler+0x58e>
      return;
 800bb08:	bf00      	nop
 800bb0a:	e006      	b.n	800bb1a <HAL_UART_IRQHandler+0x58e>
    return;
 800bb0c:	bf00      	nop
 800bb0e:	e004      	b.n	800bb1a <HAL_UART_IRQHandler+0x58e>
      return;
 800bb10:	bf00      	nop
 800bb12:	e002      	b.n	800bb1a <HAL_UART_IRQHandler+0x58e>
      return;
 800bb14:	bf00      	nop
 800bb16:	e000      	b.n	800bb1a <HAL_UART_IRQHandler+0x58e>
    return;
 800bb18:	bf00      	nop
  }

}
 800bb1a:	37e8      	adds	r7, #232	; 0xe8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689a      	ldr	r2, [r3, #8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	4ba7      	ldr	r3, [pc, #668]	; (800be28 <UART_SetConfig+0x2c8>)
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	6812      	ldr	r2, [r2, #0]
 800bb92:	6979      	ldr	r1, [r7, #20]
 800bb94:	430b      	orrs	r3, r1
 800bb96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a95      	ldr	r2, [pc, #596]	; (800be2c <UART_SetConfig+0x2cc>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d120      	bne.n	800bc1e <UART_SetConfig+0xbe>
 800bbdc:	4b94      	ldr	r3, [pc, #592]	; (800be30 <UART_SetConfig+0x2d0>)
 800bbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe2:	f003 0303 	and.w	r3, r3, #3
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d816      	bhi.n	800bc18 <UART_SetConfig+0xb8>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <UART_SetConfig+0x90>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc0d 	.word	0x0800bc0d
 800bbf8:	0800bc07 	.word	0x0800bc07
 800bbfc:	0800bc13 	.word	0x0800bc13
 800bc00:	2301      	movs	r3, #1
 800bc02:	77fb      	strb	r3, [r7, #31]
 800bc04:	e14f      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc06:	2302      	movs	r3, #2
 800bc08:	77fb      	strb	r3, [r7, #31]
 800bc0a:	e14c      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	77fb      	strb	r3, [r7, #31]
 800bc10:	e149      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc12:	2308      	movs	r3, #8
 800bc14:	77fb      	strb	r3, [r7, #31]
 800bc16:	e146      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc18:	2310      	movs	r3, #16
 800bc1a:	77fb      	strb	r3, [r7, #31]
 800bc1c:	e143      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a84      	ldr	r2, [pc, #528]	; (800be34 <UART_SetConfig+0x2d4>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d132      	bne.n	800bc8e <UART_SetConfig+0x12e>
 800bc28:	4b81      	ldr	r3, [pc, #516]	; (800be30 <UART_SetConfig+0x2d0>)
 800bc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc2e:	f003 030c 	and.w	r3, r3, #12
 800bc32:	2b0c      	cmp	r3, #12
 800bc34:	d828      	bhi.n	800bc88 <UART_SetConfig+0x128>
 800bc36:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <UART_SetConfig+0xdc>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc71 	.word	0x0800bc71
 800bc40:	0800bc89 	.word	0x0800bc89
 800bc44:	0800bc89 	.word	0x0800bc89
 800bc48:	0800bc89 	.word	0x0800bc89
 800bc4c:	0800bc7d 	.word	0x0800bc7d
 800bc50:	0800bc89 	.word	0x0800bc89
 800bc54:	0800bc89 	.word	0x0800bc89
 800bc58:	0800bc89 	.word	0x0800bc89
 800bc5c:	0800bc77 	.word	0x0800bc77
 800bc60:	0800bc89 	.word	0x0800bc89
 800bc64:	0800bc89 	.word	0x0800bc89
 800bc68:	0800bc89 	.word	0x0800bc89
 800bc6c:	0800bc83 	.word	0x0800bc83
 800bc70:	2300      	movs	r3, #0
 800bc72:	77fb      	strb	r3, [r7, #31]
 800bc74:	e117      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc76:	2302      	movs	r3, #2
 800bc78:	77fb      	strb	r3, [r7, #31]
 800bc7a:	e114      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc7c:	2304      	movs	r3, #4
 800bc7e:	77fb      	strb	r3, [r7, #31]
 800bc80:	e111      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc82:	2308      	movs	r3, #8
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e10e      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	77fb      	strb	r3, [r7, #31]
 800bc8c:	e10b      	b.n	800bea6 <UART_SetConfig+0x346>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a69      	ldr	r2, [pc, #420]	; (800be38 <UART_SetConfig+0x2d8>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d120      	bne.n	800bcda <UART_SetConfig+0x17a>
 800bc98:	4b65      	ldr	r3, [pc, #404]	; (800be30 <UART_SetConfig+0x2d0>)
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bca2:	2b30      	cmp	r3, #48	; 0x30
 800bca4:	d013      	beq.n	800bcce <UART_SetConfig+0x16e>
 800bca6:	2b30      	cmp	r3, #48	; 0x30
 800bca8:	d814      	bhi.n	800bcd4 <UART_SetConfig+0x174>
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	d009      	beq.n	800bcc2 <UART_SetConfig+0x162>
 800bcae:	2b20      	cmp	r3, #32
 800bcb0:	d810      	bhi.n	800bcd4 <UART_SetConfig+0x174>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <UART_SetConfig+0x15c>
 800bcb6:	2b10      	cmp	r3, #16
 800bcb8:	d006      	beq.n	800bcc8 <UART_SetConfig+0x168>
 800bcba:	e00b      	b.n	800bcd4 <UART_SetConfig+0x174>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	e0f1      	b.n	800bea6 <UART_SetConfig+0x346>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	77fb      	strb	r3, [r7, #31]
 800bcc6:	e0ee      	b.n	800bea6 <UART_SetConfig+0x346>
 800bcc8:	2304      	movs	r3, #4
 800bcca:	77fb      	strb	r3, [r7, #31]
 800bccc:	e0eb      	b.n	800bea6 <UART_SetConfig+0x346>
 800bcce:	2308      	movs	r3, #8
 800bcd0:	77fb      	strb	r3, [r7, #31]
 800bcd2:	e0e8      	b.n	800bea6 <UART_SetConfig+0x346>
 800bcd4:	2310      	movs	r3, #16
 800bcd6:	77fb      	strb	r3, [r7, #31]
 800bcd8:	e0e5      	b.n	800bea6 <UART_SetConfig+0x346>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a57      	ldr	r2, [pc, #348]	; (800be3c <UART_SetConfig+0x2dc>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d120      	bne.n	800bd26 <UART_SetConfig+0x1c6>
 800bce4:	4b52      	ldr	r3, [pc, #328]	; (800be30 <UART_SetConfig+0x2d0>)
 800bce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bcee:	2bc0      	cmp	r3, #192	; 0xc0
 800bcf0:	d013      	beq.n	800bd1a <UART_SetConfig+0x1ba>
 800bcf2:	2bc0      	cmp	r3, #192	; 0xc0
 800bcf4:	d814      	bhi.n	800bd20 <UART_SetConfig+0x1c0>
 800bcf6:	2b80      	cmp	r3, #128	; 0x80
 800bcf8:	d009      	beq.n	800bd0e <UART_SetConfig+0x1ae>
 800bcfa:	2b80      	cmp	r3, #128	; 0x80
 800bcfc:	d810      	bhi.n	800bd20 <UART_SetConfig+0x1c0>
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <UART_SetConfig+0x1a8>
 800bd02:	2b40      	cmp	r3, #64	; 0x40
 800bd04:	d006      	beq.n	800bd14 <UART_SetConfig+0x1b4>
 800bd06:	e00b      	b.n	800bd20 <UART_SetConfig+0x1c0>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	77fb      	strb	r3, [r7, #31]
 800bd0c:	e0cb      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd0e:	2302      	movs	r3, #2
 800bd10:	77fb      	strb	r3, [r7, #31]
 800bd12:	e0c8      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd14:	2304      	movs	r3, #4
 800bd16:	77fb      	strb	r3, [r7, #31]
 800bd18:	e0c5      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd1a:	2308      	movs	r3, #8
 800bd1c:	77fb      	strb	r3, [r7, #31]
 800bd1e:	e0c2      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd20:	2310      	movs	r3, #16
 800bd22:	77fb      	strb	r3, [r7, #31]
 800bd24:	e0bf      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a45      	ldr	r2, [pc, #276]	; (800be40 <UART_SetConfig+0x2e0>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d125      	bne.n	800bd7c <UART_SetConfig+0x21c>
 800bd30:	4b3f      	ldr	r3, [pc, #252]	; (800be30 <UART_SetConfig+0x2d0>)
 800bd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd3e:	d017      	beq.n	800bd70 <UART_SetConfig+0x210>
 800bd40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd44:	d817      	bhi.n	800bd76 <UART_SetConfig+0x216>
 800bd46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd4a:	d00b      	beq.n	800bd64 <UART_SetConfig+0x204>
 800bd4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd50:	d811      	bhi.n	800bd76 <UART_SetConfig+0x216>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d003      	beq.n	800bd5e <UART_SetConfig+0x1fe>
 800bd56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd5a:	d006      	beq.n	800bd6a <UART_SetConfig+0x20a>
 800bd5c:	e00b      	b.n	800bd76 <UART_SetConfig+0x216>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	77fb      	strb	r3, [r7, #31]
 800bd62:	e0a0      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd64:	2302      	movs	r3, #2
 800bd66:	77fb      	strb	r3, [r7, #31]
 800bd68:	e09d      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd6a:	2304      	movs	r3, #4
 800bd6c:	77fb      	strb	r3, [r7, #31]
 800bd6e:	e09a      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd70:	2308      	movs	r3, #8
 800bd72:	77fb      	strb	r3, [r7, #31]
 800bd74:	e097      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd76:	2310      	movs	r3, #16
 800bd78:	77fb      	strb	r3, [r7, #31]
 800bd7a:	e094      	b.n	800bea6 <UART_SetConfig+0x346>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a30      	ldr	r2, [pc, #192]	; (800be44 <UART_SetConfig+0x2e4>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d125      	bne.n	800bdd2 <UART_SetConfig+0x272>
 800bd86:	4b2a      	ldr	r3, [pc, #168]	; (800be30 <UART_SetConfig+0x2d0>)
 800bd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd94:	d017      	beq.n	800bdc6 <UART_SetConfig+0x266>
 800bd96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd9a:	d817      	bhi.n	800bdcc <UART_SetConfig+0x26c>
 800bd9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda0:	d00b      	beq.n	800bdba <UART_SetConfig+0x25a>
 800bda2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda6:	d811      	bhi.n	800bdcc <UART_SetConfig+0x26c>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <UART_SetConfig+0x254>
 800bdac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdb0:	d006      	beq.n	800bdc0 <UART_SetConfig+0x260>
 800bdb2:	e00b      	b.n	800bdcc <UART_SetConfig+0x26c>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	77fb      	strb	r3, [r7, #31]
 800bdb8:	e075      	b.n	800bea6 <UART_SetConfig+0x346>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	77fb      	strb	r3, [r7, #31]
 800bdbe:	e072      	b.n	800bea6 <UART_SetConfig+0x346>
 800bdc0:	2304      	movs	r3, #4
 800bdc2:	77fb      	strb	r3, [r7, #31]
 800bdc4:	e06f      	b.n	800bea6 <UART_SetConfig+0x346>
 800bdc6:	2308      	movs	r3, #8
 800bdc8:	77fb      	strb	r3, [r7, #31]
 800bdca:	e06c      	b.n	800bea6 <UART_SetConfig+0x346>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	77fb      	strb	r3, [r7, #31]
 800bdd0:	e069      	b.n	800bea6 <UART_SetConfig+0x346>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a1c      	ldr	r2, [pc, #112]	; (800be48 <UART_SetConfig+0x2e8>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d137      	bne.n	800be4c <UART_SetConfig+0x2ec>
 800bddc:	4b14      	ldr	r3, [pc, #80]	; (800be30 <UART_SetConfig+0x2d0>)
 800bdde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bde6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdea:	d017      	beq.n	800be1c <UART_SetConfig+0x2bc>
 800bdec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdf0:	d817      	bhi.n	800be22 <UART_SetConfig+0x2c2>
 800bdf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdf6:	d00b      	beq.n	800be10 <UART_SetConfig+0x2b0>
 800bdf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdfc:	d811      	bhi.n	800be22 <UART_SetConfig+0x2c2>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d003      	beq.n	800be0a <UART_SetConfig+0x2aa>
 800be02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be06:	d006      	beq.n	800be16 <UART_SetConfig+0x2b6>
 800be08:	e00b      	b.n	800be22 <UART_SetConfig+0x2c2>
 800be0a:	2300      	movs	r3, #0
 800be0c:	77fb      	strb	r3, [r7, #31]
 800be0e:	e04a      	b.n	800bea6 <UART_SetConfig+0x346>
 800be10:	2302      	movs	r3, #2
 800be12:	77fb      	strb	r3, [r7, #31]
 800be14:	e047      	b.n	800bea6 <UART_SetConfig+0x346>
 800be16:	2304      	movs	r3, #4
 800be18:	77fb      	strb	r3, [r7, #31]
 800be1a:	e044      	b.n	800bea6 <UART_SetConfig+0x346>
 800be1c:	2308      	movs	r3, #8
 800be1e:	77fb      	strb	r3, [r7, #31]
 800be20:	e041      	b.n	800bea6 <UART_SetConfig+0x346>
 800be22:	2310      	movs	r3, #16
 800be24:	77fb      	strb	r3, [r7, #31]
 800be26:	e03e      	b.n	800bea6 <UART_SetConfig+0x346>
 800be28:	efff69f3 	.word	0xefff69f3
 800be2c:	40011000 	.word	0x40011000
 800be30:	40023800 	.word	0x40023800
 800be34:	40004400 	.word	0x40004400
 800be38:	40004800 	.word	0x40004800
 800be3c:	40004c00 	.word	0x40004c00
 800be40:	40005000 	.word	0x40005000
 800be44:	40011400 	.word	0x40011400
 800be48:	40007800 	.word	0x40007800
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a71      	ldr	r2, [pc, #452]	; (800c018 <UART_SetConfig+0x4b8>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d125      	bne.n	800bea2 <UART_SetConfig+0x342>
 800be56:	4b71      	ldr	r3, [pc, #452]	; (800c01c <UART_SetConfig+0x4bc>)
 800be58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be64:	d017      	beq.n	800be96 <UART_SetConfig+0x336>
 800be66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be6a:	d817      	bhi.n	800be9c <UART_SetConfig+0x33c>
 800be6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be70:	d00b      	beq.n	800be8a <UART_SetConfig+0x32a>
 800be72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be76:	d811      	bhi.n	800be9c <UART_SetConfig+0x33c>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <UART_SetConfig+0x324>
 800be7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be80:	d006      	beq.n	800be90 <UART_SetConfig+0x330>
 800be82:	e00b      	b.n	800be9c <UART_SetConfig+0x33c>
 800be84:	2300      	movs	r3, #0
 800be86:	77fb      	strb	r3, [r7, #31]
 800be88:	e00d      	b.n	800bea6 <UART_SetConfig+0x346>
 800be8a:	2302      	movs	r3, #2
 800be8c:	77fb      	strb	r3, [r7, #31]
 800be8e:	e00a      	b.n	800bea6 <UART_SetConfig+0x346>
 800be90:	2304      	movs	r3, #4
 800be92:	77fb      	strb	r3, [r7, #31]
 800be94:	e007      	b.n	800bea6 <UART_SetConfig+0x346>
 800be96:	2308      	movs	r3, #8
 800be98:	77fb      	strb	r3, [r7, #31]
 800be9a:	e004      	b.n	800bea6 <UART_SetConfig+0x346>
 800be9c:	2310      	movs	r3, #16
 800be9e:	77fb      	strb	r3, [r7, #31]
 800bea0:	e001      	b.n	800bea6 <UART_SetConfig+0x346>
 800bea2:	2310      	movs	r3, #16
 800bea4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beae:	d15a      	bne.n	800bf66 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800beb0:	7ffb      	ldrb	r3, [r7, #31]
 800beb2:	2b08      	cmp	r3, #8
 800beb4:	d827      	bhi.n	800bf06 <UART_SetConfig+0x3a6>
 800beb6:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <UART_SetConfig+0x35c>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800bee1 	.word	0x0800bee1
 800bec0:	0800bee9 	.word	0x0800bee9
 800bec4:	0800bef1 	.word	0x0800bef1
 800bec8:	0800bf07 	.word	0x0800bf07
 800becc:	0800bef7 	.word	0x0800bef7
 800bed0:	0800bf07 	.word	0x0800bf07
 800bed4:	0800bf07 	.word	0x0800bf07
 800bed8:	0800bf07 	.word	0x0800bf07
 800bedc:	0800beff 	.word	0x0800beff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bee0:	f7fd fce0 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 800bee4:	61b8      	str	r0, [r7, #24]
        break;
 800bee6:	e013      	b.n	800bf10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bee8:	f7fd fcf0 	bl	80098cc <HAL_RCC_GetPCLK2Freq>
 800beec:	61b8      	str	r0, [r7, #24]
        break;
 800beee:	e00f      	b.n	800bf10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bef0:	4b4b      	ldr	r3, [pc, #300]	; (800c020 <UART_SetConfig+0x4c0>)
 800bef2:	61bb      	str	r3, [r7, #24]
        break;
 800bef4:	e00c      	b.n	800bf10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bef6:	f7fd fc13 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 800befa:	61b8      	str	r0, [r7, #24]
        break;
 800befc:	e008      	b.n	800bf10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800befe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf02:	61bb      	str	r3, [r7, #24]
        break;
 800bf04:	e004      	b.n	800bf10 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	77bb      	strb	r3, [r7, #30]
        break;
 800bf0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d074      	beq.n	800c000 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	005a      	lsls	r2, r3, #1
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	085b      	lsrs	r3, r3, #1
 800bf20:	441a      	add	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	2b0f      	cmp	r3, #15
 800bf30:	d916      	bls.n	800bf60 <UART_SetConfig+0x400>
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf38:	d212      	bcs.n	800bf60 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	f023 030f 	bic.w	r3, r3, #15
 800bf42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	085b      	lsrs	r3, r3, #1
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	f003 0307 	and.w	r3, r3, #7
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	89fb      	ldrh	r3, [r7, #14]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	89fa      	ldrh	r2, [r7, #14]
 800bf5c:	60da      	str	r2, [r3, #12]
 800bf5e:	e04f      	b.n	800c000 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	77bb      	strb	r3, [r7, #30]
 800bf64:	e04c      	b.n	800c000 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf66:	7ffb      	ldrb	r3, [r7, #31]
 800bf68:	2b08      	cmp	r3, #8
 800bf6a:	d828      	bhi.n	800bfbe <UART_SetConfig+0x45e>
 800bf6c:	a201      	add	r2, pc, #4	; (adr r2, 800bf74 <UART_SetConfig+0x414>)
 800bf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf72:	bf00      	nop
 800bf74:	0800bf99 	.word	0x0800bf99
 800bf78:	0800bfa1 	.word	0x0800bfa1
 800bf7c:	0800bfa9 	.word	0x0800bfa9
 800bf80:	0800bfbf 	.word	0x0800bfbf
 800bf84:	0800bfaf 	.word	0x0800bfaf
 800bf88:	0800bfbf 	.word	0x0800bfbf
 800bf8c:	0800bfbf 	.word	0x0800bfbf
 800bf90:	0800bfbf 	.word	0x0800bfbf
 800bf94:	0800bfb7 	.word	0x0800bfb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf98:	f7fd fc84 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 800bf9c:	61b8      	str	r0, [r7, #24]
        break;
 800bf9e:	e013      	b.n	800bfc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfa0:	f7fd fc94 	bl	80098cc <HAL_RCC_GetPCLK2Freq>
 800bfa4:	61b8      	str	r0, [r7, #24]
        break;
 800bfa6:	e00f      	b.n	800bfc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfa8:	4b1d      	ldr	r3, [pc, #116]	; (800c020 <UART_SetConfig+0x4c0>)
 800bfaa:	61bb      	str	r3, [r7, #24]
        break;
 800bfac:	e00c      	b.n	800bfc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfae:	f7fd fbb7 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 800bfb2:	61b8      	str	r0, [r7, #24]
        break;
 800bfb4:	e008      	b.n	800bfc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfba:	61bb      	str	r3, [r7, #24]
        break;
 800bfbc:	e004      	b.n	800bfc8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	77bb      	strb	r3, [r7, #30]
        break;
 800bfc6:	bf00      	nop
    }

    if (pclk != 0U)
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d018      	beq.n	800c000 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	085a      	lsrs	r2, r3, #1
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	441a      	add	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2b0f      	cmp	r3, #15
 800bfe6:	d909      	bls.n	800bffc <UART_SetConfig+0x49c>
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfee:	d205      	bcs.n	800bffc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60da      	str	r2, [r3, #12]
 800bffa:	e001      	b.n	800c000 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c00c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3720      	adds	r7, #32
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	40007c00 	.word	0x40007c00
 800c01c:	40023800 	.word	0x40023800
 800c020:	00f42400 	.word	0x00f42400

0800c024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00a      	beq.n	800c04e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	430a      	orrs	r2, r1
 800c04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00a      	beq.n	800c070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00a      	beq.n	800c092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	430a      	orrs	r2, r1
 800c090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	f003 0308 	and.w	r3, r3, #8
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	f003 0310 	and.w	r3, r3, #16
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00a      	beq.n	800c0d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0da:	f003 0320 	and.w	r3, r3, #32
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00a      	beq.n	800c0f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01a      	beq.n	800c13a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c122:	d10a      	bne.n	800c13a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	430a      	orrs	r2, r1
 800c138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	430a      	orrs	r2, r1
 800c15a:	605a      	str	r2, [r3, #4]
  }
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af02      	add	r7, sp, #8
 800c16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c178:	f7f9 feec 	bl	8005f54 <HAL_GetTick>
 800c17c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0308 	and.w	r3, r3, #8
 800c188:	2b08      	cmp	r3, #8
 800c18a:	d10e      	bne.n	800c1aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c18c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f817 	bl	800c1ce <UART_WaitOnFlagUntilTimeout>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e00d      	b.n	800c1c6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b09c      	sub	sp, #112	; 0x70
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	60b9      	str	r1, [r7, #8]
 800c1d8:	603b      	str	r3, [r7, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1de:	e0a5      	b.n	800c32c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	f000 80a1 	beq.w	800c32c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ea:	f7f9 feb3 	bl	8005f54 <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d302      	bcc.n	800c200 <UART_WaitOnFlagUntilTimeout+0x32>
 800c1fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d13e      	bne.n	800c27e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c208:	e853 3f00 	ldrex	r3, [r3]
 800c20c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c214:	667b      	str	r3, [r7, #100]	; 0x64
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c21e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c220:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c226:	e841 2300 	strex	r3, r2, [r1]
 800c22a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1e6      	bne.n	800c200 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3308      	adds	r3, #8
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	f023 0301 	bic.w	r3, r3, #1
 800c248:	663b      	str	r3, [r7, #96]	; 0x60
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3308      	adds	r3, #8
 800c250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c252:	64ba      	str	r2, [r7, #72]	; 0x48
 800c254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c25a:	e841 2300 	strex	r3, r2, [r1]
 800c25e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1e5      	bne.n	800c232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2220      	movs	r2, #32
 800c26a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2220      	movs	r2, #32
 800c270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e067      	b.n	800c34e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d04f      	beq.n	800c32c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	69db      	ldr	r3, [r3, #28]
 800c292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c29a:	d147      	bne.n	800c32c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e6      	bne.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3308      	adds	r3, #8
 800c2de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
 800c2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f023 0301 	bic.w	r3, r3, #1
 800c2ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2f8:	623a      	str	r2, [r7, #32]
 800c2fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fc:	69f9      	ldr	r1, [r7, #28]
 800c2fe:	6a3a      	ldr	r2, [r7, #32]
 800c300:	e841 2300 	strex	r3, r2, [r1]
 800c304:	61bb      	str	r3, [r7, #24]
   return(result);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1e5      	bne.n	800c2d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2220      	movs	r2, #32
 800c310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2220      	movs	r2, #32
 800c316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2220      	movs	r2, #32
 800c31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c328:	2303      	movs	r3, #3
 800c32a:	e010      	b.n	800c34e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	69da      	ldr	r2, [r3, #28]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	4013      	ands	r3, r2
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	429a      	cmp	r2, r3
 800c33a:	bf0c      	ite	eq
 800c33c:	2301      	moveq	r3, #1
 800c33e:	2300      	movne	r3, #0
 800c340:	b2db      	uxtb	r3, r3
 800c342:	461a      	mov	r2, r3
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	429a      	cmp	r2, r3
 800c348:	f43f af4a 	beq.w	800c1e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3770      	adds	r7, #112	; 0x70
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c356:	b480      	push	{r7}
 800c358:	b095      	sub	sp, #84	; 0x54
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c372:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	461a      	mov	r2, r3
 800c37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c37c:	643b      	str	r3, [r7, #64]	; 0x40
 800c37e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c384:	e841 2300 	strex	r3, r2, [r1]
 800c388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1e6      	bne.n	800c35e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3308      	adds	r3, #8
 800c396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	e853 3f00 	ldrex	r3, [r3]
 800c39e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	f023 0301 	bic.w	r3, r3, #1
 800c3a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e5      	bne.n	800c390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d118      	bne.n	800c3fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f023 0310 	bic.w	r3, r3, #16
 800c3e0:	647b      	str	r3, [r7, #68]	; 0x44
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	6979      	ldr	r1, [r7, #20]
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e6      	bne.n	800c3cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2220      	movs	r2, #32
 800c402:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c410:	bf00      	nop
 800c412:	3754      	adds	r7, #84	; 0x54
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7ff fb7a 	bl	800bb34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c440:	bf00      	nop
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	e853 3f00 	ldrex	r3, [r3]
 800c45c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c464:	61fb      	str	r3, [r7, #28]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	61bb      	str	r3, [r7, #24]
 800c470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c472:	6979      	ldr	r1, [r7, #20]
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	e841 2300 	strex	r3, r2, [r1]
 800c47a:	613b      	str	r3, [r7, #16]
   return(result);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1e6      	bne.n	800c450 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2220      	movs	r2, #32
 800c486:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7ff fb46 	bl	800bb20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c494:	bf00      	nop
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d121      	bne.n	800c4f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4b27      	ldr	r3, [pc, #156]	; (800c550 <FMC_SDRAM_Init+0xb4>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	6851      	ldr	r1, [r2, #4]
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	6892      	ldr	r2, [r2, #8]
 800c4be:	4311      	orrs	r1, r2
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	68d2      	ldr	r2, [r2, #12]
 800c4c4:	4311      	orrs	r1, r2
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	6912      	ldr	r2, [r2, #16]
 800c4ca:	4311      	orrs	r1, r2
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	6952      	ldr	r2, [r2, #20]
 800c4d0:	4311      	orrs	r1, r2
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	6992      	ldr	r2, [r2, #24]
 800c4d6:	4311      	orrs	r1, r2
 800c4d8:	683a      	ldr	r2, [r7, #0]
 800c4da:	69d2      	ldr	r2, [r2, #28]
 800c4dc:	4311      	orrs	r1, r2
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	6a12      	ldr	r2, [r2, #32]
 800c4e2:	4311      	orrs	r1, r2
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	e026      	b.n	800c540 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	69d9      	ldr	r1, [r3, #28]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	4319      	orrs	r1, r3
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	430b      	orrs	r3, r1
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	4b0e      	ldr	r3, [pc, #56]	; (800c550 <FMC_SDRAM_Init+0xb4>)
 800c516:	4013      	ands	r3, r2
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	6851      	ldr	r1, [r2, #4]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	6892      	ldr	r2, [r2, #8]
 800c520:	4311      	orrs	r1, r2
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	68d2      	ldr	r2, [r2, #12]
 800c526:	4311      	orrs	r1, r2
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	6912      	ldr	r2, [r2, #16]
 800c52c:	4311      	orrs	r1, r2
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	6952      	ldr	r2, [r2, #20]
 800c532:	4311      	orrs	r1, r2
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	6992      	ldr	r2, [r2, #24]
 800c538:	430a      	orrs	r2, r1
 800c53a:	431a      	orrs	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	370c      	adds	r7, #12
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	ffff8000 	.word	0xffff8000

0800c554 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d128      	bne.n	800c5b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	1e59      	subs	r1, r3, #1
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	3b01      	subs	r3, #1
 800c57a:	011b      	lsls	r3, r3, #4
 800c57c:	4319      	orrs	r1, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	3b01      	subs	r3, #1
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	4319      	orrs	r1, r3
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	3b01      	subs	r3, #1
 800c58e:	031b      	lsls	r3, r3, #12
 800c590:	4319      	orrs	r1, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	3b01      	subs	r3, #1
 800c598:	041b      	lsls	r3, r3, #16
 800c59a:	4319      	orrs	r1, r3
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	051b      	lsls	r3, r3, #20
 800c5a4:	4319      	orrs	r1, r3
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	061b      	lsls	r3, r3, #24
 800c5ae:	430b      	orrs	r3, r1
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	609a      	str	r2, [r3, #8]
 800c5b6:	e02d      	b.n	800c614 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	4b19      	ldr	r3, [pc, #100]	; (800c624 <FMC_SDRAM_Timing_Init+0xd0>)
 800c5be:	4013      	ands	r3, r2
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	68d2      	ldr	r2, [r2, #12]
 800c5c4:	3a01      	subs	r2, #1
 800c5c6:	0311      	lsls	r1, r2, #12
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	6952      	ldr	r2, [r2, #20]
 800c5cc:	3a01      	subs	r2, #1
 800c5ce:	0512      	lsls	r2, r2, #20
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	1e59      	subs	r1, r3, #1
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	011b      	lsls	r3, r3, #4
 800c5ee:	4319      	orrs	r1, r3
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	021b      	lsls	r3, r3, #8
 800c5f8:	4319      	orrs	r1, r3
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	3b01      	subs	r3, #1
 800c600:	041b      	lsls	r3, r3, #16
 800c602:	4319      	orrs	r1, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	3b01      	subs	r3, #1
 800c60a:	061b      	lsls	r3, r3, #24
 800c60c:	430b      	orrs	r3, r1
 800c60e:	431a      	orrs	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	ff0f0fff 	.word	0xff0f0fff

0800c628 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	691a      	ldr	r2, [r3, #16]
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <FMC_SDRAM_SendCommand+0x44>)
 800c63a:	4013      	ands	r3, r2
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	6811      	ldr	r1, [r2, #0]
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	6852      	ldr	r2, [r2, #4]
 800c644:	4311      	orrs	r1, r2
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	6892      	ldr	r2, [r2, #8]
 800c64a:	3a01      	subs	r2, #1
 800c64c:	0152      	lsls	r2, r2, #5
 800c64e:	4311      	orrs	r1, r2
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	68d2      	ldr	r2, [r2, #12]
 800c654:	0252      	lsls	r2, r2, #9
 800c656:	430a      	orrs	r2, r1
 800c658:	431a      	orrs	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	ffc00000 	.word	0xffc00000

0800c670 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	695a      	ldr	r2, [r3, #20]
 800c67e:	4b07      	ldr	r3, [pc, #28]	; (800c69c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c680:	4013      	ands	r3, r2
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	0052      	lsls	r2, r2, #1
 800c686:	431a      	orrs	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	ffffc001 	.word	0xffffc001

0800c6a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6b2:	2b84      	cmp	r3, #132	; 0x84
 800c6b4:	d005      	beq.n	800c6c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	4413      	add	r3, r2
 800c6be:	3303      	adds	r3, #3
 800c6c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c6d4:	f001 f9f2 	bl	800dabc <vTaskStartScheduler>
  
  return osOK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c6de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e0:	b089      	sub	sp, #36	; 0x24
 800c6e2:	af04      	add	r7, sp, #16
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d020      	beq.n	800c732 <osThreadCreate+0x54>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01c      	beq.n	800c732 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685c      	ldr	r4, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681d      	ldr	r5, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	691e      	ldr	r6, [r3, #16]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff ffc8 	bl	800c6a0 <makeFreeRtosPriority>
 800c710:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c71a:	9202      	str	r2, [sp, #8]
 800c71c:	9301      	str	r3, [sp, #4]
 800c71e:	9100      	str	r1, [sp, #0]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	4632      	mov	r2, r6
 800c724:	4629      	mov	r1, r5
 800c726:	4620      	mov	r0, r4
 800c728:	f000 feca 	bl	800d4c0 <xTaskCreateStatic>
 800c72c:	4603      	mov	r3, r0
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	e01c      	b.n	800c76c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685c      	ldr	r4, [r3, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c73e:	b29e      	uxth	r6, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff ffaa 	bl	800c6a0 <makeFreeRtosPriority>
 800c74c:	4602      	mov	r2, r0
 800c74e:	f107 030c 	add.w	r3, r7, #12
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	9200      	str	r2, [sp, #0]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	4632      	mov	r2, r6
 800c75a:	4629      	mov	r1, r5
 800c75c:	4620      	mov	r0, r4
 800c75e:	f000 ff12 	bl	800d586 <xTaskCreate>
 800c762:	4603      	mov	r3, r0
 800c764:	2b01      	cmp	r3, #1
 800c766:	d001      	beq.n	800c76c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c768:	2300      	movs	r3, #0
 800c76a:	e000      	b.n	800c76e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c76c:	68fb      	ldr	r3, [r7, #12]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c776 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 f850 	bl	800d824 <vTaskDelete>
  return osOK;
 800c784:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800c786:	4618      	mov	r0, r3
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <osDelay+0x16>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	e000      	b.n	800c7a6 <osDelay+0x18>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 f952 	bl	800da50 <vTaskDelay>
  
  return osOK;
 800c7ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c7b6:	b590      	push	{r4, r7, lr}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af02      	add	r7, sp, #8
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d011      	beq.n	800c7ec <osMessageCreate+0x36>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00d      	beq.n	800c7ec <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6859      	ldr	r1, [r3, #4]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	2400      	movs	r4, #0
 800c7e2:	9400      	str	r4, [sp, #0]
 800c7e4:	f000 f92e 	bl	800ca44 <xQueueGenericCreateStatic>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	e008      	b.n	800c7fe <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	f000 f9a6 	bl	800cb48 <xQueueGenericCreate>
 800c7fc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	bd90      	pop	{r4, r7, pc}

0800c806 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f103 0208 	add.w	r2, r3, #8
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f04f 32ff 	mov.w	r2, #4294967295
 800c81e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f103 0208 	add.w	r2, r3, #8
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f103 0208 	add.w	r2, r3, #8
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c83a:	bf00      	nop
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	689a      	ldr	r2, [r3, #8]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	601a      	str	r2, [r3, #0]
}
 800c89c:	bf00      	nop
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8be:	d103      	bne.n	800c8c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	e00c      	b.n	800c8e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	e002      	b.n	800c8d6 <vListInsert+0x2e>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d2f6      	bcs.n	800c8d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	601a      	str	r2, [r3, #0]
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c91a:	b480      	push	{r7}
 800c91c:	b085      	sub	sp, #20
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	6892      	ldr	r2, [r2, #8]
 800c930:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	6852      	ldr	r2, [r2, #4]
 800c93a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	429a      	cmp	r2, r3
 800c944:	d103      	bne.n	800c94e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689a      	ldr	r2, [r3, #8]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	1e5a      	subs	r2, r3, #1
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
	...

0800c970 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10c      	bne.n	800c99e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c988:	b672      	cpsid	i
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	b662      	cpsie	i
 800c998:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c99e:	f001 fffd 	bl	800e99c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9aa:	68f9      	ldr	r1, [r7, #12]
 800c9ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9ae:	fb01 f303 	mul.w	r3, r1, r3
 800c9b2:	441a      	add	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	68f9      	ldr	r1, [r7, #12]
 800c9d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9d4:	fb01 f303 	mul.w	r3, r1, r3
 800c9d8:	441a      	add	r2, r3
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	22ff      	movs	r2, #255	; 0xff
 800c9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	22ff      	movs	r2, #255	; 0xff
 800c9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d114      	bne.n	800ca1e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01a      	beq.n	800ca32 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3310      	adds	r3, #16
 800ca00:	4618      	mov	r0, r3
 800ca02:	f001 fab9 	bl	800df78 <xTaskRemoveFromEventList>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d012      	beq.n	800ca32 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca0c:	4b0c      	ldr	r3, [pc, #48]	; (800ca40 <xQueueGenericReset+0xd0>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	e009      	b.n	800ca32 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3310      	adds	r3, #16
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7ff feef 	bl	800c806 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3324      	adds	r3, #36	; 0x24
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff feea 	bl	800c806 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca32:	f001 ffe7 	bl	800ea04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca36:	2301      	movs	r3, #1
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	e000ed04 	.word	0xe000ed04

0800ca44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b08e      	sub	sp, #56	; 0x38
 800ca48:	af02      	add	r7, sp, #8
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10c      	bne.n	800ca72 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ca58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5c:	b672      	cpsid	i
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	b662      	cpsie	i
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d10c      	bne.n	800ca92 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ca78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7c:	b672      	cpsid	i
 800ca7e:	f383 8811 	msr	BASEPRI, r3
 800ca82:	f3bf 8f6f 	isb	sy
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	b662      	cpsie	i
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <xQueueGenericCreateStatic+0x5a>
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <xQueueGenericCreateStatic+0x5e>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e000      	b.n	800caa4 <xQueueGenericCreateStatic+0x60>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10c      	bne.n	800cac2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	b672      	cpsid	i
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	b662      	cpsie	i
 800cabc:	623b      	str	r3, [r7, #32]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d102      	bne.n	800cace <xQueueGenericCreateStatic+0x8a>
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <xQueueGenericCreateStatic+0x8e>
 800cace:	2301      	movs	r3, #1
 800cad0:	e000      	b.n	800cad4 <xQueueGenericCreateStatic+0x90>
 800cad2:	2300      	movs	r3, #0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10c      	bne.n	800caf2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	b672      	cpsid	i
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	b662      	cpsie	i
 800caec:	61fb      	str	r3, [r7, #28]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800caf2:	2348      	movs	r3, #72	; 0x48
 800caf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b48      	cmp	r3, #72	; 0x48
 800cafa:	d00c      	beq.n	800cb16 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	b672      	cpsid	i
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	b662      	cpsie	i
 800cb10:	61bb      	str	r3, [r7, #24]
}
 800cb12:	bf00      	nop
 800cb14:	e7fe      	b.n	800cb14 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00d      	beq.n	800cb3e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	4613      	mov	r3, r2
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f847 	bl	800cbcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3730      	adds	r7, #48	; 0x30
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08a      	sub	sp, #40	; 0x28
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10c      	bne.n	800cb76 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	b672      	cpsid	i
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	b662      	cpsie	i
 800cb70:	613b      	str	r3, [r7, #16]
}
 800cb72:	bf00      	nop
 800cb74:	e7fe      	b.n	800cb74 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d102      	bne.n	800cb82 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61fb      	str	r3, [r7, #28]
 800cb80:	e004      	b.n	800cb8c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	fb02 f303 	mul.w	r3, r2, r3
 800cb8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	3348      	adds	r3, #72	; 0x48
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 ffeb 	bl	800eb6c <pvPortMalloc>
 800cb96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d011      	beq.n	800cbc2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	3348      	adds	r3, #72	; 0x48
 800cba6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbb0:	79fa      	ldrb	r2, [r7, #7]
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f805 	bl	800cbcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbc2:	69bb      	ldr	r3, [r7, #24]
	}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	e002      	b.n	800cbee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	68ba      	ldr	r2, [r7, #8]
 800cbf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	69b8      	ldr	r0, [r7, #24]
 800cbfe:	f7ff feb7 	bl	800c970 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b082      	sub	sp, #8
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00e      	beq.n	800cc36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	2100      	movs	r1, #0
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f81d 	bl	800cc70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b086      	sub	sp, #24
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	4603      	mov	r3, r0
 800cc46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	461a      	mov	r2, r3
 800cc54:	6939      	ldr	r1, [r7, #16]
 800cc56:	6978      	ldr	r0, [r7, #20]
 800cc58:	f7ff ff76 	bl	800cb48 <xQueueGenericCreate>
 800cc5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7ff ffd3 	bl	800cc0a <prvInitialiseMutex>

		return xNewQueue;
 800cc64:	68fb      	ldr	r3, [r7, #12]
	}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08e      	sub	sp, #56	; 0x38
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10c      	bne.n	800cca6 <xQueueGenericSend+0x36>
	__asm volatile
 800cc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc90:	b672      	cpsid	i
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	b662      	cpsie	i
 800cca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d103      	bne.n	800ccb4 <xQueueGenericSend+0x44>
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <xQueueGenericSend+0x48>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e000      	b.n	800ccba <xQueueGenericSend+0x4a>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10c      	bne.n	800ccd8 <xQueueGenericSend+0x68>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	b672      	cpsid	i
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	b662      	cpsie	i
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccd4:	bf00      	nop
 800ccd6:	e7fe      	b.n	800ccd6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d103      	bne.n	800cce6 <xQueueGenericSend+0x76>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d101      	bne.n	800ccea <xQueueGenericSend+0x7a>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e000      	b.n	800ccec <xQueueGenericSend+0x7c>
 800ccea:	2300      	movs	r3, #0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10c      	bne.n	800cd0a <xQueueGenericSend+0x9a>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	b672      	cpsid	i
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	b662      	cpsie	i
 800cd04:	623b      	str	r3, [r7, #32]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd0a:	f001 fafd 	bl	800e308 <xTaskGetSchedulerState>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <xQueueGenericSend+0xaa>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d101      	bne.n	800cd1e <xQueueGenericSend+0xae>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e000      	b.n	800cd20 <xQueueGenericSend+0xb0>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10c      	bne.n	800cd3e <xQueueGenericSend+0xce>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	b672      	cpsid	i
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	b662      	cpsie	i
 800cd38:	61fb      	str	r3, [r7, #28]
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd3e:	f001 fe2d 	bl	800e99c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d302      	bcc.n	800cd54 <xQueueGenericSend+0xe4>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d129      	bne.n	800cda8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	68b9      	ldr	r1, [r7, #8]
 800cd58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd5a:	f000 faa1 	bl	800d2a0 <prvCopyDataToQueue>
 800cd5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d010      	beq.n	800cd8a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	3324      	adds	r3, #36	; 0x24
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f001 f903 	bl	800df78 <xTaskRemoveFromEventList>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d013      	beq.n	800cda0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd78:	4b3f      	ldr	r3, [pc, #252]	; (800ce78 <xQueueGenericSend+0x208>)
 800cd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	e00a      	b.n	800cda0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d007      	beq.n	800cda0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd90:	4b39      	ldr	r3, [pc, #228]	; (800ce78 <xQueueGenericSend+0x208>)
 800cd92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cda0:	f001 fe30 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e063      	b.n	800ce70 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d103      	bne.n	800cdb6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdae:	f001 fe29 	bl	800ea04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	e05c      	b.n	800ce70 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d106      	bne.n	800cdca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdbc:	f107 0314 	add.w	r3, r7, #20
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 f93d 	bl	800e040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdca:	f001 fe1b 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdce:	f000 fee3 	bl	800db98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdd2:	f001 fde3 	bl	800e99c <vPortEnterCritical>
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cddc:	b25b      	sxtb	r3, r3
 800cdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde2:	d103      	bne.n	800cdec <xQueueGenericSend+0x17c>
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf2:	b25b      	sxtb	r3, r3
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d103      	bne.n	800ce02 <xQueueGenericSend+0x192>
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce02:	f001 fdff 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce06:	1d3a      	adds	r2, r7, #4
 800ce08:	f107 0314 	add.w	r3, r7, #20
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f001 f92c 	bl	800e06c <xTaskCheckForTimeOut>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d124      	bne.n	800ce64 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce1c:	f000 fb38 	bl	800d490 <prvIsQueueFull>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d018      	beq.n	800ce58 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	3310      	adds	r3, #16
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f001 f87c 	bl	800df2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce36:	f000 fac3 	bl	800d3c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce3a:	f000 febb 	bl	800dbb4 <xTaskResumeAll>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f47f af7c 	bne.w	800cd3e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ce46:	4b0c      	ldr	r3, [pc, #48]	; (800ce78 <xQueueGenericSend+0x208>)
 800ce48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	e772      	b.n	800cd3e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce5a:	f000 fab1 	bl	800d3c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce5e:	f000 fea9 	bl	800dbb4 <xTaskResumeAll>
 800ce62:	e76c      	b.n	800cd3e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce66:	f000 faab 	bl	800d3c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce6a:	f000 fea3 	bl	800dbb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3738      	adds	r7, #56	; 0x38
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08c      	sub	sp, #48	; 0x30
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10c      	bne.n	800ceb0 <xQueueReceive+0x34>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9a:	b672      	cpsid	i
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	b662      	cpsie	i
 800ceaa:	623b      	str	r3, [r7, #32]
}
 800ceac:	bf00      	nop
 800ceae:	e7fe      	b.n	800ceae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d103      	bne.n	800cebe <xQueueReceive+0x42>
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <xQueueReceive+0x46>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e000      	b.n	800cec4 <xQueueReceive+0x48>
 800cec2:	2300      	movs	r3, #0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10c      	bne.n	800cee2 <xQueueReceive+0x66>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	b672      	cpsid	i
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	b662      	cpsie	i
 800cedc:	61fb      	str	r3, [r7, #28]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cee2:	f001 fa11 	bl	800e308 <xTaskGetSchedulerState>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <xQueueReceive+0x76>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <xQueueReceive+0x7a>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <xQueueReceive+0x7c>
 800cef6:	2300      	movs	r3, #0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10c      	bne.n	800cf16 <xQueueReceive+0x9a>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	b672      	cpsid	i
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	b662      	cpsie	i
 800cf10:	61bb      	str	r3, [r7, #24]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf16:	f001 fd41 	bl	800e99c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d01f      	beq.n	800cf66 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf26:	68b9      	ldr	r1, [r7, #8]
 800cf28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2a:	f000 fa23 	bl	800d374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	1e5a      	subs	r2, r3, #1
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00f      	beq.n	800cf5e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	3310      	adds	r3, #16
 800cf42:	4618      	mov	r0, r3
 800cf44:	f001 f818 	bl	800df78 <xTaskRemoveFromEventList>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d007      	beq.n	800cf5e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf4e:	4b3d      	ldr	r3, [pc, #244]	; (800d044 <xQueueReceive+0x1c8>)
 800cf50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf5e:	f001 fd51 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e069      	b.n	800d03a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d103      	bne.n	800cf74 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf6c:	f001 fd4a 	bl	800ea04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf70:	2300      	movs	r3, #0
 800cf72:	e062      	b.n	800d03a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf7a:	f107 0310 	add.w	r3, r7, #16
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 f85e 	bl	800e040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf84:	2301      	movs	r3, #1
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf88:	f001 fd3c 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf8c:	f000 fe04 	bl	800db98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf90:	f001 fd04 	bl	800e99c <vPortEnterCritical>
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf9a:	b25b      	sxtb	r3, r3
 800cf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa0:	d103      	bne.n	800cfaa <xQueueReceive+0x12e>
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfb0:	b25b      	sxtb	r3, r3
 800cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb6:	d103      	bne.n	800cfc0 <xQueueReceive+0x144>
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfc0:	f001 fd20 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfc4:	1d3a      	adds	r2, r7, #4
 800cfc6:	f107 0310 	add.w	r3, r7, #16
 800cfca:	4611      	mov	r1, r2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 f84d 	bl	800e06c <xTaskCheckForTimeOut>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d123      	bne.n	800d020 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfda:	f000 fa43 	bl	800d464 <prvIsQueueEmpty>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d017      	beq.n	800d014 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	3324      	adds	r3, #36	; 0x24
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	4611      	mov	r1, r2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 ff9d 	bl	800df2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff4:	f000 f9e4 	bl	800d3c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cff8:	f000 fddc 	bl	800dbb4 <xTaskResumeAll>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d189      	bne.n	800cf16 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d002:	4b10      	ldr	r3, [pc, #64]	; (800d044 <xQueueReceive+0x1c8>)
 800d004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d008:	601a      	str	r2, [r3, #0]
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	e780      	b.n	800cf16 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d016:	f000 f9d3 	bl	800d3c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d01a:	f000 fdcb 	bl	800dbb4 <xTaskResumeAll>
 800d01e:	e77a      	b.n	800cf16 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d022:	f000 f9cd 	bl	800d3c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d026:	f000 fdc5 	bl	800dbb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d02c:	f000 fa1a 	bl	800d464 <prvIsQueueEmpty>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	f43f af6f 	beq.w	800cf16 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3730      	adds	r7, #48	; 0x30
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08e      	sub	sp, #56	; 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d052:	2300      	movs	r3, #0
 800d054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10c      	bne.n	800d07e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	b672      	cpsid	i
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	b662      	cpsie	i
 800d078:	623b      	str	r3, [r7, #32]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00c      	beq.n	800d0a0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	b672      	cpsid	i
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	b662      	cpsie	i
 800d09a:	61fb      	str	r3, [r7, #28]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0a0:	f001 f932 	bl	800e308 <xTaskGetSchedulerState>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d102      	bne.n	800d0b0 <xQueueSemaphoreTake+0x68>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <xQueueSemaphoreTake+0x6c>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e000      	b.n	800d0b6 <xQueueSemaphoreTake+0x6e>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10c      	bne.n	800d0d4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	b672      	cpsid	i
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	b662      	cpsie	i
 800d0ce:	61bb      	str	r3, [r7, #24]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0d4:	f001 fc62 	bl	800e99c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d024      	beq.n	800d12e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	1e5a      	subs	r2, r3, #1
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d104      	bne.n	800d0fe <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0f4:	f001 face 	bl	800e694 <pvTaskIncrementMutexHeldCount>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00f      	beq.n	800d126 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	3310      	adds	r3, #16
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 ff34 	bl	800df78 <xTaskRemoveFromEventList>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d007      	beq.n	800d126 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d116:	4b55      	ldr	r3, [pc, #340]	; (800d26c <xQueueSemaphoreTake+0x224>)
 800d118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11c:	601a      	str	r2, [r3, #0]
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d126:	f001 fc6d 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e099      	b.n	800d262 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d113      	bne.n	800d15c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00c      	beq.n	800d154 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	b672      	cpsid	i
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	b662      	cpsie	i
 800d14e:	617b      	str	r3, [r7, #20]
}
 800d150:	bf00      	nop
 800d152:	e7fe      	b.n	800d152 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d154:	f001 fc56 	bl	800ea04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d158:	2300      	movs	r3, #0
 800d15a:	e082      	b.n	800d262 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	4618      	mov	r0, r3
 800d168:	f000 ff6a 	bl	800e040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d16c:	2301      	movs	r3, #1
 800d16e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d170:	f001 fc48 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d174:	f000 fd10 	bl	800db98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d178:	f001 fc10 	bl	800e99c <vPortEnterCritical>
 800d17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d182:	b25b      	sxtb	r3, r3
 800d184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d188:	d103      	bne.n	800d192 <xQueueSemaphoreTake+0x14a>
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d198:	b25b      	sxtb	r3, r3
 800d19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19e:	d103      	bne.n	800d1a8 <xQueueSemaphoreTake+0x160>
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1a8:	f001 fc2c 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1ac:	463a      	mov	r2, r7
 800d1ae:	f107 030c 	add.w	r3, r7, #12
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 ff59 	bl	800e06c <xTaskCheckForTimeOut>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d132      	bne.n	800d226 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1c2:	f000 f94f 	bl	800d464 <prvIsQueueEmpty>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d026      	beq.n	800d21a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d109      	bne.n	800d1e8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d1d4:	f001 fbe2 	bl	800e99c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f001 f8b1 	bl	800e344 <xTaskPriorityInherit>
 800d1e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d1e4:	f001 fc0e 	bl	800ea04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	3324      	adds	r3, #36	; 0x24
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 fe9b 	bl	800df2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1f8:	f000 f8e2 	bl	800d3c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1fc:	f000 fcda 	bl	800dbb4 <xTaskResumeAll>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	f47f af66 	bne.w	800d0d4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d208:	4b18      	ldr	r3, [pc, #96]	; (800d26c <xQueueSemaphoreTake+0x224>)
 800d20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	e75c      	b.n	800d0d4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d21c:	f000 f8d0 	bl	800d3c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d220:	f000 fcc8 	bl	800dbb4 <xTaskResumeAll>
 800d224:	e756      	b.n	800d0d4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d228:	f000 f8ca 	bl	800d3c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d22c:	f000 fcc2 	bl	800dbb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d232:	f000 f917 	bl	800d464 <prvIsQueueEmpty>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f43f af4b 	beq.w	800d0d4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00d      	beq.n	800d260 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d244:	f001 fbaa 	bl	800e99c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d24a:	f000 f811 	bl	800d270 <prvGetDisinheritPriorityAfterTimeout>
 800d24e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d256:	4618      	mov	r0, r3
 800d258:	f001 f97e 	bl	800e558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d25c:	f001 fbd2 	bl	800ea04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d260:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d262:	4618      	mov	r0, r3
 800d264:	3738      	adds	r7, #56	; 0x38
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d006      	beq.n	800d28e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f1c3 0307 	rsb	r3, r3, #7
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	e001      	b.n	800d292 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d28e:	2300      	movs	r3, #0
 800d290:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d292:	68fb      	ldr	r3, [r7, #12]
	}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10d      	bne.n	800d2da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d14d      	bne.n	800d362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f001 f8ba 	bl	800e444 <xTaskPriorityDisinherit>
 800d2d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	609a      	str	r2, [r3, #8]
 800d2d8:	e043      	b.n	800d362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d119      	bne.n	800d314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6858      	ldr	r0, [r3, #4]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	f001 fe48 	bl	800ef80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	685a      	ldr	r2, [r3, #4]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	429a      	cmp	r2, r3
 800d308:	d32b      	bcc.n	800d362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	605a      	str	r2, [r3, #4]
 800d312:	e026      	b.n	800d362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	68d8      	ldr	r0, [r3, #12]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31c:	461a      	mov	r2, r3
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	f001 fe2e 	bl	800ef80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68da      	ldr	r2, [r3, #12]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32c:	425b      	negs	r3, r3
 800d32e:	441a      	add	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d207      	bcs.n	800d350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	689a      	ldr	r2, [r3, #8]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d348:	425b      	negs	r3, r3
 800d34a:	441a      	add	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d105      	bne.n	800d362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	3b01      	subs	r3, #1
 800d360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	1c5a      	adds	r2, r3, #1
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d36a:	697b      	ldr	r3, [r7, #20]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3718      	adds	r7, #24
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	2b00      	cmp	r3, #0
 800d384:	d018      	beq.n	800d3b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68da      	ldr	r2, [r3, #12]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	441a      	add	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d303      	bcc.n	800d3a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68d9      	ldr	r1, [r3, #12]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	6838      	ldr	r0, [r7, #0]
 800d3b4:	f001 fde4 	bl	800ef80 <memcpy>
	}
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3c8:	f001 fae8 	bl	800e99c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3d4:	e011      	b.n	800d3fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d012      	beq.n	800d404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	3324      	adds	r3, #36	; 0x24
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 fdc8 	bl	800df78 <xTaskRemoveFromEventList>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3ee:	f000 fea3 	bl	800e138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	dce9      	bgt.n	800d3d6 <prvUnlockQueue+0x16>
 800d402:	e000      	b.n	800d406 <prvUnlockQueue+0x46>
					break;
 800d404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	22ff      	movs	r2, #255	; 0xff
 800d40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d40e:	f001 faf9 	bl	800ea04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d412:	f001 fac3 	bl	800e99c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d41c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d41e:	e011      	b.n	800d444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d012      	beq.n	800d44e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3310      	adds	r3, #16
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fda3 	bl	800df78 <xTaskRemoveFromEventList>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d001      	beq.n	800d43c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d438:	f000 fe7e 	bl	800e138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
 800d43e:	3b01      	subs	r3, #1
 800d440:	b2db      	uxtb	r3, r3
 800d442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dce9      	bgt.n	800d420 <prvUnlockQueue+0x60>
 800d44c:	e000      	b.n	800d450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d44e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	22ff      	movs	r2, #255	; 0xff
 800d454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d458:	f001 fad4 	bl	800ea04 <vPortExitCritical>
}
 800d45c:	bf00      	nop
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d46c:	f001 fa96 	bl	800e99c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	2b00      	cmp	r3, #0
 800d476:	d102      	bne.n	800d47e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d478:	2301      	movs	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
 800d47c:	e001      	b.n	800d482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d482:	f001 fabf 	bl	800ea04 <vPortExitCritical>

	return xReturn;
 800d486:	68fb      	ldr	r3, [r7, #12]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d498:	f001 fa80 	bl	800e99c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d102      	bne.n	800d4ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	e001      	b.n	800d4b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4b2:	f001 faa7 	bl	800ea04 <vPortExitCritical>

	return xReturn;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08e      	sub	sp, #56	; 0x38
 800d4c4:	af04      	add	r7, sp, #16
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10c      	bne.n	800d4ee <xTaskCreateStatic+0x2e>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	b672      	cpsid	i
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	b662      	cpsie	i
 800d4e8:	623b      	str	r3, [r7, #32]
}
 800d4ea:	bf00      	nop
 800d4ec:	e7fe      	b.n	800d4ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10c      	bne.n	800d50e <xTaskCreateStatic+0x4e>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	b672      	cpsid	i
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	b662      	cpsie	i
 800d508:	61fb      	str	r3, [r7, #28]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d50e:	23b4      	movs	r3, #180	; 0xb4
 800d510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	2bb4      	cmp	r3, #180	; 0xb4
 800d516:	d00c      	beq.n	800d532 <xTaskCreateStatic+0x72>
	__asm volatile
 800d518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51c:	b672      	cpsid	i
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	b662      	cpsie	i
 800d52c:	61bb      	str	r3, [r7, #24]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d532:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	2b00      	cmp	r3, #0
 800d538:	d01e      	beq.n	800d578 <xTaskCreateStatic+0xb8>
 800d53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d01b      	beq.n	800d578 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d548:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	2202      	movs	r2, #2
 800d54e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d552:	2300      	movs	r3, #0
 800d554:	9303      	str	r3, [sp, #12]
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	9302      	str	r3, [sp, #8]
 800d55a:	f107 0314 	add.w	r3, r7, #20
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f000 f850 	bl	800d610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d572:	f000 f8ed 	bl	800d750 <prvAddNewTaskToReadyList>
 800d576:	e001      	b.n	800d57c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d57c:	697b      	ldr	r3, [r7, #20]
	}
 800d57e:	4618      	mov	r0, r3
 800d580:	3728      	adds	r7, #40	; 0x28
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d586:	b580      	push	{r7, lr}
 800d588:	b08c      	sub	sp, #48	; 0x30
 800d58a:	af04      	add	r7, sp, #16
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	603b      	str	r3, [r7, #0]
 800d592:	4613      	mov	r3, r2
 800d594:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d596:	88fb      	ldrh	r3, [r7, #6]
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f001 fae6 	bl	800eb6c <pvPortMalloc>
 800d5a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00e      	beq.n	800d5c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5a8:	20b4      	movs	r0, #180	; 0xb4
 800d5aa:	f001 fadf 	bl	800eb6c <pvPortMalloc>
 800d5ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	631a      	str	r2, [r3, #48]	; 0x30
 800d5bc:	e005      	b.n	800d5ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d5be:	6978      	ldr	r0, [r7, #20]
 800d5c0:	f001 fb9e 	bl	800ed00 <vPortFree>
 800d5c4:	e001      	b.n	800d5ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d017      	beq.n	800d600 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d5d8:	88fa      	ldrh	r2, [r7, #6]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	9303      	str	r3, [sp, #12]
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	9302      	str	r3, [sp, #8]
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 f80e 	bl	800d610 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5f4:	69f8      	ldr	r0, [r7, #28]
 800d5f6:	f000 f8ab 	bl	800d750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	61bb      	str	r3, [r7, #24]
 800d5fe:	e002      	b.n	800d606 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d600:	f04f 33ff 	mov.w	r3, #4294967295
 800d604:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d606:	69bb      	ldr	r3, [r7, #24]
	}
 800d608:	4618      	mov	r0, r3
 800d60a:	3720      	adds	r7, #32
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d628:	440b      	add	r3, r1
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	f023 0307 	bic.w	r3, r3, #7
 800d636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	f003 0307 	and.w	r3, r3, #7
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00c      	beq.n	800d65c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	b672      	cpsid	i
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	b662      	cpsie	i
 800d656:	617b      	str	r3, [r7, #20]
}
 800d658:	bf00      	nop
 800d65a:	e7fe      	b.n	800d65a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d01f      	beq.n	800d6a2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d662:	2300      	movs	r3, #0
 800d664:	61fb      	str	r3, [r7, #28]
 800d666:	e012      	b.n	800d68e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	4413      	add	r3, r2
 800d66e:	7819      	ldrb	r1, [r3, #0]
 800d670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	4413      	add	r3, r2
 800d676:	3334      	adds	r3, #52	; 0x34
 800d678:	460a      	mov	r2, r1
 800d67a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	4413      	add	r3, r2
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d006      	beq.n	800d696 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	3301      	adds	r3, #1
 800d68c:	61fb      	str	r3, [r7, #28]
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	2b0f      	cmp	r3, #15
 800d692:	d9e9      	bls.n	800d668 <prvInitialiseNewTask+0x58>
 800d694:	e000      	b.n	800d698 <prvInitialiseNewTask+0x88>
			{
				break;
 800d696:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6a0:	e003      	b.n	800d6aa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	2b06      	cmp	r3, #6
 800d6ae:	d901      	bls.n	800d6b4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6b0:	2306      	movs	r3, #6
 800d6b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff f8bb 	bl	800c846 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d2:	3318      	adds	r3, #24
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff f8b6 	bl	800c846 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	f1c3 0207 	rsb	r2, r3, #7
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d702:	334c      	adds	r3, #76	; 0x4c
 800d704:	2260      	movs	r2, #96	; 0x60
 800d706:	2100      	movs	r1, #0
 800d708:	4618      	mov	r0, r3
 800d70a:	f001 fc47 	bl	800ef9c <memset>
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	4a0c      	ldr	r2, [pc, #48]	; (800d744 <prvInitialiseNewTask+0x134>)
 800d712:	651a      	str	r2, [r3, #80]	; 0x50
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	4a0c      	ldr	r2, [pc, #48]	; (800d748 <prvInitialiseNewTask+0x138>)
 800d718:	655a      	str	r2, [r3, #84]	; 0x54
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	4a0b      	ldr	r2, [pc, #44]	; (800d74c <prvInitialiseNewTask+0x13c>)
 800d71e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d720:	683a      	ldr	r2, [r7, #0]
 800d722:	68f9      	ldr	r1, [r7, #12]
 800d724:	69b8      	ldr	r0, [r7, #24]
 800d726:	f001 f82f 	bl	800e788 <pxPortInitialiseStack>
 800d72a:	4602      	mov	r2, r0
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	2b00      	cmp	r3, #0
 800d734:	d002      	beq.n	800d73c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d73a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d73c:	bf00      	nop
 800d73e:	3720      	adds	r7, #32
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	08035488 	.word	0x08035488
 800d748:	080354a8 	.word	0x080354a8
 800d74c:	08035468 	.word	0x08035468

0800d750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d758:	f001 f920 	bl	800e99c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d75c:	4b2a      	ldr	r3, [pc, #168]	; (800d808 <prvAddNewTaskToReadyList+0xb8>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3301      	adds	r3, #1
 800d762:	4a29      	ldr	r2, [pc, #164]	; (800d808 <prvAddNewTaskToReadyList+0xb8>)
 800d764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d766:	4b29      	ldr	r3, [pc, #164]	; (800d80c <prvAddNewTaskToReadyList+0xbc>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d109      	bne.n	800d782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d76e:	4a27      	ldr	r2, [pc, #156]	; (800d80c <prvAddNewTaskToReadyList+0xbc>)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d774:	4b24      	ldr	r3, [pc, #144]	; (800d808 <prvAddNewTaskToReadyList+0xb8>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d110      	bne.n	800d79e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d77c:	f000 fd00 	bl	800e180 <prvInitialiseTaskLists>
 800d780:	e00d      	b.n	800d79e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d782:	4b23      	ldr	r3, [pc, #140]	; (800d810 <prvAddNewTaskToReadyList+0xc0>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d109      	bne.n	800d79e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d78a:	4b20      	ldr	r3, [pc, #128]	; (800d80c <prvAddNewTaskToReadyList+0xbc>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	429a      	cmp	r2, r3
 800d796:	d802      	bhi.n	800d79e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d798:	4a1c      	ldr	r2, [pc, #112]	; (800d80c <prvAddNewTaskToReadyList+0xbc>)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d79e:	4b1d      	ldr	r3, [pc, #116]	; (800d814 <prvAddNewTaskToReadyList+0xc4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	4a1b      	ldr	r2, [pc, #108]	; (800d814 <prvAddNewTaskToReadyList+0xc4>)
 800d7a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	409a      	lsls	r2, r3
 800d7b0:	4b19      	ldr	r3, [pc, #100]	; (800d818 <prvAddNewTaskToReadyList+0xc8>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	4a18      	ldr	r2, [pc, #96]	; (800d818 <prvAddNewTaskToReadyList+0xc8>)
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7be:	4613      	mov	r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	4413      	add	r3, r2
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	4a15      	ldr	r2, [pc, #84]	; (800d81c <prvAddNewTaskToReadyList+0xcc>)
 800d7c8:	441a      	add	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	f7ff f845 	bl	800c860 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d7d6:	f001 f915 	bl	800ea04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d7da:	4b0d      	ldr	r3, [pc, #52]	; (800d810 <prvAddNewTaskToReadyList+0xc0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00e      	beq.n	800d800 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d7e2:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <prvAddNewTaskToReadyList+0xbc>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d207      	bcs.n	800d800 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d7f0:	4b0b      	ldr	r3, [pc, #44]	; (800d820 <prvAddNewTaskToReadyList+0xd0>)
 800d7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	200006d4 	.word	0x200006d4
 800d80c:	200005d4 	.word	0x200005d4
 800d810:	200006e0 	.word	0x200006e0
 800d814:	200006f0 	.word	0x200006f0
 800d818:	200006dc 	.word	0x200006dc
 800d81c:	200005d8 	.word	0x200005d8
 800d820:	e000ed04 	.word	0xe000ed04

0800d824 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d82c:	f001 f8b6 	bl	800e99c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d102      	bne.n	800d83c <vTaskDelete+0x18>
 800d836:	4b3a      	ldr	r3, [pc, #232]	; (800d920 <vTaskDelete+0xfc>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	e000      	b.n	800d83e <vTaskDelete+0x1a>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3304      	adds	r3, #4
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff f868 	bl	800c91a <uxListRemove>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d115      	bne.n	800d87c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d854:	4933      	ldr	r1, [pc, #204]	; (800d924 <vTaskDelete+0x100>)
 800d856:	4613      	mov	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	440b      	add	r3, r1
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <vTaskDelete+0x58>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	2201      	movs	r2, #1
 800d86c:	fa02 f303 	lsl.w	r3, r2, r3
 800d870:	43da      	mvns	r2, r3
 800d872:	4b2d      	ldr	r3, [pc, #180]	; (800d928 <vTaskDelete+0x104>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4013      	ands	r3, r2
 800d878:	4a2b      	ldr	r2, [pc, #172]	; (800d928 <vTaskDelete+0x104>)
 800d87a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3318      	adds	r3, #24
 800d888:	4618      	mov	r0, r3
 800d88a:	f7ff f846 	bl	800c91a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d88e:	4b27      	ldr	r3, [pc, #156]	; (800d92c <vTaskDelete+0x108>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3301      	adds	r3, #1
 800d894:	4a25      	ldr	r2, [pc, #148]	; (800d92c <vTaskDelete+0x108>)
 800d896:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d898:	4b21      	ldr	r3, [pc, #132]	; (800d920 <vTaskDelete+0xfc>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d10b      	bne.n	800d8ba <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	4821      	ldr	r0, [pc, #132]	; (800d930 <vTaskDelete+0x10c>)
 800d8aa:	f7fe ffd9 	bl	800c860 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d8ae:	4b21      	ldr	r3, [pc, #132]	; (800d934 <vTaskDelete+0x110>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	4a1f      	ldr	r2, [pc, #124]	; (800d934 <vTaskDelete+0x110>)
 800d8b6:	6013      	str	r3, [r2, #0]
 800d8b8:	e009      	b.n	800d8ce <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d8ba:	4b1f      	ldr	r3, [pc, #124]	; (800d938 <vTaskDelete+0x114>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	4a1d      	ldr	r2, [pc, #116]	; (800d938 <vTaskDelete+0x114>)
 800d8c2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f000 fcc9 	bl	800e25c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d8ca:	f000 fcfd 	bl	800e2c8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d8ce:	f001 f899 	bl	800ea04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d8d2:	4b1a      	ldr	r3, [pc, #104]	; (800d93c <vTaskDelete+0x118>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d01d      	beq.n	800d916 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800d8da:	4b11      	ldr	r3, [pc, #68]	; (800d920 <vTaskDelete+0xfc>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d118      	bne.n	800d916 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d8e4:	4b16      	ldr	r3, [pc, #88]	; (800d940 <vTaskDelete+0x11c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00c      	beq.n	800d906 <vTaskDelete+0xe2>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f0:	b672      	cpsid	i
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	b662      	cpsie	i
 800d900:	60bb      	str	r3, [r7, #8]
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800d906:	4b0f      	ldr	r3, [pc, #60]	; (800d944 <vTaskDelete+0x120>)
 800d908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	200005d4 	.word	0x200005d4
 800d924:	200005d8 	.word	0x200005d8
 800d928:	200006dc 	.word	0x200006dc
 800d92c:	200006f0 	.word	0x200006f0
 800d930:	200006a8 	.word	0x200006a8
 800d934:	200006bc 	.word	0x200006bc
 800d938:	200006d4 	.word	0x200006d4
 800d93c:	200006e0 	.word	0x200006e0
 800d940:	200006fc 	.word	0x200006fc
 800d944:	e000ed04 	.word	0xe000ed04

0800d948 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08a      	sub	sp, #40	; 0x28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d952:	2300      	movs	r3, #0
 800d954:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10c      	bne.n	800d976 <vTaskDelayUntil+0x2e>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	b672      	cpsid	i
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	b662      	cpsie	i
 800d970:	617b      	str	r3, [r7, #20]
}
 800d972:	bf00      	nop
 800d974:	e7fe      	b.n	800d974 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10c      	bne.n	800d996 <vTaskDelayUntil+0x4e>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	b672      	cpsid	i
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	b662      	cpsie	i
 800d990:	613b      	str	r3, [r7, #16]
}
 800d992:	bf00      	nop
 800d994:	e7fe      	b.n	800d994 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800d996:	4b2b      	ldr	r3, [pc, #172]	; (800da44 <vTaskDelayUntil+0xfc>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00c      	beq.n	800d9b8 <vTaskDelayUntil+0x70>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a2:	b672      	cpsid	i
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	b662      	cpsie	i
 800d9b2:	60fb      	str	r3, [r7, #12]
}
 800d9b4:	bf00      	nop
 800d9b6:	e7fe      	b.n	800d9b6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800d9b8:	f000 f8ee 	bl	800db98 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d9bc:	4b22      	ldr	r3, [pc, #136]	; (800da48 <vTaskDelayUntil+0x100>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6a3a      	ldr	r2, [r7, #32]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d20b      	bcs.n	800d9ee <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69fa      	ldr	r2, [r7, #28]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d211      	bcs.n	800da04 <vTaskDelayUntil+0xbc>
 800d9e0:	69fa      	ldr	r2, [r7, #28]
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d90d      	bls.n	800da04 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ec:	e00a      	b.n	800da04 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	69fa      	ldr	r2, [r7, #28]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d303      	bcc.n	800da00 <vTaskDelayUntil+0xb8>
 800d9f8:	69fa      	ldr	r2, [r7, #28]
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d901      	bls.n	800da04 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800da00:	2301      	movs	r3, #1
 800da02:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	69fa      	ldr	r2, [r7, #28]
 800da08:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d006      	beq.n	800da1e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800da10:	69fa      	ldr	r2, [r7, #28]
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	2100      	movs	r1, #0
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fe4f 	bl	800e6bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800da1e:	f000 f8c9 	bl	800dbb4 <xTaskResumeAll>
 800da22:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d107      	bne.n	800da3a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800da2a:	4b08      	ldr	r3, [pc, #32]	; (800da4c <vTaskDelayUntil+0x104>)
 800da2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da3a:	bf00      	nop
 800da3c:	3728      	adds	r7, #40	; 0x28
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	200006fc 	.word	0x200006fc
 800da48:	200006d8 	.word	0x200006d8
 800da4c:	e000ed04 	.word	0xe000ed04

0800da50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da58:	2300      	movs	r3, #0
 800da5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d019      	beq.n	800da96 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da62:	4b14      	ldr	r3, [pc, #80]	; (800dab4 <vTaskDelay+0x64>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00c      	beq.n	800da84 <vTaskDelay+0x34>
	__asm volatile
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	b672      	cpsid	i
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	b662      	cpsie	i
 800da7e:	60bb      	str	r3, [r7, #8]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800da84:	f000 f888 	bl	800db98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da88:	2100      	movs	r1, #0
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 fe16 	bl	800e6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da90:	f000 f890 	bl	800dbb4 <xTaskResumeAll>
 800da94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d107      	bne.n	800daac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800da9c:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <vTaskDelay+0x68>)
 800da9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daac:	bf00      	nop
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	200006fc 	.word	0x200006fc
 800dab8:	e000ed04 	.word	0xe000ed04

0800dabc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08a      	sub	sp, #40	; 0x28
 800dac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800daca:	463a      	mov	r2, r7
 800dacc:	1d39      	adds	r1, r7, #4
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7f2 fd18 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	9202      	str	r2, [sp, #8]
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	2300      	movs	r3, #0
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	2300      	movs	r3, #0
 800dae8:	460a      	mov	r2, r1
 800daea:	4923      	ldr	r1, [pc, #140]	; (800db78 <vTaskStartScheduler+0xbc>)
 800daec:	4823      	ldr	r0, [pc, #140]	; (800db7c <vTaskStartScheduler+0xc0>)
 800daee:	f7ff fce7 	bl	800d4c0 <xTaskCreateStatic>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4a22      	ldr	r2, [pc, #136]	; (800db80 <vTaskStartScheduler+0xc4>)
 800daf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800daf8:	4b21      	ldr	r3, [pc, #132]	; (800db80 <vTaskStartScheduler+0xc4>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db00:	2301      	movs	r3, #1
 800db02:	617b      	str	r3, [r7, #20]
 800db04:	e001      	b.n	800db0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db06:	2300      	movs	r3, #0
 800db08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d11d      	bne.n	800db4c <vTaskStartScheduler+0x90>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	b672      	cpsid	i
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	b662      	cpsie	i
 800db24:	613b      	str	r3, [r7, #16]
}
 800db26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db28:	4b16      	ldr	r3, [pc, #88]	; (800db84 <vTaskStartScheduler+0xc8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	334c      	adds	r3, #76	; 0x4c
 800db2e:	4a16      	ldr	r2, [pc, #88]	; (800db88 <vTaskStartScheduler+0xcc>)
 800db30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db32:	4b16      	ldr	r3, [pc, #88]	; (800db8c <vTaskStartScheduler+0xd0>)
 800db34:	f04f 32ff 	mov.w	r2, #4294967295
 800db38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db3a:	4b15      	ldr	r3, [pc, #84]	; (800db90 <vTaskStartScheduler+0xd4>)
 800db3c:	2201      	movs	r2, #1
 800db3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db40:	4b14      	ldr	r3, [pc, #80]	; (800db94 <vTaskStartScheduler+0xd8>)
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db46:	f000 feab 	bl	800e8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db4a:	e010      	b.n	800db6e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d10c      	bne.n	800db6e <vTaskStartScheduler+0xb2>
	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	b672      	cpsid	i
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	b662      	cpsie	i
 800db68:	60fb      	str	r3, [r7, #12]
}
 800db6a:	bf00      	nop
 800db6c:	e7fe      	b.n	800db6c <vTaskStartScheduler+0xb0>
}
 800db6e:	bf00      	nop
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	0800f2cc 	.word	0x0800f2cc
 800db7c:	0800e151 	.word	0x0800e151
 800db80:	200006f8 	.word	0x200006f8
 800db84:	200005d4 	.word	0x200005d4
 800db88:	20000050 	.word	0x20000050
 800db8c:	200006f4 	.word	0x200006f4
 800db90:	200006e0 	.word	0x200006e0
 800db94:	200006d8 	.word	0x200006d8

0800db98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db98:	b480      	push	{r7}
 800db9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800db9c:	4b04      	ldr	r3, [pc, #16]	; (800dbb0 <vTaskSuspendAll+0x18>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3301      	adds	r3, #1
 800dba2:	4a03      	ldr	r2, [pc, #12]	; (800dbb0 <vTaskSuspendAll+0x18>)
 800dba4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dba6:	bf00      	nop
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	200006fc 	.word	0x200006fc

0800dbb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbc2:	4b42      	ldr	r3, [pc, #264]	; (800dccc <xTaskResumeAll+0x118>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10c      	bne.n	800dbe4 <xTaskResumeAll+0x30>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	b672      	cpsid	i
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	b662      	cpsie	i
 800dbde:	603b      	str	r3, [r7, #0]
}
 800dbe0:	bf00      	nop
 800dbe2:	e7fe      	b.n	800dbe2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbe4:	f000 feda 	bl	800e99c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbe8:	4b38      	ldr	r3, [pc, #224]	; (800dccc <xTaskResumeAll+0x118>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3b01      	subs	r3, #1
 800dbee:	4a37      	ldr	r2, [pc, #220]	; (800dccc <xTaskResumeAll+0x118>)
 800dbf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbf2:	4b36      	ldr	r3, [pc, #216]	; (800dccc <xTaskResumeAll+0x118>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d161      	bne.n	800dcbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbfa:	4b35      	ldr	r3, [pc, #212]	; (800dcd0 <xTaskResumeAll+0x11c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d05d      	beq.n	800dcbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc02:	e02e      	b.n	800dc62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc04:	4b33      	ldr	r3, [pc, #204]	; (800dcd4 <xTaskResumeAll+0x120>)
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3318      	adds	r3, #24
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fe fe82 	bl	800c91a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fe7d 	bl	800c91a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc24:	2201      	movs	r2, #1
 800dc26:	409a      	lsls	r2, r3
 800dc28:	4b2b      	ldr	r3, [pc, #172]	; (800dcd8 <xTaskResumeAll+0x124>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	4a2a      	ldr	r2, [pc, #168]	; (800dcd8 <xTaskResumeAll+0x124>)
 800dc30:	6013      	str	r3, [r2, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc36:	4613      	mov	r3, r2
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4a27      	ldr	r2, [pc, #156]	; (800dcdc <xTaskResumeAll+0x128>)
 800dc40:	441a      	add	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3304      	adds	r3, #4
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	f7fe fe09 	bl	800c860 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc52:	4b23      	ldr	r3, [pc, #140]	; (800dce0 <xTaskResumeAll+0x12c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d302      	bcc.n	800dc62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dc5c:	4b21      	ldr	r3, [pc, #132]	; (800dce4 <xTaskResumeAll+0x130>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc62:	4b1c      	ldr	r3, [pc, #112]	; (800dcd4 <xTaskResumeAll+0x120>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1cc      	bne.n	800dc04 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc70:	f000 fb2a 	bl	800e2c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dc74:	4b1c      	ldr	r3, [pc, #112]	; (800dce8 <xTaskResumeAll+0x134>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d010      	beq.n	800dca2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc80:	f000 f836 	bl	800dcf0 <xTaskIncrementTick>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dc8a:	4b16      	ldr	r3, [pc, #88]	; (800dce4 <xTaskResumeAll+0x130>)
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	3b01      	subs	r3, #1
 800dc94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1f1      	bne.n	800dc80 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800dc9c:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <xTaskResumeAll+0x134>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dca2:	4b10      	ldr	r3, [pc, #64]	; (800dce4 <xTaskResumeAll+0x130>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d009      	beq.n	800dcbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcae:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <xTaskResumeAll+0x138>)
 800dcb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	f3bf 8f4f 	dsb	sy
 800dcba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcbe:	f000 fea1 	bl	800ea04 <vPortExitCritical>

	return xAlreadyYielded;
 800dcc2:	68bb      	ldr	r3, [r7, #8]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	200006fc 	.word	0x200006fc
 800dcd0:	200006d4 	.word	0x200006d4
 800dcd4:	20000694 	.word	0x20000694
 800dcd8:	200006dc 	.word	0x200006dc
 800dcdc:	200005d8 	.word	0x200005d8
 800dce0:	200005d4 	.word	0x200005d4
 800dce4:	200006e8 	.word	0x200006e8
 800dce8:	200006e4 	.word	0x200006e4
 800dcec:	e000ed04 	.word	0xe000ed04

0800dcf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcfa:	4b4f      	ldr	r3, [pc, #316]	; (800de38 <xTaskIncrementTick+0x148>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f040 808a 	bne.w	800de18 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd04:	4b4d      	ldr	r3, [pc, #308]	; (800de3c <xTaskIncrementTick+0x14c>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd0c:	4a4b      	ldr	r2, [pc, #300]	; (800de3c <xTaskIncrementTick+0x14c>)
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d122      	bne.n	800dd5e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd18:	4b49      	ldr	r3, [pc, #292]	; (800de40 <xTaskIncrementTick+0x150>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00c      	beq.n	800dd3c <xTaskIncrementTick+0x4c>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd26:	b672      	cpsid	i
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	b662      	cpsie	i
 800dd36:	603b      	str	r3, [r7, #0]
}
 800dd38:	bf00      	nop
 800dd3a:	e7fe      	b.n	800dd3a <xTaskIncrementTick+0x4a>
 800dd3c:	4b40      	ldr	r3, [pc, #256]	; (800de40 <xTaskIncrementTick+0x150>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	4b40      	ldr	r3, [pc, #256]	; (800de44 <xTaskIncrementTick+0x154>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a3e      	ldr	r2, [pc, #248]	; (800de40 <xTaskIncrementTick+0x150>)
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	4a3e      	ldr	r2, [pc, #248]	; (800de44 <xTaskIncrementTick+0x154>)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6013      	str	r3, [r2, #0]
 800dd50:	4b3d      	ldr	r3, [pc, #244]	; (800de48 <xTaskIncrementTick+0x158>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3301      	adds	r3, #1
 800dd56:	4a3c      	ldr	r2, [pc, #240]	; (800de48 <xTaskIncrementTick+0x158>)
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	f000 fab5 	bl	800e2c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd5e:	4b3b      	ldr	r3, [pc, #236]	; (800de4c <xTaskIncrementTick+0x15c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d348      	bcc.n	800ddfa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd68:	4b35      	ldr	r3, [pc, #212]	; (800de40 <xTaskIncrementTick+0x150>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d104      	bne.n	800dd7c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd72:	4b36      	ldr	r3, [pc, #216]	; (800de4c <xTaskIncrementTick+0x15c>)
 800dd74:	f04f 32ff 	mov.w	r2, #4294967295
 800dd78:	601a      	str	r2, [r3, #0]
					break;
 800dd7a:	e03e      	b.n	800ddfa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd7c:	4b30      	ldr	r3, [pc, #192]	; (800de40 <xTaskIncrementTick+0x150>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d203      	bcs.n	800dd9c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd94:	4a2d      	ldr	r2, [pc, #180]	; (800de4c <xTaskIncrementTick+0x15c>)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd9a:	e02e      	b.n	800ddfa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe fdba 	bl	800c91a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d004      	beq.n	800ddb8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	3318      	adds	r3, #24
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe fdb1 	bl	800c91a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	409a      	lsls	r2, r3
 800ddc0:	4b23      	ldr	r3, [pc, #140]	; (800de50 <xTaskIncrementTick+0x160>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	4a22      	ldr	r2, [pc, #136]	; (800de50 <xTaskIncrementTick+0x160>)
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddce:	4613      	mov	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4a1f      	ldr	r2, [pc, #124]	; (800de54 <xTaskIncrementTick+0x164>)
 800ddd8:	441a      	add	r2, r3
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	3304      	adds	r3, #4
 800ddde:	4619      	mov	r1, r3
 800dde0:	4610      	mov	r0, r2
 800dde2:	f7fe fd3d 	bl	800c860 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddea:	4b1b      	ldr	r3, [pc, #108]	; (800de58 <xTaskIncrementTick+0x168>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d3b9      	bcc.n	800dd68 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddf8:	e7b6      	b.n	800dd68 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddfa:	4b17      	ldr	r3, [pc, #92]	; (800de58 <xTaskIncrementTick+0x168>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de00:	4914      	ldr	r1, [pc, #80]	; (800de54 <xTaskIncrementTick+0x164>)
 800de02:	4613      	mov	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	440b      	add	r3, r1
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d907      	bls.n	800de22 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800de12:	2301      	movs	r3, #1
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	e004      	b.n	800de22 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800de18:	4b10      	ldr	r3, [pc, #64]	; (800de5c <xTaskIncrementTick+0x16c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	4a0f      	ldr	r2, [pc, #60]	; (800de5c <xTaskIncrementTick+0x16c>)
 800de20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800de22:	4b0f      	ldr	r3, [pc, #60]	; (800de60 <xTaskIncrementTick+0x170>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800de2a:	2301      	movs	r3, #1
 800de2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800de2e:	697b      	ldr	r3, [r7, #20]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	200006fc 	.word	0x200006fc
 800de3c:	200006d8 	.word	0x200006d8
 800de40:	2000068c 	.word	0x2000068c
 800de44:	20000690 	.word	0x20000690
 800de48:	200006ec 	.word	0x200006ec
 800de4c:	200006f4 	.word	0x200006f4
 800de50:	200006dc 	.word	0x200006dc
 800de54:	200005d8 	.word	0x200005d8
 800de58:	200005d4 	.word	0x200005d4
 800de5c:	200006e4 	.word	0x200006e4
 800de60:	200006e8 	.word	0x200006e8

0800de64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de6a:	4b2a      	ldr	r3, [pc, #168]	; (800df14 <vTaskSwitchContext+0xb0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d003      	beq.n	800de7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de72:	4b29      	ldr	r3, [pc, #164]	; (800df18 <vTaskSwitchContext+0xb4>)
 800de74:	2201      	movs	r2, #1
 800de76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de78:	e046      	b.n	800df08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800de7a:	4b27      	ldr	r3, [pc, #156]	; (800df18 <vTaskSwitchContext+0xb4>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de80:	4b26      	ldr	r3, [pc, #152]	; (800df1c <vTaskSwitchContext+0xb8>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	fab3 f383 	clz	r3, r3
 800de8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800de8e:	7afb      	ldrb	r3, [r7, #11]
 800de90:	f1c3 031f 	rsb	r3, r3, #31
 800de94:	617b      	str	r3, [r7, #20]
 800de96:	4922      	ldr	r1, [pc, #136]	; (800df20 <vTaskSwitchContext+0xbc>)
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	4613      	mov	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	440b      	add	r3, r1
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10c      	bne.n	800dec4 <vTaskSwitchContext+0x60>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	b672      	cpsid	i
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	b662      	cpsie	i
 800debe:	607b      	str	r3, [r7, #4]
}
 800dec0:	bf00      	nop
 800dec2:	e7fe      	b.n	800dec2 <vTaskSwitchContext+0x5e>
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	4613      	mov	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4a14      	ldr	r2, [pc, #80]	; (800df20 <vTaskSwitchContext+0xbc>)
 800ded0:	4413      	add	r3, r2
 800ded2:	613b      	str	r3, [r7, #16]
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	685a      	ldr	r2, [r3, #4]
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	605a      	str	r2, [r3, #4]
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	3308      	adds	r3, #8
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d104      	bne.n	800def4 <vTaskSwitchContext+0x90>
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	605a      	str	r2, [r3, #4]
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4a0a      	ldr	r2, [pc, #40]	; (800df24 <vTaskSwitchContext+0xc0>)
 800defc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800defe:	4b09      	ldr	r3, [pc, #36]	; (800df24 <vTaskSwitchContext+0xc0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	334c      	adds	r3, #76	; 0x4c
 800df04:	4a08      	ldr	r2, [pc, #32]	; (800df28 <vTaskSwitchContext+0xc4>)
 800df06:	6013      	str	r3, [r2, #0]
}
 800df08:	bf00      	nop
 800df0a:	371c      	adds	r7, #28
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	200006fc 	.word	0x200006fc
 800df18:	200006e8 	.word	0x200006e8
 800df1c:	200006dc 	.word	0x200006dc
 800df20:	200005d8 	.word	0x200005d8
 800df24:	200005d4 	.word	0x200005d4
 800df28:	20000050 	.word	0x20000050

0800df2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10c      	bne.n	800df56 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df40:	b672      	cpsid	i
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	b662      	cpsie	i
 800df50:	60fb      	str	r3, [r7, #12]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df56:	4b07      	ldr	r3, [pc, #28]	; (800df74 <vTaskPlaceOnEventList+0x48>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3318      	adds	r3, #24
 800df5c:	4619      	mov	r1, r3
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7fe fca2 	bl	800c8a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df64:	2101      	movs	r1, #1
 800df66:	6838      	ldr	r0, [r7, #0]
 800df68:	f000 fba8 	bl	800e6bc <prvAddCurrentTaskToDelayedList>
}
 800df6c:	bf00      	nop
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	200005d4 	.word	0x200005d4

0800df78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10c      	bne.n	800dfa8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	b672      	cpsid	i
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	b662      	cpsie	i
 800dfa2:	60fb      	str	r3, [r7, #12]
}
 800dfa4:	bf00      	nop
 800dfa6:	e7fe      	b.n	800dfa6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	3318      	adds	r3, #24
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe fcb4 	bl	800c91a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfb2:	4b1d      	ldr	r3, [pc, #116]	; (800e028 <xTaskRemoveFromEventList+0xb0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d11c      	bne.n	800dff4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fe fcab 	bl	800c91a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc8:	2201      	movs	r2, #1
 800dfca:	409a      	lsls	r2, r3
 800dfcc:	4b17      	ldr	r3, [pc, #92]	; (800e02c <xTaskRemoveFromEventList+0xb4>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	4a16      	ldr	r2, [pc, #88]	; (800e02c <xTaskRemoveFromEventList+0xb4>)
 800dfd4:	6013      	str	r3, [r2, #0]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfda:	4613      	mov	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4a13      	ldr	r2, [pc, #76]	; (800e030 <xTaskRemoveFromEventList+0xb8>)
 800dfe4:	441a      	add	r2, r3
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	3304      	adds	r3, #4
 800dfea:	4619      	mov	r1, r3
 800dfec:	4610      	mov	r0, r2
 800dfee:	f7fe fc37 	bl	800c860 <vListInsertEnd>
 800dff2:	e005      	b.n	800e000 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	3318      	adds	r3, #24
 800dff8:	4619      	mov	r1, r3
 800dffa:	480e      	ldr	r0, [pc, #56]	; (800e034 <xTaskRemoveFromEventList+0xbc>)
 800dffc:	f7fe fc30 	bl	800c860 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e004:	4b0c      	ldr	r3, [pc, #48]	; (800e038 <xTaskRemoveFromEventList+0xc0>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d905      	bls.n	800e01a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e00e:	2301      	movs	r3, #1
 800e010:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e012:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <xTaskRemoveFromEventList+0xc4>)
 800e014:	2201      	movs	r2, #1
 800e016:	601a      	str	r2, [r3, #0]
 800e018:	e001      	b.n	800e01e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e01e:	697b      	ldr	r3, [r7, #20]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	200006fc 	.word	0x200006fc
 800e02c:	200006dc 	.word	0x200006dc
 800e030:	200005d8 	.word	0x200005d8
 800e034:	20000694 	.word	0x20000694
 800e038:	200005d4 	.word	0x200005d4
 800e03c:	200006e8 	.word	0x200006e8

0800e040 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e048:	4b06      	ldr	r3, [pc, #24]	; (800e064 <vTaskInternalSetTimeOutState+0x24>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e050:	4b05      	ldr	r3, [pc, #20]	; (800e068 <vTaskInternalSetTimeOutState+0x28>)
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	605a      	str	r2, [r3, #4]
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	200006ec 	.word	0x200006ec
 800e068:	200006d8 	.word	0x200006d8

0800e06c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10c      	bne.n	800e096 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	b672      	cpsid	i
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	b662      	cpsie	i
 800e090:	613b      	str	r3, [r7, #16]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10c      	bne.n	800e0b6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a0:	b672      	cpsid	i
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	b662      	cpsie	i
 800e0b0:	60fb      	str	r3, [r7, #12]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e0b6:	f000 fc71 	bl	800e99c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0ba:	4b1d      	ldr	r3, [pc, #116]	; (800e130 <xTaskCheckForTimeOut+0xc4>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	69ba      	ldr	r2, [r7, #24]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d2:	d102      	bne.n	800e0da <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61fb      	str	r3, [r7, #28]
 800e0d8:	e023      	b.n	800e122 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	4b15      	ldr	r3, [pc, #84]	; (800e134 <xTaskCheckForTimeOut+0xc8>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d007      	beq.n	800e0f6 <xTaskCheckForTimeOut+0x8a>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d302      	bcc.n	800e0f6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	e015      	b.n	800e122 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	697a      	ldr	r2, [r7, #20]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d20b      	bcs.n	800e118 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	1ad2      	subs	r2, r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff ff97 	bl	800e040 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e112:	2300      	movs	r3, #0
 800e114:	61fb      	str	r3, [r7, #28]
 800e116:	e004      	b.n	800e122 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2200      	movs	r2, #0
 800e11c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e11e:	2301      	movs	r3, #1
 800e120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e122:	f000 fc6f 	bl	800ea04 <vPortExitCritical>

	return xReturn;
 800e126:	69fb      	ldr	r3, [r7, #28]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	200006d8 	.word	0x200006d8
 800e134:	200006ec 	.word	0x200006ec

0800e138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e13c:	4b03      	ldr	r3, [pc, #12]	; (800e14c <vTaskMissedYield+0x14>)
 800e13e:	2201      	movs	r2, #1
 800e140:	601a      	str	r2, [r3, #0]
}
 800e142:	bf00      	nop
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr
 800e14c:	200006e8 	.word	0x200006e8

0800e150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e158:	f000 f852 	bl	800e200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e15c:	4b06      	ldr	r3, [pc, #24]	; (800e178 <prvIdleTask+0x28>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d9f9      	bls.n	800e158 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e164:	4b05      	ldr	r3, [pc, #20]	; (800e17c <prvIdleTask+0x2c>)
 800e166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e174:	e7f0      	b.n	800e158 <prvIdleTask+0x8>
 800e176:	bf00      	nop
 800e178:	200005d8 	.word	0x200005d8
 800e17c:	e000ed04 	.word	0xe000ed04

0800e180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e186:	2300      	movs	r3, #0
 800e188:	607b      	str	r3, [r7, #4]
 800e18a:	e00c      	b.n	800e1a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a12      	ldr	r2, [pc, #72]	; (800e1e0 <prvInitialiseTaskLists+0x60>)
 800e198:	4413      	add	r3, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fb33 	bl	800c806 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	607b      	str	r3, [r7, #4]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b06      	cmp	r3, #6
 800e1aa:	d9ef      	bls.n	800e18c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1ac:	480d      	ldr	r0, [pc, #52]	; (800e1e4 <prvInitialiseTaskLists+0x64>)
 800e1ae:	f7fe fb2a 	bl	800c806 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1b2:	480d      	ldr	r0, [pc, #52]	; (800e1e8 <prvInitialiseTaskLists+0x68>)
 800e1b4:	f7fe fb27 	bl	800c806 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1b8:	480c      	ldr	r0, [pc, #48]	; (800e1ec <prvInitialiseTaskLists+0x6c>)
 800e1ba:	f7fe fb24 	bl	800c806 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1be:	480c      	ldr	r0, [pc, #48]	; (800e1f0 <prvInitialiseTaskLists+0x70>)
 800e1c0:	f7fe fb21 	bl	800c806 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1c4:	480b      	ldr	r0, [pc, #44]	; (800e1f4 <prvInitialiseTaskLists+0x74>)
 800e1c6:	f7fe fb1e 	bl	800c806 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1ca:	4b0b      	ldr	r3, [pc, #44]	; (800e1f8 <prvInitialiseTaskLists+0x78>)
 800e1cc:	4a05      	ldr	r2, [pc, #20]	; (800e1e4 <prvInitialiseTaskLists+0x64>)
 800e1ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1d0:	4b0a      	ldr	r3, [pc, #40]	; (800e1fc <prvInitialiseTaskLists+0x7c>)
 800e1d2:	4a05      	ldr	r2, [pc, #20]	; (800e1e8 <prvInitialiseTaskLists+0x68>)
 800e1d4:	601a      	str	r2, [r3, #0]
}
 800e1d6:	bf00      	nop
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	200005d8 	.word	0x200005d8
 800e1e4:	20000664 	.word	0x20000664
 800e1e8:	20000678 	.word	0x20000678
 800e1ec:	20000694 	.word	0x20000694
 800e1f0:	200006a8 	.word	0x200006a8
 800e1f4:	200006c0 	.word	0x200006c0
 800e1f8:	2000068c 	.word	0x2000068c
 800e1fc:	20000690 	.word	0x20000690

0800e200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e206:	e019      	b.n	800e23c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e208:	f000 fbc8 	bl	800e99c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e20c:	4b10      	ldr	r3, [pc, #64]	; (800e250 <prvCheckTasksWaitingTermination+0x50>)
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	3304      	adds	r3, #4
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fe fb7e 	bl	800c91a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e21e:	4b0d      	ldr	r3, [pc, #52]	; (800e254 <prvCheckTasksWaitingTermination+0x54>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3b01      	subs	r3, #1
 800e224:	4a0b      	ldr	r2, [pc, #44]	; (800e254 <prvCheckTasksWaitingTermination+0x54>)
 800e226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e228:	4b0b      	ldr	r3, [pc, #44]	; (800e258 <prvCheckTasksWaitingTermination+0x58>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	4a0a      	ldr	r2, [pc, #40]	; (800e258 <prvCheckTasksWaitingTermination+0x58>)
 800e230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e232:	f000 fbe7 	bl	800ea04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 f810 	bl	800e25c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e23c:	4b06      	ldr	r3, [pc, #24]	; (800e258 <prvCheckTasksWaitingTermination+0x58>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e1      	bne.n	800e208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	200006a8 	.word	0x200006a8
 800e254:	200006d4 	.word	0x200006d4
 800e258:	200006bc 	.word	0x200006bc

0800e25c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	334c      	adds	r3, #76	; 0x4c
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 fead 	bl	800efc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e274:	2b00      	cmp	r3, #0
 800e276:	d108      	bne.n	800e28a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 fd3f 	bl	800ed00 <vPortFree>
				vPortFree( pxTCB );
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 fd3c 	bl	800ed00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e288:	e01a      	b.n	800e2c0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e290:	2b01      	cmp	r3, #1
 800e292:	d103      	bne.n	800e29c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fd33 	bl	800ed00 <vPortFree>
	}
 800e29a:	e011      	b.n	800e2c0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d00c      	beq.n	800e2c0 <prvDeleteTCB+0x64>
	__asm volatile
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	b672      	cpsid	i
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	b662      	cpsie	i
 800e2ba:	60fb      	str	r3, [r7, #12]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <prvDeleteTCB+0x62>
	}
 800e2c0:	bf00      	nop
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <prvResetNextTaskUnblockTime+0x38>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d104      	bne.n	800e2e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	; (800e304 <prvResetNextTaskUnblockTime+0x3c>)
 800e2da:	f04f 32ff 	mov.w	r2, #4294967295
 800e2de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2e0:	e008      	b.n	800e2f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e2:	4b07      	ldr	r3, [pc, #28]	; (800e300 <prvResetNextTaskUnblockTime+0x38>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	4a04      	ldr	r2, [pc, #16]	; (800e304 <prvResetNextTaskUnblockTime+0x3c>)
 800e2f2:	6013      	str	r3, [r2, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	2000068c 	.word	0x2000068c
 800e304:	200006f4 	.word	0x200006f4

0800e308 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e30e:	4b0b      	ldr	r3, [pc, #44]	; (800e33c <xTaskGetSchedulerState+0x34>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e316:	2301      	movs	r3, #1
 800e318:	607b      	str	r3, [r7, #4]
 800e31a:	e008      	b.n	800e32e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e31c:	4b08      	ldr	r3, [pc, #32]	; (800e340 <xTaskGetSchedulerState+0x38>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d102      	bne.n	800e32a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e324:	2302      	movs	r3, #2
 800e326:	607b      	str	r3, [r7, #4]
 800e328:	e001      	b.n	800e32e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e32a:	2300      	movs	r3, #0
 800e32c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e32e:	687b      	ldr	r3, [r7, #4]
	}
 800e330:	4618      	mov	r0, r3
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	200006e0 	.word	0x200006e0
 800e340:	200006fc 	.word	0x200006fc

0800e344 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e350:	2300      	movs	r3, #0
 800e352:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d069      	beq.n	800e42e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35e:	4b36      	ldr	r3, [pc, #216]	; (800e438 <xTaskPriorityInherit+0xf4>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	429a      	cmp	r2, r3
 800e366:	d259      	bcs.n	800e41c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	699b      	ldr	r3, [r3, #24]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	db06      	blt.n	800e37e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e370:	4b31      	ldr	r3, [pc, #196]	; (800e438 <xTaskPriorityInherit+0xf4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e376:	f1c3 0207 	rsb	r2, r3, #7
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	6959      	ldr	r1, [r3, #20]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4a2b      	ldr	r2, [pc, #172]	; (800e43c <xTaskPriorityInherit+0xf8>)
 800e390:	4413      	add	r3, r2
 800e392:	4299      	cmp	r1, r3
 800e394:	d13a      	bne.n	800e40c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	3304      	adds	r3, #4
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fe fabd 	bl	800c91a <uxListRemove>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d115      	bne.n	800e3d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3aa:	4924      	ldr	r1, [pc, #144]	; (800e43c <xTaskPriorityInherit+0xf8>)
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	440b      	add	r3, r1
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10a      	bne.n	800e3d2 <xTaskPriorityInherit+0x8e>
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c6:	43da      	mvns	r2, r3
 800e3c8:	4b1d      	ldr	r3, [pc, #116]	; (800e440 <xTaskPriorityInherit+0xfc>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4013      	ands	r3, r2
 800e3ce:	4a1c      	ldr	r2, [pc, #112]	; (800e440 <xTaskPriorityInherit+0xfc>)
 800e3d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3d2:	4b19      	ldr	r3, [pc, #100]	; (800e438 <xTaskPriorityInherit+0xf4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	409a      	lsls	r2, r3
 800e3e4:	4b16      	ldr	r3, [pc, #88]	; (800e440 <xTaskPriorityInherit+0xfc>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	4a15      	ldr	r2, [pc, #84]	; (800e440 <xTaskPriorityInherit+0xfc>)
 800e3ec:	6013      	str	r3, [r2, #0]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4a10      	ldr	r2, [pc, #64]	; (800e43c <xTaskPriorityInherit+0xf8>)
 800e3fc:	441a      	add	r2, r3
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	3304      	adds	r3, #4
 800e402:	4619      	mov	r1, r3
 800e404:	4610      	mov	r0, r2
 800e406:	f7fe fa2b 	bl	800c860 <vListInsertEnd>
 800e40a:	e004      	b.n	800e416 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e40c:	4b0a      	ldr	r3, [pc, #40]	; (800e438 <xTaskPriorityInherit+0xf4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e416:	2301      	movs	r3, #1
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	e008      	b.n	800e42e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e420:	4b05      	ldr	r3, [pc, #20]	; (800e438 <xTaskPriorityInherit+0xf4>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e426:	429a      	cmp	r2, r3
 800e428:	d201      	bcs.n	800e42e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e42a:	2301      	movs	r3, #1
 800e42c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e42e:	68fb      	ldr	r3, [r7, #12]
	}
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	200005d4 	.word	0x200005d4
 800e43c:	200005d8 	.word	0x200005d8
 800e440:	200006dc 	.word	0x200006dc

0800e444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e450:	2300      	movs	r3, #0
 800e452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d072      	beq.n	800e540 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e45a:	4b3c      	ldr	r3, [pc, #240]	; (800e54c <xTaskPriorityDisinherit+0x108>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	429a      	cmp	r2, r3
 800e462:	d00c      	beq.n	800e47e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	b672      	cpsid	i
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	b662      	cpsie	i
 800e478:	60fb      	str	r3, [r7, #12]
}
 800e47a:	bf00      	nop
 800e47c:	e7fe      	b.n	800e47c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10c      	bne.n	800e4a0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	b672      	cpsid	i
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	b662      	cpsie	i
 800e49a:	60bb      	str	r3, [r7, #8]
}
 800e49c:	bf00      	nop
 800e49e:	e7fe      	b.n	800e49e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4a4:	1e5a      	subs	r2, r3, #1
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d044      	beq.n	800e540 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d140      	bne.n	800e540 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe fa29 	bl	800c91a <uxListRemove>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d115      	bne.n	800e4fa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d2:	491f      	ldr	r1, [pc, #124]	; (800e550 <xTaskPriorityDisinherit+0x10c>)
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	440b      	add	r3, r1
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d10a      	bne.n	800e4fa <xTaskPriorityDisinherit+0xb6>
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ee:	43da      	mvns	r2, r3
 800e4f0:	4b18      	ldr	r3, [pc, #96]	; (800e554 <xTaskPriorityDisinherit+0x110>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	4a17      	ldr	r2, [pc, #92]	; (800e554 <xTaskPriorityDisinherit+0x110>)
 800e4f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e506:	f1c3 0207 	rsb	r2, r3, #7
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e512:	2201      	movs	r2, #1
 800e514:	409a      	lsls	r2, r3
 800e516:	4b0f      	ldr	r3, [pc, #60]	; (800e554 <xTaskPriorityDisinherit+0x110>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	4a0d      	ldr	r2, [pc, #52]	; (800e554 <xTaskPriorityDisinherit+0x110>)
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4a08      	ldr	r2, [pc, #32]	; (800e550 <xTaskPriorityDisinherit+0x10c>)
 800e52e:	441a      	add	r2, r3
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	3304      	adds	r3, #4
 800e534:	4619      	mov	r1, r3
 800e536:	4610      	mov	r0, r2
 800e538:	f7fe f992 	bl	800c860 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e53c:	2301      	movs	r3, #1
 800e53e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e540:	697b      	ldr	r3, [r7, #20]
	}
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	200005d4 	.word	0x200005d4
 800e550:	200005d8 	.word	0x200005d8
 800e554:	200006dc 	.word	0x200006dc

0800e558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e566:	2301      	movs	r3, #1
 800e568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 8087 	beq.w	800e680 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10c      	bne.n	800e594 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57e:	b672      	cpsid	i
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	b662      	cpsie	i
 800e58e:	60fb      	str	r3, [r7, #12]
}
 800e590:	bf00      	nop
 800e592:	e7fe      	b.n	800e592 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d902      	bls.n	800e5a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	61fb      	str	r3, [r7, #28]
 800e5a2:	e002      	b.n	800e5aa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ae:	69fa      	ldr	r2, [r7, #28]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d065      	beq.n	800e680 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b8:	697a      	ldr	r2, [r7, #20]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d160      	bne.n	800e680 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5be:	4b32      	ldr	r3, [pc, #200]	; (800e688 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	69ba      	ldr	r2, [r7, #24]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d10c      	bne.n	800e5e2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5cc:	b672      	cpsid	i
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	b662      	cpsie	i
 800e5dc:	60bb      	str	r3, [r7, #8]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	69fa      	ldr	r2, [r7, #28]
 800e5ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	db04      	blt.n	800e600 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	f1c3 0207 	rsb	r2, r3, #7
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	6959      	ldr	r1, [r3, #20]
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	4613      	mov	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4a1f      	ldr	r2, [pc, #124]	; (800e68c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e610:	4413      	add	r3, r2
 800e612:	4299      	cmp	r1, r3
 800e614:	d134      	bne.n	800e680 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	3304      	adds	r3, #4
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe f97d 	bl	800c91a <uxListRemove>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d115      	bne.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62a:	4918      	ldr	r1, [pc, #96]	; (800e68c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e62c:	4613      	mov	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	440b      	add	r3, r1
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e640:	2201      	movs	r2, #1
 800e642:	fa02 f303 	lsl.w	r3, r2, r3
 800e646:	43da      	mvns	r2, r3
 800e648:	4b11      	ldr	r3, [pc, #68]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4013      	ands	r3, r2
 800e64e:	4a10      	ldr	r2, [pc, #64]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e650:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e656:	2201      	movs	r2, #1
 800e658:	409a      	lsls	r2, r3
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4313      	orrs	r3, r2
 800e660:	4a0b      	ldr	r2, [pc, #44]	; (800e690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e662:	6013      	str	r3, [r2, #0]
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e668:	4613      	mov	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4a06      	ldr	r2, [pc, #24]	; (800e68c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e672:	441a      	add	r2, r3
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	3304      	adds	r3, #4
 800e678:	4619      	mov	r1, r3
 800e67a:	4610      	mov	r0, r2
 800e67c:	f7fe f8f0 	bl	800c860 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e680:	bf00      	nop
 800e682:	3720      	adds	r7, #32
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	200005d4 	.word	0x200005d4
 800e68c:	200005d8 	.word	0x200005d8
 800e690:	200006dc 	.word	0x200006dc

0800e694 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e694:	b480      	push	{r7}
 800e696:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e698:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6a0:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6a6:	3201      	adds	r2, #1
 800e6a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e6aa:	4b03      	ldr	r3, [pc, #12]	; (800e6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
	}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	200005d4 	.word	0x200005d4

0800e6bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6c6:	4b29      	ldr	r3, [pc, #164]	; (800e76c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6cc:	4b28      	ldr	r3, [pc, #160]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe f921 	bl	800c91a <uxListRemove>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d10b      	bne.n	800e6f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e6de:	4b24      	ldr	r3, [pc, #144]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ea:	43da      	mvns	r2, r3
 800e6ec:	4b21      	ldr	r3, [pc, #132]	; (800e774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	4a20      	ldr	r2, [pc, #128]	; (800e774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fc:	d10a      	bne.n	800e714 <prvAddCurrentTaskToDelayedList+0x58>
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d007      	beq.n	800e714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e704:	4b1a      	ldr	r3, [pc, #104]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3304      	adds	r3, #4
 800e70a:	4619      	mov	r1, r3
 800e70c:	481a      	ldr	r0, [pc, #104]	; (800e778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e70e:	f7fe f8a7 	bl	800c860 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e712:	e026      	b.n	800e762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4413      	add	r3, r2
 800e71a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e71c:	4b14      	ldr	r3, [pc, #80]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d209      	bcs.n	800e740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72c:	4b13      	ldr	r3, [pc, #76]	; (800e77c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	4b0f      	ldr	r3, [pc, #60]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3304      	adds	r3, #4
 800e736:	4619      	mov	r1, r3
 800e738:	4610      	mov	r0, r2
 800e73a:	f7fe f8b5 	bl	800c8a8 <vListInsert>
}
 800e73e:	e010      	b.n	800e762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e740:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	4b0a      	ldr	r3, [pc, #40]	; (800e770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3304      	adds	r3, #4
 800e74a:	4619      	mov	r1, r3
 800e74c:	4610      	mov	r0, r2
 800e74e:	f7fe f8ab 	bl	800c8a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e752:	4b0c      	ldr	r3, [pc, #48]	; (800e784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d202      	bcs.n	800e762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e75c:	4a09      	ldr	r2, [pc, #36]	; (800e784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6013      	str	r3, [r2, #0]
}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	200006d8 	.word	0x200006d8
 800e770:	200005d4 	.word	0x200005d4
 800e774:	200006dc 	.word	0x200006dc
 800e778:	200006c0 	.word	0x200006c0
 800e77c:	20000690 	.word	0x20000690
 800e780:	2000068c 	.word	0x2000068c
 800e784:	200006f4 	.word	0x200006f4

0800e788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3b04      	subs	r3, #4
 800e798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3b04      	subs	r3, #4
 800e7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f023 0201 	bic.w	r2, r3, #1
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	3b04      	subs	r3, #4
 800e7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7b8:	4a0c      	ldr	r2, [pc, #48]	; (800e7ec <pxPortInitialiseStack+0x64>)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3b14      	subs	r3, #20
 800e7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3b04      	subs	r3, #4
 800e7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f06f 0202 	mvn.w	r2, #2
 800e7d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3b20      	subs	r3, #32
 800e7dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7de:	68fb      	ldr	r3, [r7, #12]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3714      	adds	r7, #20
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	0800e7f1 	.word	0x0800e7f1

0800e7f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7fa:	4b14      	ldr	r3, [pc, #80]	; (800e84c <prvTaskExitError+0x5c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	d00c      	beq.n	800e81e <prvTaskExitError+0x2e>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	b672      	cpsid	i
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	b662      	cpsie	i
 800e818:	60fb      	str	r3, [r7, #12]
}
 800e81a:	bf00      	nop
 800e81c:	e7fe      	b.n	800e81c <prvTaskExitError+0x2c>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	b672      	cpsid	i
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	b662      	cpsie	i
 800e832:	60bb      	str	r3, [r7, #8]
}
 800e834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e836:	bf00      	nop
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d0fc      	beq.n	800e838 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e83e:	bf00      	nop
 800e840:	bf00      	nop
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	2000004c 	.word	0x2000004c

0800e850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e850:	4b07      	ldr	r3, [pc, #28]	; (800e870 <pxCurrentTCBConst2>)
 800e852:	6819      	ldr	r1, [r3, #0]
 800e854:	6808      	ldr	r0, [r1, #0]
 800e856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85a:	f380 8809 	msr	PSP, r0
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f04f 0000 	mov.w	r0, #0
 800e866:	f380 8811 	msr	BASEPRI, r0
 800e86a:	4770      	bx	lr
 800e86c:	f3af 8000 	nop.w

0800e870 <pxCurrentTCBConst2>:
 800e870:	200005d4 	.word	0x200005d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop

0800e878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e878:	4808      	ldr	r0, [pc, #32]	; (800e89c <prvPortStartFirstTask+0x24>)
 800e87a:	6800      	ldr	r0, [r0, #0]
 800e87c:	6800      	ldr	r0, [r0, #0]
 800e87e:	f380 8808 	msr	MSP, r0
 800e882:	f04f 0000 	mov.w	r0, #0
 800e886:	f380 8814 	msr	CONTROL, r0
 800e88a:	b662      	cpsie	i
 800e88c:	b661      	cpsie	f
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	df00      	svc	0
 800e898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e89a:	bf00      	nop
 800e89c:	e000ed08 	.word	0xe000ed08

0800e8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8a6:	4b37      	ldr	r3, [pc, #220]	; (800e984 <xPortStartScheduler+0xe4>)
 800e8a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	22ff      	movs	r2, #255	; 0xff
 800e8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8c0:	78fb      	ldrb	r3, [r7, #3]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	4b2f      	ldr	r3, [pc, #188]	; (800e988 <xPortStartScheduler+0xe8>)
 800e8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8ce:	4b2f      	ldr	r3, [pc, #188]	; (800e98c <xPortStartScheduler+0xec>)
 800e8d0:	2207      	movs	r2, #7
 800e8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8d4:	e009      	b.n	800e8ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e8d6:	4b2d      	ldr	r3, [pc, #180]	; (800e98c <xPortStartScheduler+0xec>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	4a2b      	ldr	r2, [pc, #172]	; (800e98c <xPortStartScheduler+0xec>)
 800e8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8ea:	78fb      	ldrb	r3, [r7, #3]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8f2:	2b80      	cmp	r3, #128	; 0x80
 800e8f4:	d0ef      	beq.n	800e8d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8f6:	4b25      	ldr	r3, [pc, #148]	; (800e98c <xPortStartScheduler+0xec>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f1c3 0307 	rsb	r3, r3, #7
 800e8fe:	2b04      	cmp	r3, #4
 800e900:	d00c      	beq.n	800e91c <xPortStartScheduler+0x7c>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	b672      	cpsid	i
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	b662      	cpsie	i
 800e916:	60bb      	str	r3, [r7, #8]
}
 800e918:	bf00      	nop
 800e91a:	e7fe      	b.n	800e91a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e91c:	4b1b      	ldr	r3, [pc, #108]	; (800e98c <xPortStartScheduler+0xec>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	021b      	lsls	r3, r3, #8
 800e922:	4a1a      	ldr	r2, [pc, #104]	; (800e98c <xPortStartScheduler+0xec>)
 800e924:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e926:	4b19      	ldr	r3, [pc, #100]	; (800e98c <xPortStartScheduler+0xec>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e92e:	4a17      	ldr	r2, [pc, #92]	; (800e98c <xPortStartScheduler+0xec>)
 800e930:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	b2da      	uxtb	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e93a:	4b15      	ldr	r3, [pc, #84]	; (800e990 <xPortStartScheduler+0xf0>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a14      	ldr	r2, [pc, #80]	; (800e990 <xPortStartScheduler+0xf0>)
 800e940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e944:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e946:	4b12      	ldr	r3, [pc, #72]	; (800e990 <xPortStartScheduler+0xf0>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a11      	ldr	r2, [pc, #68]	; (800e990 <xPortStartScheduler+0xf0>)
 800e94c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e950:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e952:	f000 f8dd 	bl	800eb10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e956:	4b0f      	ldr	r3, [pc, #60]	; (800e994 <xPortStartScheduler+0xf4>)
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e95c:	f000 f8fc 	bl	800eb58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e960:	4b0d      	ldr	r3, [pc, #52]	; (800e998 <xPortStartScheduler+0xf8>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a0c      	ldr	r2, [pc, #48]	; (800e998 <xPortStartScheduler+0xf8>)
 800e966:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e96a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e96c:	f7ff ff84 	bl	800e878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e970:	f7ff fa78 	bl	800de64 <vTaskSwitchContext>
	prvTaskExitError();
 800e974:	f7ff ff3c 	bl	800e7f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	e000e400 	.word	0xe000e400
 800e988:	20000700 	.word	0x20000700
 800e98c:	20000704 	.word	0x20000704
 800e990:	e000ed20 	.word	0xe000ed20
 800e994:	2000004c 	.word	0x2000004c
 800e998:	e000ef34 	.word	0xe000ef34

0800e99c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
	__asm volatile
 800e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a6:	b672      	cpsid	i
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	b662      	cpsie	i
 800e9b6:	607b      	str	r3, [r7, #4]
}
 800e9b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9ba:	4b10      	ldr	r3, [pc, #64]	; (800e9fc <vPortEnterCritical+0x60>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	4a0e      	ldr	r2, [pc, #56]	; (800e9fc <vPortEnterCritical+0x60>)
 800e9c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9c4:	4b0d      	ldr	r3, [pc, #52]	; (800e9fc <vPortEnterCritical+0x60>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d111      	bne.n	800e9f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <vPortEnterCritical+0x64>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00c      	beq.n	800e9f0 <vPortEnterCritical+0x54>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9da:	b672      	cpsid	i
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	b662      	cpsie	i
 800e9ea:	603b      	str	r3, [r7, #0]
}
 800e9ec:	bf00      	nop
 800e9ee:	e7fe      	b.n	800e9ee <vPortEnterCritical+0x52>
	}
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	2000004c 	.word	0x2000004c
 800ea00:	e000ed04 	.word	0xe000ed04

0800ea04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea0a:	4b13      	ldr	r3, [pc, #76]	; (800ea58 <vPortExitCritical+0x54>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10c      	bne.n	800ea2c <vPortExitCritical+0x28>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea16:	b672      	cpsid	i
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	b662      	cpsie	i
 800ea26:	607b      	str	r3, [r7, #4]
}
 800ea28:	bf00      	nop
 800ea2a:	e7fe      	b.n	800ea2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ea2c:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <vPortExitCritical+0x54>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	4a09      	ldr	r2, [pc, #36]	; (800ea58 <vPortExitCritical+0x54>)
 800ea34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea36:	4b08      	ldr	r3, [pc, #32]	; (800ea58 <vPortExitCritical+0x54>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d105      	bne.n	800ea4a <vPortExitCritical+0x46>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea4a:	bf00      	nop
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	2000004c 	.word	0x2000004c
 800ea5c:	00000000 	.word	0x00000000

0800ea60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea60:	f3ef 8009 	mrs	r0, PSP
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	4b15      	ldr	r3, [pc, #84]	; (800eac0 <pxCurrentTCBConst>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	f01e 0f10 	tst.w	lr, #16
 800ea70:	bf08      	it	eq
 800ea72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7a:	6010      	str	r0, [r2, #0]
 800ea7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea84:	b672      	cpsid	i
 800ea86:	f380 8811 	msr	BASEPRI, r0
 800ea8a:	f3bf 8f4f 	dsb	sy
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	b662      	cpsie	i
 800ea94:	f7ff f9e6 	bl	800de64 <vTaskSwitchContext>
 800ea98:	f04f 0000 	mov.w	r0, #0
 800ea9c:	f380 8811 	msr	BASEPRI, r0
 800eaa0:	bc09      	pop	{r0, r3}
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	6808      	ldr	r0, [r1, #0]
 800eaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaaa:	f01e 0f10 	tst.w	lr, #16
 800eaae:	bf08      	it	eq
 800eab0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eab4:	f380 8809 	msr	PSP, r0
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop

0800eac0 <pxCurrentTCBConst>:
 800eac0:	200005d4 	.word	0x200005d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	b672      	cpsid	i
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	b662      	cpsie	i
 800eae2:	607b      	str	r3, [r7, #4]
}
 800eae4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eae6:	f7ff f903 	bl	800dcf0 <xTaskIncrementTick>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d003      	beq.n	800eaf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaf0:	4b06      	ldr	r3, [pc, #24]	; (800eb0c <SysTick_Handler+0x44>)
 800eaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	2300      	movs	r3, #0
 800eafa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	f383 8811 	msr	BASEPRI, r3
}
 800eb02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	e000ed04 	.word	0xe000ed04

0800eb10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb10:	b480      	push	{r7}
 800eb12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb14:	4b0b      	ldr	r3, [pc, #44]	; (800eb44 <vPortSetupTimerInterrupt+0x34>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb1a:	4b0b      	ldr	r3, [pc, #44]	; (800eb48 <vPortSetupTimerInterrupt+0x38>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb20:	4b0a      	ldr	r3, [pc, #40]	; (800eb4c <vPortSetupTimerInterrupt+0x3c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a0a      	ldr	r2, [pc, #40]	; (800eb50 <vPortSetupTimerInterrupt+0x40>)
 800eb26:	fba2 2303 	umull	r2, r3, r2, r3
 800eb2a:	099b      	lsrs	r3, r3, #6
 800eb2c:	4a09      	ldr	r2, [pc, #36]	; (800eb54 <vPortSetupTimerInterrupt+0x44>)
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb32:	4b04      	ldr	r3, [pc, #16]	; (800eb44 <vPortSetupTimerInterrupt+0x34>)
 800eb34:	2207      	movs	r2, #7
 800eb36:	601a      	str	r2, [r3, #0]
}
 800eb38:	bf00      	nop
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
 800eb44:	e000e010 	.word	0xe000e010
 800eb48:	e000e018 	.word	0xe000e018
 800eb4c:	20000040 	.word	0x20000040
 800eb50:	10624dd3 	.word	0x10624dd3
 800eb54:	e000e014 	.word	0xe000e014

0800eb58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb68 <vPortEnableVFP+0x10>
 800eb5c:	6801      	ldr	r1, [r0, #0]
 800eb5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb62:	6001      	str	r1, [r0, #0]
 800eb64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb66:	bf00      	nop
 800eb68:	e000ed88 	.word	0xe000ed88

0800eb6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b08a      	sub	sp, #40	; 0x28
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb74:	2300      	movs	r3, #0
 800eb76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb78:	f7ff f80e 	bl	800db98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb7c:	4b5b      	ldr	r3, [pc, #364]	; (800ecec <pvPortMalloc+0x180>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb84:	f000 f91a 	bl	800edbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb88:	4b59      	ldr	r3, [pc, #356]	; (800ecf0 <pvPortMalloc+0x184>)
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4013      	ands	r3, r2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f040 8092 	bne.w	800ecba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d01f      	beq.n	800ebdc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4413      	add	r3, r2
 800eba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f003 0307 	and.w	r3, r3, #7
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d016      	beq.n	800ebdc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f023 0307 	bic.w	r3, r3, #7
 800ebb4:	3308      	adds	r3, #8
 800ebb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f003 0307 	and.w	r3, r3, #7
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00c      	beq.n	800ebdc <pvPortMalloc+0x70>
	__asm volatile
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	b672      	cpsid	i
 800ebc8:	f383 8811 	msr	BASEPRI, r3
 800ebcc:	f3bf 8f6f 	isb	sy
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	b662      	cpsie	i
 800ebd6:	617b      	str	r3, [r7, #20]
}
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d06b      	beq.n	800ecba <pvPortMalloc+0x14e>
 800ebe2:	4b44      	ldr	r3, [pc, #272]	; (800ecf4 <pvPortMalloc+0x188>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d866      	bhi.n	800ecba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebec:	4b42      	ldr	r3, [pc, #264]	; (800ecf8 <pvPortMalloc+0x18c>)
 800ebee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebf0:	4b41      	ldr	r3, [pc, #260]	; (800ecf8 <pvPortMalloc+0x18c>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebf6:	e004      	b.n	800ec02 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d903      	bls.n	800ec14 <pvPortMalloc+0xa8>
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1f1      	bne.n	800ebf8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec14:	4b35      	ldr	r3, [pc, #212]	; (800ecec <pvPortMalloc+0x180>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d04d      	beq.n	800ecba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2208      	movs	r2, #8
 800ec24:	4413      	add	r3, r2
 800ec26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	1ad2      	subs	r2, r2, r3
 800ec38:	2308      	movs	r3, #8
 800ec3a:	005b      	lsls	r3, r3, #1
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d921      	bls.n	800ec84 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4413      	add	r3, r2
 800ec46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	f003 0307 	and.w	r3, r3, #7
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00c      	beq.n	800ec6c <pvPortMalloc+0x100>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec56:	b672      	cpsid	i
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	b662      	cpsie	i
 800ec66:	613b      	str	r3, [r7, #16]
}
 800ec68:	bf00      	nop
 800ec6a:	e7fe      	b.n	800ec6a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	685a      	ldr	r2, [r3, #4]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	1ad2      	subs	r2, r2, r3
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec7e:	69b8      	ldr	r0, [r7, #24]
 800ec80:	f000 f8fe 	bl	800ee80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec84:	4b1b      	ldr	r3, [pc, #108]	; (800ecf4 <pvPortMalloc+0x188>)
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	4a19      	ldr	r2, [pc, #100]	; (800ecf4 <pvPortMalloc+0x188>)
 800ec90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec92:	4b18      	ldr	r3, [pc, #96]	; (800ecf4 <pvPortMalloc+0x188>)
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	4b19      	ldr	r3, [pc, #100]	; (800ecfc <pvPortMalloc+0x190>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d203      	bcs.n	800eca6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec9e:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <pvPortMalloc+0x188>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a16      	ldr	r2, [pc, #88]	; (800ecfc <pvPortMalloc+0x190>)
 800eca4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	685a      	ldr	r2, [r3, #4]
 800ecaa:	4b11      	ldr	r3, [pc, #68]	; (800ecf0 <pvPortMalloc+0x184>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	431a      	orrs	r2, r3
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecba:	f7fe ff7b 	bl	800dbb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	f003 0307 	and.w	r3, r3, #7
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00c      	beq.n	800ece2 <pvPortMalloc+0x176>
	__asm volatile
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	b672      	cpsid	i
 800ecce:	f383 8811 	msr	BASEPRI, r3
 800ecd2:	f3bf 8f6f 	isb	sy
 800ecd6:	f3bf 8f4f 	dsb	sy
 800ecda:	b662      	cpsie	i
 800ecdc:	60fb      	str	r3, [r7, #12]
}
 800ecde:	bf00      	nop
 800ece0:	e7fe      	b.n	800ece0 <pvPortMalloc+0x174>
	return pvReturn;
 800ece2:	69fb      	ldr	r3, [r7, #28]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3728      	adds	r7, #40	; 0x28
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	20007f10 	.word	0x20007f10
 800ecf0:	20007f1c 	.word	0x20007f1c
 800ecf4:	20007f14 	.word	0x20007f14
 800ecf8:	20007f08 	.word	0x20007f08
 800ecfc:	20007f18 	.word	0x20007f18

0800ed00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d04c      	beq.n	800edac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed12:	2308      	movs	r3, #8
 800ed14:	425b      	negs	r3, r3
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4413      	add	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	4b23      	ldr	r3, [pc, #140]	; (800edb4 <vPortFree+0xb4>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4013      	ands	r3, r2
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10c      	bne.n	800ed48 <vPortFree+0x48>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	b672      	cpsid	i
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	b662      	cpsie	i
 800ed42:	60fb      	str	r3, [r7, #12]
}
 800ed44:	bf00      	nop
 800ed46:	e7fe      	b.n	800ed46 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00c      	beq.n	800ed6a <vPortFree+0x6a>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	b672      	cpsid	i
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	b662      	cpsie	i
 800ed64:	60bb      	str	r3, [r7, #8]
}
 800ed66:	bf00      	nop
 800ed68:	e7fe      	b.n	800ed68 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	4b11      	ldr	r3, [pc, #68]	; (800edb4 <vPortFree+0xb4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4013      	ands	r3, r2
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d019      	beq.n	800edac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d115      	bne.n	800edac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	4b0b      	ldr	r3, [pc, #44]	; (800edb4 <vPortFree+0xb4>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	43db      	mvns	r3, r3
 800ed8a:	401a      	ands	r2, r3
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed90:	f7fe ff02 	bl	800db98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <vPortFree+0xb8>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	4a06      	ldr	r2, [pc, #24]	; (800edb8 <vPortFree+0xb8>)
 800eda0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eda2:	6938      	ldr	r0, [r7, #16]
 800eda4:	f000 f86c 	bl	800ee80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eda8:	f7fe ff04 	bl	800dbb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edac:	bf00      	nop
 800edae:	3718      	adds	r7, #24
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	20007f1c 	.word	0x20007f1c
 800edb8:	20007f14 	.word	0x20007f14

0800edbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edc2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800edc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edc8:	4b27      	ldr	r3, [pc, #156]	; (800ee68 <prvHeapInit+0xac>)
 800edca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f003 0307 	and.w	r3, r3, #7
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00c      	beq.n	800edf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	3307      	adds	r3, #7
 800edda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f023 0307 	bic.w	r3, r3, #7
 800ede2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	4a1f      	ldr	r2, [pc, #124]	; (800ee68 <prvHeapInit+0xac>)
 800edec:	4413      	add	r3, r2
 800edee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edf4:	4a1d      	ldr	r2, [pc, #116]	; (800ee6c <prvHeapInit+0xb0>)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800edfa:	4b1c      	ldr	r3, [pc, #112]	; (800ee6c <prvHeapInit+0xb0>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	4413      	add	r3, r2
 800ee06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee08:	2208      	movs	r2, #8
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	1a9b      	subs	r3, r3, r2
 800ee0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f023 0307 	bic.w	r3, r3, #7
 800ee16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4a15      	ldr	r2, [pc, #84]	; (800ee70 <prvHeapInit+0xb4>)
 800ee1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee1e:	4b14      	ldr	r3, [pc, #80]	; (800ee70 <prvHeapInit+0xb4>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2200      	movs	r2, #0
 800ee24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee26:	4b12      	ldr	r3, [pc, #72]	; (800ee70 <prvHeapInit+0xb4>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	1ad2      	subs	r2, r2, r3
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee3c:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <prvHeapInit+0xb4>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	4a0a      	ldr	r2, [pc, #40]	; (800ee74 <prvHeapInit+0xb8>)
 800ee4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	4a09      	ldr	r2, [pc, #36]	; (800ee78 <prvHeapInit+0xbc>)
 800ee52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee54:	4b09      	ldr	r3, [pc, #36]	; (800ee7c <prvHeapInit+0xc0>)
 800ee56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee5a:	601a      	str	r2, [r3, #0]
}
 800ee5c:	bf00      	nop
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	20000708 	.word	0x20000708
 800ee6c:	20007f08 	.word	0x20007f08
 800ee70:	20007f10 	.word	0x20007f10
 800ee74:	20007f18 	.word	0x20007f18
 800ee78:	20007f14 	.word	0x20007f14
 800ee7c:	20007f1c 	.word	0x20007f1c

0800ee80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee88:	4b28      	ldr	r3, [pc, #160]	; (800ef2c <prvInsertBlockIntoFreeList+0xac>)
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	e002      	b.n	800ee94 <prvInsertBlockIntoFreeList+0x14>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d8f7      	bhi.n	800ee8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	68ba      	ldr	r2, [r7, #8]
 800eea8:	4413      	add	r3, r2
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d108      	bne.n	800eec2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	685a      	ldr	r2, [r3, #4]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	441a      	add	r2, r3
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	441a      	add	r2, r3
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d118      	bne.n	800ef08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	4b15      	ldr	r3, [pc, #84]	; (800ef30 <prvInsertBlockIntoFreeList+0xb0>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d00d      	beq.n	800eefe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	441a      	add	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	601a      	str	r2, [r3, #0]
 800eefc:	e008      	b.n	800ef10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eefe:	4b0c      	ldr	r3, [pc, #48]	; (800ef30 <prvInsertBlockIntoFreeList+0xb0>)
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	e003      	b.n	800ef10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d002      	beq.n	800ef1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef1e:	bf00      	nop
 800ef20:	3714      	adds	r7, #20
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	20007f08 	.word	0x20007f08
 800ef30:	20007f10 	.word	0x20007f10

0800ef34 <__libc_init_array>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	4d0d      	ldr	r5, [pc, #52]	; (800ef6c <__libc_init_array+0x38>)
 800ef38:	4c0d      	ldr	r4, [pc, #52]	; (800ef70 <__libc_init_array+0x3c>)
 800ef3a:	1b64      	subs	r4, r4, r5
 800ef3c:	10a4      	asrs	r4, r4, #2
 800ef3e:	2600      	movs	r6, #0
 800ef40:	42a6      	cmp	r6, r4
 800ef42:	d109      	bne.n	800ef58 <__libc_init_array+0x24>
 800ef44:	4d0b      	ldr	r5, [pc, #44]	; (800ef74 <__libc_init_array+0x40>)
 800ef46:	4c0c      	ldr	r4, [pc, #48]	; (800ef78 <__libc_init_array+0x44>)
 800ef48:	f000 f8f6 	bl	800f138 <_init>
 800ef4c:	1b64      	subs	r4, r4, r5
 800ef4e:	10a4      	asrs	r4, r4, #2
 800ef50:	2600      	movs	r6, #0
 800ef52:	42a6      	cmp	r6, r4
 800ef54:	d105      	bne.n	800ef62 <__libc_init_array+0x2e>
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef5c:	4798      	blx	r3
 800ef5e:	3601      	adds	r6, #1
 800ef60:	e7ee      	b.n	800ef40 <__libc_init_array+0xc>
 800ef62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef66:	4798      	blx	r3
 800ef68:	3601      	adds	r6, #1
 800ef6a:	e7f2      	b.n	800ef52 <__libc_init_array+0x1e>
 800ef6c:	080354d0 	.word	0x080354d0
 800ef70:	080354d0 	.word	0x080354d0
 800ef74:	080354d0 	.word	0x080354d0
 800ef78:	080354d4 	.word	0x080354d4

0800ef7c <__retarget_lock_acquire_recursive>:
 800ef7c:	4770      	bx	lr

0800ef7e <__retarget_lock_release_recursive>:
 800ef7e:	4770      	bx	lr

0800ef80 <memcpy>:
 800ef80:	440a      	add	r2, r1
 800ef82:	4291      	cmp	r1, r2
 800ef84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef88:	d100      	bne.n	800ef8c <memcpy+0xc>
 800ef8a:	4770      	bx	lr
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef96:	4291      	cmp	r1, r2
 800ef98:	d1f9      	bne.n	800ef8e <memcpy+0xe>
 800ef9a:	bd10      	pop	{r4, pc}

0800ef9c <memset>:
 800ef9c:	4402      	add	r2, r0
 800ef9e:	4603      	mov	r3, r0
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d100      	bne.n	800efa6 <memset+0xa>
 800efa4:	4770      	bx	lr
 800efa6:	f803 1b01 	strb.w	r1, [r3], #1
 800efaa:	e7f9      	b.n	800efa0 <memset+0x4>

0800efac <cleanup_glue>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	460c      	mov	r4, r1
 800efb0:	6809      	ldr	r1, [r1, #0]
 800efb2:	4605      	mov	r5, r0
 800efb4:	b109      	cbz	r1, 800efba <cleanup_glue+0xe>
 800efb6:	f7ff fff9 	bl	800efac <cleanup_glue>
 800efba:	4621      	mov	r1, r4
 800efbc:	4628      	mov	r0, r5
 800efbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efc2:	f000 b869 	b.w	800f098 <_free_r>
	...

0800efc8 <_reclaim_reent>:
 800efc8:	4b2c      	ldr	r3, [pc, #176]	; (800f07c <_reclaim_reent+0xb4>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4283      	cmp	r3, r0
 800efce:	b570      	push	{r4, r5, r6, lr}
 800efd0:	4604      	mov	r4, r0
 800efd2:	d051      	beq.n	800f078 <_reclaim_reent+0xb0>
 800efd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800efd6:	b143      	cbz	r3, 800efea <_reclaim_reent+0x22>
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d14a      	bne.n	800f074 <_reclaim_reent+0xac>
 800efde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efe0:	6819      	ldr	r1, [r3, #0]
 800efe2:	b111      	cbz	r1, 800efea <_reclaim_reent+0x22>
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 f857 	bl	800f098 <_free_r>
 800efea:	6961      	ldr	r1, [r4, #20]
 800efec:	b111      	cbz	r1, 800eff4 <_reclaim_reent+0x2c>
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 f852 	bl	800f098 <_free_r>
 800eff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eff6:	b111      	cbz	r1, 800effe <_reclaim_reent+0x36>
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 f84d 	bl	800f098 <_free_r>
 800effe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f000:	b111      	cbz	r1, 800f008 <_reclaim_reent+0x40>
 800f002:	4620      	mov	r0, r4
 800f004:	f000 f848 	bl	800f098 <_free_r>
 800f008:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f00a:	b111      	cbz	r1, 800f012 <_reclaim_reent+0x4a>
 800f00c:	4620      	mov	r0, r4
 800f00e:	f000 f843 	bl	800f098 <_free_r>
 800f012:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f014:	b111      	cbz	r1, 800f01c <_reclaim_reent+0x54>
 800f016:	4620      	mov	r0, r4
 800f018:	f000 f83e 	bl	800f098 <_free_r>
 800f01c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f01e:	b111      	cbz	r1, 800f026 <_reclaim_reent+0x5e>
 800f020:	4620      	mov	r0, r4
 800f022:	f000 f839 	bl	800f098 <_free_r>
 800f026:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f028:	b111      	cbz	r1, 800f030 <_reclaim_reent+0x68>
 800f02a:	4620      	mov	r0, r4
 800f02c:	f000 f834 	bl	800f098 <_free_r>
 800f030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f032:	b111      	cbz	r1, 800f03a <_reclaim_reent+0x72>
 800f034:	4620      	mov	r0, r4
 800f036:	f000 f82f 	bl	800f098 <_free_r>
 800f03a:	69a3      	ldr	r3, [r4, #24]
 800f03c:	b1e3      	cbz	r3, 800f078 <_reclaim_reent+0xb0>
 800f03e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f040:	4620      	mov	r0, r4
 800f042:	4798      	blx	r3
 800f044:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f046:	b1b9      	cbz	r1, 800f078 <_reclaim_reent+0xb0>
 800f048:	4620      	mov	r0, r4
 800f04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f04e:	f7ff bfad 	b.w	800efac <cleanup_glue>
 800f052:	5949      	ldr	r1, [r1, r5]
 800f054:	b941      	cbnz	r1, 800f068 <_reclaim_reent+0xa0>
 800f056:	3504      	adds	r5, #4
 800f058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f05a:	2d80      	cmp	r5, #128	; 0x80
 800f05c:	68d9      	ldr	r1, [r3, #12]
 800f05e:	d1f8      	bne.n	800f052 <_reclaim_reent+0x8a>
 800f060:	4620      	mov	r0, r4
 800f062:	f000 f819 	bl	800f098 <_free_r>
 800f066:	e7ba      	b.n	800efde <_reclaim_reent+0x16>
 800f068:	680e      	ldr	r6, [r1, #0]
 800f06a:	4620      	mov	r0, r4
 800f06c:	f000 f814 	bl	800f098 <_free_r>
 800f070:	4631      	mov	r1, r6
 800f072:	e7ef      	b.n	800f054 <_reclaim_reent+0x8c>
 800f074:	2500      	movs	r5, #0
 800f076:	e7ef      	b.n	800f058 <_reclaim_reent+0x90>
 800f078:	bd70      	pop	{r4, r5, r6, pc}
 800f07a:	bf00      	nop
 800f07c:	20000050 	.word	0x20000050

0800f080 <__malloc_lock>:
 800f080:	4801      	ldr	r0, [pc, #4]	; (800f088 <__malloc_lock+0x8>)
 800f082:	f7ff bf7b 	b.w	800ef7c <__retarget_lock_acquire_recursive>
 800f086:	bf00      	nop
 800f088:	20008ed4 	.word	0x20008ed4

0800f08c <__malloc_unlock>:
 800f08c:	4801      	ldr	r0, [pc, #4]	; (800f094 <__malloc_unlock+0x8>)
 800f08e:	f7ff bf76 	b.w	800ef7e <__retarget_lock_release_recursive>
 800f092:	bf00      	nop
 800f094:	20008ed4 	.word	0x20008ed4

0800f098 <_free_r>:
 800f098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f09a:	2900      	cmp	r1, #0
 800f09c:	d048      	beq.n	800f130 <_free_r+0x98>
 800f09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0a2:	9001      	str	r0, [sp, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f1a1 0404 	sub.w	r4, r1, #4
 800f0aa:	bfb8      	it	lt
 800f0ac:	18e4      	addlt	r4, r4, r3
 800f0ae:	f7ff ffe7 	bl	800f080 <__malloc_lock>
 800f0b2:	4a20      	ldr	r2, [pc, #128]	; (800f134 <_free_r+0x9c>)
 800f0b4:	9801      	ldr	r0, [sp, #4]
 800f0b6:	6813      	ldr	r3, [r2, #0]
 800f0b8:	4615      	mov	r5, r2
 800f0ba:	b933      	cbnz	r3, 800f0ca <_free_r+0x32>
 800f0bc:	6063      	str	r3, [r4, #4]
 800f0be:	6014      	str	r4, [r2, #0]
 800f0c0:	b003      	add	sp, #12
 800f0c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0c6:	f7ff bfe1 	b.w	800f08c <__malloc_unlock>
 800f0ca:	42a3      	cmp	r3, r4
 800f0cc:	d90b      	bls.n	800f0e6 <_free_r+0x4e>
 800f0ce:	6821      	ldr	r1, [r4, #0]
 800f0d0:	1862      	adds	r2, r4, r1
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	bf04      	itt	eq
 800f0d6:	681a      	ldreq	r2, [r3, #0]
 800f0d8:	685b      	ldreq	r3, [r3, #4]
 800f0da:	6063      	str	r3, [r4, #4]
 800f0dc:	bf04      	itt	eq
 800f0de:	1852      	addeq	r2, r2, r1
 800f0e0:	6022      	streq	r2, [r4, #0]
 800f0e2:	602c      	str	r4, [r5, #0]
 800f0e4:	e7ec      	b.n	800f0c0 <_free_r+0x28>
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	b10b      	cbz	r3, 800f0f0 <_free_r+0x58>
 800f0ec:	42a3      	cmp	r3, r4
 800f0ee:	d9fa      	bls.n	800f0e6 <_free_r+0x4e>
 800f0f0:	6811      	ldr	r1, [r2, #0]
 800f0f2:	1855      	adds	r5, r2, r1
 800f0f4:	42a5      	cmp	r5, r4
 800f0f6:	d10b      	bne.n	800f110 <_free_r+0x78>
 800f0f8:	6824      	ldr	r4, [r4, #0]
 800f0fa:	4421      	add	r1, r4
 800f0fc:	1854      	adds	r4, r2, r1
 800f0fe:	42a3      	cmp	r3, r4
 800f100:	6011      	str	r1, [r2, #0]
 800f102:	d1dd      	bne.n	800f0c0 <_free_r+0x28>
 800f104:	681c      	ldr	r4, [r3, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	6053      	str	r3, [r2, #4]
 800f10a:	4421      	add	r1, r4
 800f10c:	6011      	str	r1, [r2, #0]
 800f10e:	e7d7      	b.n	800f0c0 <_free_r+0x28>
 800f110:	d902      	bls.n	800f118 <_free_r+0x80>
 800f112:	230c      	movs	r3, #12
 800f114:	6003      	str	r3, [r0, #0]
 800f116:	e7d3      	b.n	800f0c0 <_free_r+0x28>
 800f118:	6825      	ldr	r5, [r4, #0]
 800f11a:	1961      	adds	r1, r4, r5
 800f11c:	428b      	cmp	r3, r1
 800f11e:	bf04      	itt	eq
 800f120:	6819      	ldreq	r1, [r3, #0]
 800f122:	685b      	ldreq	r3, [r3, #4]
 800f124:	6063      	str	r3, [r4, #4]
 800f126:	bf04      	itt	eq
 800f128:	1949      	addeq	r1, r1, r5
 800f12a:	6021      	streq	r1, [r4, #0]
 800f12c:	6054      	str	r4, [r2, #4]
 800f12e:	e7c7      	b.n	800f0c0 <_free_r+0x28>
 800f130:	b003      	add	sp, #12
 800f132:	bd30      	pop	{r4, r5, pc}
 800f134:	20007f20 	.word	0x20007f20

0800f138 <_init>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	bf00      	nop
 800f13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f13e:	bc08      	pop	{r3}
 800f140:	469e      	mov	lr, r3
 800f142:	4770      	bx	lr

0800f144 <_fini>:
 800f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f146:	bf00      	nop
 800f148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14a:	bc08      	pop	{r3}
 800f14c:	469e      	mov	lr, r3
 800f14e:	4770      	bx	lr
