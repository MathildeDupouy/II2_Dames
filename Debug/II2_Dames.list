
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026380  0800f9a0  0800f9a0  0001f9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035d20  08035d20  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  08035d20  08035d20  00045d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035d28  08035d28  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035d28  08035d28  00045d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035d2c  08035d2c  00045d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08035d30  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e2c  200000b4  08035de4  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ee0  08035de4  00058ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033933  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005db3  00000000  00000000  00083a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  000897d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002420  00000000  00000000  0008be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003001a  00000000  00000000  000bca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117a32  00000000  00000000  000ecab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002044e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a694  00000000  00000000  00204538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f988 	.word	0x0800f988

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f988 	.word	0x0800f988

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f003 fd6a 	bl	8004020 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fd25 	bl	8003fe4 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fcef 	bl	8003fe4 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fc3c 	bl	8003fe4 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fc2e 	bl	8003fe4 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fc13 	bl	8003fe4 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fc05 	bl	8003fe4 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fbb8 	bl	8003fb0 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fba4 	bl	8003fb0 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fb95 	bl	8003fe4 <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fb0a 	bl	8003fe4 <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 fafa 	bl	8003fe4 <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 faec 	bl	8003fe4 <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f003 faa3 	bl	8003f9c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <calculPossibilitesRec>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesRec(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites, uint8_t index, uint8_t nb_eaten)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	b092      	sub	sp, #72	; 0x48
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	72fb      	strb	r3, [r7, #11]
	int8_t pas   = (color == 0) ? 1 : -1; // en fonction couleur on regarde lignes croissantes ou decroissantes
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <calculPossibilitesRec+0x1e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e001      	b.n	8000b76 <calculPossibilitesRec+0x22>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t fin   = (color == 0) ? 7 : 0; // en fonction couleur pas meme arrivee
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <calculPossibilitesRec+0x30>
 8000b80:	2307      	movs	r3, #7
 8000b82:	e000      	b.n	8000b86 <calculPossibilitesRec+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t debut = (color == 0) ? 0 : 7; // en fonction couleur pas meme debut
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <calculPossibilitesRec+0x40>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <calculPossibilitesRec+0x42>
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Controle de la colonne de droite en avant :
	if(col < 7 && line != fin)
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	f200 8157 	bhi.w	8000e50 <calculPossibilitesRec+0x2fc>
 8000ba2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	89fa      	ldrh	r2, [r7, #14]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	f000 8150 	beq.w	8000e50 <calculPossibilitesRec+0x2fc>
	{
		// Controle colonne de droite en avant : piece presente
		if(chessboard[line + pas][col + 1].isFilled == 1)
 8000bb0:	89fa      	ldrh	r2, [r7, #14]
 8000bb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	89bb      	ldrh	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4893      	ldr	r0, [pc, #588]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	441a      	add	r2, r3
 8000bc4:	0053      	lsls	r3, r2, #1
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4403      	add	r3, r0
 8000bd4:	3305      	adds	r3, #5
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 811b 	bne.w	8000e14 <calculPossibilitesRec+0x2c0>
		{
			if(chessboard[line + pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000bde:	89fa      	ldrh	r2, [r7, #14]
 8000be0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000be4:	18d1      	adds	r1, r2, r3
 8000be6:	89bb      	ldrh	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4888      	ldr	r0, [pc, #544]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000bec:	461a      	mov	r2, r3
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	441a      	add	r2, r3
 8000bf2:	0053      	lsls	r3, r2, #1
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	4413      	add	r3, r2
 8000c00:	4403      	add	r3, r0
 8000c02:	3307      	adds	r3, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	7afa      	ldrb	r2, [r7, #11]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f000 8121 	beq.w	8000e50 <calculPossibilitesRec+0x2fc>
			else if((col <= 5) && (line + pas != fin)) // Assez de cases pour sauter
 8000c0e:	89bb      	ldrh	r3, [r7, #12]
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	f200 811d 	bhi.w	8000e50 <calculPossibilitesRec+0x2fc>
 8000c16:	89fa      	ldrh	r2, [r7, #14]
 8000c18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c1c:	441a      	add	r2, r3
 8000c1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f000 8114 	beq.w	8000e50 <calculPossibilitesRec+0x2fc>
			{
				if(chessboard[line + 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000c28:	89fa      	ldrh	r2, [r7, #14]
 8000c2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	18d1      	adds	r1, r2, r3
 8000c32:	89bb      	ldrh	r3, [r7, #12]
 8000c34:	3302      	adds	r3, #2
 8000c36:	4875      	ldr	r0, [pc, #468]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000c38:	461a      	mov	r2, r3
 8000c3a:	0092      	lsls	r2, r2, #2
 8000c3c:	441a      	add	r2, r3
 8000c3e:	0053      	lsls	r3, r2, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4403      	add	r3, r0
 8000c4e:	3305      	adds	r3, #5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 80fc 	bne.w	8000e50 <calculPossibilitesRec+0x2fc>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col + 2};
 8000c58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	857b      	strh	r3, [r7, #42]	; 0x2a
					possibilites[index] = possible;
 8000c72:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 8000c86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c8a:	b298      	uxth	r0, r3
 8000c8c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000c90:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	4403      	add	r3, r0
 8000c98:	b29c      	uxth	r4, r3
 8000c9a:	485d      	ldr	r0, [pc, #372]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	4622      	mov	r2, r4
 8000ca8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000cac:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000cb0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000cb4:	89bb      	ldrh	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29c      	uxth	r4, r3
 8000cba:	4855      	ldr	r0, [pc, #340]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4403      	add	r3, r0
 8000cca:	4622      	mov	r2, r4
 8000ccc:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8000cce:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000cd2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cda:	e048      	b.n	8000d6e <calculPossibilitesRec+0x21a>
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 8000cdc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000ce8:	18d4      	adds	r4, r2, r3
 8000cea:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000cee:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000cf4:	1ac9      	subs	r1, r1, r3
 8000cf6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000cfa:	18c8      	adds	r0, r1, r3
 8000cfc:	4d44      	ldr	r5, [pc, #272]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d00:	460b      	mov	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	440b      	add	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4423      	add	r3, r4
 8000d0a:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 8000d0e:	4940      	ldr	r1, [pc, #256]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8000d20:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000d2c:	18d4      	adds	r4, r2, r3
 8000d2e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000d32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d38:	1ac9      	subs	r1, r1, r3
 8000d3a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000d3e:	18c8      	adds	r0, r1, r3
 8000d40:	4d33      	ldr	r5, [pc, #204]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000d42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d44:	460b      	mov	r3, r1
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	440b      	add	r3, r1
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4423      	add	r3, r4
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	442b      	add	r3, r5
 8000d52:	885c      	ldrh	r4, [r3, #2]
 8000d54:	492e      	ldr	r1, [pc, #184]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4403      	add	r3, r0
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	4622      	mov	r2, r4
 8000d66:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8000d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbb1      	blt.n	8000cdc <calculPossibilitesRec+0x188>
					}
					index++;
 8000d78:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col + 1].isFilled = 0; //On enleve la piece pour la recurrence
 8000d82:	89fa      	ldrh	r2, [r7, #14]
 8000d84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d88:	18d1      	adds	r1, r2, r3
 8000d8a:	89bb      	ldrh	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	481f      	ldr	r0, [pc, #124]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000d90:	461a      	mov	r2, r3
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	441a      	add	r2, r3
 8000d96:	0053      	lsls	r3, r2, #1
 8000d98:	461a      	mov	r2, r3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	4413      	add	r3, r2
 8000da4:	4403      	add	r3, r0
 8000da6:	3305      	adds	r3, #5
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line + 2 * pas, col + 2, color, possibilites, index, nb_eaten+1);
 8000dac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	4413      	add	r3, r2
 8000dba:	b298      	uxth	r0, r3
 8000dbc:	89bb      	ldrh	r3, [r7, #12]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	b299      	uxth	r1, r3
 8000dc2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	7afa      	ldrb	r2, [r7, #11]
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f7ff febd 	bl	8000b54 <calculPossibilitesRec>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col + 1].isFilled = 1; //On enleve la piece pour la recurrence
 8000de0:	89fa      	ldrh	r2, [r7, #14]
 8000de2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000de6:	18d1      	adds	r1, r2, r3
 8000de8:	89bb      	ldrh	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000dee:	461a      	mov	r2, r3
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	441a      	add	r2, r3
 8000df4:	0053      	lsls	r3, r2, #1
 8000df6:	461a      	mov	r2, r3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	4413      	add	r3, r2
 8000e02:	4403      	add	r3, r0
 8000e04:	3305      	adds	r3, #5
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e021      	b.n	8000e50 <calculPossibilitesRec+0x2fc>
 8000e0c:	200080f8 	.word	0x200080f8
 8000e10:	20008614 	.word	0x20008614
				}
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000e14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d119      	bne.n	8000e50 <calculPossibilitesRec+0x2fc>
		{
			struct cell possible = {line + pas, col + 1};
 8000e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	84fb      	strh	r3, [r7, #38]	; 0x26
			possibilites[index] = possible;
 8000e32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	6010      	str	r0, [r2, #0]
			index++;
 8000e46:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col < 7 && line != debut)
 8000e50:	89bb      	ldrh	r3, [r7, #12]
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	f200 8139 	bhi.w	80010ca <calculPossibilitesRec+0x576>
 8000e58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	89fa      	ldrh	r2, [r7, #14]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f000 8132 	beq.w	80010ca <calculPossibilitesRec+0x576>
	{
		if(chessboard[line - pas][col + 1].isFilled == 1)
 8000e66:	89fa      	ldrh	r2, [r7, #14]
 8000e68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e6c:	1ad1      	subs	r1, r2, r3
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4848      	ldr	r0, [pc, #288]	; (8000f94 <calculPossibilitesRec+0x440>)
 8000e74:	461a      	mov	r2, r3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	441a      	add	r2, r3
 8000e7a:	0053      	lsls	r3, r2, #1
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	460b      	mov	r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	4403      	add	r3, r0
 8000e8a:	3305      	adds	r3, #5
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	f040 811b 	bne.w	80010ca <calculPossibilitesRec+0x576>
		{
			if(chessboard[line - pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000e94:	89fa      	ldrh	r2, [r7, #14]
 8000e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e9a:	1ad1      	subs	r1, r2, r3
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	483c      	ldr	r0, [pc, #240]	; (8000f94 <calculPossibilitesRec+0x440>)
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	441a      	add	r2, r3
 8000ea8:	0053      	lsls	r3, r2, #1
 8000eaa:	461a      	mov	r2, r3
 8000eac:	460b      	mov	r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4403      	add	r3, r0
 8000eb8:	3307      	adds	r3, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	7afa      	ldrb	r2, [r7, #11]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	f000 8103 	beq.w	80010ca <calculPossibilitesRec+0x576>
			else if((col <= 5) && (line - pas != debut)) // Assez de cases pour sauter
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	f200 80ff 	bhi.w	80010ca <calculPossibilitesRec+0x576>
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f000 80f6 	beq.w	80010ca <calculPossibilitesRec+0x576>
			{
				if(chessboard[line - 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000ede:	89fa      	ldrh	r2, [r7, #14]
 8000ee0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	1ad1      	subs	r1, r2, r3
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	3302      	adds	r3, #2
 8000eec:	4829      	ldr	r0, [pc, #164]	; (8000f94 <calculPossibilitesRec+0x440>)
 8000eee:	461a      	mov	r2, r3
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	441a      	add	r2, r3
 8000ef4:	0053      	lsls	r3, r2, #1
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	4403      	add	r3, r0
 8000f04:	3305      	adds	r3, #5
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 80de 	bne.w	80010ca <calculPossibilitesRec+0x576>
				{
					//=> Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col + 2};
 8000f0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	89fa      	ldrh	r2, [r7, #14]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	843b      	strh	r3, [r7, #32]
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	3302      	adds	r3, #2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	847b      	strh	r3, [r7, #34]	; 0x22
					possibilites[index] = possible;
 8000f28:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 8000f3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000f46:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000f4a:	89f8      	ldrh	r0, [r7, #14]
 8000f4c:	1ac3      	subs	r3, r0, r3
 8000f4e:	b29c      	uxth	r4, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <calculPossibilitesRec+0x444>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000f62:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000f66:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000f6a:	89bb      	ldrh	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b29c      	uxth	r4, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <calculPossibilitesRec+0x444>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4403      	add	r3, r0
 8000f80:	4622      	mov	r2, r4
 8000f82:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8000f84:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000f88:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f90:	e04d      	b.n	800102e <calculPossibilitesRec+0x4da>
 8000f92:	bf00      	nop
 8000f94:	200080f8 	.word	0x200080f8
 8000f98:	20008614 	.word	0x20008614
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 8000f9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fa2:	1ad2      	subs	r2, r2, r3
 8000fa4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000fa8:	18d4      	adds	r4, r2, r3
 8000faa:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000fae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fb4:	1ac9      	subs	r1, r1, r3
 8000fb6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000fba:	18c8      	adds	r0, r1, r3
 8000fbc:	4d93      	ldr	r5, [pc, #588]	; (800120c <calculPossibilitesRec+0x6b8>)
 8000fbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	440b      	add	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4423      	add	r3, r4
 8000fca:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 8000fce:	498f      	ldr	r1, [pc, #572]	; (800120c <calculPossibilitesRec+0x6b8>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4403      	add	r3, r0
 8000fda:	4622      	mov	r2, r4
 8000fdc:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8000fe0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000fec:	18d4      	adds	r4, r2, r3
 8000fee:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000ff2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ff8:	1ac9      	subs	r1, r1, r3
 8000ffa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000ffe:	18c8      	adds	r0, r1, r3
 8001000:	4d82      	ldr	r5, [pc, #520]	; (800120c <calculPossibilitesRec+0x6b8>)
 8001002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001004:	460b      	mov	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4423      	add	r3, r4
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	442b      	add	r3, r5
 8001012:	885c      	ldrh	r4, [r3, #2]
 8001014:	497d      	ldr	r1, [pc, #500]	; (800120c <calculPossibilitesRec+0x6b8>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4403      	add	r3, r0
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	4622      	mov	r2, r4
 8001026:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	3301      	adds	r3, #1
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
 800102e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001034:	429a      	cmp	r2, r3
 8001036:	dbb1      	blt.n	8000f9c <calculPossibilitesRec+0x448>
					}
					index++;
 8001038:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800103c:	3301      	adds	r3, #1
 800103e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col + 1].isFilled = 0; //On enleve la piece pour la recurrence
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001048:	1ad1      	subs	r1, r2, r3
 800104a:	89bb      	ldrh	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	4870      	ldr	r0, [pc, #448]	; (8001210 <calculPossibilitesRec+0x6bc>)
 8001050:	461a      	mov	r2, r3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	441a      	add	r2, r3
 8001056:	0053      	lsls	r3, r2, #1
 8001058:	461a      	mov	r2, r3
 800105a:	460b      	mov	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	4403      	add	r3, r0
 8001066:	3305      	adds	r3, #5
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line - 2 * pas, col + 2, color, possibilites, index, nb_eaten+1);
 800106c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	89fa      	ldrh	r2, [r7, #14]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b298      	uxth	r0, r3
 800107c:	89bb      	ldrh	r3, [r7, #12]
 800107e:	3302      	adds	r3, #2
 8001080:	b299      	uxth	r1, r3
 8001082:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	7afa      	ldrb	r2, [r7, #11]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f7ff fd5d 	bl	8000b54 <calculPossibilitesRec>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col + 1].isFilled = 1;
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010a6:	1ad1      	subs	r1, r2, r3
 80010a8:	89bb      	ldrh	r3, [r7, #12]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4858      	ldr	r0, [pc, #352]	; (8001210 <calculPossibilitesRec+0x6bc>)
 80010ae:	461a      	mov	r2, r3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	441a      	add	r2, r3
 80010b4:	0053      	lsls	r3, r2, #1
 80010b6:	461a      	mov	r2, r3
 80010b8:	460b      	mov	r3, r1
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	4403      	add	r3, r0
 80010c4:	3305      	adds	r3, #5
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
			possibilites[index] = possible;
			index++;
		}*/
	}
	// Controle de la colonne de gauche en avant :
	if(col > 0 && line != fin)
 80010ca:	89bb      	ldrh	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8157 	beq.w	8001380 <calculPossibilitesRec+0x82c>
 80010d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	89fa      	ldrh	r2, [r7, #14]
 80010da:	429a      	cmp	r2, r3
 80010dc:	f000 8150 	beq.w	8001380 <calculPossibilitesRec+0x82c>
	{
		// Controle colonne de gauche : piece presente
		if(chessboard[line + pas][col - 1].isFilled == 1)
 80010e0:	89fa      	ldrh	r2, [r7, #14]
 80010e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010e6:	18d1      	adds	r1, r2, r3
 80010e8:	89bb      	ldrh	r3, [r7, #12]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4848      	ldr	r0, [pc, #288]	; (8001210 <calculPossibilitesRec+0x6bc>)
 80010ee:	461a      	mov	r2, r3
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	441a      	add	r2, r3
 80010f4:	0053      	lsls	r3, r2, #1
 80010f6:	461a      	mov	r2, r3
 80010f8:	460b      	mov	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	4403      	add	r3, r0
 8001104:	3305      	adds	r3, #5
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	f040 811b 	bne.w	8001344 <calculPossibilitesRec+0x7f0>
		{
			if(chessboard[line + pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 800110e:	89fa      	ldrh	r2, [r7, #14]
 8001110:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001114:	18d1      	adds	r1, r2, r3
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	483d      	ldr	r0, [pc, #244]	; (8001210 <calculPossibilitesRec+0x6bc>)
 800111c:	461a      	mov	r2, r3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	441a      	add	r2, r3
 8001122:	0053      	lsls	r3, r2, #1
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	4403      	add	r3, r0
 8001132:	3307      	adds	r3, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	7afa      	ldrb	r2, [r7, #11]
 8001138:	429a      	cmp	r2, r3
 800113a:	f000 8121 	beq.w	8001380 <calculPossibilitesRec+0x82c>
			else if((col >= 2) && (line + pas != fin)) // Assez de cases pour sauter
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	f240 811d 	bls.w	8001380 <calculPossibilitesRec+0x82c>
 8001146:	89fa      	ldrh	r2, [r7, #14]
 8001148:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800114c:	441a      	add	r2, r3
 800114e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001152:	429a      	cmp	r2, r3
 8001154:	f000 8114 	beq.w	8001380 <calculPossibilitesRec+0x82c>
			{
				if(chessboard[line + 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8001158:	89fa      	ldrh	r2, [r7, #14]
 800115a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	3b02      	subs	r3, #2
 8001166:	482a      	ldr	r0, [pc, #168]	; (8001210 <calculPossibilitesRec+0x6bc>)
 8001168:	461a      	mov	r2, r3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	441a      	add	r2, r3
 800116e:	0053      	lsls	r3, r2, #1
 8001170:	461a      	mov	r2, r3
 8001172:	460b      	mov	r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	4403      	add	r3, r0
 800117e:	3305      	adds	r3, #5
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 80fc 	bne.w	8001380 <calculPossibilitesRec+0x82c>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col - 2};
 8001188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800118c:	b29b      	uxth	r3, r3
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	83bb      	strh	r3, [r7, #28]
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	3b02      	subs	r3, #2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	83fb      	strh	r3, [r7, #30]
					possibilites[index] = possible;
 80011a2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 80011b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011ba:	b298      	uxth	r0, r3
 80011bc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011c0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	4403      	add	r3, r0
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	; (800120c <calculPossibilitesRec+0x6b8>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	4622      	mov	r2, r4
 80011d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 80011dc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011e0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b29c      	uxth	r4, r3
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <calculPossibilitesRec+0x6b8>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4403      	add	r3, r0
 80011fa:	4622      	mov	r2, r4
 80011fc:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 80011fe:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001202:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
 800120a:	e04c      	b.n	80012a6 <calculPossibilitesRec+0x752>
 800120c:	20008614 	.word	0x20008614
 8001210:	200080f8 	.word	0x200080f8
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 8001214:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800121a:	1ad2      	subs	r2, r2, r3
 800121c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001220:	18d4      	adds	r4, r2, r3
 8001222:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001226:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800122a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800122c:	1ac9      	subs	r1, r1, r3
 800122e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001232:	18c8      	adds	r0, r1, r3
 8001234:	4da3      	ldr	r5, [pc, #652]	; (80014c4 <calculPossibilitesRec+0x970>)
 8001236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001238:	460b      	mov	r3, r1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4423      	add	r3, r4
 8001242:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 8001246:	499f      	ldr	r1, [pc, #636]	; (80014c4 <calculPossibilitesRec+0x970>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4403      	add	r3, r0
 8001252:	4622      	mov	r2, r4
 8001254:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8001258:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800125c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001264:	18d4      	adds	r4, r2, r3
 8001266:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800126a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800126e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001270:	1ac9      	subs	r1, r1, r3
 8001272:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001276:	18c8      	adds	r0, r1, r3
 8001278:	4d92      	ldr	r5, [pc, #584]	; (80014c4 <calculPossibilitesRec+0x970>)
 800127a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800127c:	460b      	mov	r3, r1
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4423      	add	r3, r4
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	442b      	add	r3, r5
 800128a:	885c      	ldrh	r4, [r3, #2]
 800128c:	498d      	ldr	r1, [pc, #564]	; (80014c4 <calculPossibilitesRec+0x970>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4403      	add	r3, r0
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	4622      	mov	r2, r4
 800129e:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 80012a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a2:	3301      	adds	r3, #1
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
 80012a6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80012aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbb1      	blt.n	8001214 <calculPossibilitesRec+0x6c0>
					}
					index++;
 80012b0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80012b4:	3301      	adds	r3, #1
 80012b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col - 1].isFilled = 0; //On enleve la piece pour la recurrence
 80012ba:	89fa      	ldrh	r2, [r7, #14]
 80012bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	89bb      	ldrh	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4880      	ldr	r0, [pc, #512]	; (80014c8 <calculPossibilitesRec+0x974>)
 80012c8:	461a      	mov	r2, r3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	441a      	add	r2, r3
 80012ce:	0053      	lsls	r3, r2, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	4403      	add	r3, r0
 80012de:	3305      	adds	r3, #5
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line + 2 * pas, col - 2, color, possibilites, index, nb_eaten+1);
 80012e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	4413      	add	r3, r2
 80012f2:	b298      	uxth	r0, r3
 80012f4:	89bb      	ldrh	r3, [r7, #12]
 80012f6:	3b02      	subs	r3, #2
 80012f8:	b299      	uxth	r1, r3
 80012fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80012fe:	3301      	adds	r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	7afa      	ldrb	r2, [r7, #11]
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f7ff fc21 	bl	8000b54 <calculPossibilitesRec>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col - 1].isFilled = 1; //On la remet
 8001318:	89fa      	ldrh	r2, [r7, #14]
 800131a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800131e:	18d1      	adds	r1, r2, r3
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	3b01      	subs	r3, #1
 8001324:	4868      	ldr	r0, [pc, #416]	; (80014c8 <calculPossibilitesRec+0x974>)
 8001326:	461a      	mov	r2, r3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	441a      	add	r2, r3
 800132c:	0053      	lsls	r3, r2, #1
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	4403      	add	r3, r0
 800133c:	3305      	adds	r3, #5
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e01d      	b.n	8001380 <calculPossibilitesRec+0x82c>
				}
			}
		}
		// Controle colonne de gauche : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8001344:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001348:	2b00      	cmp	r3, #0
 800134a:	d119      	bne.n	8001380 <calculPossibilitesRec+0x82c>
		{
			struct cell possible = {line + pas, col - 1};
 800134c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001350:	b29a      	uxth	r2, r3
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	833b      	strh	r3, [r7, #24]
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	3b01      	subs	r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	837b      	strh	r3, [r7, #26]
			possibilites[index] = possible;
 8001362:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	461a      	mov	r2, r3
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	6010      	str	r0, [r2, #0]
			index++;
 8001376:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800137a:	3301      	adds	r3, #1
 800137c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		}
	}
	// Controle colonne de gauche en arriere : piece presente
	if(col > 0 && line != debut)
 8001380:	89bb      	ldrh	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8139 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
 8001388:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800138c:	b29b      	uxth	r3, r3
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	429a      	cmp	r2, r3
 8001392:	f000 8132 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
	{
		if(chessboard[line - pas][col - 1].isFilled == 1)
 8001396:	89fa      	ldrh	r2, [r7, #14]
 8001398:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800139c:	1ad1      	subs	r1, r2, r3
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <calculPossibilitesRec+0x974>)
 80013a4:	461a      	mov	r2, r3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	441a      	add	r2, r3
 80013aa:	0053      	lsls	r3, r2, #1
 80013ac:	461a      	mov	r2, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	4403      	add	r3, r0
 80013ba:	3305      	adds	r3, #5
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f040 811b 	bne.w	80015fa <calculPossibilitesRec+0xaa6>
		{
			if(chessboard[line - pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 80013c4:	89fa      	ldrh	r2, [r7, #14]
 80013c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013ca:	1ad1      	subs	r1, r2, r3
 80013cc:	89bb      	ldrh	r3, [r7, #12]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <calculPossibilitesRec+0x974>)
 80013d2:	461a      	mov	r2, r3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	441a      	add	r2, r3
 80013d8:	0053      	lsls	r3, r2, #1
 80013da:	461a      	mov	r2, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	4403      	add	r3, r0
 80013e8:	3307      	adds	r3, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	7afa      	ldrb	r2, [r7, #11]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f000 8103 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
			else if((col >= 2) && (line - pas != debut)) // Assez de cases pour sauter
 80013f4:	89bb      	ldrh	r3, [r7, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	f240 80ff 	bls.w	80015fa <calculPossibilitesRec+0xaa6>
 80013fc:	89fa      	ldrh	r2, [r7, #14]
 80013fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001402:	1ad2      	subs	r2, r2, r3
 8001404:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001408:	429a      	cmp	r2, r3
 800140a:	f000 80f6 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
			{
				if(chessboard[line - 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 800140e:	89fa      	ldrh	r2, [r7, #14]
 8001410:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	1ad1      	subs	r1, r2, r3
 8001418:	89bb      	ldrh	r3, [r7, #12]
 800141a:	3b02      	subs	r3, #2
 800141c:	482a      	ldr	r0, [pc, #168]	; (80014c8 <calculPossibilitesRec+0x974>)
 800141e:	461a      	mov	r2, r3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	441a      	add	r2, r3
 8001424:	0053      	lsls	r3, r2, #1
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	4403      	add	r3, r0
 8001434:	3305      	adds	r3, #5
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 80de 	bne.w	80015fa <calculPossibilitesRec+0xaa6>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col - 2};
 800143e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001442:	b29b      	uxth	r3, r3
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	89fa      	ldrh	r2, [r7, #14]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	82bb      	strh	r3, [r7, #20]
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	3b02      	subs	r3, #2
 8001454:	b29b      	uxth	r3, r3
 8001456:	82fb      	strh	r3, [r7, #22]
					possibilites[index] = possible;
 8001458:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	461a      	mov	r2, r3
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 800146c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001470:	b29b      	uxth	r3, r3
 8001472:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001476:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 800147a:	89f8      	ldrh	r0, [r7, #14]
 800147c:	1ac3      	subs	r3, r0, r3
 800147e:	b29c      	uxth	r4, r3
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <calculPossibilitesRec+0x970>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	4622      	mov	r2, r4
 800148e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 8001492:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001496:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 800149a:	89bb      	ldrh	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	b29c      	uxth	r4, r3
 80014a0:	4808      	ldr	r0, [pc, #32]	; (80014c4 <calculPossibilitesRec+0x970>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	4622      	mov	r2, r4
 80014b2:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 80014b4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80014b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
 80014c0:	e04d      	b.n	800155e <calculPossibilitesRec+0xa0a>
 80014c2:	bf00      	nop
 80014c4:	20008614 	.word	0x20008614
 80014c8:	200080f8 	.word	0x200080f8
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 80014cc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80014d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014d8:	18d4      	adds	r4, r2, r3
 80014da:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80014de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80014e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014e4:	1ac9      	subs	r1, r1, r3
 80014e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014ea:	18c8      	adds	r0, r1, r3
 80014ec:	4d46      	ldr	r5, [pc, #280]	; (8001608 <calculPossibilitesRec+0xab4>)
 80014ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014f0:	460b      	mov	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4423      	add	r3, r4
 80014fa:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 80014fe:	4942      	ldr	r1, [pc, #264]	; (8001608 <calculPossibilitesRec+0xab4>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	4622      	mov	r2, r4
 800150c:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8001510:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001516:	1ad2      	subs	r2, r2, r3
 8001518:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800151c:	18d4      	adds	r4, r2, r3
 800151e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001522:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001528:	1ac9      	subs	r1, r1, r3
 800152a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800152e:	18c8      	adds	r0, r1, r3
 8001530:	4d35      	ldr	r5, [pc, #212]	; (8001608 <calculPossibilitesRec+0xab4>)
 8001532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001534:	460b      	mov	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4423      	add	r3, r4
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	442b      	add	r3, r5
 8001542:	885c      	ldrh	r4, [r3, #2]
 8001544:	4930      	ldr	r1, [pc, #192]	; (8001608 <calculPossibilitesRec+0xab4>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4403      	add	r3, r0
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	4622      	mov	r2, r4
 8001556:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8001558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155a:	3301      	adds	r3, #1
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
 800155e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001564:	429a      	cmp	r2, r3
 8001566:	dbb1      	blt.n	80014cc <calculPossibilitesRec+0x978>
					}
					index++;
 8001568:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800156c:	3301      	adds	r3, #1
 800156e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col - 1].isFilled = 0;
 8001572:	89fa      	ldrh	r2, [r7, #14]
 8001574:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001578:	1ad1      	subs	r1, r2, r3
 800157a:	89bb      	ldrh	r3, [r7, #12]
 800157c:	3b01      	subs	r3, #1
 800157e:	4823      	ldr	r0, [pc, #140]	; (800160c <calculPossibilitesRec+0xab8>)
 8001580:	461a      	mov	r2, r3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	441a      	add	r2, r3
 8001586:	0053      	lsls	r3, r2, #1
 8001588:	461a      	mov	r2, r3
 800158a:	460b      	mov	r3, r1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	4403      	add	r3, r0
 8001596:	3305      	adds	r3, #5
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line - 2 * pas, col - 2, color, possibilites, index, nb_eaten+1);
 800159c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	89fa      	ldrh	r2, [r7, #14]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b298      	uxth	r0, r3
 80015ac:	89bb      	ldrh	r3, [r7, #12]
 80015ae:	3b02      	subs	r3, #2
 80015b0:	b299      	uxth	r1, r3
 80015b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	7afa      	ldrb	r2, [r7, #11]
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f7ff fac5 	bl	8000b54 <calculPossibilitesRec>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col - 1].isFilled = 1;
 80015d0:	89fa      	ldrh	r2, [r7, #14]
 80015d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015d6:	1ad1      	subs	r1, r2, r3
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	3b01      	subs	r3, #1
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <calculPossibilitesRec+0xab8>)
 80015de:	461a      	mov	r2, r3
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	441a      	add	r2, r3
 80015e4:	0053      	lsls	r3, r2, #1
 80015e6:	461a      	mov	r2, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	4403      	add	r3, r0
 80015f4:	3305      	adds	r3, #5
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	return index;
 80015fa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50

}
 80015fe:	4618      	mov	r0, r3
 8001600:	3740      	adds	r7, #64	; 0x40
 8001602:	46bd      	mov	sp, r7
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	bf00      	nop
 8001608:	20008614 	.word	0x20008614
 800160c:	200080f8 	.word	0x200080f8

08001610 <calculPossibilitesDame>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesDame(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	; 0x40
 8001614:	af02      	add	r7, sp, #8
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	4603      	mov	r3, r0
 800161a:	81fb      	strh	r3, [r7, #14]
 800161c:	460b      	mov	r3, r1
 800161e:	81bb      	strh	r3, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	72fb      	strb	r3, [r7, #11]
	uint8_t index = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int pas_l_tab[] = {-1, 1};
 800162a:	4ab5      	ldr	r2, [pc, #724]	; (8001900 <calculPossibilitesDame+0x2f0>)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	e883 0003 	stmia.w	r3, {r0, r1}
	int pas_c_tab[] = {-1, 1};
 8001638:	4ab1      	ldr	r2, [pc, #708]	; (8001900 <calculPossibilitesDame+0x2f0>)
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	e883 0003 	stmia.w	r3, {r0, r1}
	int pas_l, pas_c;
	uint8_t fin = 7, debut = 0;
 8001646:	2307      	movs	r3, #7
 8001648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	int8_t d_l, d_c;

	for (uint8_t i = 0; i < 2; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001658:	e146      	b.n	80018e8 <calculPossibilitesDame+0x2d8>
	{
		for (uint8_t j = 0; j < 2; j++)
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001660:	e138      	b.n	80018d4 <calculPossibilitesDame+0x2c4>
		{
			// Initialisation pas et fin de la diagonale observee
			pas_l = pas_l_tab[i];
 8001662:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800166c:	4413      	add	r3, r2
 800166e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
			pas_c = pas_c_tab[j];
 8001674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800167e:	4413      	add	r3, r2
 8001680:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
			d_l = line + pas_l;
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			d_c = col + pas_c;
 8001696:	89bb      	ldrh	r3, [r7, #12]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			while (d_l <= fin && d_l >= debut && d_c >= debut && d_c <= fin)
 80016a6:	e0f5      	b.n	8001894 <calculPossibilitesDame+0x284>
			{
				// place pour se mettre
				if (chessboard[d_l][d_c].isFilled == 0)
 80016a8:	f997 1036 	ldrsb.w	r1, [r7, #54]	; 0x36
 80016ac:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80016b0:	4894      	ldr	r0, [pc, #592]	; (8001904 <calculPossibilitesDame+0x2f4>)
 80016b2:	461a      	mov	r2, r3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	441a      	add	r2, r3
 80016b8:	0053      	lsls	r3, r2, #1
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	4403      	add	r3, r0
 80016c8:	3305      	adds	r3, #5
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d127      	bne.n	8001720 <calculPossibilitesDame+0x110>
				{
					struct cell possible = {d_l, d_c};
 80016d0:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	82bb      	strh	r3, [r7, #20]
 80016d8:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80016dc:	b29b      	uxth	r3, r3
 80016de:	82fb      	strh	r3, [r7, #22]
					possibilites[index] = possible;
 80016e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	6010      	str	r0, [r2, #0]
					index++;
 80016f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					d_l = d_l + pas_l;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	b2da      	uxtb	r2, r3
 8001702:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001706:	4413      	add	r3, r2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					d_c = d_c + pas_c;
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001716:	4413      	add	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800171e:	e0b9      	b.n	8001894 <calculPossibilitesDame+0x284>
				}
				// un pion est present
				else
				{
					// On peut sauter
					if((d_l + pas_l) <= fin && (d_l + pas_l) >= debut && (d_c + pas_c) <= fin && (d_c + 2 * pas_c) >= debut)
 8001720:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	441a      	add	r2, r3
 8001728:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800172c:	429a      	cmp	r2, r3
 800172e:	f300 80cb 	bgt.w	80018c8 <calculPossibilitesDame+0x2b8>
 8001732:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	441a      	add	r2, r3
 800173a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800173e:	429a      	cmp	r2, r3
 8001740:	f2c0 80c2 	blt.w	80018c8 <calculPossibilitesDame+0x2b8>
 8001744:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	441a      	add	r2, r3
 800174c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001750:	429a      	cmp	r2, r3
 8001752:	f300 80b9 	bgt.w	80018c8 <calculPossibilitesDame+0x2b8>
 8001756:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	441a      	add	r2, r3
 8001760:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001764:	429a      	cmp	r2, r3
 8001766:	f2c0 80af 	blt.w	80018c8 <calculPossibilitesDame+0x2b8>
					{
						// Pas de piece genante
						if(chessboard[d_l + 2 * pas_l][d_c + pas_c].isFilled == 0)
 800176a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	18d1      	adds	r1, r2, r3
 8001774:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177a:	4413      	add	r3, r2
 800177c:	4861      	ldr	r0, [pc, #388]	; (8001904 <calculPossibilitesDame+0x2f4>)
 800177e:	461a      	mov	r2, r3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	441a      	add	r2, r3
 8001784:	0053      	lsls	r3, r2, #1
 8001786:	461a      	mov	r2, r3
 8001788:	460b      	mov	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	4403      	add	r3, r0
 8001794:	3305      	adds	r3, #5
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8095 	bne.w	80018c8 <calculPossibilitesDame+0x2b8>
						{
							struct cell possible = {d_l + pas_l, d_c + pas_c};
 800179e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	823b      	strh	r3, [r7, #16]
 80017ae:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	827b      	strh	r3, [r7, #18]
							possibilites[index] = possible;
 80017be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	6010      	str	r0, [r2, #0]
							possible_eaten[index][0].ligne = d_l;
 80017d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80017d6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80017da:	b298      	uxth	r0, r3
 80017dc:	494a      	ldr	r1, [pc, #296]	; (8001908 <calculPossibilitesDame+0x2f8>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	4602      	mov	r2, r0
 80017ea:	801a      	strh	r2, [r3, #0]
							possible_eaten[index][0].colonne = d_c;
 80017ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80017f0:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80017f4:	b298      	uxth	r0, r3
 80017f6:	4944      	ldr	r1, [pc, #272]	; (8001908 <calculPossibilitesDame+0x2f8>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	440b      	add	r3, r1
 8001802:	3302      	adds	r3, #2
 8001804:	4602      	mov	r2, r0
 8001806:	801a      	strh	r2, [r3, #0]
							index++;
 8001808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800180c:	3301      	adds	r3, #1
 800180e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							chessboard[d_l][d_c].isFilled = 0; //On enleve la piece pour la recurrence
 8001812:	f997 1036 	ldrsb.w	r1, [r7, #54]	; 0x36
 8001816:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800181a:	483a      	ldr	r0, [pc, #232]	; (8001904 <calculPossibilitesDame+0x2f4>)
 800181c:	461a      	mov	r2, r3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	441a      	add	r2, r3
 8001822:	0053      	lsls	r3, r2, #1
 8001824:	461a      	mov	r2, r3
 8001826:	460b      	mov	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	4403      	add	r3, r0
 8001832:	3305      	adds	r3, #5
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
							index = calculPossibilitesRec(d_l + pas_l, d_c + pas_c, color, possibilites, index, 1);
 8001838:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800183c:	b29a      	uxth	r2, r3
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	b29b      	uxth	r3, r3
 8001842:	4413      	add	r3, r2
 8001844:	b298      	uxth	r0, r3
 8001846:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800184a:	b29a      	uxth	r2, r3
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b299      	uxth	r1, r3
 8001854:	7afa      	ldrb	r2, [r7, #11]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f7ff f977 	bl	8000b54 <calculPossibilitesRec>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							chessboard[d_l][d_c].isFilled = 1; //On la remet
 800186c:	f997 1036 	ldrsb.w	r1, [r7, #54]	; 0x36
 8001870:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <calculPossibilitesDame+0x2f4>)
 8001876:	461a      	mov	r2, r3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	441a      	add	r2, r3
 800187c:	0053      	lsls	r3, r2, #1
 800187e:	461a      	mov	r2, r3
 8001880:	460b      	mov	r3, r1
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	4403      	add	r3, r0
 800188c:	3305      	adds	r3, #5
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
						}
					}
					break;
 8001892:	e019      	b.n	80018c8 <calculPossibilitesDame+0x2b8>
			while (d_l <= fin && d_l >= debut && d_c >= debut && d_c <= fin)
 8001894:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001898:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800189c:	429a      	cmp	r2, r3
 800189e:	dc14      	bgt.n	80018ca <calculPossibilitesDame+0x2ba>
 80018a0:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 80018a4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018a8:	429a      	cmp	r2, r3
 80018aa:	db0e      	blt.n	80018ca <calculPossibilitesDame+0x2ba>
 80018ac:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80018b0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018b4:	429a      	cmp	r2, r3
 80018b6:	db08      	blt.n	80018ca <calculPossibilitesDame+0x2ba>
 80018b8:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80018bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f77f aef1 	ble.w	80016a8 <calculPossibilitesDame+0x98>
 80018c6:	e000      	b.n	80018ca <calculPossibilitesDame+0x2ba>
					break;
 80018c8:	bf00      	nop
		for (uint8_t j = 0; j < 2; j++)
 80018ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ce:	3301      	adds	r3, #1
 80018d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80018d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018d8:	2b01      	cmp	r3, #1
 80018da:	f67f aec2 	bls.w	8001662 <calculPossibilitesDame+0x52>
	for (uint8_t i = 0; i < 2; i++)
 80018de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018e2:	3301      	adds	r3, #1
 80018e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80018e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	f67f aeb4 	bls.w	800165a <calculPossibilitesDame+0x4a>
				}
			}
		}
	}

	return index;
 80018f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3738      	adds	r7, #56	; 0x38
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	0800f9e4 	.word	0x0800f9e4
 8001904:	200080f8 	.word	0x200080f8
 8001908:	20008614 	.word	0x20008614

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b5b0      	push	{r4, r5, r7, lr}
 800190e:	b0ac      	sub	sp, #176	; 0xb0
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001912:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001920:	2301      	movs	r3, #1
 8001922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800192c:	f7ff f8a8 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001930:	f7ff f8cc 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f004 ff0c 	bl	8006750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f914 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 fedc 	bl	80026f8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001940:	f000 f9d4 	bl	8001cec <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001944:	f000 fa4e 	bl	8001de4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001948:	f000 fe86 	bl	8002658 <MX_FMC_Init>
  MX_I2C1_Init();
 800194c:	f000 fa7c 	bl	8001e48 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001950:	f000 faba 	bl	8001ec8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001954:	f000 faf8 	bl	8001f48 <MX_LTDC_Init>
  MX_RTC_Init();
 8001958:	f000 fb78 	bl	800204c <MX_RTC_Init>
  MX_SPI2_Init();
 800195c:	f000 fc1c 	bl	8002198 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001960:	f000 fc58 	bl	8002214 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001964:	f000 fcaa 	bl	80022bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001968:	f000 fcf6 	bl	8002358 <MX_TIM3_Init>
  MX_TIM5_Init();
 800196c:	f000 fd42 	bl	80023f4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001970:	f000 fd8e 	bl	8002490 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001974:	f000 fe10 	bl	8002598 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001978:	f000 fe3e 	bl	80025f8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800197c:	f000 f964 	bl	8001c48 <MX_ADC1_Init>
  MX_DAC_Init();
 8001980:	f000 fa06 	bl	8001d90 <MX_DAC_Init>
  MX_UART7_Init();
 8001984:	f000 fdd8 	bl	8002538 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001988:	f002 fb56 	bl	8004038 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800198c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001990:	2000      	movs	r0, #0
 8001992:	f002 fbe9 	bl	8004168 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001996:	f002 fbbf 	bl	8004118 <BSP_LCD_GetXSize>
 800199a:	4604      	mov	r4, r0
 800199c:	f002 fbd0 	bl	8004140 <BSP_LCD_GetYSize>
 80019a0:	4603      	mov	r3, r0
 80019a2:	fb03 f304 	mul.w	r3, r3, r4
 80019a6:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4619      	mov	r1, r3
 80019ae:	2001      	movs	r0, #1
 80019b0:	f002 fbda 	bl	8004168 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80019b4:	f003 f952 	bl	8004c5c <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f002 fc35 	bl	8004228 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80019be:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019c2:	f002 fca3 	bl	800430c <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80019c6:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <main+0x210>)
 80019c8:	2100      	movs	r1, #0
 80019ca:	2000      	movs	r0, #0
 80019cc:	f002 ff7a 	bl	80048c4 <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f002 fc29 	bl	8004228 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f002 fc98 	bl	800430c <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 80019dc:	4850      	ldr	r0, [pc, #320]	; (8001b20 <main+0x214>)
 80019de:	f002 fc65 	bl	80042ac <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80019e2:	f04f 30ff 	mov.w	r0, #4294967295
 80019e6:	f002 fc2f 	bl	8004248 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80019ea:	484e      	ldr	r0, [pc, #312]	; (8001b24 <main+0x218>)
 80019ec:	f002 fc44 	bl	8004278 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80019f0:	f002 fb92 	bl	8004118 <BSP_LCD_GetXSize>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29c      	uxth	r4, r3
 80019f8:	f002 fba2 	bl	8004140 <BSP_LCD_GetYSize>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f003 fd3c 	bl	8005480 <BSP_TS_Init>
    BSP_TS_ITConfig();
 8001a08:	f003 fd7a 	bl	8005500 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001a12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4843      	ldr	r0, [pc, #268]	; (8001b28 <main+0x21c>)
 8001a1a:	f005 f805 	bl	8006a28 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8001a1e:	4842      	ldr	r0, [pc, #264]	; (8001b28 <main+0x21c>)
 8001a20:	f004 ff34 	bl	800688c <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8001a24:	2001      	movs	r0, #1
 8001a26:	f00b fd32 	bl	800d48e <xQueueCreateMutex>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <main+0x220>)
 8001a2e:	6013      	str	r3, [r2, #0]
    mutexChessboard = xSemaphoreCreateMutex();
 8001a30:	2001      	movs	r0, #1
 8001a32:	f00b fd2c 	bl	800d48e <xQueueCreateMutex>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <main+0x224>)
 8001a3a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueSel */
  osMessageQDef(queueSel, 16, uint16_t);
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <main+0x228>)
 8001a3e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueSelHandle = osMessageCreate(osMessageQ(queueSel), NULL);
 8001a48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00b fad9 	bl	800d006 <osMessageCreate>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <main+0x22c>)
 8001a58:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityHigh, 0, 1024);
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <main+0x230>)
 8001a5c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001a60:	461d      	mov	r5, r3
 8001a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8001a6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00b fa5a 	bl	800cf2e <osThreadCreate>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <main+0x234>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <main+0x238>)
 8001a82:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001a86:	461d      	mov	r5, r3
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8001a94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00b fa47 	bl	800cf2e <osThreadCreate>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <main+0x23c>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityAboveNormal, 0, 256);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <main+0x240>)
 8001aa8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001aac:	461d      	mov	r5, r3
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 8001aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00b fa34 	bl	800cf2e <osThreadCreate>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <main+0x244>)
 8001aca:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_calculPoss */
  osThreadDef(task_calculPoss, fonction_calculPossibilites, osPriorityBelowNormal, 0, 4096);
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <main+0x248>)
 8001ace:	f107 0420 	add.w	r4, r7, #32
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_calculPossHandle = osThreadCreate(osThread(task_calculPoss), NULL);
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00b fa21 	bl	800cf2e <osThreadCreate>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <main+0x24c>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_victory */
  osThreadDef(task_victory, fonctionVictory, osPriorityNormal, 0, 1024);
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <main+0x250>)
 8001af4:	1d3c      	adds	r4, r7, #4
 8001af6:	461d      	mov	r5, r3
 8001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_victoryHandle = osThreadCreate(osThread(task_victory), NULL);
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00b fa10 	bl	800cf2e <osThreadCreate>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <main+0x254>)
 8001b12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b14:	f00b fa04 	bl	800cf20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0x20c>
 8001b1a:	bf00      	nop
 8001b1c:	0800fb2c 	.word	0x0800fb2c
 8001b20:	20000034 	.word	0x20000034
 8001b24:	ff0000ff 	.word	0xff0000ff
 8001b28:	2000850c 	.word	0x2000850c
 8001b2c:	200085d8 	.word	0x200085d8
 8001b30:	20008da4 	.word	0x20008da4
 8001b34:	0800f9ec 	.word	0x0800f9ec
 8001b38:	200080a8 	.word	0x200080a8
 8001b3c:	0800f9fc 	.word	0x0800f9fc
 8001b40:	20008058 	.word	0x20008058
 8001b44:	0800fa18 	.word	0x0800fa18
 8001b48:	20008508 	.word	0x20008508
 8001b4c:	0800fa34 	.word	0x0800fa34
 8001b50:	200083c4 	.word	0x200083c4
 8001b54:	0800fa50 	.word	0x0800fa50
 8001b58:	200084bc 	.word	0x200084bc
 8001b5c:	0800fa6c 	.word	0x0800fa6c
 8001b60:	200085f0 	.word	0x200085f0

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	; 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	; 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00d fe3a 	bl	800f7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b88:	f007 fe02 	bl	8009790 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <SystemClock_Config+0xe0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a26      	ldr	r2, [pc, #152]	; (8001c44 <SystemClock_Config+0xe0>)
 8001baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <SystemClock_Config+0xe0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2309      	movs	r3, #9
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001bd8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001bdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001be2:	2309      	movs	r3, #9
 8001be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4618      	mov	r0, r3
 8001bec:	f007 fe30 	bl	8009850 <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bf6:	f002 f875 	bl	8003ce4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bfa:	f007 fdd9 	bl	80097b0 <HAL_PWREx_EnableOverDrive>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001c04:	f002 f86e 	bl	8003ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2106      	movs	r1, #6
 8001c26:	4618      	mov	r0, r3
 8001c28:	f008 f8b6 	bl	8009d98 <HAL_RCC_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c32:	f002 f857 	bl	8003ce4 <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3750      	adds	r7, #80	; 0x50
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000

08001c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <MX_ADC1_Init+0x9c>)
 8001c5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <MX_ADC1_Init+0xa0>)
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001caa:	f004 fdab 	bl	8006804 <HAL_ADC_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cb4:	f002 f816 	bl	8003ce4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001cca:	f004 fead 	bl	8006a28 <HAL_ADC_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cd4:	f002 f806 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200084c0 	.word	0x200084c0
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	0f000001 	.word	0x0f000001

08001cec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <MX_ADC3_Init+0x9c>)
 8001d02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <MX_ADC3_Init+0xa0>)
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d4e:	f004 fd59 	bl	8006804 <HAL_ADC_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001d58:	f001 ffc4 	bl	8003ce4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d5c:	2306      	movs	r3, #6
 8001d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d6e:	f004 fe5b 	bl	8006a28 <HAL_ADC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001d78:	f001 ffb4 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000850c 	.word	0x2000850c
 8001d88:	40012200 	.word	0x40012200
 8001d8c:	0f000001 	.word	0x0f000001

08001d90 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d96:	463b      	mov	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_DAC_Init+0x4c>)
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <MX_DAC_Init+0x50>)
 8001da2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <MX_DAC_Init+0x4c>)
 8001da6:	f005 f971 	bl	800708c <HAL_DAC_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001db0:	f001 ff98 	bl	8003ce4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_DAC_Init+0x4c>)
 8001dc4:	f005 f9e8 	bl	8007198 <HAL_DAC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001dce:	f001 ff89 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200085dc 	.word	0x200085dc
 8001de0:	40007400 	.word	0x40007400

08001de4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <MX_DMA2D_Init+0x60>)
 8001dec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e1a:	f005 fc67 	bl	80076ec <HAL_DMA2D_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001e24:	f001 ff5e 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e2c:	f005 fecc 	bl	8007bc8 <HAL_DMA2D_ConfigLayer>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001e36:	f001 ff55 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20008ce4 	.word	0x20008ce4
 8001e44:	4002b000 	.word	0x4002b000

08001e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <MX_I2C1_Init+0x78>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <MX_I2C1_Init+0x7c>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e84:	f006 fad2 	bl	800842c <HAL_I2C_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e8e:	f001 ff29 	bl	8003ce4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4809      	ldr	r0, [pc, #36]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e96:	f007 f86b 	bl	8008f70 <HAL_I2CEx_ConfigAnalogFilter>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ea0:	f001 ff20 	bl	8003ce4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001ea8:	f007 f8ad 	bl	8009006 <HAL_I2CEx_ConfigDigitalFilter>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001eb2:	f001 ff17 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200080ac 	.word	0x200080ac
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	00c0eaff 	.word	0x00c0eaff

08001ec8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <MX_I2C3_Init+0x78>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <MX_I2C3_Init+0x7c>)
 8001ed6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f02:	480e      	ldr	r0, [pc, #56]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001f04:	f006 fa92 	bl	800842c <HAL_I2C_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f0e:	f001 fee9 	bl	8003ce4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001f16:	f007 f82b 	bl	8008f70 <HAL_I2CEx_ConfigAnalogFilter>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f20:	f001 fee0 	bl	8003ce4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f24:	2100      	movs	r1, #0
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001f28:	f007 f86d 	bl	8009006 <HAL_I2CEx_ConfigDigitalFilter>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001f32:	f001 fed7 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20007f24 	.word	0x20007f24
 8001f40:	40005c00 	.word	0x40005c00
 8001f44:	00c0eaff 	.word	0x00c0eaff

08001f48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2234      	movs	r2, #52	; 0x34
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d fc49 	bl	800f7ec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <MX_LTDC_Init+0x100>)
 8001f5e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f66:	4b37      	ldr	r3, [pc, #220]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f7a:	2228      	movs	r2, #40	; 0x28
 8001f7c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f80:	2209      	movs	r2, #9
 8001f82:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f86:	2235      	movs	r2, #53	; 0x35
 8001f88:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f8c:	220b      	movs	r2, #11
 8001f8e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f92:	f240 2215 	movw	r2, #533	; 0x215
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f9a:	f240 121b 	movw	r2, #283	; 0x11b
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fa2:	f240 2235 	movw	r2, #565	; 0x235
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001faa:	f240 121d 	movw	r2, #285	; 0x11d
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001fc8:	481e      	ldr	r0, [pc, #120]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fca:	f007 f869 	bl	80090a0 <HAL_LTDC_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001fd4:	f001 fe86 	bl	8003ce4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001fdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001fe0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001fe6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001fea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001fec:	2302      	movs	r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001ff0:	23ff      	movs	r3, #255	; 0xff
 8001ff2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001ff8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ffc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ffe:	2307      	movs	r3, #7
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002002:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002008:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800200e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_LTDC_Init+0xfc>)
 800202e:	f007 f9c9 	bl	80093c4 <HAL_LTDC_ConfigLayer>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002038:	f001 fe54 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3738      	adds	r7, #56	; 0x38
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20008414 	.word	0x20008414
 8002048:	40016800 	.word	0x40016800

0800204c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b092      	sub	sp, #72	; 0x48
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002052:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	222c      	movs	r2, #44	; 0x2c
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f00d fbbc 	bl	800f7ec <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002074:	4b46      	ldr	r3, [pc, #280]	; (8002190 <MX_RTC_Init+0x144>)
 8002076:	4a47      	ldr	r2, [pc, #284]	; (8002194 <MX_RTC_Init+0x148>)
 8002078:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <MX_RTC_Init+0x144>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002080:	4b43      	ldr	r3, [pc, #268]	; (8002190 <MX_RTC_Init+0x144>)
 8002082:	227f      	movs	r2, #127	; 0x7f
 8002084:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002086:	4b42      	ldr	r3, [pc, #264]	; (8002190 <MX_RTC_Init+0x144>)
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <MX_RTC_Init+0x144>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <MX_RTC_Init+0x144>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <MX_RTC_Init+0x144>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800209e:	483c      	ldr	r0, [pc, #240]	; (8002190 <MX_RTC_Init+0x144>)
 80020a0:	f008 fc72 	bl	800a988 <HAL_RTC_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80020aa:	f001 fe1b 	bl	8003ce4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	482f      	ldr	r0, [pc, #188]	; (8002190 <MX_RTC_Init+0x144>)
 80020d2:	f008 fceb 	bl	800aaac <HAL_RTC_SetTime>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80020dc:	f001 fe02 	bl	8003ce4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80020f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fc:	2201      	movs	r2, #1
 80020fe:	4619      	mov	r1, r3
 8002100:	4823      	ldr	r0, [pc, #140]	; (8002190 <MX_RTC_Init+0x144>)
 8002102:	f008 fd91 	bl	800ac28 <HAL_RTC_SetDate>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800210c:	f001 fdea 	bl	8003ce4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002110:	2300      	movs	r3, #0
 8002112:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002114:	2300      	movs	r3, #0
 8002116:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002118:	2300      	movs	r3, #0
 800211a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800213a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	2201      	movs	r2, #1
 8002144:	4619      	mov	r1, r3
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <MX_RTC_Init+0x144>)
 8002148:	f008 fe16 	bl	800ad78 <HAL_RTC_SetAlarm>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8002152:	f001 fdc7 	bl	8003ce4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	2201      	movs	r2, #1
 8002160:	4619      	mov	r1, r3
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <MX_RTC_Init+0x144>)
 8002164:	f008 fe08 	bl	800ad78 <HAL_RTC_SetAlarm>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800216e:	f001 fdb9 	bl	8003ce4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002172:	2202      	movs	r2, #2
 8002174:	2100      	movs	r1, #0
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <MX_RTC_Init+0x144>)
 8002178:	f008 ff88 	bl	800b08c <HAL_RTCEx_SetTimeStamp>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8002182:	f001 fdaf 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	3748      	adds	r7, #72	; 0x48
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200085f4 	.word	0x200085f4
 8002194:	40002800 	.word	0x40002800

08002198 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_SPI2_Init+0x74>)
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <MX_SPI2_Init+0x78>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <MX_SPI2_Init+0x74>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_SPI2_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_SPI2_Init+0x74>)
 80021b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_SPI2_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_SPI2_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_SPI2_Init+0x74>)
 80021c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_SPI2_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_SPI2_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_SPI2_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_SPI2_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_SPI2_Init+0x74>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_SPI2_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_SPI2_Init+0x74>)
 80021f2:	2208      	movs	r2, #8
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_SPI2_Init+0x74>)
 80021f8:	f009 f82f 	bl	800b25a <HAL_SPI_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002202:	f001 fd6f 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20007f70 	.word	0x20007f70
 8002210:	40003800 	.word	0x40003800

08002214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002234:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <MX_TIM1_Init+0xa4>)
 8002236:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002260:	f009 f8a6 	bl	800b3b0 <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800226a:	f001 fd3b 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002272:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800227c:	f009 fa88 	bl	800b790 <HAL_TIM_ConfigClockSource>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002286:	f001 fd2d 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800229c:	f009 fca4 	bl	800bbe8 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022a6:	f001 fd1d 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20008c14 	.word	0x20008c14
 80022b8:	40010000 	.word	0x40010000

080022bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MX_TIM2_Init+0x98>)
 80022dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_TIM2_Init+0x98>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_TIM2_Init+0x98>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_TIM2_Init+0x98>)
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_TIM2_Init+0x98>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM2_Init+0x98>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <MX_TIM2_Init+0x98>)
 8002304:	f009 f854 	bl	800b3b0 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800230e:	f001 fce9 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4619      	mov	r1, r3
 800231e:	480d      	ldr	r0, [pc, #52]	; (8002354 <MX_TIM2_Init+0x98>)
 8002320:	f009 fa36 	bl	800b790 <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800232a:	f001 fcdb 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <MX_TIM2_Init+0x98>)
 800233c:	f009 fc54 	bl	800bbe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002346:	f001 fccd 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20008d24 	.word	0x20008d24

08002358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <MX_TIM3_Init+0x94>)
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <MX_TIM3_Init+0x98>)
 800237a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <MX_TIM3_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <MX_TIM3_Init+0x94>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <MX_TIM3_Init+0x94>)
 800238a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <MX_TIM3_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <MX_TIM3_Init+0x94>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800239c:	4813      	ldr	r0, [pc, #76]	; (80023ec <MX_TIM3_Init+0x94>)
 800239e:	f009 f807 	bl	800b3b0 <HAL_TIM_Base_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023a8:	f001 fc9c 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4619      	mov	r1, r3
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <MX_TIM3_Init+0x94>)
 80023ba:	f009 f9e9 	bl	800b790 <HAL_TIM_ConfigClockSource>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023c4:	f001 fc8e 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_TIM3_Init+0x94>)
 80023d6:	f009 fc07 	bl	800bbe8 <HAL_TIMEx_MasterConfigSynchronization>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023e0:	f001 fc80 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200083c8 	.word	0x200083c8
 80023f0:	40000400 	.word	0x40000400

080023f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <MX_TIM5_Init+0x94>)
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <MX_TIM5_Init+0x98>)
 8002416:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_TIM5_Init+0x94>)
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <MX_TIM5_Init+0x94>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_TIM5_Init+0x94>)
 8002426:	f04f 32ff 	mov.w	r2, #4294967295
 800242a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_TIM5_Init+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <MX_TIM5_Init+0x94>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002438:	4813      	ldr	r0, [pc, #76]	; (8002488 <MX_TIM5_Init+0x94>)
 800243a:	f008 ffb9 	bl	800b3b0 <HAL_TIM_Base_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002444:	f001 fc4e 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4619      	mov	r1, r3
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <MX_TIM5_Init+0x94>)
 8002456:	f009 f99b 	bl	800b790 <HAL_TIM_ConfigClockSource>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002460:	f001 fc40 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_TIM5_Init+0x94>)
 8002472:	f009 fbb9 	bl	800bbe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800247c:	f001 fc32 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20008378 	.word	0x20008378
 800248c:	40000c00 	.word	0x40000c00

08002490 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <MX_TIM8_Init+0xa4>)
 80024b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024da:	4815      	ldr	r0, [pc, #84]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024dc:	f008 ff68 	bl	800b3b0 <HAL_TIM_Base_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80024e6:	f001 fbfd 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4619      	mov	r1, r3
 80024f6:	480e      	ldr	r0, [pc, #56]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024f8:	f009 f94a 	bl	800b790 <HAL_TIM_ConfigClockSource>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002502:	f001 fbef 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM8_Init+0xa0>)
 8002518:	f009 fb66 	bl	800bbe8 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002522:	f001 fbdf 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000805c 	.word	0x2000805c
 8002534:	40010400 	.word	0x40010400

08002538 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <MX_UART7_Init+0x58>)
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <MX_UART7_Init+0x5c>)
 8002540:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_UART7_Init+0x58>)
 8002544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002548:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_UART7_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MX_UART7_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_UART7_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_UART7_Init+0x58>)
 800255e:	220c      	movs	r2, #12
 8002560:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_UART7_Init+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_UART7_Init+0x58>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_UART7_Init+0x58>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_UART7_Init+0x58>)
 8002576:	2200      	movs	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_UART7_Init+0x58>)
 800257c:	f009 fbe0 	bl	800bd40 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002586:	f001 fbad 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20007fd4 	.word	0x20007fd4
 8002594:	40007800 	.word	0x40007800

08002598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <MX_USART1_UART_Init+0x5c>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025dc:	f009 fbb0 	bl	800bd40 <HAL_UART_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025e6:	f001 fb7d 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20008554 	.word	0x20008554
 80025f4:	40011000 	.word	0x40011000

080025f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_USART6_UART_Init+0x58>)
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <MX_USART6_UART_Init+0x5c>)
 8002600:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800263c:	f009 fb80 	bl	800bd40 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002646:	f001 fb4d 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20008c60 	.word	0x20008c60
 8002654:	40011400 	.word	0x40011400

08002658 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
 800266c:	615a      	str	r2, [r3, #20]
 800266e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_FMC_Init+0x98>)
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <MX_FMC_Init+0x9c>)
 8002674:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <MX_FMC_Init+0x98>)
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_FMC_Init+0x98>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <MX_FMC_Init+0x98>)
 8002684:	2204      	movs	r2, #4
 8002686:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_FMC_Init+0x98>)
 800268a:	2210      	movs	r2, #16
 800268c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_FMC_Init+0x98>)
 8002690:	2240      	movs	r2, #64	; 0x40
 8002692:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <MX_FMC_Init+0x98>)
 8002696:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800269a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MX_FMC_Init+0x98>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_FMC_Init+0x98>)
 80026a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_FMC_Init+0x98>)
 80026ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_FMC_Init+0x98>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80026bc:	2307      	movs	r3, #7
 80026be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80026c0:	2304      	movs	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80026c4:	2307      	movs	r3, #7
 80026c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80026c8:	2303      	movs	r3, #3
 80026ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_FMC_Init+0x98>)
 80026da:	f008 fd2d 	bl	800b138 <HAL_SDRAM_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80026e4:	f001 fafe 	bl	8003ce4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20008d70 	.word	0x20008d70
 80026f4:	a0000140 	.word	0xa0000140

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b090      	sub	sp, #64	; 0x40
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270e:	4baf      	ldr	r3, [pc, #700]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4aae      	ldr	r2, [pc, #696]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4bac      	ldr	r3, [pc, #688]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002726:	4ba9      	ldr	r3, [pc, #676]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4aa8      	ldr	r2, [pc, #672]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4ba6      	ldr	r3, [pc, #664]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4ba3      	ldr	r3, [pc, #652]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4aa2      	ldr	r2, [pc, #648]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	4b9d      	ldr	r3, [pc, #628]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a9c      	ldr	r2, [pc, #624]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276e:	4b97      	ldr	r3, [pc, #604]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a96      	ldr	r2, [pc, #600]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b94      	ldr	r3, [pc, #592]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a90      	ldr	r2, [pc, #576]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a84      	ldr	r2, [pc, #528]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80027ce:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a7e      	ldr	r2, [pc, #504]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027e6:	4b79      	ldr	r3, [pc, #484]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a78      	ldr	r2, [pc, #480]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a72      	ldr	r2, [pc, #456]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	2160      	movs	r1, #96	; 0x60
 800281a:	486d      	ldr	r0, [pc, #436]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 800281c:	f005 fdba 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	2120      	movs	r1, #32
 8002824:	486b      	ldr	r0, [pc, #428]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 8002826:	f005 fdb5 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2108      	movs	r1, #8
 800282e:	4869      	ldr	r0, [pc, #420]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 8002830:	f005 fdb0 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	2108      	movs	r1, #8
 8002838:	4867      	ldr	r0, [pc, #412]	; (80029d8 <MX_GPIO_Init+0x2e0>)
 800283a:	f005 fdab 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800283e:	2201      	movs	r2, #1
 8002840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002844:	4865      	ldr	r0, [pc, #404]	; (80029dc <MX_GPIO_Init+0x2e4>)
 8002846:	f005 fda5 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800284a:	2200      	movs	r2, #0
 800284c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002850:	4863      	ldr	r0, [pc, #396]	; (80029e0 <MX_GPIO_Init+0x2e8>)
 8002852:	f005 fd9f 	bl	8008394 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	21c8      	movs	r1, #200	; 0xc8
 800285a:	4862      	ldr	r0, [pc, #392]	; (80029e4 <MX_GPIO_Init+0x2ec>)
 800285c:	f005 fd9a 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002860:	2308      	movs	r3, #8
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002870:	4619      	mov	r1, r3
 8002872:	4857      	ldr	r0, [pc, #348]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 8002874:	f005 fad6 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002878:	2304      	movs	r3, #4
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002888:	2309      	movs	r3, #9
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800288c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002890:	4619      	mov	r1, r3
 8002892:	484f      	ldr	r0, [pc, #316]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 8002894:	f005 fac6 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002898:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028aa:	230b      	movs	r3, #11
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	4619      	mov	r1, r3
 80028b4:	484b      	ldr	r0, [pc, #300]	; (80029e4 <MX_GPIO_Init+0x2ec>)
 80028b6:	f005 fab5 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80028ba:	f643 0323 	movw	r3, #14371	; 0x3823
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028cc:	230a      	movs	r3, #10
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d4:	4619      	mov	r1, r3
 80028d6:	4844      	ldr	r0, [pc, #272]	; (80029e8 <MX_GPIO_Init+0x2f0>)
 80028d8:	f005 faa4 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80028ec:	2308      	movs	r3, #8
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4837      	ldr	r0, [pc, #220]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 80028f8:	f005 fa94 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80028fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800290e:	230c      	movs	r3, #12
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	4834      	ldr	r0, [pc, #208]	; (80029ec <MX_GPIO_Init+0x2f4>)
 800291a:	f005 fa83 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 800291e:	f248 1340 	movw	r3, #33088	; 0x8140
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002930:	4619      	mov	r1, r3
 8002932:	482f      	ldr	r0, [pc, #188]	; (80029f0 <MX_GPIO_Init+0x2f8>)
 8002934:	f005 fa76 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002938:	2360      	movs	r3, #96	; 0x60
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	4820      	ldr	r0, [pc, #128]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 8002950:	f005 fa68 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002964:	230a      	movs	r3, #10
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	4619      	mov	r1, r3
 800296e:	481e      	ldr	r0, [pc, #120]	; (80029e8 <MX_GPIO_Init+0x2f0>)
 8002970:	f005 fa58 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	4619      	mov	r1, r3
 8002988:	481a      	ldr	r0, [pc, #104]	; (80029f4 <MX_GPIO_Init+0x2fc>)
 800298a:	f005 fa4b 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800298e:	2340      	movs	r3, #64	; 0x40
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002992:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a0:	4619      	mov	r1, r3
 80029a2:	480c      	ldr	r0, [pc, #48]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 80029a4:	f005 fa3e 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80029a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ba:	230a      	movs	r3, #10
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c2:	4619      	mov	r1, r3
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <MX_GPIO_Init+0x2f8>)
 80029c6:	f005 fa2d 	bl	8007e24 <HAL_GPIO_Init>
 80029ca:	e015      	b.n	80029f8 <MX_GPIO_Init+0x300>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40022800 	.word	0x40022800
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021c00 	.word	0x40021c00
 80029e4:	40021800 	.word	0x40021800
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80029f8:	23f0      	movs	r3, #240	; 0xf0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a08:	230a      	movs	r3, #10
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4895      	ldr	r0, [pc, #596]	; (8002c68 <MX_GPIO_Init+0x570>)
 8002a14:	f005 fa06 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a32:	4619      	mov	r1, r3
 8002a34:	488d      	ldr	r0, [pc, #564]	; (8002c6c <MX_GPIO_Init+0x574>)
 8002a36:	f005 f9f5 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002a3a:	2328      	movs	r3, #40	; 0x28
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4887      	ldr	r0, [pc, #540]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002a52:	f005 f9e7 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4882      	ldr	r0, [pc, #520]	; (8002c74 <MX_GPIO_Init+0x57c>)
 8002a6c:	f005 f9da 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a70:	2308      	movs	r3, #8
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	4619      	mov	r1, r3
 8002a86:	487c      	ldr	r0, [pc, #496]	; (8002c78 <MX_GPIO_Init+0x580>)
 8002a88:	f005 f9cc 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002a8c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4872      	ldr	r0, [pc, #456]	; (8002c6c <MX_GPIO_Init+0x574>)
 8002aa2:	f005 f9bf 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	486d      	ldr	r0, [pc, #436]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002aba:	f005 f9b3 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4865      	ldr	r0, [pc, #404]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002ada:	f005 f9a3 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002ade:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af0:	4619      	mov	r1, r3
 8002af2:	4862      	ldr	r0, [pc, #392]	; (8002c7c <MX_GPIO_Init+0x584>)
 8002af4:	f005 f996 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4855      	ldr	r0, [pc, #340]	; (8002c68 <MX_GPIO_Init+0x570>)
 8002b12:	f005 f987 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002b16:	f645 6340 	movw	r3, #24128	; 0x5e40
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4853      	ldr	r0, [pc, #332]	; (8002c7c <MX_GPIO_Init+0x584>)
 8002b30:	f005 f978 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4847      	ldr	r0, [pc, #284]	; (8002c68 <MX_GPIO_Init+0x570>)
 8002b4c:	f005 f96a 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002b50:	2310      	movs	r3, #16
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b60:	230a      	movs	r3, #10
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4844      	ldr	r0, [pc, #272]	; (8002c7c <MX_GPIO_Init+0x584>)
 8002b6c:	f005 f95a 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002b70:	23c8      	movs	r3, #200	; 0xc8
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4839      	ldr	r0, [pc, #228]	; (8002c6c <MX_GPIO_Init+0x574>)
 8002b88:	f005 f94c 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b9c:	230a      	movs	r3, #10
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4833      	ldr	r0, [pc, #204]	; (8002c74 <MX_GPIO_Init+0x57c>)
 8002ba8:	f005 f93c 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002bac:	2332      	movs	r3, #50	; 0x32
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bbc:	230b      	movs	r3, #11
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	482b      	ldr	r0, [pc, #172]	; (8002c74 <MX_GPIO_Init+0x57c>)
 8002bc8:	f005 f92c 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bdc:	2309      	movs	r3, #9
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be4:	4619      	mov	r1, r3
 8002be6:	4826      	ldr	r0, [pc, #152]	; (8002c80 <MX_GPIO_Init+0x588>)
 8002be8:	f005 f91c 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002bec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bfe:	2309      	movs	r3, #9
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c06:	4619      	mov	r1, r3
 8002c08:	4819      	ldr	r0, [pc, #100]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002c0a:	f005 f90b 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c0e:	2386      	movs	r3, #134	; 0x86
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c1e:	230b      	movs	r3, #11
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c26:	4619      	mov	r1, r3
 8002c28:	4816      	ldr	r0, [pc, #88]	; (8002c84 <MX_GPIO_Init+0x58c>)
 8002c2a:	f005 f8fb 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002c2e:	2328      	movs	r3, #40	; 0x28
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c3e:	230a      	movs	r3, #10
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c46:	4619      	mov	r1, r3
 8002c48:	480e      	ldr	r0, [pc, #56]	; (8002c84 <MX_GPIO_Init+0x58c>)
 8002c4a:	f005 f8eb 	bl	8007e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2105      	movs	r1, #5
 8002c52:	2028      	movs	r0, #40	; 0x28
 8002c54:	f004 f9f0 	bl	8007038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c58:	2028      	movs	r0, #40	; 0x28
 8002c5a:	f004 fa09 	bl	8007070 <HAL_NVIC_EnableIRQ>

}
 8002c5e:	bf00      	nop
 8002c60:	3740      	adds	r7, #64	; 0x40
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40020c00 	.word	0x40020c00
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40022800 	.word	0x40022800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020000 	.word	0x40020000

08002c88 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 8002ca8:	2314      	movs	r3, #20
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  /* Infinite loop */
  for(;;)
  {
	  if(victory == 1)
 8002cb8:	4ba5      	ldr	r3, [pc, #660]	; (8002f50 <fonction_init+0x2b0>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d11a      	bne.n	8002cf6 <fonction_init+0x56>
	  {
	    	osThreadTerminate(task_victoryHandle);
 8002cc0:	4ba4      	ldr	r3, [pc, #656]	; (8002f54 <fonction_init+0x2b4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f00a f97e 	bl	800cfc6 <osThreadTerminate>
	    	osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8002cca:	4ba3      	ldr	r3, [pc, #652]	; (8002f58 <fonction_init+0x2b8>)
 8002ccc:	f107 040c 	add.w	r4, r7, #12
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    	affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00a f922 	bl	800cf2e <osThreadCreate>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4a9b      	ldr	r2, [pc, #620]	; (8002f5c <fonction_init+0x2bc>)
 8002cee:	6013      	str	r3, [r2, #0]
	    	victory = 0;
 8002cf0:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <fonction_init+0x2b0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
	  }
	  cpt_lignesw = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  cpt_colonnesw = 1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	  for (i = 0; i < 3; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002d08:	e115      	b.n	8002f36 <fonction_init+0x296>
	  {
		  for (j = 0; j < 4; j++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002d10:	e0f6      	b.n	8002f00 <fonction_init+0x260>
		  {
			  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8002d12:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <fonction_init+0x2c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a fdbc 	bl	800d898 <xQueueSemaphoreTake>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 8002d20:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d28:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002d2c:	b294      	uxth	r4, r2
 8002d2e:	488d      	ldr	r0, [pc, #564]	; (8002f64 <fonction_init+0x2c4>)
 8002d30:	461a      	mov	r2, r3
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	0053      	lsls	r3, r2, #1
 8002d38:	461a      	mov	r2, r3
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	4403      	add	r3, r0
 8002d46:	4622      	mov	r2, r4
 8002d48:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 8002d4a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d52:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002d56:	b294      	uxth	r4, r2
 8002d58:	4882      	ldr	r0, [pc, #520]	; (8002f64 <fonction_init+0x2c4>)
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	0053      	lsls	r3, r2, #1
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4403      	add	r3, r0
 8002d70:	3302      	adds	r3, #2
 8002d72:	4622      	mov	r2, r4
 8002d74:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 8002d76:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d7e:	4879      	ldr	r0, [pc, #484]	; (8002f64 <fonction_init+0x2c4>)
 8002d80:	461a      	mov	r2, r3
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	0053      	lsls	r3, r2, #1
 8002d88:	461a      	mov	r2, r3
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	4403      	add	r3, r0
 8002d96:	3305      	adds	r3, #5
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 8002d9c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002da0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002da4:	486f      	ldr	r0, [pc, #444]	; (8002f64 <fonction_init+0x2c4>)
 8002da6:	461a      	mov	r2, r3
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	441a      	add	r2, r3
 8002dac:	0053      	lsls	r3, r2, #1
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	4403      	add	r3, r0
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	2209      	movs	r2, #9
 8002dc0:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 8002dc2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002dc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dca:	4866      	ldr	r0, [pc, #408]	; (8002f64 <fonction_init+0x2c4>)
 8002dcc:	461a      	mov	r2, r3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	0053      	lsls	r3, r2, #1
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	4403      	add	r3, r0
 8002de2:	3307      	adds	r3, #7
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
			  // init blue pieces
			  cpt_lignesb = cpt_lignesw + 5;
 8002de8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dec:	3305      	adds	r3, #5
 8002dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 8002df2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <fonction_init+0x16a>
 8002e00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e04:	3301      	adds	r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e003      	b.n	8002e12 <fonction_init+0x172>
 8002e0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 8002e16:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002e22:	b294      	uxth	r4, r2
 8002e24:	484f      	ldr	r0, [pc, #316]	; (8002f64 <fonction_init+0x2c4>)
 8002e26:	461a      	mov	r2, r3
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	0053      	lsls	r3, r2, #1
 8002e2e:	461a      	mov	r2, r3
 8002e30:	460b      	mov	r3, r1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4413      	add	r3, r2
 8002e3a:	4403      	add	r3, r0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 8002e40:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002e4c:	b294      	uxth	r4, r2
 8002e4e:	4845      	ldr	r0, [pc, #276]	; (8002f64 <fonction_init+0x2c4>)
 8002e50:	461a      	mov	r2, r3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	0053      	lsls	r3, r2, #1
 8002e58:	461a      	mov	r2, r3
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	4413      	add	r3, r2
 8002e64:	4403      	add	r3, r0
 8002e66:	3302      	adds	r3, #2
 8002e68:	4622      	mov	r2, r4
 8002e6a:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 8002e6c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e74:	483b      	ldr	r0, [pc, #236]	; (8002f64 <fonction_init+0x2c4>)
 8002e76:	461a      	mov	r2, r3
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	0053      	lsls	r3, r2, #1
 8002e7e:	461a      	mov	r2, r3
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	3305      	adds	r3, #5
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 8002e92:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e9a:	4832      	ldr	r0, [pc, #200]	; (8002f64 <fonction_init+0x2c4>)
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	0053      	lsls	r3, r2, #1
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4413      	add	r3, r2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2209      	movs	r2, #9
 8002eb6:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 8002eb8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002ebc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ec0:	4828      	ldr	r0, [pc, #160]	; (8002f64 <fonction_init+0x2c4>)
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	0092      	lsls	r2, r2, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	0053      	lsls	r3, r2, #1
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4403      	add	r3, r0
 8002ed8:	3307      	adds	r3, #7
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
			  xSemaphoreGive(mutexChessboard);
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <fonction_init+0x2c0>)
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f00a faea 	bl	800d4c0 <xQueueGenericSend>
			  cpt_colonnesw += 2;
 8002eec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  for (j = 0; j < 4; j++)
 8002ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002efa:	3301      	adds	r3, #1
 8002efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002f00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	f67f af04 	bls.w	8002d12 <fonction_init+0x72>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 8002f0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  cpt_lignesw++;
 8002f22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f26:	3301      	adds	r3, #1
 8002f28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  for (i = 0; i < 3; i++)
 8002f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f30:	3301      	adds	r3, #1
 8002f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f67f aee5 	bls.w	8002d0a <fonction_init+0x6a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f46:	4618      	mov	r0, r3
 8002f48:	f00b f926 	bl	800e198 <vTaskDelayUntil>
	  if(victory == 1)
 8002f4c:	e6b4      	b.n	8002cb8 <fonction_init+0x18>
 8002f4e:	bf00      	nop
 8002f50:	2000038b 	.word	0x2000038b
 8002f54:	200085f0 	.word	0x200085f0
 8002f58:	0800fa18 	.word	0x0800fa18
 8002f5c:	20008508 	.word	0x20008508
 8002f60:	20008da4 	.word	0x20008da4
 8002f64:	200080f8 	.word	0x200080f8

08002f68 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 8002f70:	2332      	movs	r3, #50	; 0x32
 8002f72:	61bb      	str	r3, [r7, #24]
	const uint8_t pasX 			= 30;
 8002f74:	231e      	movs	r3, #30
 8002f76:	75fb      	strb	r3, [r7, #23]
	const uint8_t pasY 			= 30;
 8002f78:	231e      	movs	r3, #30
 8002f7a:	75bb      	strb	r3, [r7, #22]
	const uint8_t margeX		= 14;
 8002f7c:	230e      	movs	r3, #14
 8002f7e:	757b      	strb	r3, [r7, #21]
	const uint8_t margeY		= 14;
 8002f80:	230e      	movs	r3, #14
 8002f82:	753b      	strb	r3, [r7, #20]
	uint16_t pointeurX 			= margeX + pasX / 2;
 8002f84:	7d7b      	ldrb	r3, [r7, #21]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	827b      	strh	r3, [r7, #18]
	uint16_t pointeurY 			= margeY + pasY / 2;
 8002f94:	7d3b      	ldrb	r3, [r7, #20]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	7dbb      	ldrb	r3, [r7, #22]
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	823b      	strh	r3, [r7, #16]
	uint8_t color				= 2;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t i, j;
	uint8_t filled = 0, possible = 0, dame = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73bb      	strb	r3, [r7, #14]
 8002fac:	2300      	movs	r3, #0
 8002fae:	737b      	strb	r3, [r7, #13]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	733b      	strb	r3, [r7, #12]
	victory = 1;
 8002fb4:	4b97      	ldr	r3, [pc, #604]	; (8003214 <fonction_affichage+0x2ac>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  if (victory == 1)
 8002fba:	4b96      	ldr	r3, [pc, #600]	; (8003214 <fonction_affichage+0x2ac>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <fonction_affichage+0x6a>
	  {
		  osThreadTerminate(task_initHandle);
 8002fc2:	4b95      	ldr	r3, [pc, #596]	; (8003218 <fonction_affichage+0x2b0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f009 fffd 	bl	800cfc6 <osThreadTerminate>
		  victory = 0;
 8002fcc:	4b91      	ldr	r3, [pc, #580]	; (8003214 <fonction_affichage+0x2ac>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8002fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fd6:	4891      	ldr	r0, [pc, #580]	; (800321c <fonction_affichage+0x2b4>)
 8002fd8:	f005 f9f5 	bl	80083c6 <HAL_GPIO_TogglePin>
	  // Clear que pour certains changements
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8002fdc:	4b90      	ldr	r3, [pc, #576]	; (8003220 <fonction_affichage+0x2b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f00a fc57 	bl	800d898 <xQueueSemaphoreTake>
	  if(change == 1)
 8002fea:	4b8e      	ldr	r3, [pc, #568]	; (8003224 <fonction_affichage+0x2bc>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <fonction_affichage+0x90>
	  {
		  BSP_LCD_Clear(0);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f001 f98a 	bl	800430c <BSP_LCD_Clear>
	  }
	  xSemaphoreGive(mutexChessboard);
 8002ff8:	4b89      	ldr	r3, [pc, #548]	; (8003220 <fonction_affichage+0x2b8>)
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	f00a fa5d 	bl	800d4c0 <xQueueGenericSend>
	  BSP_LCD_FillCircle(margeX, margeY, 3);
 8003006:	7d7b      	ldrb	r3, [r7, #21]
 8003008:	b29b      	uxth	r3, r3
 800300a:	7d3a      	ldrb	r2, [r7, #20]
 800300c:	b291      	uxth	r1, r2
 800300e:	2203      	movs	r2, #3
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fd83 	bl	8004b1c <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(margeX + pasX, margeY, 3);
 8003016:	7d7b      	ldrb	r3, [r7, #21]
 8003018:	b29a      	uxth	r2, r3
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4413      	add	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	7d3a      	ldrb	r2, [r7, #20]
 8003024:	b291      	uxth	r1, r2
 8003026:	2203      	movs	r2, #3
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fd77 	bl	8004b1c <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(margeX, margeY  + pasY, 3);
 800302e:	7d7b      	ldrb	r3, [r7, #21]
 8003030:	b298      	uxth	r0, r3
 8003032:	7d3b      	ldrb	r3, [r7, #20]
 8003034:	b29a      	uxth	r2, r3
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4413      	add	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	2203      	movs	r2, #3
 8003040:	4619      	mov	r1, r3
 8003042:	f001 fd6b 	bl	8004b1c <BSP_LCD_FillCircle>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003046:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800304a:	f001 f915 	bl	8004278 <BSP_LCD_SetBackColor>
	  if(isTurn == 0)
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <fonction_affichage+0x2c0>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <fonction_affichage+0x11c>
	  {
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003056:	f04f 30ff 	mov.w	r0, #4294967295
 800305a:	f001 f8f5 	bl	8004248 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(3 * margeX + 8 * pasX, margeY, (uint8_t *) "Au tour du joueur blanc", LEFT_MODE);
 800305e:	7d7b      	ldrb	r3, [r7, #21]
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	0052      	lsls	r2, r2, #1
 8003066:	4413      	add	r3, r2
 8003068:	b29a      	uxth	r2, r3
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	b29b      	uxth	r3, r3
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	b29b      	uxth	r3, r3
 8003072:	4413      	add	r3, r2
 8003074:	b298      	uxth	r0, r3
 8003076:	7d3b      	ldrb	r3, [r7, #20]
 8003078:	b299      	uxth	r1, r3
 800307a:	2303      	movs	r3, #3
 800307c:	4a6b      	ldr	r2, [pc, #428]	; (800322c <fonction_affichage+0x2c4>)
 800307e:	f001 f9b1 	bl	80043e4 <BSP_LCD_DisplayStringAt>
 8003082:	e01a      	b.n	80030ba <fonction_affichage+0x152>
	  }
	  else
	  {
		  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8003084:	486a      	ldr	r0, [pc, #424]	; (8003230 <fonction_affichage+0x2c8>)
 8003086:	f001 f8df 	bl	8004248 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(3 * margeX + 8 * pasX, margeY + 8 * pasY, (uint8_t *) "Au tour du joueur bleu", LEFT_MODE);
 800308a:	7d7b      	ldrb	r3, [r7, #21]
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	0052      	lsls	r2, r2, #1
 8003092:	4413      	add	r3, r2
 8003094:	b29a      	uxth	r2, r3
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	b29b      	uxth	r3, r3
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	b29b      	uxth	r3, r3
 800309e:	4413      	add	r3, r2
 80030a0:	b298      	uxth	r0, r3
 80030a2:	7d3b      	ldrb	r3, [r7, #20]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	b299      	uxth	r1, r3
 80030b2:	2303      	movs	r3, #3
 80030b4:	4a5f      	ldr	r2, [pc, #380]	; (8003234 <fonction_affichage+0x2cc>)
 80030b6:	f001 f995 	bl	80043e4 <BSP_LCD_DisplayStringAt>
	  }
	  for (i = 0; i < 8; i++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e183      	b.n	80033c8 <fonction_affichage+0x460>
	  {
		  for (j = 0; j < 8; j++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	77bb      	strb	r3, [r7, #30]
 80030c4:	e179      	b.n	80033ba <fonction_affichage+0x452>
		  {
			  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80030c6:	4b56      	ldr	r3, [pc, #344]	; (8003220 <fonction_affichage+0x2b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f04f 31ff 	mov.w	r1, #4294967295
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00a fbe2 	bl	800d898 <xQueueSemaphoreTake>
			  filled = chessboard[i][j].isFilled;
 80030d4:	7ff9      	ldrb	r1, [r7, #31]
 80030d6:	7fbb      	ldrb	r3, [r7, #30]
 80030d8:	4857      	ldr	r0, [pc, #348]	; (8003238 <fonction_affichage+0x2d0>)
 80030da:	461a      	mov	r2, r3
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	441a      	add	r2, r3
 80030e0:	0053      	lsls	r3, r2, #1
 80030e2:	461a      	mov	r2, r3
 80030e4:	460b      	mov	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	4413      	add	r3, r2
 80030ee:	4403      	add	r3, r0
 80030f0:	3305      	adds	r3, #5
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	73bb      	strb	r3, [r7, #14]
			  possible = chessboard[i][j].isPossible;
 80030f6:	7ff9      	ldrb	r1, [r7, #31]
 80030f8:	7fbb      	ldrb	r3, [r7, #30]
 80030fa:	484f      	ldr	r0, [pc, #316]	; (8003238 <fonction_affichage+0x2d0>)
 80030fc:	461a      	mov	r2, r3
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	441a      	add	r2, r3
 8003102:	0053      	lsls	r3, r2, #1
 8003104:	461a      	mov	r2, r3
 8003106:	460b      	mov	r3, r1
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	4413      	add	r3, r2
 8003110:	4403      	add	r3, r0
 8003112:	3304      	adds	r3, #4
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	737b      	strb	r3, [r7, #13]
			  dame = chessboard[i][j].isDame;
 8003118:	7ff9      	ldrb	r1, [r7, #31]
 800311a:	7fbb      	ldrb	r3, [r7, #30]
 800311c:	4846      	ldr	r0, [pc, #280]	; (8003238 <fonction_affichage+0x2d0>)
 800311e:	461a      	mov	r2, r3
 8003120:	0092      	lsls	r2, r2, #2
 8003122:	441a      	add	r2, r3
 8003124:	0053      	lsls	r3, r2, #1
 8003126:	461a      	mov	r2, r3
 8003128:	460b      	mov	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4413      	add	r3, r2
 8003132:	4403      	add	r3, r0
 8003134:	3306      	adds	r3, #6
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	733b      	strb	r3, [r7, #12]
			  xSemaphoreGive(mutexChessboard);
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <fonction_affichage+0x2b8>)
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	f00a f9bc 	bl	800d4c0 <xQueueGenericSend>
			  // Case avec un pion
			  if ( filled != 0)
 8003148:	7bbb      	ldrb	r3, [r7, #14]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80d2 	beq.w	80032f4 <fonction_affichage+0x38c>
			  {
				  color = chessboard[i][j].piece_color;
 8003150:	7ff9      	ldrb	r1, [r7, #31]
 8003152:	7fbb      	ldrb	r3, [r7, #30]
 8003154:	4838      	ldr	r0, [pc, #224]	; (8003238 <fonction_affichage+0x2d0>)
 8003156:	461a      	mov	r2, r3
 8003158:	0092      	lsls	r2, r2, #2
 800315a:	441a      	add	r2, r3
 800315c:	0053      	lsls	r3, r2, #1
 800315e:	461a      	mov	r2, r3
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	4413      	add	r3, r2
 800316a:	4403      	add	r3, r0
 800316c:	3307      	adds	r3, #7
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	73fb      	strb	r3, [r7, #15]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8003172:	4b32      	ldr	r3, [pc, #200]	; (800323c <fonction_affichage+0x2d4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f04f 31ff 	mov.w	r1, #4294967295
 800317a:	4618      	mov	r0, r3
 800317c:	f00a fb8c 	bl	800d898 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d103      	bne.n	800318e <fonction_affichage+0x226>
 8003186:	482a      	ldr	r0, [pc, #168]	; (8003230 <fonction_affichage+0x2c8>)
 8003188:	f001 f85e 	bl	8004248 <BSP_LCD_SetTextColor>
 800318c:	e006      	b.n	800319c <fonction_affichage+0x234>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <fonction_affichage+0x234>
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	f001 f856 	bl	8004248 <BSP_LCD_SetTextColor>
			      pointeurX = margeX + pasX / 2 + j * pasX;
 800319c:	7d7b      	ldrb	r3, [r7, #21]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	7fbb      	ldrb	r3, [r7, #30]
 80031ae:	b299      	uxth	r1, r3
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	fb11 f303 	smulbb	r3, r1, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	827b      	strh	r3, [r7, #18]
			      pointeurY = margeY + pasY / 2 + i * pasY;
 80031be:	7d3b      	ldrb	r3, [r7, #20]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	7dbb      	ldrb	r3, [r7, #22]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	7ffb      	ldrb	r3, [r7, #31]
 80031d0:	b299      	uxth	r1, r3
 80031d2:	7dbb      	ldrb	r3, [r7, #22]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	fb11 f303 	smulbb	r3, r1, r3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4413      	add	r3, r2
 80031de:	823b      	strh	r3, [r7, #16]
			      if (dame == 0) BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 80031e0:	7b3b      	ldrb	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d12c      	bne.n	8003240 <fonction_affichage+0x2d8>
 80031e6:	7ff9      	ldrb	r1, [r7, #31]
 80031e8:	7fbb      	ldrb	r3, [r7, #30]
 80031ea:	4813      	ldr	r0, [pc, #76]	; (8003238 <fonction_affichage+0x2d0>)
 80031ec:	461a      	mov	r2, r3
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	0053      	lsls	r3, r2, #1
 80031f4:	461a      	mov	r2, r3
 80031f6:	460b      	mov	r3, r1
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	4403      	add	r3, r0
 8003202:	3308      	adds	r3, #8
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b29a      	uxth	r2, r3
 8003208:	8a39      	ldrh	r1, [r7, #16]
 800320a:	8a7b      	ldrh	r3, [r7, #18]
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fc85 	bl	8004b1c <BSP_LCD_FillCircle>
 8003212:	e067      	b.n	80032e4 <fonction_affichage+0x37c>
 8003214:	2000038b 	.word	0x2000038b
 8003218:	20008058 	.word	0x20008058
 800321c:	40021c00 	.word	0x40021c00
 8003220:	20008da4 	.word	0x20008da4
 8003224:	20000028 	.word	0x20000028
 8003228:	2000038a 	.word	0x2000038a
 800322c:	0800fa88 	.word	0x0800fa88
 8003230:	ff0000ff 	.word	0xff0000ff
 8003234:	0800faa0 	.word	0x0800faa0
 8003238:	200080f8 	.word	0x200080f8
 800323c:	200085d8 	.word	0x200085d8
			      else BSP_LCD_FillRect(pointeurX - chessboard[i][j].rayon, pointeurY - chessboard[i][j].rayon, chessboard[i][j].rayon * 2, chessboard[i][j].rayon * 2);
 8003240:	7ff9      	ldrb	r1, [r7, #31]
 8003242:	7fbb      	ldrb	r3, [r7, #30]
 8003244:	486e      	ldr	r0, [pc, #440]	; (8003400 <fonction_affichage+0x498>)
 8003246:	461a      	mov	r2, r3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	441a      	add	r2, r3
 800324c:	0053      	lsls	r3, r2, #1
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	4403      	add	r3, r0
 800325c:	3308      	adds	r3, #8
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	8a7a      	ldrh	r2, [r7, #18]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	b298      	uxth	r0, r3
 8003268:	7ff9      	ldrb	r1, [r7, #31]
 800326a:	7fbb      	ldrb	r3, [r7, #30]
 800326c:	4c64      	ldr	r4, [pc, #400]	; (8003400 <fonction_affichage+0x498>)
 800326e:	461a      	mov	r2, r3
 8003270:	0092      	lsls	r2, r2, #2
 8003272:	441a      	add	r2, r3
 8003274:	0053      	lsls	r3, r2, #1
 8003276:	461a      	mov	r2, r3
 8003278:	460b      	mov	r3, r1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	4423      	add	r3, r4
 8003284:	3308      	adds	r3, #8
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	8a3a      	ldrh	r2, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	b29c      	uxth	r4, r3
 8003290:	7ff9      	ldrb	r1, [r7, #31]
 8003292:	7fbb      	ldrb	r3, [r7, #30]
 8003294:	4d5a      	ldr	r5, [pc, #360]	; (8003400 <fonction_affichage+0x498>)
 8003296:	461a      	mov	r2, r3
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	441a      	add	r2, r3
 800329c:	0053      	lsls	r3, r2, #1
 800329e:	461a      	mov	r2, r3
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	442b      	add	r3, r5
 80032ac:	3308      	adds	r3, #8
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	b29d      	uxth	r5, r3
 80032b6:	7ff9      	ldrb	r1, [r7, #31]
 80032b8:	7fbb      	ldrb	r3, [r7, #30]
 80032ba:	4e51      	ldr	r6, [pc, #324]	; (8003400 <fonction_affichage+0x498>)
 80032bc:	461a      	mov	r2, r3
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	0053      	lsls	r3, r2, #1
 80032c4:	461a      	mov	r2, r3
 80032c6:	460b      	mov	r3, r1
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	4433      	add	r3, r6
 80032d2:	3308      	adds	r3, #8
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	b29b      	uxth	r3, r3
 80032dc:	462a      	mov	r2, r5
 80032de:	4621      	mov	r1, r4
 80032e0:	f001 fba2 	bl	8004a28 <BSP_LCD_FillRect>
				  xSemaphoreGive(mutexEcran);
 80032e4:	4b47      	ldr	r3, [pc, #284]	; (8003404 <fonction_affichage+0x49c>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	2300      	movs	r3, #0
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	f00a f8e7 	bl	800d4c0 <xQueueGenericSend>
 80032f2:	e05f      	b.n	80033b4 <fonction_affichage+0x44c>
			  }
			  //Case possible
			  else if (possible != 0)
 80032f4:	7b7b      	ldrb	r3, [r7, #13]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d05c      	beq.n	80033b4 <fonction_affichage+0x44c>
			  {
				  if (change == 1) // Il y a eu une deselection, reinitialisation des possibles et pas d'affichage
 80032fa:	4b43      	ldr	r3, [pc, #268]	; (8003408 <fonction_affichage+0x4a0>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d11f      	bne.n	8003342 <fonction_affichage+0x3da>
				  {
					  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8003302:	4b42      	ldr	r3, [pc, #264]	; (800340c <fonction_affichage+0x4a4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f04f 31ff 	mov.w	r1, #4294967295
 800330a:	4618      	mov	r0, r3
 800330c:	f00a fac4 	bl	800d898 <xQueueSemaphoreTake>
					  chessboard[i][j].isPossible = 0;
 8003310:	7ff9      	ldrb	r1, [r7, #31]
 8003312:	7fbb      	ldrb	r3, [r7, #30]
 8003314:	483a      	ldr	r0, [pc, #232]	; (8003400 <fonction_affichage+0x498>)
 8003316:	461a      	mov	r2, r3
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	441a      	add	r2, r3
 800331c:	0053      	lsls	r3, r2, #1
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	4403      	add	r3, r0
 800332c:	3304      	adds	r3, #4
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
					  xSemaphoreGive(mutexChessboard);
 8003332:	4b36      	ldr	r3, [pc, #216]	; (800340c <fonction_affichage+0x4a4>)
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	2200      	movs	r2, #0
 800333a:	2100      	movs	r1, #0
 800333c:	f00a f8c0 	bl	800d4c0 <xQueueGenericSend>
 8003340:	e038      	b.n	80033b4 <fonction_affichage+0x44c>
				  }
				  else
				  {
					  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <fonction_affichage+0x49c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f04f 31ff 	mov.w	r1, #4294967295
 800334a:	4618      	mov	r0, r3
 800334c:	f00a faa4 	bl	800d898 <xQueueSemaphoreTake>
					  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003350:	482f      	ldr	r0, [pc, #188]	; (8003410 <fonction_affichage+0x4a8>)
 8003352:	f000 ff79 	bl	8004248 <BSP_LCD_SetTextColor>
				      pointeurX = margeX + pasX / 2 + j * pasX;
 8003356:	7d7b      	ldrb	r3, [r7, #21]
 8003358:	b29a      	uxth	r2, r3
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	b29b      	uxth	r3, r3
 8003362:	4413      	add	r3, r2
 8003364:	b29a      	uxth	r2, r3
 8003366:	7fbb      	ldrb	r3, [r7, #30]
 8003368:	b299      	uxth	r1, r3
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	b29b      	uxth	r3, r3
 800336e:	fb11 f303 	smulbb	r3, r1, r3
 8003372:	b29b      	uxth	r3, r3
 8003374:	4413      	add	r3, r2
 8003376:	827b      	strh	r3, [r7, #18]
				      pointeurY = margeY + pasY / 2 + i * pasY;
 8003378:	7d3b      	ldrb	r3, [r7, #20]
 800337a:	b29a      	uxth	r2, r3
 800337c:	7dbb      	ldrb	r3, [r7, #22]
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	4413      	add	r3, r2
 8003386:	b29a      	uxth	r2, r3
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	b299      	uxth	r1, r3
 800338c:	7dbb      	ldrb	r3, [r7, #22]
 800338e:	b29b      	uxth	r3, r3
 8003390:	fb11 f303 	smulbb	r3, r1, r3
 8003394:	b29b      	uxth	r3, r3
 8003396:	4413      	add	r3, r2
 8003398:	823b      	strh	r3, [r7, #16]
					  BSP_LCD_FillCircle(pointeurX, pointeurY, 9);
 800339a:	8a39      	ldrh	r1, [r7, #16]
 800339c:	8a7b      	ldrh	r3, [r7, #18]
 800339e:	2209      	movs	r2, #9
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fbbb 	bl	8004b1c <BSP_LCD_FillCircle>
					  xSemaphoreGive(mutexEcran);
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <fonction_affichage+0x49c>)
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	2300      	movs	r3, #0
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	f00a f886 	bl	800d4c0 <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 80033b4:	7fbb      	ldrb	r3, [r7, #30]
 80033b6:	3301      	adds	r3, #1
 80033b8:	77bb      	strb	r3, [r7, #30]
 80033ba:	7fbb      	ldrb	r3, [r7, #30]
 80033bc:	2b07      	cmp	r3, #7
 80033be:	f67f ae82 	bls.w	80030c6 <fonction_affichage+0x15e>
	  for (i = 0; i < 8; i++)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	3301      	adds	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	7ffb      	ldrb	r3, [r7, #31]
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	f67f ae78 	bls.w	80030c0 <fonction_affichage+0x158>
				  }

			  }
		  }
	  }
	xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <fonction_affichage+0x4a4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295
 80033d8:	4618      	mov	r0, r3
 80033da:	f00a fa5d 	bl	800d898 <xQueueSemaphoreTake>
	change = 0; // S'il y avait des changements, ils on ete pris en compte
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <fonction_affichage+0x4a0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
	 xSemaphoreGive(mutexChessboard);
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <fonction_affichage+0x4a4>)
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	2300      	movs	r3, #0
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	f00a f867 	bl	800d4c0 <xQueueGenericSend>

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80033f2:	f107 0308 	add.w	r3, r7, #8
 80033f6:	69b9      	ldr	r1, [r7, #24]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f00a fecd 	bl	800e198 <vTaskDelayUntil>
	  if (victory == 1)
 80033fe:	e5dc      	b.n	8002fba <fonction_affichage+0x52>
 8003400:	200080f8 	.word	0x200080f8
 8003404:	200085d8 	.word	0x200085d8
 8003408:	20000028 	.word	0x20000028
 800340c:	20008da4 	.word	0x20008da4
 8003410:	ffff0000 	.word	0xffff0000

08003414 <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b090      	sub	sp, #64	; 0x40
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 800341c:	2364      	movs	r3, #100	; 0x64
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003426:	2300      	movs	r3, #0
 8003428:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t line = 0, col = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003432:	2300      	movs	r3, #0
 8003434:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	const uint8_t pas 			= 30;
 8003438:	231e      	movs	r3, #30
 800343a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	const uint8_t marge			= 15;
 800343e:	230f      	movs	r3, #15
 8003440:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t selected 			= 0;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t line_selected		= 8;
 800344a:	2308      	movs	r3, #8
 800344c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t col_selected		= 8;
 8003450:	2308      	movs	r3, #8
 8003452:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t message[1];
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 8003456:	489e      	ldr	r0, [pc, #632]	; (80036d0 <fonction_select+0x2bc>)
 8003458:	f002 f880 	bl	800555c <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 800345c:	4b9c      	ldr	r3, [pc, #624]	; (80036d0 <fonction_select+0x2bc>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8247 	beq.w	80038f4 <fonction_select+0x4e0>
	  {
		  posx = TS_State.touchX[0];
 8003466:	4b9a      	ldr	r3, [pc, #616]	; (80036d0 <fonction_select+0x2bc>)
 8003468:	885b      	ldrh	r3, [r3, #2]
 800346a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  posy = TS_State.touchY[0];
 800346e:	4b98      	ldr	r3, [pc, #608]	; (80036d0 <fonction_select+0x2bc>)
 8003470:	899b      	ldrh	r3, [r3, #12]
 8003472:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		  col = (posx - marge) / pas;
 8003476:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800347a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003484:	fb92 f3f3 	sdiv	r3, r2, r3
 8003488:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  line = (posy - marge) / pas;
 800348c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003490:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003494:	1ad2      	subs	r2, r2, r3
 8003496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800349a:	fb92 f3f3 	sdiv	r3, r2, r3
 800349e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80034a2:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <fonction_select+0x2c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f04f 31ff 	mov.w	r1, #4294967295
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00a f9f4 	bl	800d898 <xQueueSemaphoreTake>
		  // Selection d'un pion
		  if(chessboard[line][col].isFilled && (chessboard[line][col].piece_color == isTurn))
 80034b0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80034b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034b8:	4887      	ldr	r0, [pc, #540]	; (80036d8 <fonction_select+0x2c4>)
 80034ba:	461a      	mov	r2, r3
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	441a      	add	r2, r3
 80034c0:	0053      	lsls	r3, r2, #1
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	4403      	add	r3, r0
 80034d0:	3305      	adds	r3, #5
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808d 	beq.w	80035f4 <fonction_select+0x1e0>
 80034da:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80034de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034e2:	487d      	ldr	r0, [pc, #500]	; (80036d8 <fonction_select+0x2c4>)
 80034e4:	461a      	mov	r2, r3
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	0053      	lsls	r3, r2, #1
 80034ec:	461a      	mov	r2, r3
 80034ee:	460b      	mov	r3, r1
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	4403      	add	r3, r0
 80034fa:	3307      	adds	r3, #7
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	4b77      	ldr	r3, [pc, #476]	; (80036dc <fonction_select+0x2c8>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d176      	bne.n	80035f4 <fonction_select+0x1e0>
		  {
			  // Aucun pion n'etait selectionne
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 8003506:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800350a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800350e:	4872      	ldr	r0, [pc, #456]	; (80036d8 <fonction_select+0x2c4>)
 8003510:	461a      	mov	r2, r3
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	441a      	add	r2, r3
 8003516:	0053      	lsls	r3, r2, #1
 8003518:	461a      	mov	r2, r3
 800351a:	460b      	mov	r3, r1
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	4413      	add	r3, r2
 8003524:	4403      	add	r3, r0
 8003526:	3308      	adds	r3, #8
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b0b      	cmp	r3, #11
 800352c:	d835      	bhi.n	800359a <fonction_select+0x186>
 800352e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003532:	2b00      	cmp	r3, #0
 8003534:	d131      	bne.n	800359a <fonction_select+0x186>
			  {
				  chessboard[line][col].rayon = 12;
 8003536:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800353a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800353e:	4866      	ldr	r0, [pc, #408]	; (80036d8 <fonction_select+0x2c4>)
 8003540:	461a      	mov	r2, r3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	441a      	add	r2, r3
 8003546:	0053      	lsls	r3, r2, #1
 8003548:	461a      	mov	r2, r3
 800354a:	460b      	mov	r3, r1
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	4413      	add	r3, r2
 8003554:	4403      	add	r3, r0
 8003556:	3308      	adds	r3, #8
 8003558:	220c      	movs	r2, #12
 800355a:	701a      	strb	r2, [r3, #0]
				  selected = 1;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  line_selected = line;
 8003562:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003566:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				  col_selected = col;
 800356a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800356e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  message[0] = (line << 8) + col;
 8003572:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003576:	b29b      	uxth	r3, r3
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	b29a      	uxth	r2, r3
 800357c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003580:	b29b      	uxth	r3, r3
 8003582:	4413      	add	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	84bb      	strh	r3, [r7, #36]	; 0x24
				  xQueueSend(queueSelHandle, &message, 0);
 8003588:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <fonction_select+0x2cc>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003590:	2300      	movs	r3, #0
 8003592:	2200      	movs	r2, #0
 8003594:	f009 ff94 	bl	800d4c0 <xQueueGenericSend>
 8003598:	e02c      	b.n	80035f4 <fonction_select+0x1e0>
			  }
			  /// Ce pion etait selectionne
			  else if (chessboard[line][col].rayon == 12)
 800359a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800359e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035a2:	484d      	ldr	r0, [pc, #308]	; (80036d8 <fonction_select+0x2c4>)
 80035a4:	461a      	mov	r2, r3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	0053      	lsls	r3, r2, #1
 80035ac:	461a      	mov	r2, r3
 80035ae:	460b      	mov	r3, r1
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	4413      	add	r3, r2
 80035b8:	4403      	add	r3, r0
 80035ba:	3308      	adds	r3, #8
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d118      	bne.n	80035f4 <fonction_select+0x1e0>
			  {
				  chessboard[line][col].rayon = 9;
 80035c2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80035c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035ca:	4843      	ldr	r0, [pc, #268]	; (80036d8 <fonction_select+0x2c4>)
 80035cc:	461a      	mov	r2, r3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	0053      	lsls	r3, r2, #1
 80035d4:	461a      	mov	r2, r3
 80035d6:	460b      	mov	r3, r1
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	4413      	add	r3, r2
 80035e0:	4403      	add	r3, r0
 80035e2:	3308      	adds	r3, #8
 80035e4:	2209      	movs	r2, #9
 80035e6:	701a      	strb	r2, [r3, #0]
				  change = 1;
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <fonction_select+0x2d0>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  }
		  }

		  // Case pour un deplacement
		  if(chessboard[line][col].isPossible > 0)
 80035f4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80035f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035fc:	4836      	ldr	r0, [pc, #216]	; (80036d8 <fonction_select+0x2c4>)
 80035fe:	461a      	mov	r2, r3
 8003600:	0092      	lsls	r2, r2, #2
 8003602:	441a      	add	r2, r3
 8003604:	0053      	lsls	r3, r2, #1
 8003606:	461a      	mov	r2, r3
 8003608:	460b      	mov	r3, r1
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	4403      	add	r3, r0
 8003614:	3304      	adds	r3, #4
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8164 	beq.w	80038e6 <fonction_select+0x4d2>
		  {
			  chessboard[line_selected][col_selected].isFilled = 0;
 800361e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8003622:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003626:	482c      	ldr	r0, [pc, #176]	; (80036d8 <fonction_select+0x2c4>)
 8003628:	461a      	mov	r2, r3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	441a      	add	r2, r3
 800362e:	0053      	lsls	r3, r2, #1
 8003630:	461a      	mov	r2, r3
 8003632:	460b      	mov	r3, r1
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	4403      	add	r3, r0
 800363e:	3305      	adds	r3, #5
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
			  // Suppression des pions manges
			  for (p = 0; p < 12; p++)
 8003644:	2300      	movs	r3, #0
 8003646:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800364a:	e05c      	b.n	8003706 <fonction_select+0x2f2>
			  {
				  eaten_piece = possible_eaten[chessboard[line][col].isPossible - 1][p];
 800364c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003650:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003654:	4820      	ldr	r0, [pc, #128]	; (80036d8 <fonction_select+0x2c4>)
 8003656:	461a      	mov	r2, r3
 8003658:	0092      	lsls	r2, r2, #2
 800365a:	441a      	add	r2, r3
 800365c:	0053      	lsls	r3, r2, #1
 800365e:	461a      	mov	r2, r3
 8003660:	460b      	mov	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	4403      	add	r3, r0
 800366c:	3304      	adds	r3, #4
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	1e5a      	subs	r2, r3, #1
 8003672:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8003676:	481c      	ldr	r0, [pc, #112]	; (80036e8 <fonction_select+0x2d4>)
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4403      	add	r3, r0
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	6010      	str	r0, [r2, #0]
				  if(eaten_piece.ligne != 8)
 800368e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003690:	2b08      	cmp	r3, #8
 8003692:	d033      	beq.n	80036fc <fonction_select+0x2e8>
				  {
					  chessboard[eaten_piece.ligne][eaten_piece.colonne].isFilled = 0;
 8003694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003696:	4618      	mov	r0, r3
 8003698:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800369a:	490f      	ldr	r1, [pc, #60]	; (80036d8 <fonction_select+0x2c4>)
 800369c:	461a      	mov	r2, r3
 800369e:	0092      	lsls	r2, r2, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	0053      	lsls	r3, r2, #1
 80036a4:	461a      	mov	r2, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4403      	add	r3, r0
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	3305      	adds	r3, #5
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
			          if(isTurn == 0)
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <fonction_select+0x2c8>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d117      	bne.n	80036f0 <fonction_select+0x2dc>
			              nb_blue--;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <fonction_select+0x2d8>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <fonction_select+0x2d8>)
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e016      	b.n	80036fc <fonction_select+0x2e8>
 80036ce:	bf00      	nop
 80036d0:	2000038c 	.word	0x2000038c
 80036d4:	20008da4 	.word	0x20008da4
 80036d8:	200080f8 	.word	0x200080f8
 80036dc:	2000038a 	.word	0x2000038a
 80036e0:	200080a8 	.word	0x200080a8
 80036e4:	20000028 	.word	0x20000028
 80036e8:	20008614 	.word	0x20008614
 80036ec:	20000029 	.word	0x20000029
			          else
			              nb_white--;
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <fonction_select+0x4f0>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b82      	ldr	r3, [pc, #520]	; (8003904 <fonction_select+0x4f0>)
 80036fa:	701a      	strb	r2, [r3, #0]
			  for (p = 0; p < 12; p++)
 80036fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003700:	3301      	adds	r3, #1
 8003702:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003706:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800370a:	2b0b      	cmp	r3, #11
 800370c:	d99e      	bls.n	800364c <fonction_select+0x238>
				  }
			  }

			  chessboard[line][col].isFilled = 1;
 800370e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003712:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003716:	487c      	ldr	r0, [pc, #496]	; (8003908 <fonction_select+0x4f4>)
 8003718:	461a      	mov	r2, r3
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	441a      	add	r2, r3
 800371e:	0053      	lsls	r3, r2, #1
 8003720:	461a      	mov	r2, r3
 8003722:	460b      	mov	r3, r1
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	4413      	add	r3, r2
 800372c:	4403      	add	r3, r0
 800372e:	3305      	adds	r3, #5
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].isPossible = 0;
 8003734:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003738:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800373c:	4872      	ldr	r0, [pc, #456]	; (8003908 <fonction_select+0x4f4>)
 800373e:	461a      	mov	r2, r3
 8003740:	0092      	lsls	r2, r2, #2
 8003742:	441a      	add	r2, r3
 8003744:	0053      	lsls	r3, r2, #1
 8003746:	461a      	mov	r2, r3
 8003748:	460b      	mov	r3, r1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	4413      	add	r3, r2
 8003752:	4403      	add	r3, r0
 8003754:	3304      	adds	r3, #4
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].piece_color = chessboard[line_selected][col_selected].piece_color;
 800375a:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 800375e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003762:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003766:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800376a:	4d67      	ldr	r5, [pc, #412]	; (8003908 <fonction_select+0x4f4>)
 800376c:	461a      	mov	r2, r3
 800376e:	0092      	lsls	r2, r2, #2
 8003770:	441a      	add	r2, r3
 8003772:	0053      	lsls	r3, r2, #1
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4423      	add	r3, r4
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4413      	add	r3, r2
 8003780:	442b      	add	r3, r5
 8003782:	3307      	adds	r3, #7
 8003784:	781d      	ldrb	r5, [r3, #0]
 8003786:	4c60      	ldr	r4, [pc, #384]	; (8003908 <fonction_select+0x4f4>)
 8003788:	4602      	mov	r2, r0
 800378a:	0092      	lsls	r2, r2, #2
 800378c:	4402      	add	r2, r0
 800378e:	0053      	lsls	r3, r2, #1
 8003790:	461a      	mov	r2, r3
 8003792:	460b      	mov	r3, r1
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	4423      	add	r3, r4
 800379e:	3307      	adds	r3, #7
 80037a0:	462a      	mov	r2, r5
 80037a2:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].rayon = 9;
 80037a4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80037a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037ac:	4856      	ldr	r0, [pc, #344]	; (8003908 <fonction_select+0x4f4>)
 80037ae:	461a      	mov	r2, r3
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	0053      	lsls	r3, r2, #1
 80037b6:	461a      	mov	r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	4403      	add	r3, r0
 80037c4:	3308      	adds	r3, #8
 80037c6:	2209      	movs	r2, #9
 80037c8:	701a      	strb	r2, [r3, #0]
			  // La ligne de la dame est atteinte !
			  if((isTurn == 0 && line == 7) || (isTurn == 1 && line == 0)) chessboard[line][col].isDame = 1;
 80037ca:	4b50      	ldr	r3, [pc, #320]	; (800390c <fonction_select+0x4f8>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <fonction_select+0x3c6>
 80037d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80037d6:	2b07      	cmp	r3, #7
 80037d8:	d007      	beq.n	80037ea <fonction_select+0x3d6>
 80037da:	4b4c      	ldr	r3, [pc, #304]	; (800390c <fonction_select+0x4f8>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d116      	bne.n	8003810 <fonction_select+0x3fc>
 80037e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d112      	bne.n	8003810 <fonction_select+0x3fc>
 80037ea:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80037ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037f2:	4845      	ldr	r0, [pc, #276]	; (8003908 <fonction_select+0x4f4>)
 80037f4:	461a      	mov	r2, r3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	0053      	lsls	r3, r2, #1
 80037fc:	461a      	mov	r2, r3
 80037fe:	460b      	mov	r3, r1
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4413      	add	r3, r2
 8003808:	4403      	add	r3, r0
 800380a:	3306      	adds	r3, #6
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
			  // Si le pion etait une dame, il le reste
			  if(chessboard[line_selected][col_selected].isDame == 1)
 8003810:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8003814:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003818:	483b      	ldr	r0, [pc, #236]	; (8003908 <fonction_select+0x4f4>)
 800381a:	461a      	mov	r2, r3
 800381c:	0092      	lsls	r2, r2, #2
 800381e:	441a      	add	r2, r3
 8003820:	0053      	lsls	r3, r2, #1
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4413      	add	r3, r2
 800382e:	4403      	add	r3, r0
 8003830:	3306      	adds	r3, #6
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d125      	bne.n	8003884 <fonction_select+0x470>
			  {
				  chessboard[line][col].isDame = 1;
 8003838:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800383c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003840:	4831      	ldr	r0, [pc, #196]	; (8003908 <fonction_select+0x4f4>)
 8003842:	461a      	mov	r2, r3
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	441a      	add	r2, r3
 8003848:	0053      	lsls	r3, r2, #1
 800384a:	461a      	mov	r2, r3
 800384c:	460b      	mov	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	4413      	add	r3, r2
 8003856:	4403      	add	r3, r0
 8003858:	3306      	adds	r3, #6
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
				  chessboard[line_selected][col_selected].isDame = 0;
 800385e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8003862:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003866:	4828      	ldr	r0, [pc, #160]	; (8003908 <fonction_select+0x4f4>)
 8003868:	461a      	mov	r2, r3
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	441a      	add	r2, r3
 800386e:	0053      	lsls	r3, r2, #1
 8003870:	461a      	mov	r2, r3
 8003872:	460b      	mov	r3, r1
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4413      	add	r3, r2
 800387c:	4403      	add	r3, r0
 800387e:	3306      	adds	r3, #6
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
			  }
			  selected = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  change = 1;
 800388a:	4b21      	ldr	r3, [pc, #132]	; (8003910 <fonction_select+0x4fc>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]

	          // Check la fin de jeu
	          if(nb_blue == 0 || nb_white == 0)
 8003890:	4b20      	ldr	r3, [pc, #128]	; (8003914 <fonction_select+0x500>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <fonction_select+0x48c>
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <fonction_select+0x4f0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d118      	bne.n	80038d2 <fonction_select+0x4be>
	          {

	        	  osThreadDef(task_victory, fonctionVictory, osPriorityNormal, 0, 1024);
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <fonction_select+0x504>)
 80038a2:	f107 0408 	add.w	r4, r7, #8
 80038a6:	461d      	mov	r5, r3
 80038a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	        	  task_victoryHandle = osThreadCreate(osThread(task_victory), NULL);
 80038b4:	f107 0308 	add.w	r3, r7, #8
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f009 fb37 	bl	800cf2e <osThreadCreate>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <fonction_select+0x508>)
 80038c4:	6013      	str	r3, [r2, #0]
				  nb_blue = 12;
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <fonction_select+0x500>)
 80038c8:	220c      	movs	r2, #12
 80038ca:	701a      	strb	r2, [r3, #0]
				  nb_white = 12;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <fonction_select+0x4f0>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	701a      	strb	r2, [r3, #0]
				  }
*/
	          }

			  // Changement de tour
			  isTurn = (isTurn == 0) ? 1 : 0;
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <fonction_select+0x4f8>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <fonction_select+0x4f8>)
 80038e4:	701a      	strb	r2, [r3, #0]
		  }

		  xSemaphoreGive(mutexChessboard);
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <fonction_select+0x50c>)
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	f009 fde6 	bl	800d4c0 <xQueueGenericSend>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80038f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038fa:	4618      	mov	r0, r3
 80038fc:	f00a fc4c 	bl	800e198 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 8003900:	e5a9      	b.n	8003456 <fonction_select+0x42>
 8003902:	bf00      	nop
 8003904:	2000002a 	.word	0x2000002a
 8003908:	200080f8 	.word	0x200080f8
 800390c:	2000038a 	.word	0x2000038a
 8003910:	20000028 	.word	0x20000028
 8003914:	20000029 	.word	0x20000029
 8003918:	0800fa6c 	.word	0x0800fa6c
 800391c:	200085f0 	.word	0x200085f0
 8003920:	20008da4 	.word	0x20008da4

08003924 <fonction_calculPossibilites>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_calculPossibilites */
void fonction_calculPossibilites(void const * argument)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b0a8      	sub	sp, #160	; 0xa0
 8003928:	af02      	add	r7, sp, #8
 800392a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Recuperation information selection
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <fonction_calculPossibilites+0x21c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	4618      	mov	r0, r3
 800393a:	f009 fec7 	bl	800d6cc <xQueueReceive>
	  line = (uint8_t) (message[0] >> 8);
 800393e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	b29b      	uxth	r3, r3
 8003946:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  col  = (uint8_t)  message[0];
 800394a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800394e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8003952:	4b7c      	ldr	r3, [pc, #496]	; (8003b44 <fonction_calculPossibilites+0x220>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f04f 31ff 	mov.w	r1, #4294967295
 800395a:	4618      	mov	r0, r3
 800395c:	f009 ff9c 	bl	800d898 <xQueueSemaphoreTake>
	  color  = chessboard[line][col].piece_color;
 8003960:	f897 1093 	ldrb.w	r1, [r7, #147]	; 0x93
 8003964:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003968:	4877      	ldr	r0, [pc, #476]	; (8003b48 <fonction_calculPossibilites+0x224>)
 800396a:	461a      	mov	r2, r3
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	441a      	add	r2, r3
 8003970:	0053      	lsls	r3, r2, #1
 8003972:	461a      	mov	r2, r3
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	4403      	add	r3, r0
 8003980:	3307      	adds	r3, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	  isDame = chessboard[line][col].isDame;
 8003988:	f897 1093 	ldrb.w	r1, [r7, #147]	; 0x93
 800398c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003990:	486d      	ldr	r0, [pc, #436]	; (8003b48 <fonction_calculPossibilites+0x224>)
 8003992:	461a      	mov	r2, r3
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	441a      	add	r2, r3
 8003998:	0053      	lsls	r3, r2, #1
 800399a:	461a      	mov	r2, r3
 800399c:	460b      	mov	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	4403      	add	r3, r0
 80039a8:	3306      	adds	r3, #6
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  xSemaphoreGive(mutexChessboard);
 80039b0:	4b64      	ldr	r3, [pc, #400]	; (8003b44 <fonction_calculPossibilites+0x220>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	2200      	movs	r2, #0
 80039b8:	2100      	movs	r1, #0
 80039ba:	f009 fd81 	bl	800d4c0 <xQueueGenericSend>

	  // Calcul des possibilites
	  	  // Reinitialisation des cases mangees possibles
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80039be:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <fonction_calculPossibilites+0x220>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f04f 31ff 	mov.w	r1, #4294967295
 80039c6:	4618      	mov	r0, r3
 80039c8:	f009 ff66 	bl	800d898 <xQueueSemaphoreTake>
	  for(m = 0; m < 32; m++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80039d2:	e02c      	b.n	8003a2e <fonction_calculPossibilites+0x10a>
	  {
		  for(n = 0; n < 12; n++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80039da:	e01f      	b.n	8003a1c <fonction_calculPossibilites+0xf8>
		  {
			  possible_eaten[m][n].colonne = 8;
 80039dc:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80039e0:	f897 1094 	ldrb.w	r1, [r7, #148]	; 0x94
 80039e4:	4859      	ldr	r0, [pc, #356]	; (8003b4c <fonction_calculPossibilites+0x228>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4403      	add	r3, r0
 80039f4:	2208      	movs	r2, #8
 80039f6:	805a      	strh	r2, [r3, #2]
			  possible_eaten[m][n].ligne   = 8;
 80039f8:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80039fc:	f897 1094 	ldrb.w	r1, [r7, #148]	; 0x94
 8003a00:	4852      	ldr	r0, [pc, #328]	; (8003b4c <fonction_calculPossibilites+0x228>)
 8003a02:	4613      	mov	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
		  for(n = 0; n < 12; n++)
 8003a12:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003a16:	3301      	adds	r3, #1
 8003a18:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8003a1c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003a20:	2b0b      	cmp	r3, #11
 8003a22:	d9db      	bls.n	80039dc <fonction_calculPossibilites+0xb8>
	  for(m = 0; m < 32; m++)
 8003a24:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003a2e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003a32:	2b1f      	cmp	r3, #31
 8003a34:	d9ce      	bls.n	80039d4 <fonction_calculPossibilites+0xb0>
		  }
	  }
	  xSemaphoreGive(mutexChessboard);
 8003a36:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <fonction_calculPossibilites+0x220>)
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f009 fd3e 	bl	800d4c0 <xQueueGenericSend>
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <fonction_calculPossibilites+0x220>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f009 ff23 	bl	800d898 <xQueueSemaphoreTake>
	  	  // Calcul des possibilites
	  if(isDame == 0) length = calculPossibilitesRec(line, col, color, possibilites, 0, 0);
 8003a52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d114      	bne.n	8003a84 <fonction_calculPossibilites+0x160>
 8003a5a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003a5e:	b298      	uxth	r0, r3
 8003a60:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003a64:	b299      	uxth	r1, r3
 8003a66:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	2400      	movs	r4, #0
 8003a72:	9401      	str	r4, [sp, #4]
 8003a74:	2400      	movs	r4, #0
 8003a76:	9400      	str	r4, [sp, #0]
 8003a78:	f7fd f86c 	bl	8000b54 <calculPossibilitesRec>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003a82:	e00f      	b.n	8003aa4 <fonction_calculPossibilites+0x180>
	  else 			  length = calculPossibilitesDame(line, col, color, possibilites);
 8003a84:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003a88:	b298      	uxth	r0, r3
 8003a8a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003a8e:	b299      	uxth	r1, r3
 8003a90:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	f7fd fdb9 	bl	8001610 <calculPossibilitesDame>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  xSemaphoreGive(mutexChessboard);
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <fonction_calculPossibilites+0x220>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	f009 fd07 	bl	800d4c0 <xQueueGenericSend>

	  // Modification de l'echiquier avec cases possibles
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <fonction_calculPossibilites+0x220>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8003aba:	4618      	mov	r0, r3
 8003abc:	f009 feec 	bl	800d898 <xQueueSemaphoreTake>
	  for(i = 0; i < length; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003ac6:	e029      	b.n	8003b1c <fonction_calculPossibilites+0x1f8>
	  {
		  chessboard[possibilites[i].ligne][possibilites[i].colonne].isPossible = i + 1;
 8003ac8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f833 3c8a 	ldrh.w	r3, [r3, #-138]
 8003aea:	461c      	mov	r4, r3
 8003aec:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003af0:	3301      	adds	r3, #1
 8003af2:	b2dd      	uxtb	r5, r3
 8003af4:	4914      	ldr	r1, [pc, #80]	; (8003b48 <fonction_calculPossibilites+0x224>)
 8003af6:	4622      	mov	r2, r4
 8003af8:	0092      	lsls	r2, r2, #2
 8003afa:	4422      	add	r2, r4
 8003afc:	0053      	lsls	r3, r2, #1
 8003afe:	461a      	mov	r2, r3
 8003b00:	4603      	mov	r3, r0
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	462a      	mov	r2, r5
 8003b10:	701a      	strb	r2, [r3, #0]
	  for(i = 0; i < length; i++)
 8003b12:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003b16:	3301      	adds	r3, #1
 8003b18:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003b1c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8003b20:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d3cf      	bcc.n	8003ac8 <fonction_calculPossibilites+0x1a4>
	  }
	  xSemaphoreGive(mutexChessboard);
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <fonction_calculPossibilites+0x220>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2100      	movs	r1, #0
 8003b32:	f009 fcc5 	bl	800d4c0 <xQueueGenericSend>
      osDelay(1);
 8003b36:	2001      	movs	r0, #1
 8003b38:	f009 fa51 	bl	800cfde <osDelay>
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8003b3c:	e6f6      	b.n	800392c <fonction_calculPossibilites+0x8>
 8003b3e:	bf00      	nop
 8003b40:	200080a8 	.word	0x200080a8
 8003b44:	20008da4 	.word	0x20008da4
 8003b48:	200080f8 	.word	0x200080f8
 8003b4c:	20008614 	.word	0x20008614

08003b50 <fonctionVictory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonctionVictory */
void fonctionVictory(void const * argument)
{
 8003b50:	b5b0      	push	{r4, r5, r7, lr}
 8003b52:	b08c      	sub	sp, #48	; 0x30
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonctionVictory */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8003b58:	2364      	movs	r3, #100	; 0x64
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t init = 1;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static TS_StateTypeDef TS_State;
  /* Infinite loop */
  for(;;)
  {
	  if (init == 1)
 8003b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <fonctionVictory+0x2a>
	  {
		  osThreadTerminate(affichageHandle);
 8003b6a:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <fonctionVictory+0x138>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f009 fa29 	bl	800cfc6 <osThreadTerminate>
		  init = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }
	  BSP_LCD_SelectLayer(0);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f000 fb54 	bl	8004228 <BSP_LCD_SelectLayer>
	  if (isTurn == 1)
 8003b80:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <fonctionVictory+0x13c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d125      	bne.n	8003bd4 <fonctionVictory+0x84>
	  {
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	f000 fbbe 	bl	800430c <BSP_LCD_Clear>
		  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 fb70 	bl	8004278 <BSP_LCD_SetBackColor>
		  BSP_LCD_SelectLayer(1);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f000 fb45 	bl	8004228 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba2:	f000 fbb3 	bl	800430c <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003ba6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003baa:	f000 fb4d 	bl	8004248 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003bae:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb2:	f000 fb61 	bl	8004278 <BSP_LCD_SetBackColor>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"VICTOIRE des BLANCS !");
 8003bb6:	4936      	ldr	r1, [pc, #216]	; (8003c90 <fonctionVictory+0x140>)
 8003bb8:	200a      	movs	r0, #10
 8003bba:	f000 fcdb 	bl	8004574 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"Felicitations au gagnant !");
 8003bbe:	4935      	ldr	r1, [pc, #212]	; (8003c94 <fonctionVictory+0x144>)
 8003bc0:	200c      	movs	r0, #12
 8003bc2:	f000 fcd7 	bl	8004574 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003bc6:	4834      	ldr	r0, [pc, #208]	; (8003c98 <fonctionVictory+0x148>)
 8003bc8:	f000 fb3e 	bl	8004248 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Touchez l'ecran pour rejouer");
 8003bcc:	4933      	ldr	r1, [pc, #204]	; (8003c9c <fonctionVictory+0x14c>)
 8003bce:	200e      	movs	r0, #14
 8003bd0:	f000 fcd0 	bl	8004574 <BSP_LCD_DisplayStringAtLine>
	  }
	  if (isTurn == 0)
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <fonctionVictory+0x13c>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d130      	bne.n	8003c3e <fonctionVictory+0xee>
	  {
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bdc:	4830      	ldr	r0, [pc, #192]	; (8003ca0 <fonctionVictory+0x150>)
 8003bde:	f000 fb95 	bl	800430c <BSP_LCD_Clear>
		  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8003be2:	482f      	ldr	r0, [pc, #188]	; (8003ca0 <fonctionVictory+0x150>)
 8003be4:	f000 fb48 	bl	8004278 <BSP_LCD_SetBackColor>
		  BSP_LCD_SelectLayer(1);
 8003be8:	2001      	movs	r0, #1
 8003bea:	f000 fb1d 	bl	8004228 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bee:	482c      	ldr	r0, [pc, #176]	; (8003ca0 <fonctionVictory+0x150>)
 8003bf0:	f000 fb8c 	bl	800430c <BSP_LCD_Clear>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bf4:	482a      	ldr	r0, [pc, #168]	; (8003ca0 <fonctionVictory+0x150>)
 8003bf6:	f000 fb89 	bl	800430c <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f000 fb14 	bl	8004228 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003c00:	4827      	ldr	r0, [pc, #156]	; (8003ca0 <fonctionVictory+0x150>)
 8003c02:	f000 fb83 	bl	800430c <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	f000 fb1d 	bl	8004248 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"VICTOIRE des BLEUS !");
 8003c0e:	4925      	ldr	r1, [pc, #148]	; (8003ca4 <fonctionVictory+0x154>)
 8003c10:	200a      	movs	r0, #10
 8003c12:	f000 fcaf 	bl	8004574 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"Felicitations au gagnant !");
 8003c16:	491f      	ldr	r1, [pc, #124]	; (8003c94 <fonctionVictory+0x144>)
 8003c18:	200c      	movs	r0, #12
 8003c1a:	f000 fcab 	bl	8004574 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003c1e:	481e      	ldr	r0, [pc, #120]	; (8003c98 <fonctionVictory+0x148>)
 8003c20:	f000 fb12 	bl	8004248 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8003c24:	481e      	ldr	r0, [pc, #120]	; (8003ca0 <fonctionVictory+0x150>)
 8003c26:	f000 fb27 	bl	8004278 <BSP_LCD_SetBackColor>
		  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Touchez l'ecran pour rejouer");
 8003c2a:	491c      	ldr	r1, [pc, #112]	; (8003c9c <fonctionVictory+0x14c>)
 8003c2c:	200e      	movs	r0, #14
 8003c2e:	f000 fca1 	bl	8004574 <BSP_LCD_DisplayStringAtLine>
		  nb_blue = 1;
 8003c32:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <fonctionVictory+0x158>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
		  nb_white = 1;
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <fonctionVictory+0x15c>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
	  }
	  BSP_TS_GetState(&TS_State);
 8003c3e:	481c      	ldr	r0, [pc, #112]	; (8003cb0 <fonctionVictory+0x160>)
 8003c40:	f001 fc8c 	bl	800555c <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <fonctionVictory+0x160>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <fonctionVictory+0x128>
	  {
		  victory = 1;
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <fonctionVictory+0x164>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
		  osThreadDef(task_init, fonction_init, osPriorityHigh, 0, 1024);
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <fonctionVictory+0x168>)
 8003c54:	f107 0408 	add.w	r4, r7, #8
 8003c58:	461d      	mov	r5, r3
 8003c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f009 f95e 	bl	800cf2e <osThreadCreate>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <fonctionVictory+0x16c>)
 8003c76:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8003c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f00a fa8a 	bl	800e198 <vTaskDelayUntil>
	  if (init == 1)
 8003c84:	e76d      	b.n	8003b62 <fonctionVictory+0x12>
 8003c86:	bf00      	nop
 8003c88:	20008508 	.word	0x20008508
 8003c8c:	2000038a 	.word	0x2000038a
 8003c90:	0800fab8 	.word	0x0800fab8
 8003c94:	0800fad0 	.word	0x0800fad0
 8003c98:	ffff0000 	.word	0xffff0000
 8003c9c:	0800faec 	.word	0x0800faec
 8003ca0:	ff0000ff 	.word	0xff0000ff
 8003ca4:	0800fb0c 	.word	0x0800fb0c
 8003ca8:	20000029 	.word	0x20000029
 8003cac:	2000002a 	.word	0x2000002a
 8003cb0:	200003b8 	.word	0x200003b8
 8003cb4:	2000038b 	.word	0x2000038b
 8003cb8:	0800f9fc 	.word	0x0800f9fc
 8003cbc:	20008058 	.word	0x20008058

08003cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cd2:	f002 fd53 	bl	800677c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40001000 	.word	0x40001000

08003ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce8:	b672      	cpsid	i
}
 8003cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cec:	e7fe      	b.n	8003cec <Error_Handler+0x8>
	...

08003cf0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a51      	ldr	r2, [pc, #324]	; (8003e40 <I2Cx_MspInit+0x150>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d14d      	bne.n	8003d9c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003d1c:	2312      	movs	r3, #18
 8003d1e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003d24:	2302      	movs	r3, #2
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003d28:	2304      	movs	r3, #4
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	4619      	mov	r1, r3
 8003d32:	4845      	ldr	r0, [pc, #276]	; (8003e48 <I2Cx_MspInit+0x158>)
 8003d34:	f004 f876 	bl	8007e24 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	4619      	mov	r1, r3
 8003d44:	4840      	ldr	r0, [pc, #256]	; (8003e48 <I2Cx_MspInit+0x158>)
 8003d46:	f004 f86d 	bl	8007e24 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003d6e:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d78:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	210f      	movs	r1, #15
 8003d7e:	2048      	movs	r0, #72	; 0x48
 8003d80:	f003 f95a 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003d84:	2048      	movs	r0, #72	; 0x48
 8003d86:	f003 f973 	bl	8007070 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	210f      	movs	r1, #15
 8003d8e:	2049      	movs	r0, #73	; 0x49
 8003d90:	f003 f952 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003d94:	2049      	movs	r0, #73	; 0x49
 8003d96:	f003 f96b 	bl	8007070 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003d9a:	e04d      	b.n	8003e38 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4a28      	ldr	r2, [pc, #160]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003da2:	f043 0302 	orr.w	r3, r3, #2
 8003da6:	6313      	str	r3, [r2, #48]	; 0x30
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003dba:	2312      	movs	r3, #18
 8003dbc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dca:	f107 031c 	add.w	r3, r7, #28
 8003dce:	4619      	mov	r1, r3
 8003dd0:	481e      	ldr	r0, [pc, #120]	; (8003e4c <I2Cx_MspInit+0x15c>)
 8003dd2:	f004 f827 	bl	8007e24 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003ddc:	f107 031c 	add.w	r3, r7, #28
 8003de0:	4619      	mov	r1, r3
 8003de2:	481a      	ldr	r0, [pc, #104]	; (8003e4c <I2Cx_MspInit+0x15c>)
 8003de4:	f004 f81e 	bl	8007e24 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003dee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003df2:	6413      	str	r3, [r2, #64]	; 0x40
 8003df4:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e0a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <I2Cx_MspInit+0x154>)
 8003e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e16:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	201f      	movs	r0, #31
 8003e1e:	f003 f90b 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003e22:	201f      	movs	r0, #31
 8003e24:	f003 f924 	bl	8007070 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	210f      	movs	r1, #15
 8003e2c:	2020      	movs	r0, #32
 8003e2e:	f003 f903 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003e32:	2020      	movs	r0, #32
 8003e34:	f003 f91c 	bl	8007070 <HAL_NVIC_EnableIRQ>
}
 8003e38:	bf00      	nop
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200003e4 	.word	0x200003e4
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40021c00 	.word	0x40021c00
 8003e4c:	40020400 	.word	0x40020400

08003e50 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f004 fdd5 	bl	8008a08 <HAL_I2C_GetState>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d125      	bne.n	8003eb0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <I2Cx_Init+0x68>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <I2Cx_Init+0x6c>)
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <I2Cx_Init+0x70>)
 8003e78:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <I2Cx_Init+0x74>)
 8003e7e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff23 	bl	8003cf0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f004 fabe 	bl	800842c <HAL_I2C_Init>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200003e4 	.word	0x200003e4
 8003ebc:	40005c00 	.word	0x40005c00
 8003ec0:	40005400 	.word	0x40005400
 8003ec4:	40912732 	.word	0x40912732

08003ec8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	72fb      	strb	r3, [r7, #11]
 8003eda:	460b      	mov	r3, r1
 8003edc:	813b      	strh	r3, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	88f8      	ldrh	r0, [r7, #6]
 8003eec:	893a      	ldrh	r2, [r7, #8]
 8003eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f004 fc68 	bl	80087d4 <HAL_I2C_Mem_Read>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	4619      	mov	r1, r3
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f832 	bl	8003f7c <I2Cx_Error>
  }
  return status;    
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08a      	sub	sp, #40	; 0x28
 8003f26:	af04      	add	r7, sp, #16
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	4608      	mov	r0, r1
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4603      	mov	r3, r0
 8003f32:	72fb      	strb	r3, [r7, #11]
 8003f34:	460b      	mov	r3, r1
 8003f36:	813b      	strh	r3, [r7, #8]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	b299      	uxth	r1, r3
 8003f44:	88f8      	ldrh	r0, [r7, #6]
 8003f46:	893a      	ldrh	r2, [r7, #8]
 8003f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	4603      	mov	r3, r0
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f004 fb27 	bl	80085ac <HAL_I2C_Mem_Write>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003f68:	7afb      	ldrb	r3, [r7, #11]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f805 	bl	8003f7c <I2Cx_Error>
  }
  return status;
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f004 fadf 	bl	800854c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff5e 	bl	8003e50 <I2Cx_Init>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <TS_IO_Init+0x10>)
 8003fa2:	f7ff ff55 	bl	8003e50 <I2Cx_Init>
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200003e4 	.word	0x200003e4

08003fb0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	71bb      	strb	r3, [r7, #6]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003fc2:	79bb      	ldrb	r3, [r7, #6]
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	79f9      	ldrb	r1, [r7, #7]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	1d7b      	adds	r3, r7, #5
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <TS_IO_Write+0x30>)
 8003fd4:	f7ff ffa5 	bl	8003f22 <I2Cx_WriteMultiple>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200003e4 	.word	0x200003e4

08003fe4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	4603      	mov	r3, r0
 8003fec:	460a      	mov	r2, r1
 8003fee:	71fb      	strb	r3, [r7, #7]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003ff8:	79bb      	ldrb	r3, [r7, #6]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	79f9      	ldrb	r1, [r7, #7]
 8003ffe:	2301      	movs	r3, #1
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	f107 030f 	add.w	r3, r7, #15
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2301      	movs	r3, #1
 800400a:	4804      	ldr	r0, [pc, #16]	; (800401c <TS_IO_Read+0x38>)
 800400c:	f7ff ff5c 	bl	8003ec8 <I2Cx_ReadMultiple>

  return read_value;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200003e4 	.word	0x200003e4

08004020 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f002 fbc7 	bl	80067bc <HAL_Delay>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <BSP_LCD_Init+0xcc>)
 800403e:	2228      	movs	r2, #40	; 0x28
 8004040:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004044:	2209      	movs	r2, #9
 8004046:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <BSP_LCD_Init+0xcc>)
 800404a:	2235      	movs	r2, #53	; 0x35
 800404c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800404e:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004050:	220b      	movs	r2, #11
 8004052:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004056:	f240 121b 	movw	r2, #283	; 0x11b
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <BSP_LCD_Init+0xcc>)
 800405e:	f240 2215 	movw	r2, #533	; 0x215
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004064:	4b27      	ldr	r3, [pc, #156]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004066:	f240 121d 	movw	r2, #285	; 0x11d
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <BSP_LCD_Init+0xcc>)
 800406e:	f240 2235 	movw	r2, #565	; 0x235
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004074:	2100      	movs	r1, #0
 8004076:	4823      	ldr	r0, [pc, #140]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004078:	f000 fee8 	bl	8004e4c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800407c:	4b21      	ldr	r3, [pc, #132]	; (8004104 <BSP_LCD_Init+0xcc>)
 800407e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004082:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004084:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004086:	f44f 7288 	mov.w	r2, #272	; 0x110
 800408a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <BSP_LCD_Init+0xcc>)
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <BSP_LCD_Init+0xcc>)
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <BSP_LCD_Init+0xcc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80040a4:	4b17      	ldr	r3, [pc, #92]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80040aa:	4b16      	ldr	r3, [pc, #88]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040b6:	4b13      	ldr	r3, [pc, #76]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <BSP_LCD_Init+0xd0>)
 80040c0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80040c2:	4810      	ldr	r0, [pc, #64]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040c4:	f005 f9bc 	bl	8009440 <HAL_LTDC_GetState>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80040ce:	2100      	movs	r1, #0
 80040d0:	480c      	ldr	r0, [pc, #48]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040d2:	f000 fde1 	bl	8004c98 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80040d6:	480b      	ldr	r0, [pc, #44]	; (8004104 <BSP_LCD_Init+0xcc>)
 80040d8:	f004 ffe2 	bl	80090a0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80040dc:	2201      	movs	r2, #1
 80040de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e2:	480a      	ldr	r0, [pc, #40]	; (800410c <BSP_LCD_Init+0xd4>)
 80040e4:	f004 f956 	bl	8008394 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80040e8:	2201      	movs	r2, #1
 80040ea:	2108      	movs	r1, #8
 80040ec:	4808      	ldr	r0, [pc, #32]	; (8004110 <BSP_LCD_Init+0xd8>)
 80040ee:	f004 f951 	bl	8008394 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80040f2:	f001 f80f 	bl	8005114 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80040f6:	4807      	ldr	r0, [pc, #28]	; (8004114 <BSP_LCD_Init+0xdc>)
 80040f8:	f000 f8d8 	bl	80042ac <BSP_LCD_SetFont>
  
  return LCD_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20008da8 	.word	0x20008da8
 8004108:	40016800 	.word	0x40016800
 800410c:	40022000 	.word	0x40022000
 8004110:	40022800 	.word	0x40022800
 8004114:	2000002c 	.word	0x2000002c

08004118 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <BSP_LCD_GetXSize+0x20>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a06      	ldr	r2, [pc, #24]	; (800413c <BSP_LCD_GetXSize+0x24>)
 8004122:	2134      	movs	r1, #52	; 0x34
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	3360      	adds	r3, #96	; 0x60
 800412c:	681b      	ldr	r3, [r3, #0]
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20000470 	.word	0x20000470
 800413c:	20008da8 	.word	0x20008da8

08004140 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <BSP_LCD_GetYSize+0x20>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a06      	ldr	r2, [pc, #24]	; (8004164 <BSP_LCD_GetYSize+0x24>)
 800414a:	2134      	movs	r1, #52	; 0x34
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	3364      	adds	r3, #100	; 0x64
 8004154:	681b      	ldr	r3, [r3, #0]
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	20000470 	.word	0x20000470
 8004164:	20008da8 	.word	0x20008da8

08004168 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004168:	b580      	push	{r7, lr}
 800416a:	b090      	sub	sp, #64	; 0x40
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004178:	f7ff ffce 	bl	8004118 <BSP_LCD_GetXSize>
 800417c:	4603      	mov	r3, r0
 800417e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004184:	f7ff ffdc 	bl	8004140 <BSP_LCD_GetYSize>
 8004188:	4603      	mov	r3, r0
 800418a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004194:	23ff      	movs	r3, #255	; 0xff
 8004196:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80041ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80041b4:	2307      	movs	r3, #7
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80041b8:	f7ff ffae 	bl	8004118 <BSP_LCD_GetXSize>
 80041bc:	4603      	mov	r3, r0
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80041c0:	f7ff ffbe 	bl	8004140 <BSP_LCD_GetYSize>
 80041c4:	4603      	mov	r3, r0
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	f107 030c 	add.w	r3, r7, #12
 80041ce:	4619      	mov	r1, r3
 80041d0:	4812      	ldr	r0, [pc, #72]	; (800421c <BSP_LCD_LayerDefaultInit+0xb4>)
 80041d2:	f005 f8f7 	bl	80093c4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	4911      	ldr	r1, [pc, #68]	; (8004220 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3304      	adds	r3, #4
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	490c      	ldr	r1, [pc, #48]	; (8004220 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3308      	adds	r3, #8
 80041fc:	4a09      	ldr	r2, [pc, #36]	; (8004224 <BSP_LCD_LayerDefaultInit+0xbc>)
 80041fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	4907      	ldr	r1, [pc, #28]	; (8004220 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	3740      	adds	r7, #64	; 0x40
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20008da8 	.word	0x20008da8
 8004220:	20000474 	.word	0x20000474
 8004224:	2000002c 	.word	0x2000002c

08004228 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <BSP_LCD_SelectLayer+0x1c>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6013      	str	r3, [r2, #0]
} 
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000470 	.word	0x20000470

08004248 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <BSP_LCD_SetTextColor+0x28>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4907      	ldr	r1, [pc, #28]	; (8004274 <BSP_LCD_SetTextColor+0x2c>)
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000470 	.word	0x20000470
 8004274:	20000474 	.word	0x20000474

08004278 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <BSP_LCD_SetBackColor+0x2c>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4908      	ldr	r1, [pc, #32]	; (80042a8 <BSP_LCD_SetBackColor+0x30>)
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3304      	adds	r3, #4
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000470 	.word	0x20000470
 80042a8:	20000474 	.word	0x20000474

080042ac <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <BSP_LCD_SetFont+0x2c>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4908      	ldr	r1, [pc, #32]	; (80042dc <BSP_LCD_SetFont+0x30>)
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	3308      	adds	r3, #8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000470 	.word	0x20000470
 80042dc:	20000474 	.word	0x20000474

080042e0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <BSP_LCD_GetFont+0x24>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4907      	ldr	r1, [pc, #28]	; (8004308 <BSP_LCD_GetFont+0x28>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3308      	adds	r3, #8
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000470 	.word	0x20000470
 8004308:	20000474 	.word	0x20000474

0800430c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800430c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430e:	b085      	sub	sp, #20
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <BSP_LCD_Clear+0x48>)
 8004316:	681c      	ldr	r4, [r3, #0]
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <BSP_LCD_Clear+0x48>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0e      	ldr	r2, [pc, #56]	; (8004358 <BSP_LCD_Clear+0x4c>)
 800431e:	2134      	movs	r1, #52	; 0x34
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	335c      	adds	r3, #92	; 0x5c
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461e      	mov	r6, r3
 800432c:	f7ff fef4 	bl	8004118 <BSP_LCD_GetXSize>
 8004330:	4605      	mov	r5, r0
 8004332:	f7ff ff05 	bl	8004140 <BSP_LCD_GetYSize>
 8004336:	4602      	mov	r2, r0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2300      	movs	r3, #0
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	462a      	mov	r2, r5
 8004344:	4631      	mov	r1, r6
 8004346:	4620      	mov	r0, r4
 8004348:	f000 fe54 	bl	8004ff4 <LL_FillBuffer>
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004354:	20000470 	.word	0x20000470
 8004358:	20008da8 	.word	0x20008da8

0800435c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	80fb      	strh	r3, [r7, #6]
 8004366:	460b      	mov	r3, r1
 8004368:	80bb      	strh	r3, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <BSP_LCD_DisplayChar+0x80>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	491b      	ldr	r1, [pc, #108]	; (80043e0 <BSP_LCD_DisplayChar+0x84>)
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3308      	adds	r3, #8
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <BSP_LCD_DisplayChar+0x80>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4c14      	ldr	r4, [pc, #80]	; (80043e0 <BSP_LCD_DisplayChar+0x84>)
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4423      	add	r3, r4
 800439a:	3308      	adds	r3, #8
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043a0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <BSP_LCD_DisplayChar+0x80>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <BSP_LCD_DisplayChar+0x84>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4423      	add	r3, r4
 80043b4:	3308      	adds	r3, #8
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	889b      	ldrh	r3, [r3, #4]
 80043ba:	3307      	adds	r3, #7
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da00      	bge.n	80043c2 <BSP_LCD_DisplayChar+0x66>
 80043c0:	3307      	adds	r3, #7
 80043c2:	10db      	asrs	r3, r3, #3
 80043c4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043c8:	18ca      	adds	r2, r1, r3
 80043ca:	88b9      	ldrh	r1, [r7, #4]
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fd58 	bl	8004e84 <DrawChar>
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd90      	pop	{r4, r7, pc}
 80043dc:	20000470 	.word	0x20000470
 80043e0:	20000474 	.word	0x20000474

080043e4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60ba      	str	r2, [r7, #8]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	81fb      	strh	r3, [r7, #14]
 80043f2:	460b      	mov	r3, r1
 80043f4:	81bb      	strh	r3, [r7, #12]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80043fa:	2301      	movs	r3, #1
 80043fc:	83fb      	strh	r3, [r7, #30]
 80043fe:	2300      	movs	r3, #0
 8004400:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800440e:	e002      	b.n	8004416 <BSP_LCD_DisplayStringAt+0x32>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	3301      	adds	r3, #1
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	617a      	str	r2, [r7, #20]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f6      	bne.n	8004410 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004422:	f7ff fe79 	bl	8004118 <BSP_LCD_GetXSize>
 8004426:	4601      	mov	r1, r0
 8004428:	4b50      	ldr	r3, [pc, #320]	; (800456c <BSP_LCD_DisplayStringAt+0x188>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4850      	ldr	r0, [pc, #320]	; (8004570 <BSP_LCD_DisplayStringAt+0x18c>)
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4403      	add	r3, r0
 8004438:	3308      	adds	r3, #8
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	889b      	ldrh	r3, [r3, #4]
 800443e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004442:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d01c      	beq.n	8004484 <BSP_LCD_DisplayStringAt+0xa0>
 800444a:	2b03      	cmp	r3, #3
 800444c:	dc33      	bgt.n	80044b6 <BSP_LCD_DisplayStringAt+0xd2>
 800444e:	2b01      	cmp	r3, #1
 8004450:	d002      	beq.n	8004458 <BSP_LCD_DisplayStringAt+0x74>
 8004452:	2b02      	cmp	r3, #2
 8004454:	d019      	beq.n	800448a <BSP_LCD_DisplayStringAt+0xa6>
 8004456:	e02e      	b.n	80044b6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad1      	subs	r1, r2, r3
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <BSP_LCD_DisplayStringAt+0x188>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4843      	ldr	r0, [pc, #268]	; (8004570 <BSP_LCD_DisplayStringAt+0x18c>)
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4403      	add	r3, r0
 800446e:	3308      	adds	r3, #8
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	889b      	ldrh	r3, [r3, #4]
 8004474:	fb03 f301 	mul.w	r3, r3, r1
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	4413      	add	r3, r2
 8004480:	83fb      	strh	r3, [r7, #30]
      break;
 8004482:	e01b      	b.n	80044bc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004484:	89fb      	ldrh	r3, [r7, #14]
 8004486:	83fb      	strh	r3, [r7, #30]
      break;
 8004488:	e018      	b.n	80044bc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	b299      	uxth	r1, r3
 8004492:	4b36      	ldr	r3, [pc, #216]	; (800456c <BSP_LCD_DisplayStringAt+0x188>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4836      	ldr	r0, [pc, #216]	; (8004570 <BSP_LCD_DisplayStringAt+0x18c>)
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4403      	add	r3, r0
 80044a2:	3308      	adds	r3, #8
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	889b      	ldrh	r3, [r3, #4]
 80044a8:	fb11 f303 	smulbb	r3, r1, r3
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	89fb      	ldrh	r3, [r7, #14]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	83fb      	strh	r3, [r7, #30]
      break;
 80044b4:	e002      	b.n	80044bc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	83fb      	strh	r3, [r7, #30]
      break;
 80044ba:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80044bc:	8bfb      	ldrh	r3, [r7, #30]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <BSP_LCD_DisplayStringAt+0xe6>
 80044c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da1d      	bge.n	8004506 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80044ce:	e01a      	b.n	8004506 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	89b9      	ldrh	r1, [r7, #12]
 80044d6:	8bfb      	ldrh	r3, [r7, #30]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff3f 	bl	800435c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <BSP_LCD_DisplayStringAt+0x188>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4923      	ldr	r1, [pc, #140]	; (8004570 <BSP_LCD_DisplayStringAt+0x18c>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3308      	adds	r3, #8
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	889a      	ldrh	r2, [r3, #4]
 80044f4:	8bfb      	ldrh	r3, [r7, #30]
 80044f6:	4413      	add	r3, r2
 80044f8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
    i++;
 8004500:	8bbb      	ldrh	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2dc      	uxtb	r4, r3
 8004514:	f7ff fe00 	bl	8004118 <BSP_LCD_GetXSize>
 8004518:	8bb9      	ldrh	r1, [r7, #28]
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <BSP_LCD_DisplayStringAt+0x188>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4d14      	ldr	r5, [pc, #80]	; (8004570 <BSP_LCD_DisplayStringAt+0x18c>)
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	442b      	add	r3, r5
 800452a:	3308      	adds	r3, #8
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	889b      	ldrh	r3, [r3, #4]
 8004530:	fb03 f301 	mul.w	r3, r3, r1
 8004534:	1ac3      	subs	r3, r0, r3
 8004536:	b299      	uxth	r1, r3
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <BSP_LCD_DisplayStringAt+0x188>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	480c      	ldr	r0, [pc, #48]	; (8004570 <BSP_LCD_DisplayStringAt+0x18c>)
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4403      	add	r3, r0
 8004548:	3308      	adds	r3, #8
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	889b      	ldrh	r3, [r3, #4]
 800454e:	4299      	cmp	r1, r3
 8004550:	bf2c      	ite	cs
 8004552:	2301      	movcs	r3, #1
 8004554:	2300      	movcc	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	4023      	ands	r3, r4
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1b7      	bne.n	80044d0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bdb0      	pop	{r4, r5, r7, pc}
 800456a:	bf00      	nop
 800456c:	20000470 	.word	0x20000470
 8004570:	20000474 	.word	0x20000474

08004574 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004580:	f7ff feae 	bl	80042e0 <BSP_LCD_GetFont>
 8004584:	4603      	mov	r3, r0
 8004586:	88db      	ldrh	r3, [r3, #6]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	fb12 f303 	smulbb	r3, r2, r3
 800458e:	b299      	uxth	r1, r3
 8004590:	2303      	movs	r3, #3
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	2000      	movs	r0, #0
 8004596:	f7ff ff25 	bl	80043e4 <BSP_LCD_DisplayStringAt>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]
 80045ae:	460b      	mov	r3, r1
 80045b0:	80bb      	strh	r3, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <BSP_LCD_DrawHLine+0xb0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a26      	ldr	r2, [pc, #152]	; (8004658 <BSP_LCD_DrawHLine+0xb4>)
 80045c0:	2134      	movs	r1, #52	; 0x34
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3348      	adds	r3, #72	; 0x48
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d114      	bne.n	80045fa <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045d0:	4b20      	ldr	r3, [pc, #128]	; (8004654 <BSP_LCD_DrawHLine+0xb0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <BSP_LCD_DrawHLine+0xb4>)
 80045d6:	2134      	movs	r1, #52	; 0x34
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	335c      	adds	r3, #92	; 0x5c
 80045e0:	681c      	ldr	r4, [r3, #0]
 80045e2:	f7ff fd99 	bl	8004118 <BSP_LCD_GetXSize>
 80045e6:	4602      	mov	r2, r0
 80045e8:	88bb      	ldrh	r3, [r7, #4]
 80045ea:	fb03 f202 	mul.w	r2, r3, r2
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	4413      	add	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4423      	add	r3, r4
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e013      	b.n	8004622 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <BSP_LCD_DrawHLine+0xb0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a16      	ldr	r2, [pc, #88]	; (8004658 <BSP_LCD_DrawHLine+0xb4>)
 8004600:	2134      	movs	r1, #52	; 0x34
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	335c      	adds	r3, #92	; 0x5c
 800460a:	681c      	ldr	r4, [r3, #0]
 800460c:	f7ff fd84 	bl	8004118 <BSP_LCD_GetXSize>
 8004610:	4602      	mov	r2, r0
 8004612:	88bb      	ldrh	r3, [r7, #4]
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4423      	add	r3, r4
 8004620:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <BSP_LCD_DrawHLine+0xb0>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	887c      	ldrh	r4, [r7, #2]
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <BSP_LCD_DrawHLine+0xb0>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4d0b      	ldr	r5, [pc, #44]	; (800465c <BSP_LCD_DrawHLine+0xb8>)
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	442b      	add	r3, r5
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	2300      	movs	r3, #0
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	2301      	movs	r3, #1
 8004644:	4622      	mov	r2, r4
 8004646:	f000 fcd5 	bl	8004ff4 <LL_FillBuffer>
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bdb0      	pop	{r4, r5, r7, pc}
 8004652:	bf00      	nop
 8004654:	20000470 	.word	0x20000470
 8004658:	20008da8 	.word	0x20008da8
 800465c:	20000474 	.word	0x20000474

08004660 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	80fb      	strh	r3, [r7, #6]
 800466a:	460b      	mov	r3, r1
 800466c:	80bb      	strh	r3, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004672:	887b      	ldrh	r3, [r7, #2]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	f1c3 0303 	rsb	r3, r3, #3
 800467a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004680:	887b      	ldrh	r3, [r7, #2]
 8004682:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8004684:	e0c7      	b.n	8004816 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	b29a      	uxth	r2, r3
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	4413      	add	r3, r2
 800468e:	b298      	uxth	r0, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	b29b      	uxth	r3, r3
 8004694:	88ba      	ldrh	r2, [r7, #4]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	b299      	uxth	r1, r3
 800469a:	4b64      	ldr	r3, [pc, #400]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4c64      	ldr	r4, [pc, #400]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4423      	add	r3, r4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f000 f8c1 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	b298      	uxth	r0, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	88ba      	ldrh	r2, [r7, #4]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	b299      	uxth	r1, r3
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4c59      	ldr	r4, [pc, #356]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4423      	add	r3, r4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	f000 f8ab 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	4413      	add	r3, r2
 80046e6:	b298      	uxth	r0, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	88ba      	ldrh	r2, [r7, #4]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	b299      	uxth	r1, r3
 80046f2:	4b4e      	ldr	r3, [pc, #312]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4c4e      	ldr	r4, [pc, #312]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 80046f8:	4613      	mov	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4423      	add	r3, r4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	f000 f895 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	b29b      	uxth	r3, r3
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	b298      	uxth	r0, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	b29b      	uxth	r3, r3
 8004718:	88ba      	ldrh	r2, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	b299      	uxth	r1, r3
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4c43      	ldr	r4, [pc, #268]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4423      	add	r3, r4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	f000 f87f 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	b29a      	uxth	r2, r3
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	4413      	add	r3, r2
 800473e:	b298      	uxth	r0, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	b29a      	uxth	r2, r3
 8004744:	88bb      	ldrh	r3, [r7, #4]
 8004746:	4413      	add	r3, r2
 8004748:	b299      	uxth	r1, r3
 800474a:	4b38      	ldr	r3, [pc, #224]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4c38      	ldr	r4, [pc, #224]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4423      	add	r3, r4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	f000 f869 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	b29b      	uxth	r3, r3
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	b298      	uxth	r0, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	b29a      	uxth	r2, r3
 8004770:	88bb      	ldrh	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	b299      	uxth	r1, r3
 8004776:	4b2d      	ldr	r3, [pc, #180]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4c2d      	ldr	r4, [pc, #180]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4423      	add	r3, r4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	f000 f853 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	b29a      	uxth	r2, r3
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	4413      	add	r3, r2
 8004796:	b298      	uxth	r0, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	b29a      	uxth	r2, r3
 800479c:	88bb      	ldrh	r3, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	b299      	uxth	r1, r3
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4c22      	ldr	r4, [pc, #136]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4423      	add	r3, r4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f000 f83d 	bl	8004834 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b298      	uxth	r0, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	88bb      	ldrh	r3, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	b299      	uxth	r1, r3
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <BSP_LCD_DrawCircle+0x1cc>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4c17      	ldr	r4, [pc, #92]	; (8004830 <BSP_LCD_DrawCircle+0x1d0>)
 80047d4:	4613      	mov	r3, r2
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4423      	add	r3, r4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	f000 f827 	bl	8004834 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da06      	bge.n	80047fa <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	009a      	lsls	r2, r3, #2
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4413      	add	r3, r2
 80047f4:	3306      	adds	r3, #6
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e00a      	b.n	8004810 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	009a      	lsls	r2, r3, #2
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4413      	add	r3, r2
 8004806:	330a      	adds	r3, #10
 8004808:	617b      	str	r3, [r7, #20]
      current_y--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b01      	subs	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3301      	adds	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	429a      	cmp	r2, r3
 800481c:	f67f af33 	bls.w	8004686 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}
 800482a:	bf00      	nop
 800482c:	20000470 	.word	0x20000470
 8004830:	20000474 	.word	0x20000474

08004834 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004834:	b5b0      	push	{r4, r5, r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	603a      	str	r2, [r7, #0]
 800483e:	80fb      	strh	r3, [r7, #6]
 8004840:	460b      	mov	r3, r1
 8004842:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <BSP_LCD_DrawPixel+0x88>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <BSP_LCD_DrawPixel+0x8c>)
 800484a:	2134      	movs	r1, #52	; 0x34
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3348      	adds	r3, #72	; 0x48
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d116      	bne.n	8004888 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800485a:	4b18      	ldr	r3, [pc, #96]	; (80048bc <BSP_LCD_DrawPixel+0x88>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <BSP_LCD_DrawPixel+0x8c>)
 8004860:	2134      	movs	r1, #52	; 0x34
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	335c      	adds	r3, #92	; 0x5c
 800486a:	681c      	ldr	r4, [r3, #0]
 800486c:	88bd      	ldrh	r5, [r7, #4]
 800486e:	f7ff fc53 	bl	8004118 <BSP_LCD_GetXSize>
 8004872:	4603      	mov	r3, r0
 8004874:	fb03 f205 	mul.w	r2, r3, r5
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	4413      	add	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4423      	add	r3, r4
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b292      	uxth	r2, r2
 8004884:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004886:	e015      	b.n	80048b4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <BSP_LCD_DrawPixel+0x88>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <BSP_LCD_DrawPixel+0x8c>)
 800488e:	2134      	movs	r1, #52	; 0x34
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	335c      	adds	r3, #92	; 0x5c
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	88bd      	ldrh	r5, [r7, #4]
 800489c:	f7ff fc3c 	bl	8004118 <BSP_LCD_GetXSize>
 80048a0:	4603      	mov	r3, r0
 80048a2:	fb03 f205 	mul.w	r2, r3, r5
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4423      	add	r3, r4
 80048ae:	461a      	mov	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bdb0      	pop	{r4, r5, r7, pc}
 80048bc:	20000470 	.word	0x20000470
 80048c0:	20008da8 	.word	0x20008da8

080048c4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b08b      	sub	sp, #44	; 0x2c
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	330a      	adds	r3, #10
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	330b      	adds	r3, #11
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	330c      	adds	r3, #12
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	330d      	adds	r3, #13
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	4413      	add	r3, r2
 800490a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3312      	adds	r3, #18
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3313      	adds	r3, #19
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3314      	adds	r3, #20
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	441a      	add	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3315      	adds	r3, #21
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	061b      	lsls	r3, r3, #24
 8004930:	4413      	add	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3316      	adds	r3, #22
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3317      	adds	r3, #23
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3318      	adds	r3, #24
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3319      	adds	r3, #25
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	331c      	adds	r3, #28
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	331d      	adds	r3, #29
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	4413      	add	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <BSP_LCD_DrawBitmap+0x15c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <BSP_LCD_DrawBitmap+0x160>)
 8004976:	2134      	movs	r1, #52	; 0x34
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	335c      	adds	r3, #92	; 0x5c
 8004980:	681c      	ldr	r4, [r3, #0]
 8004982:	f7ff fbc9 	bl	8004118 <BSP_LCD_GetXSize>
 8004986:	4602      	mov	r2, r0
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	fb03 f202 	mul.w	r2, r3, r2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4423      	add	r3, r4
 8004996:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3b20      	subs	r3, #32
 800499c:	2b07      	cmp	r3, #7
 800499e:	d802      	bhi.n	80049a6 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e008      	b.n	80049b8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3b10      	subs	r3, #16
 80049aa:	2b07      	cmp	r3, #7
 80049ac:	d802      	bhi.n	80049b4 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80049ae:	2302      	movs	r3, #2
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e001      	b.n	80049b8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80049b4:	2301      	movs	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	08d2      	lsrs	r2, r2, #3
 80049c6:	fb02 f203 	mul.w	r2, r2, r3
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	4413      	add	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	e018      	b.n	8004a0c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80049da:	6a39      	ldr	r1, [r7, #32]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fb53 	bl	800508c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80049e6:	f7ff fb97 	bl	8004118 <BSP_LCD_GetXSize>
 80049ea:	4603      	mov	r3, r0
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	4413      	add	r3, r2
 80049f2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	08db      	lsrs	r3, r3, #3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	425b      	negs	r3, r3
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	3301      	adds	r3, #1
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3e2      	bcc.n	80049da <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	372c      	adds	r7, #44	; 0x2c
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000470 	.word	0x20000470
 8004a24:	20008da8 	.word	0x20008da8

08004a28 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af02      	add	r7, sp, #8
 8004a30:	4604      	mov	r4, r0
 8004a32:	4608      	mov	r0, r1
 8004a34:	4611      	mov	r1, r2
 8004a36:	461a      	mov	r2, r3
 8004a38:	4623      	mov	r3, r4
 8004a3a:	80fb      	strh	r3, [r7, #6]
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	80bb      	strh	r3, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
 8004a44:	4613      	mov	r3, r2
 8004a46:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a4c:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <BSP_LCD_FillRect+0xe8>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4930      	ldr	r1, [pc, #192]	; (8004b14 <BSP_LCD_FillRect+0xec>)
 8004a52:	4613      	mov	r3, r2
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fbf2 	bl	8004248 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <BSP_LCD_FillRect+0xe8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <BSP_LCD_FillRect+0xf0>)
 8004a6a:	2134      	movs	r1, #52	; 0x34
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	3348      	adds	r3, #72	; 0x48
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d114      	bne.n	8004aa4 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004a7a:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <BSP_LCD_FillRect+0xe8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <BSP_LCD_FillRect+0xf0>)
 8004a80:	2134      	movs	r1, #52	; 0x34
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	335c      	adds	r3, #92	; 0x5c
 8004a8a:	681c      	ldr	r4, [r3, #0]
 8004a8c:	f7ff fb44 	bl	8004118 <BSP_LCD_GetXSize>
 8004a90:	4602      	mov	r2, r0
 8004a92:	88bb      	ldrh	r3, [r7, #4]
 8004a94:	fb03 f202 	mul.w	r2, r3, r2
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4423      	add	r3, r4
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e013      	b.n	8004acc <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <BSP_LCD_FillRect+0xe8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <BSP_LCD_FillRect+0xf0>)
 8004aaa:	2134      	movs	r1, #52	; 0x34
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	335c      	adds	r3, #92	; 0x5c
 8004ab4:	681c      	ldr	r4, [r3, #0]
 8004ab6:	f7ff fb2f 	bl	8004118 <BSP_LCD_GetXSize>
 8004aba:	4602      	mov	r2, r0
 8004abc:	88bb      	ldrh	r3, [r7, #4]
 8004abe:	fb03 f202 	mul.w	r2, r3, r2
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4423      	add	r3, r4
 8004aca:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <BSP_LCD_FillRect+0xe8>)
 8004ace:	681c      	ldr	r4, [r3, #0]
 8004ad0:	68fd      	ldr	r5, [r7, #12]
 8004ad2:	887e      	ldrh	r6, [r7, #2]
 8004ad4:	f8b7 8000 	ldrh.w	r8, [r7]
 8004ad8:	f7ff fb1e 	bl	8004118 <BSP_LCD_GetXSize>
 8004adc:	4602      	mov	r2, r0
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	1ad1      	subs	r1, r2, r3
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <BSP_LCD_FillRect+0xe8>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	480b      	ldr	r0, [pc, #44]	; (8004b14 <BSP_LCD_FillRect+0xec>)
 8004ae8:	4613      	mov	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4403      	add	r3, r0
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	9100      	str	r1, [sp, #0]
 8004af8:	4643      	mov	r3, r8
 8004afa:	4632      	mov	r2, r6
 8004afc:	4629      	mov	r1, r5
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 fa78 	bl	8004ff4 <LL_FillBuffer>
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000470 	.word	0x20000470
 8004b14:	20000474 	.word	0x20000474
 8004b18:	20008da8 	.word	0x20008da8

08004b1c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	80fb      	strh	r3, [r7, #6]
 8004b26:	460b      	mov	r3, r1
 8004b28:	80bb      	strh	r3, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	f1c3 0303 	rsb	r3, r3, #3
 8004b36:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004b40:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <BSP_LCD_FillCircle+0x138>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4944      	ldr	r1, [pc, #272]	; (8004c58 <BSP_LCD_FillCircle+0x13c>)
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fb78 	bl	8004248 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004b58:	e061      	b.n	8004c1e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d021      	beq.n	8004ba4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	b298      	uxth	r0, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	88bb      	ldrh	r3, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	b299      	uxth	r1, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f7ff fd11 	bl	80045a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b298      	uxth	r0, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	88ba      	ldrh	r2, [r7, #4]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	b299      	uxth	r1, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7ff fd00 	bl	80045a4 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d021      	beq.n	8004bee <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b298      	uxth	r0, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	88ba      	ldrh	r2, [r7, #4]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b299      	uxth	r1, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7ff fcec 	bl	80045a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	b298      	uxth	r0, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	88bb      	ldrh	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b299      	uxth	r1, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	f7ff fcdb 	bl	80045a4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	da06      	bge.n	8004c02 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	009a      	lsls	r2, r3, #2
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3306      	adds	r3, #6
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e00a      	b.n	8004c18 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	009a      	lsls	r2, r3, #2
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	330a      	adds	r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
      current_y--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d999      	bls.n	8004b5a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <BSP_LCD_FillCircle+0x138>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	490b      	ldr	r1, [pc, #44]	; (8004c58 <BSP_LCD_FillCircle+0x13c>)
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fb05 	bl	8004248 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	88b9      	ldrh	r1, [r7, #4]
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fd0b 	bl	8004660 <BSP_LCD_DrawCircle>
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000470 	.word	0x20000470
 8004c58:	20000474 	.word	0x20000474

08004c5c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <BSP_LCD_DisplayOn+0x30>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <BSP_LCD_DisplayOn+0x30>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004c70:	2201      	movs	r2, #1
 8004c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c76:	4806      	ldr	r0, [pc, #24]	; (8004c90 <BSP_LCD_DisplayOn+0x34>)
 8004c78:	f003 fb8c 	bl	8008394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2108      	movs	r1, #8
 8004c80:	4804      	ldr	r0, [pc, #16]	; (8004c94 <BSP_LCD_DisplayOn+0x38>)
 8004c82:	f003 fb87 	bl	8008394 <HAL_GPIO_WritePin>
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20008da8 	.word	0x20008da8
 8004c90:	40022000 	.word	0x40022000
 8004c94:	40022800 	.word	0x40022800

08004c98 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b090      	sub	sp, #64	; 0x40
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004ca2:	4b64      	ldr	r3, [pc, #400]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	4a63      	ldr	r2, [pc, #396]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cac:	6453      	str	r3, [r2, #68]	; 0x44
 8004cae:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004cba:	4b5e      	ldr	r3, [pc, #376]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4a5d      	ldr	r2, [pc, #372]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc6:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cd2:	4b58      	ldr	r3, [pc, #352]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	4a57      	ldr	r2, [pc, #348]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cd8:	f043 0310 	orr.w	r3, r3, #16
 8004cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cde:	4b55      	ldr	r3, [pc, #340]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cea:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf6:	4b4f      	ldr	r3, [pc, #316]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004d02:	4b4c      	ldr	r3, [pc, #304]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0e:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004d1a:	4b46      	ldr	r3, [pc, #280]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	4a45      	ldr	r2, [pc, #276]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d24:	6313      	str	r3, [r2, #48]	; 0x30
 8004d26:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	4a3f      	ldr	r2, [pc, #252]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004d62:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <BSP_LCD_MspInit+0x19c>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004d86:	2302      	movs	r3, #2
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004d8a:	230e      	movs	r3, #14
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d92:	4619      	mov	r1, r3
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <BSP_LCD_MspInit+0x1a0>)
 8004d96:	f003 f845 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004da4:	2309      	movs	r3, #9
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dac:	4619      	mov	r1, r3
 8004dae:	4823      	ldr	r0, [pc, #140]	; (8004e3c <BSP_LCD_MspInit+0x1a4>)
 8004db0:	f003 f838 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004db4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004dbe:	230e      	movs	r3, #14
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	481d      	ldr	r0, [pc, #116]	; (8004e40 <BSP_LCD_MspInit+0x1a8>)
 8004dca:	f003 f82b 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004dce:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004dd8:	230e      	movs	r3, #14
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004de0:	4619      	mov	r1, r3
 8004de2:	4818      	ldr	r0, [pc, #96]	; (8004e44 <BSP_LCD_MspInit+0x1ac>)
 8004de4:	f003 f81e 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004de8:	23f7      	movs	r3, #247	; 0xf7
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004dec:	2302      	movs	r3, #2
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004df0:	230e      	movs	r3, #14
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4813      	ldr	r0, [pc, #76]	; (8004e48 <BSP_LCD_MspInit+0x1b0>)
 8004dfc:	f003 f812 	bl	8007e24 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004e06:	2301      	movs	r3, #1
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e0e:	4619      	mov	r1, r3
 8004e10:	480b      	ldr	r0, [pc, #44]	; (8004e40 <BSP_LCD_MspInit+0x1a8>)
 8004e12:	f003 f807 	bl	8007e24 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004e16:	2308      	movs	r3, #8
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e22:	4619      	mov	r1, r3
 8004e24:	4808      	ldr	r0, [pc, #32]	; (8004e48 <BSP_LCD_MspInit+0x1b0>)
 8004e26:	f002 fffd 	bl	8007e24 <HAL_GPIO_Init>
}
 8004e2a:	bf00      	nop
 8004e2c:	3740      	adds	r7, #64	; 0x40
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40021800 	.word	0x40021800
 8004e40:	40022000 	.word	0x40022000
 8004e44:	40022400 	.word	0x40022400
 8004e48:	40022800 	.word	0x40022800

08004e4c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <BSP_LCD_ClockConfig+0x34>)
 8004e58:	2208      	movs	r2, #8
 8004e5a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <BSP_LCD_ClockConfig+0x34>)
 8004e5e:	22c0      	movs	r2, #192	; 0xc0
 8004e60:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <BSP_LCD_ClockConfig+0x34>)
 8004e64:	2205      	movs	r2, #5
 8004e66:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <BSP_LCD_ClockConfig+0x34>)
 8004e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004e70:	4803      	ldr	r0, [pc, #12]	; (8004e80 <BSP_LCD_ClockConfig+0x34>)
 8004e72:	f005 f999 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000048c 	.word	0x2000048c

08004e84 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	603a      	str	r2, [r7, #0]
 8004e8e:	80fb      	strh	r3, [r7, #6]
 8004e90:	460b      	mov	r3, r1
 8004e92:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <DrawChar+0x168>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4953      	ldr	r1, [pc, #332]	; (8004ff0 <DrawChar+0x16c>)
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3308      	adds	r3, #8
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	88db      	ldrh	r3, [r3, #6]
 8004eb2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004eb4:	4b4d      	ldr	r3, [pc, #308]	; (8004fec <DrawChar+0x168>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	494d      	ldr	r1, [pc, #308]	; (8004ff0 <DrawChar+0x16c>)
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	889b      	ldrh	r3, [r3, #4]
 8004eca:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004ecc:	8a3b      	ldrh	r3, [r7, #16]
 8004ece:	3307      	adds	r3, #7
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da00      	bge.n	8004ed6 <DrawChar+0x52>
 8004ed4:	3307      	adds	r3, #7
 8004ed6:	10db      	asrs	r3, r3, #3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8a3b      	ldrh	r3, [r7, #16]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e076      	b.n	8004fda <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004eec:	8a3b      	ldrh	r3, [r7, #16]
 8004eee:	3307      	adds	r3, #7
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da00      	bge.n	8004ef6 <DrawChar+0x72>
 8004ef4:	3307      	adds	r3, #7
 8004ef6:	10db      	asrs	r3, r3, #3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	fb03 f302 	mul.w	r3, r3, r2
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004f06:	8a3b      	ldrh	r3, [r7, #16]
 8004f08:	3307      	adds	r3, #7
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da00      	bge.n	8004f10 <DrawChar+0x8c>
 8004f0e:	3307      	adds	r3, #7
 8004f10:	10db      	asrs	r3, r3, #3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d002      	beq.n	8004f1c <DrawChar+0x98>
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d004      	beq.n	8004f24 <DrawChar+0xa0>
 8004f1a:	e00c      	b.n	8004f36 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]
      break;
 8004f22:	e016      	b.n	8004f52 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e00d      	b.n	8004f52 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	041a      	lsls	r2, r3, #16
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	4313      	orrs	r3, r2
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	3202      	adds	r2, #2
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
      break;
 8004f50:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e036      	b.n	8004fc6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004f58:	8a3a      	ldrh	r2, [r7, #16]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad2      	subs	r2, r2, r3
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	4413      	add	r3, r2
 8004f62:	3b01      	subs	r3, #1
 8004f64:	2201      	movs	r2, #1
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d012      	beq.n	8004f9a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	b298      	uxth	r0, r3
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <DrawChar+0x168>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <DrawChar+0x16c>)
 8004f84:	4613      	mov	r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	88bb      	ldrh	r3, [r7, #4]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f7ff fc4e 	bl	8004834 <BSP_LCD_DrawPixel>
 8004f98:	e012      	b.n	8004fc0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b298      	uxth	r0, r3
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <DrawChar+0x168>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4911      	ldr	r1, [pc, #68]	; (8004ff0 <DrawChar+0x16c>)
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	88bb      	ldrh	r3, [r7, #4]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f7ff fc3a 	bl	8004834 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	8a3b      	ldrh	r3, [r7, #16]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3c4      	bcc.n	8004f58 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004fce:	88bb      	ldrh	r3, [r7, #4]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	8a7b      	ldrh	r3, [r7, #18]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d384      	bcc.n	8004eec <DrawChar+0x68>
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000470 	.word	0x20000470
 8004ff0:	20000474 	.word	0x20000474

08004ff4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005002:	4b1e      	ldr	r3, [pc, #120]	; (800507c <LL_FillBuffer+0x88>)
 8005004:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005008:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <LL_FillBuffer+0x8c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <LL_FillBuffer+0x90>)
 8005010:	2134      	movs	r1, #52	; 0x34
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4413      	add	r3, r2
 8005018:	3348      	adds	r3, #72	; 0x48
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d103      	bne.n	8005028 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005020:	4b16      	ldr	r3, [pc, #88]	; (800507c <LL_FillBuffer+0x88>)
 8005022:	2202      	movs	r2, #2
 8005024:	609a      	str	r2, [r3, #8]
 8005026:	e002      	b.n	800502e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <LL_FillBuffer+0x88>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800502e:	4a13      	ldr	r2, [pc, #76]	; (800507c <LL_FillBuffer+0x88>)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <LL_FillBuffer+0x88>)
 8005036:	4a14      	ldr	r2, [pc, #80]	; (8005088 <LL_FillBuffer+0x94>)
 8005038:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800503a:	4810      	ldr	r0, [pc, #64]	; (800507c <LL_FillBuffer+0x88>)
 800503c:	f002 fb56 	bl	80076ec <HAL_DMA2D_Init>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d115      	bne.n	8005072 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	480c      	ldr	r0, [pc, #48]	; (800507c <LL_FillBuffer+0x88>)
 800504a:	f002 fdbd 	bl	8007bc8 <HAL_DMA2D_ConfigLayer>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10e      	bne.n	8005072 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	4807      	ldr	r0, [pc, #28]	; (800507c <LL_FillBuffer+0x88>)
 8005060:	f002 fb8e 	bl	8007780 <HAL_DMA2D_Start>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800506a:	210a      	movs	r1, #10
 800506c:	4803      	ldr	r0, [pc, #12]	; (800507c <LL_FillBuffer+0x88>)
 800506e:	f002 fbb2 	bl	80077d6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000430 	.word	0x20000430
 8005080:	20000470 	.word	0x20000470
 8005084:	20008da8 	.word	0x20008da8
 8005088:	4002b000 	.word	0x4002b000

0800508c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 800509c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050a0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80050a2:	4b1a      	ldr	r3, [pc, #104]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80050a8:	4b18      	ldr	r3, [pc, #96]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050b6:	22ff      	movs	r2, #255	; 0xff
 80050b8:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80050c0:	4b12      	ldr	r3, [pc, #72]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050c8:	4a11      	ldr	r2, [pc, #68]	; (8005110 <LL_ConvertLineToARGB8888+0x84>)
 80050ca:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80050cc:	480f      	ldr	r0, [pc, #60]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050ce:	f002 fb0d 	bl	80076ec <HAL_DMA2D_Init>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d115      	bne.n	8005104 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80050d8:	2101      	movs	r1, #1
 80050da:	480c      	ldr	r0, [pc, #48]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050dc:	f002 fd74 	bl	8007bc8 <HAL_DMA2D_ConfigLayer>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10e      	bne.n	8005104 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	2301      	movs	r3, #1
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4806      	ldr	r0, [pc, #24]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 80050f2:	f002 fb45 	bl	8007780 <HAL_DMA2D_Start>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d103      	bne.n	8005104 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80050fc:	210a      	movs	r1, #10
 80050fe:	4803      	ldr	r0, [pc, #12]	; (800510c <LL_ConvertLineToARGB8888+0x80>)
 8005100:	f002 fb69 	bl	80077d6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000430 	.word	0x20000430
 8005110:	4002b000 	.word	0x4002b000

08005114 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005118:	4b29      	ldr	r3, [pc, #164]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 800511a:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <BSP_SDRAM_Init+0xb0>)
 800511c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800511e:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 8005120:	2202      	movs	r2, #2
 8005122:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005124:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 8005126:	2207      	movs	r2, #7
 8005128:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 800512c:	2204      	movs	r2, #4
 800512e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 8005132:	2207      	movs	r2, #7
 8005134:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005136:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 8005138:	2202      	movs	r2, #2
 800513a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 800513e:	2202      	movs	r2, #2
 8005140:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005142:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 8005144:	2202      	movs	r2, #2
 8005146:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 800514a:	2200      	movs	r2, #0
 800514c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800514e:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005150:	2200      	movs	r2, #0
 8005152:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005156:	2204      	movs	r2, #4
 8005158:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800515a:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 800515c:	2210      	movs	r2, #16
 800515e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005166:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800516c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005170:	2200      	movs	r2, #0
 8005172:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 800517e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005186:	2200      	movs	r2, #0
 8005188:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800518a:	2100      	movs	r1, #0
 800518c:	480c      	ldr	r0, [pc, #48]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 800518e:	f000 f87f 	bl	8005290 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005192:	490d      	ldr	r1, [pc, #52]	; (80051c8 <BSP_SDRAM_Init+0xb4>)
 8005194:	480a      	ldr	r0, [pc, #40]	; (80051c0 <BSP_SDRAM_Init+0xac>)
 8005196:	f005 ffcf 	bl	800b138 <HAL_SDRAM_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <BSP_SDRAM_Init+0xb8>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e002      	b.n	80051ae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <BSP_SDRAM_Init+0xb8>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80051ae:	f240 6003 	movw	r0, #1539	; 0x603
 80051b2:	f000 f80d 	bl	80051d0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <BSP_SDRAM_Init+0xb8>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20008e50 	.word	0x20008e50
 80051c4:	a0000140 	.word	0xa0000140
 80051c8:	20000510 	.word	0x20000510
 80051cc:	2000003c 	.word	0x2000003c

080051d0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80051dc:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80051e2:	4b29      	ldr	r3, [pc, #164]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051e4:	2210      	movs	r2, #16
 80051e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80051ee:	4b26      	ldr	r3, [pc, #152]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80051f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f8:	4923      	ldr	r1, [pc, #140]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051fa:	4824      	ldr	r0, [pc, #144]	; (800528c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80051fc:	f005 ffd0 	bl	800b1a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005200:	2001      	movs	r0, #1
 8005202:	f001 fadb 	bl	80067bc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005208:	2202      	movs	r2, #2
 800520a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800520e:	2210      	movs	r2, #16
 8005210:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005212:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005214:	2201      	movs	r2, #1
 8005216:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800521a:	2200      	movs	r2, #0
 800521c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800521e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005222:	4919      	ldr	r1, [pc, #100]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005224:	4819      	ldr	r0, [pc, #100]	; (800528c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005226:	f005 ffbb 	bl	800b1a0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800522a:	4b17      	ldr	r3, [pc, #92]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800522c:	2203      	movs	r2, #3
 800522e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005230:	4b15      	ldr	r3, [pc, #84]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005232:	2210      	movs	r2, #16
 8005234:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005238:	2208      	movs	r2, #8
 800523a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005246:	4910      	ldr	r1, [pc, #64]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005248:	4810      	ldr	r0, [pc, #64]	; (800528c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800524a:	f005 ffa9 	bl	800b1a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800524e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005252:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005256:	2204      	movs	r2, #4
 8005258:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800525c:	2210      	movs	r2, #16
 800525e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005262:	2201      	movs	r2, #1
 8005264:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a07      	ldr	r2, [pc, #28]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800526a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800526c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005270:	4905      	ldr	r1, [pc, #20]	; (8005288 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005272:	4806      	ldr	r0, [pc, #24]	; (800528c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005274:	f005 ff94 	bl	800b1a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4804      	ldr	r0, [pc, #16]	; (800528c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800527c:	f005 ffc5 	bl	800b20a <HAL_SDRAM_ProgramRefreshRate>
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000052c 	.word	0x2000052c
 800528c:	20008e50 	.word	0x20008e50

08005290 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005290:	b580      	push	{r7, lr}
 8005292:	b090      	sub	sp, #64	; 0x40
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800529a:	4b70      	ldr	r3, [pc, #448]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	4a6f      	ldr	r2, [pc, #444]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6393      	str	r3, [r2, #56]	; 0x38
 80052a6:	4b6d      	ldr	r3, [pc, #436]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80052b2:	4b6a      	ldr	r3, [pc, #424]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a69      	ldr	r2, [pc, #420]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b67      	ldr	r3, [pc, #412]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ca:	4b64      	ldr	r3, [pc, #400]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	4a63      	ldr	r2, [pc, #396]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	6313      	str	r3, [r2, #48]	; 0x30
 80052d6:	4b61      	ldr	r3, [pc, #388]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052e2:	4b5e      	ldr	r3, [pc, #376]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	4a5d      	ldr	r2, [pc, #372]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052e8:	f043 0308 	orr.w	r3, r3, #8
 80052ec:	6313      	str	r3, [r2, #48]	; 0x30
 80052ee:	4b5b      	ldr	r3, [pc, #364]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052fa:	4b58      	ldr	r3, [pc, #352]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a57      	ldr	r2, [pc, #348]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005300:	f043 0310 	orr.w	r3, r3, #16
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b55      	ldr	r3, [pc, #340]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005312:	4b52      	ldr	r3, [pc, #328]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a51      	ldr	r2, [pc, #324]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005318:	f043 0320 	orr.w	r3, r3, #32
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b4f      	ldr	r3, [pc, #316]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800532a:	4b4c      	ldr	r3, [pc, #304]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	4a4b      	ldr	r2, [pc, #300]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005334:	6313      	str	r3, [r2, #48]	; 0x30
 8005336:	4b49      	ldr	r3, [pc, #292]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005342:	4b46      	ldr	r3, [pc, #280]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	4a45      	ldr	r2, [pc, #276]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	6313      	str	r3, [r2, #48]	; 0x30
 800534e:	4b43      	ldr	r3, [pc, #268]	; (800545c <BSP_SDRAM_MspInit+0x1cc>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800535a:	2302      	movs	r3, #2
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800535e:	2301      	movs	r3, #1
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005362:	2302      	movs	r3, #2
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005366:	230c      	movs	r3, #12
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800536a:	2308      	movs	r3, #8
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800536e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005372:	4619      	mov	r1, r3
 8005374:	483a      	ldr	r0, [pc, #232]	; (8005460 <BSP_SDRAM_MspInit+0x1d0>)
 8005376:	f002 fd55 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800537a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005384:	4619      	mov	r1, r3
 8005386:	4837      	ldr	r0, [pc, #220]	; (8005464 <BSP_SDRAM_MspInit+0x1d4>)
 8005388:	f002 fd4c 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800538c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005396:	4619      	mov	r1, r3
 8005398:	4833      	ldr	r0, [pc, #204]	; (8005468 <BSP_SDRAM_MspInit+0x1d8>)
 800539a:	f002 fd43 	bl	8007e24 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800539e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80053a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a8:	4619      	mov	r1, r3
 80053aa:	4830      	ldr	r0, [pc, #192]	; (800546c <BSP_SDRAM_MspInit+0x1dc>)
 80053ac:	f002 fd3a 	bl	8007e24 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80053b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80053b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ba:	4619      	mov	r1, r3
 80053bc:	482c      	ldr	r0, [pc, #176]	; (8005470 <BSP_SDRAM_MspInit+0x1e0>)
 80053be:	f002 fd31 	bl	8007e24 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80053c2:	2328      	movs	r3, #40	; 0x28
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80053c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ca:	4619      	mov	r1, r3
 80053cc:	4829      	ldr	r0, [pc, #164]	; (8005474 <BSP_SDRAM_MspInit+0x1e4>)
 80053ce:	f002 fd29 	bl	8007e24 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80053d8:	4b27      	ldr	r3, [pc, #156]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 80053e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 80053e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ec:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053ee:	4b22      	ldr	r3, [pc, #136]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 80053f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053f4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 80053f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053fc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005400:	2200      	movs	r2, #0
 8005402:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800540a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 800540e:	2200      	movs	r2, #0
 8005410:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005414:	2203      	movs	r2, #3
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 800541a:	2200      	movs	r2, #0
 800541c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005426:	4a15      	ldr	r2, [pc, #84]	; (800547c <BSP_SDRAM_MspInit+0x1ec>)
 8005428:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a12      	ldr	r2, [pc, #72]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
 8005430:	4a11      	ldr	r2, [pc, #68]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005436:	4810      	ldr	r0, [pc, #64]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 8005438:	f001 ffb6 	bl	80073a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800543c:	480e      	ldr	r0, [pc, #56]	; (8005478 <BSP_SDRAM_MspInit+0x1e8>)
 800543e:	f001 ff05 	bl	800724c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005442:	2200      	movs	r2, #0
 8005444:	210f      	movs	r1, #15
 8005446:	2038      	movs	r0, #56	; 0x38
 8005448:	f001 fdf6 	bl	8007038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800544c:	2038      	movs	r0, #56	; 0x38
 800544e:	f001 fe0f 	bl	8007070 <HAL_NVIC_EnableIRQ>
}
 8005452:	bf00      	nop
 8005454:	3740      	adds	r7, #64	; 0x40
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	40020800 	.word	0x40020800
 8005464:	40020c00 	.word	0x40020c00
 8005468:	40021000 	.word	0x40021000
 800546c:	40021400 	.word	0x40021400
 8005470:	40021800 	.word	0x40021800
 8005474:	40021c00 	.word	0x40021c00
 8005478:	2000053c 	.word	0x2000053c
 800547c:	40026410 	.word	0x40026410

08005480 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	460a      	mov	r2, r1
 800548a:	80fb      	strh	r3, [r7, #6]
 800548c:	4613      	mov	r3, r2
 800548e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <BSP_TS_Init+0x68>)
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <BSP_TS_Init+0x6c>)
 800549c:	88bb      	ldrh	r3, [r7, #4]
 800549e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <BSP_TS_Init+0x70>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2070      	movs	r0, #112	; 0x70
 80054a6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <BSP_TS_Init+0x70>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2070      	movs	r0, #112	; 0x70
 80054ae:	4798      	blx	r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b51      	cmp	r3, #81	; 0x51
 80054b4:	d111      	bne.n	80054da <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <BSP_TS_Init+0x74>)
 80054b8:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <BSP_TS_Init+0x70>)
 80054ba:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <BSP_TS_Init+0x78>)
 80054be:	2270      	movs	r2, #112	; 0x70
 80054c0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80054c2:	4b0e      	ldr	r3, [pc, #56]	; (80054fc <BSP_TS_Init+0x7c>)
 80054c4:	2208      	movs	r2, #8
 80054c6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <BSP_TS_Init+0x74>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <BSP_TS_Init+0x78>)
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	b292      	uxth	r2, r2
 80054d4:	4610      	mov	r0, r2
 80054d6:	4798      	blx	r3
 80054d8:	e001      	b.n	80054de <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80054da:	2303      	movs	r3, #3
 80054dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200005a0 	.word	0x200005a0
 80054ec:	200005a2 	.word	0x200005a2
 80054f0:	20000000 	.word	0x20000000
 80054f4:	2000059c 	.word	0x2000059c
 80054f8:	200005a5 	.word	0x200005a5
 80054fc:	200005a4 	.word	0x200005a4

08005500 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8005506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800550a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005510:	2302      	movs	r3, #2
 8005512:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005518:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	4619      	mov	r1, r3
 800551e:	480c      	ldr	r0, [pc, #48]	; (8005550 <BSP_TS_ITConfig+0x50>)
 8005520:	f002 fc80 	bl	8007e24 <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8005524:	2200      	movs	r2, #0
 8005526:	210f      	movs	r1, #15
 8005528:	2028      	movs	r0, #40	; 0x28
 800552a:	f001 fd85 	bl	8007038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800552e:	2028      	movs	r0, #40	; 0x28
 8005530:	f001 fd9e 	bl	8007070 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <BSP_TS_ITConfig+0x54>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	4a07      	ldr	r2, [pc, #28]	; (8005558 <BSP_TS_ITConfig+0x58>)
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	b292      	uxth	r2, r2
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3

  return TS_OK;  
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40022000 	.word	0x40022000
 8005554:	2000059c 	.word	0x2000059c
 8005558:	200005a5 	.word	0x200005a5

0800555c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b097      	sub	sp, #92	; 0x5c
 8005560:	af02      	add	r7, sp, #8
 8005562:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005576:	4b97      	ldr	r3, [pc, #604]	; (80057d4 <BSP_TS_GetState+0x278>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	4a96      	ldr	r2, [pc, #600]	; (80057d8 <BSP_TS_GetState+0x27c>)
 800557e:	7812      	ldrb	r2, [r2, #0]
 8005580:	b292      	uxth	r2, r2
 8005582:	4610      	mov	r0, r2
 8005584:	4798      	blx	r3
 8005586:	4603      	mov	r3, r0
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 81a8 	beq.w	80058e8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005598:	2300      	movs	r3, #0
 800559a:	64bb      	str	r3, [r7, #72]	; 0x48
 800559c:	e197      	b.n	80058ce <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800559e:	4b8d      	ldr	r3, [pc, #564]	; (80057d4 <BSP_TS_GetState+0x278>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	4a8c      	ldr	r2, [pc, #560]	; (80057d8 <BSP_TS_GetState+0x27c>)
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	b290      	uxth	r0, r2
 80055aa:	f107 0120 	add.w	r1, r7, #32
 80055ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b0:	0052      	lsls	r2, r2, #1
 80055b2:	188c      	adds	r4, r1, r2
 80055b4:	f107 0114 	add.w	r1, r7, #20
 80055b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ba:	0052      	lsls	r2, r2, #1
 80055bc:	440a      	add	r2, r1
 80055be:	4621      	mov	r1, r4
 80055c0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80055c2:	4b86      	ldr	r3, [pc, #536]	; (80057dc <BSP_TS_GetState+0x280>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d11b      	bne.n	8005602 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80055ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80055d2:	4413      	add	r3, r2
 80055d4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80055d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80055e0:	440b      	add	r3, r1
 80055e2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80055ee:	4413      	add	r3, r2
 80055f0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80055f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80055fc:	440b      	add	r3, r1
 80055fe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005602:	4b76      	ldr	r3, [pc, #472]	; (80057dc <BSP_TS_GetState+0x280>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800560e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005616:	4413      	add	r3, r2
 8005618:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800561c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005620:	b29a      	uxth	r2, r3
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800562a:	440b      	add	r3, r1
 800562c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005630:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <BSP_TS_GetState+0x280>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800563c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005644:	4413      	add	r3, r2
 8005646:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800564a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800564e:	b29a      	uxth	r2, r3
 8005650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005658:	440b      	add	r3, r1
 800565a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800565e:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <BSP_TS_GetState+0x280>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01b      	beq.n	80056a2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800566a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005672:	4413      	add	r3, r2
 8005674:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005680:	440b      	add	r3, r1
 8005682:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800568e:	4413      	add	r3, r2
 8005690:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800569c:	440b      	add	r3, r1
 800569e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80056a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80056aa:	4413      	add	r3, r2
 80056ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4a4b      	ldr	r2, [pc, #300]	; (80057e0 <BSP_TS_GetState+0x284>)
 80056b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d90e      	bls.n	80056dc <BSP_TS_GetState+0x180>
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80056c6:	4413      	add	r3, r2
 80056c8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80056cc:	4944      	ldr	r1, [pc, #272]	; (80057e0 <BSP_TS_GetState+0x284>)
 80056ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	b29b      	uxth	r3, r3
 80056da:	e00d      	b.n	80056f8 <BSP_TS_GetState+0x19c>
 80056dc:	4a40      	ldr	r2, [pc, #256]	; (80057e0 <BSP_TS_GetState+0x284>)
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80056ee:	440b      	add	r3, r1
 80056f0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80056fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005704:	4413      	add	r3, r2
 8005706:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800570a:	4619      	mov	r1, r3
 800570c:	4a35      	ldr	r2, [pc, #212]	; (80057e4 <BSP_TS_GetState+0x288>)
 800570e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	4299      	cmp	r1, r3
 8005716:	d90e      	bls.n	8005736 <BSP_TS_GetState+0x1da>
 8005718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005720:	4413      	add	r3, r2
 8005722:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005726:	492f      	ldr	r1, [pc, #188]	; (80057e4 <BSP_TS_GetState+0x288>)
 8005728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800572e:	b29b      	uxth	r3, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	b29b      	uxth	r3, r3
 8005734:	e00d      	b.n	8005752 <BSP_TS_GetState+0x1f6>
 8005736:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <BSP_TS_GetState+0x288>)
 8005738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573e:	b29a      	uxth	r2, r3
 8005740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005748:	440b      	add	r3, r1
 800574a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005756:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800575a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800575e:	4413      	add	r3, r2
 8005760:	2b05      	cmp	r3, #5
 8005762:	dd17      	ble.n	8005794 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8005764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800576c:	4413      	add	r3, r2
 800576e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005772:	4619      	mov	r1, r3
 8005774:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <BSP_TS_GetState+0x284>)
 8005776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800577c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005784:	4413      	add	r3, r2
 8005786:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800578a:	4619      	mov	r1, r3
 800578c:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <BSP_TS_GetState+0x288>)
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005794:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <BSP_TS_GetState+0x27c>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b70      	cmp	r3, #112	; 0x70
 800579a:	d125      	bne.n	80057e8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800579c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80057a4:	4413      	add	r3, r2
 80057a6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	4413      	add	r3, r2
 80057b2:	460a      	mov	r2, r1
 80057b4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80057be:	4413      	add	r3, r2
 80057c0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c8:	3304      	adds	r3, #4
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	460a      	mov	r2, r1
 80057d0:	809a      	strh	r2, [r3, #4]
 80057d2:	e02c      	b.n	800582e <BSP_TS_GetState+0x2d2>
 80057d4:	2000059c 	.word	0x2000059c
 80057d8:	200005a5 	.word	0x200005a5
 80057dc:	200005a4 	.word	0x200005a4
 80057e0:	200005a8 	.word	0x200005a8
 80057e4:	200005bc 	.word	0x200005bc
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80057e8:	4b42      	ldr	r3, [pc, #264]	; (80058f4 <BSP_TS_GetState+0x398>)
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	4a42      	ldr	r2, [pc, #264]	; (80058f8 <BSP_TS_GetState+0x39c>)
 80057f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	fb03 f301 	mul.w	r3, r3, r1
 80057fa:	0b1b      	lsrs	r3, r3, #12
 80057fc:	b299      	uxth	r1, r3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	460a      	mov	r2, r1
 8005808:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800580a:	4b3c      	ldr	r3, [pc, #240]	; (80058fc <BSP_TS_GetState+0x3a0>)
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	4619      	mov	r1, r3
 8005810:	4a3b      	ldr	r2, [pc, #236]	; (8005900 <BSP_TS_GetState+0x3a4>)
 8005812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005818:	fb03 f301 	mul.w	r3, r3, r1
 800581c:	0b1b      	lsrs	r3, r3, #12
 800581e:	b299      	uxth	r1, r3
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005824:	3304      	adds	r3, #4
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	4413      	add	r3, r2
 800582a:	460a      	mov	r2, r1
 800582c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800582e:	4b35      	ldr	r3, [pc, #212]	; (8005904 <BSP_TS_GetState+0x3a8>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b298      	uxth	r0, r3
 8005834:	f107 010c 	add.w	r1, r7, #12
 8005838:	f107 0210 	add.w	r2, r7, #16
 800583c:	f107 0308 	add.w	r3, r7, #8
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	460b      	mov	r3, r1
 8005844:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005846:	f7fb f843 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	b2d9      	uxtb	r1, r3
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005852:	4413      	add	r3, r2
 8005854:	3316      	adds	r3, #22
 8005856:	460a      	mov	r2, r1
 8005858:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	b2d9      	uxtb	r1, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005862:	4413      	add	r3, r2
 8005864:	3320      	adds	r3, #32
 8005866:	460a      	mov	r2, r1
 8005868:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d827      	bhi.n	80058c0 <BSP_TS_GetState+0x364>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <BSP_TS_GetState+0x31c>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005889 	.word	0x08005889
 800587c:	08005897 	.word	0x08005897
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058b3 	.word	0x080058b3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588c:	4413      	add	r3, r2
 800588e:	331b      	adds	r3, #27
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
          break;
 8005894:	e018      	b.n	80058c8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589a:	4413      	add	r3, r2
 800589c:	331b      	adds	r3, #27
 800589e:	2202      	movs	r2, #2
 80058a0:	701a      	strb	r2, [r3, #0]
          break;
 80058a2:	e011      	b.n	80058c8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a8:	4413      	add	r3, r2
 80058aa:	331b      	adds	r3, #27
 80058ac:	2203      	movs	r2, #3
 80058ae:	701a      	strb	r2, [r3, #0]
          break;
 80058b0:	e00a      	b.n	80058c8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b6:	4413      	add	r3, r2
 80058b8:	331b      	adds	r3, #27
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
          break;
 80058be:	e003      	b.n	80058c8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80058c6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	3301      	adds	r3, #1
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f4ff ae61 	bcc.w	800559e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f813 	bl	8005908 <BSP_TS_Get_GestureId>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80058e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3754      	adds	r7, #84	; 0x54
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd90      	pop	{r4, r7, pc}
 80058f4:	200005a0 	.word	0x200005a0
 80058f8:	200005a8 	.word	0x200005a8
 80058fc:	200005a2 	.word	0x200005a2
 8005900:	200005bc 	.word	0x200005bc
 8005904:	200005a5 	.word	0x200005a5

08005908 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005918:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <BSP_TS_Get_GestureId+0x100>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f107 0208 	add.w	r2, r7, #8
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f7fa ffba 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b49      	cmp	r3, #73	; 0x49
 800592e:	d05e      	beq.n	80059ee <BSP_TS_Get_GestureId+0xe6>
 8005930:	2b49      	cmp	r3, #73	; 0x49
 8005932:	d860      	bhi.n	80059f6 <BSP_TS_Get_GestureId+0xee>
 8005934:	2b1c      	cmp	r3, #28
 8005936:	d83f      	bhi.n	80059b8 <BSP_TS_Get_GestureId+0xb0>
 8005938:	2b1c      	cmp	r3, #28
 800593a:	d85c      	bhi.n	80059f6 <BSP_TS_Get_GestureId+0xee>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <BSP_TS_Get_GestureId+0x3c>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	080059bf 	.word	0x080059bf
 8005948:	080059f7 	.word	0x080059f7
 800594c:	080059f7 	.word	0x080059f7
 8005950:	080059f7 	.word	0x080059f7
 8005954:	080059f7 	.word	0x080059f7
 8005958:	080059f7 	.word	0x080059f7
 800595c:	080059f7 	.word	0x080059f7
 8005960:	080059f7 	.word	0x080059f7
 8005964:	080059f7 	.word	0x080059f7
 8005968:	080059f7 	.word	0x080059f7
 800596c:	080059f7 	.word	0x080059f7
 8005970:	080059f7 	.word	0x080059f7
 8005974:	080059f7 	.word	0x080059f7
 8005978:	080059f7 	.word	0x080059f7
 800597c:	080059f7 	.word	0x080059f7
 8005980:	080059f7 	.word	0x080059f7
 8005984:	080059c7 	.word	0x080059c7
 8005988:	080059f7 	.word	0x080059f7
 800598c:	080059f7 	.word	0x080059f7
 8005990:	080059f7 	.word	0x080059f7
 8005994:	080059cf 	.word	0x080059cf
 8005998:	080059f7 	.word	0x080059f7
 800599c:	080059f7 	.word	0x080059f7
 80059a0:	080059f7 	.word	0x080059f7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	080059f7 	.word	0x080059f7
 80059ac:	080059f7 	.word	0x080059f7
 80059b0:	080059f7 	.word	0x080059f7
 80059b4:	080059df 	.word	0x080059df
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d014      	beq.n	80059e6 <BSP_TS_Get_GestureId+0xde>
 80059bc:	e01b      	b.n	80059f6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059c4:	e01a      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059cc:	e016      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059d4:	e012      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2203      	movs	r2, #3
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059dc:	e00e      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2204      	movs	r2, #4
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059e4:	e00a      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2205      	movs	r2, #5
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059ec:	e006      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2206      	movs	r2, #6
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059f4:	e002      	b.n	80059fc <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
      break;
 80059fa:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	200005a5 	.word	0x200005a5

08005a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a34:	6453      	str	r3, [r2, #68]	; 0x44
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a42:	2200      	movs	r2, #0
 8005a44:	210f      	movs	r1, #15
 8005a46:	f06f 0001 	mvn.w	r0, #1
 8005a4a:	f001 faf5 	bl	8007038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800

08005a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08c      	sub	sp, #48	; 0x30
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a64:	f107 031c 	add.w	r3, r7, #28
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a2a      	ldr	r2, [pc, #168]	; (8005b24 <HAL_ADC_MspInit+0xc8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d124      	bne.n	8005ac8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a7e:	4b2a      	ldr	r3, [pc, #168]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	4a29      	ldr	r2, [pc, #164]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a88:	6453      	str	r3, [r2, #68]	; 0x44
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005a9c:	f043 0301 	orr.w	r3, r3, #1
 8005aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa2:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	4619      	mov	r1, r3
 8005ac0:	481a      	ldr	r0, [pc, #104]	; (8005b2c <HAL_ADC_MspInit+0xd0>)
 8005ac2:	f002 f9af 	bl	8007e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005ac6:	e029      	b.n	8005b1c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_ADC_MspInit+0xd4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d124      	bne.n	8005b1c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005adc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005af0:	f043 0320 	orr.w	r3, r3, #32
 8005af4:	6313      	str	r3, [r2, #48]	; 0x30
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <HAL_ADC_MspInit+0xcc>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8005b02:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b10:	f107 031c 	add.w	r3, r7, #28
 8005b14:	4619      	mov	r1, r3
 8005b16:	4807      	ldr	r0, [pc, #28]	; (8005b34 <HAL_ADC_MspInit+0xd8>)
 8005b18:	f002 f984 	bl	8007e24 <HAL_GPIO_Init>
}
 8005b1c:	bf00      	nop
 8005b1e:	3730      	adds	r7, #48	; 0x30
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40012000 	.word	0x40012000
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40020000 	.word	0x40020000
 8005b30:	40012200 	.word	0x40012200
 8005b34:	40021400 	.word	0x40021400

08005b38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <HAL_DAC_MspInit+0x84>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d12b      	bne.n	8005bb2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005b5a:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_DAC_MspInit+0x88>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_DAC_MspInit+0x88>)
 8005b60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b64:	6413      	str	r3, [r2, #64]	; 0x40
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_DAC_MspInit+0x88>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_DAC_MspInit+0x88>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <HAL_DAC_MspInit+0x88>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7e:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <HAL_DAC_MspInit+0x88>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b96:	f107 0314 	add.w	r3, r7, #20
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4809      	ldr	r0, [pc, #36]	; (8005bc4 <HAL_DAC_MspInit+0x8c>)
 8005b9e:	f002 f941 	bl	8007e24 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	210f      	movs	r1, #15
 8005ba6:	2036      	movs	r0, #54	; 0x36
 8005ba8:	f001 fa46 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005bac:	2036      	movs	r0, #54	; 0x36
 8005bae:	f001 fa5f 	bl	8007070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005bb2:	bf00      	nop
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40007400 	.word	0x40007400
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	40020000 	.word	0x40020000

08005bc8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0d      	ldr	r2, [pc, #52]	; (8005c0c <HAL_DMA2D_MspInit+0x44>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d113      	bne.n	8005c02 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <HAL_DMA2D_MspInit+0x48>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <HAL_DMA2D_MspInit+0x48>)
 8005be0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005be4:	6313      	str	r3, [r2, #48]	; 0x30
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <HAL_DMA2D_MspInit+0x48>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2105      	movs	r1, #5
 8005bf6:	205a      	movs	r0, #90	; 0x5a
 8005bf8:	f001 fa1e 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005bfc:	205a      	movs	r0, #90	; 0x5a
 8005bfe:	f001 fa37 	bl	8007070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	4002b000 	.word	0x4002b000
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b0ac      	sub	sp, #176	; 0xb0
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c2c:	f107 0318 	add.w	r3, r7, #24
 8005c30:	2284      	movs	r2, #132	; 0x84
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f009 fdd9 	bl	800f7ec <memset>
  if(hi2c->Instance==I2C1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a44      	ldr	r2, [pc, #272]	; (8005d50 <HAL_I2C_MspInit+0x13c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d13d      	bne.n	8005cc0 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c4e:	f107 0318 	add.w	r3, r7, #24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f004 faa8 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005c5e:	f7fe f841 	bl	8003ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c62:	4b3c      	ldr	r3, [pc, #240]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	4a3b      	ldr	r2, [pc, #236]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005c68:	f043 0302 	orr.w	r3, r3, #2
 8005c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c6e:	4b39      	ldr	r3, [pc, #228]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c82:	2312      	movs	r3, #18
 8005c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c94:	2304      	movs	r3, #4
 8005c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	482d      	ldr	r0, [pc, #180]	; (8005d58 <HAL_I2C_MspInit+0x144>)
 8005ca2:	f002 f8bf 	bl	8007e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ca6:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4a2a      	ldr	r2, [pc, #168]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005cbe:	e042      	b.n	8005d46 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a25      	ldr	r2, [pc, #148]	; (8005d5c <HAL_I2C_MspInit+0x148>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d13d      	bne.n	8005d46 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8005cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cd6:	f107 0318 	add.w	r3, r7, #24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f004 fa64 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8005ce6:	f7fd fffd 	bl	8003ce4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cea:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8005cf6:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005d02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d0a:	2312      	movs	r3, #18
 8005d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d16:	2303      	movs	r3, #3
 8005d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005d22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005d26:	4619      	mov	r1, r3
 8005d28:	480d      	ldr	r0, [pc, #52]	; (8005d60 <HAL_I2C_MspInit+0x14c>)
 8005d2a:	f002 f87b 	bl	8007e24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d38:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <HAL_I2C_MspInit+0x140>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
}
 8005d46:	bf00      	nop
 8005d48:	37b0      	adds	r7, #176	; 0xb0
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40005400 	.word	0x40005400
 8005d54:	40023800 	.word	0x40023800
 8005d58:	40020400 	.word	0x40020400
 8005d5c:	40005c00 	.word	0x40005c00
 8005d60:	40021c00 	.word	0x40021c00

08005d64 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <HAL_I2C_MspDeInit+0x64>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d110      	bne.n	8005d98 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005d76:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <HAL_I2C_MspDeInit+0x68>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <HAL_I2C_MspDeInit+0x68>)
 8005d7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d80:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d86:	4812      	ldr	r0, [pc, #72]	; (8005dd0 <HAL_I2C_MspDeInit+0x6c>)
 8005d88:	f002 f9f8 	bl	800817c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d90:	480f      	ldr	r0, [pc, #60]	; (8005dd0 <HAL_I2C_MspDeInit+0x6c>)
 8005d92:	f002 f9f3 	bl	800817c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005d96:	e013      	b.n	8005dc0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <HAL_I2C_MspDeInit+0x70>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10e      	bne.n	8005dc0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <HAL_I2C_MspDeInit+0x68>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <HAL_I2C_MspDeInit+0x68>)
 8005da8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005dac:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	4809      	ldr	r0, [pc, #36]	; (8005dd8 <HAL_I2C_MspDeInit+0x74>)
 8005db2:	f002 f9e3 	bl	800817c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dba:	4807      	ldr	r0, [pc, #28]	; (8005dd8 <HAL_I2C_MspDeInit+0x74>)
 8005dbc:	f002 f9de 	bl	800817c <HAL_GPIO_DeInit>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40005400 	.word	0x40005400
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	40020400 	.word	0x40020400
 8005dd4:	40005c00 	.word	0x40005c00
 8005dd8:	40021c00 	.word	0x40021c00

08005ddc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b0ae      	sub	sp, #184	; 0xb8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	60da      	str	r2, [r3, #12]
 8005df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005df4:	f107 0320 	add.w	r3, r7, #32
 8005df8:	2284      	movs	r2, #132	; 0x84
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f009 fcf5 	bl	800f7ec <memset>
  if(hltdc->Instance==LTDC)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6f      	ldr	r2, [pc, #444]	; (8005fc4 <HAL_LTDC_MspInit+0x1e8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	f040 80d6 	bne.w	8005fba <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005e0e:	2308      	movs	r3, #8
 8005e10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005e12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8005e18:	2305      	movs	r3, #5
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8005e20:	2303      	movs	r3, #3
 8005e22:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005e24:	2301      	movs	r3, #1
 8005e26:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e2e:	f107 0320 	add.w	r3, r7, #32
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 f9b8 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8005e3e:	f7fd ff51 	bl	8003ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e42:	4b61      	ldr	r3, [pc, #388]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	4a60      	ldr	r2, [pc, #384]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e4e:	4b5e      	ldr	r3, [pc, #376]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e5a:	4b5b      	ldr	r3, [pc, #364]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	4a5a      	ldr	r2, [pc, #360]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e60:	f043 0310 	orr.w	r3, r3, #16
 8005e64:	6313      	str	r3, [r2, #48]	; 0x30
 8005e66:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005e72:	4b55      	ldr	r3, [pc, #340]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a54      	ldr	r2, [pc, #336]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b52      	ldr	r3, [pc, #328]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8005e8a:	4b4f      	ldr	r3, [pc, #316]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	4a4e      	ldr	r2, [pc, #312]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e94:	6313      	str	r3, [r2, #48]	; 0x30
 8005e96:	4b4c      	ldr	r3, [pc, #304]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	4a48      	ldr	r2, [pc, #288]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eac:	6313      	str	r3, [r2, #48]	; 0x30
 8005eae:	4b46      	ldr	r3, [pc, #280]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005eba:	4b43      	ldr	r3, [pc, #268]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4a42      	ldr	r2, [pc, #264]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec6:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <HAL_LTDC_MspInit+0x1ec>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005ed2:	2310      	movs	r3, #16
 8005ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005eea:	230e      	movs	r3, #14
 8005eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005ef0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4835      	ldr	r0, [pc, #212]	; (8005fcc <HAL_LTDC_MspInit+0x1f0>)
 8005ef8:	f001 ff94 	bl	8007e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005efc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f04:	2302      	movs	r3, #2
 8005f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f16:	230e      	movs	r3, #14
 8005f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005f1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f20:	4619      	mov	r1, r3
 8005f22:	482b      	ldr	r0, [pc, #172]	; (8005fd0 <HAL_LTDC_MspInit+0x1f4>)
 8005f24:	f001 ff7e 	bl	8007e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005f28:	23f7      	movs	r3, #247	; 0xf7
 8005f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f40:	230e      	movs	r3, #14
 8005f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005f46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4821      	ldr	r0, [pc, #132]	; (8005fd4 <HAL_LTDC_MspInit+0x1f8>)
 8005f4e:	f001 ff69 	bl	8007e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005f6c:	2309      	movs	r3, #9
 8005f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005f72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4817      	ldr	r0, [pc, #92]	; (8005fd8 <HAL_LTDC_MspInit+0x1fc>)
 8005f7a:	f001 ff53 	bl	8007e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005f7e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f86:	2302      	movs	r3, #2
 8005f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f98:	230e      	movs	r3, #14
 8005f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	480d      	ldr	r0, [pc, #52]	; (8005fdc <HAL_LTDC_MspInit+0x200>)
 8005fa6:	f001 ff3d 	bl	8007e24 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2105      	movs	r1, #5
 8005fae:	2058      	movs	r0, #88	; 0x58
 8005fb0:	f001 f842 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005fb4:	2058      	movs	r0, #88	; 0x58
 8005fb6:	f001 f85b 	bl	8007070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005fba:	bf00      	nop
 8005fbc:	37b8      	adds	r7, #184	; 0xb8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40016800 	.word	0x40016800
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40022400 	.word	0x40022400
 8005fd4:	40022800 	.word	0x40022800
 8005fd8:	40021800 	.word	0x40021800
 8005fdc:	40022000 	.word	0x40022000

08005fe0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b0a4      	sub	sp, #144	; 0x90
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	2284      	movs	r2, #132	; 0x84
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f009 fbfb 	bl	800f7ec <memset>
  if(hrtc->Instance==RTC)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <HAL_RTC_MspInit+0x54>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d114      	bne.n	800602a <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006000:	2320      	movs	r3, #32
 8006002:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	4618      	mov	r0, r3
 8006010:	f004 f8ca 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800601a:	f7fd fe63 	bl	8003ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RTC_MspInit+0x58>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	4a05      	ldr	r2, [pc, #20]	; (8006038 <HAL_RTC_MspInit+0x58>)
 8006024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006028:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800602a:	bf00      	nop
 800602c:	3790      	adds	r7, #144	; 0x90
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40002800 	.word	0x40002800
 8006038:	40023800 	.word	0x40023800

0800603c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006044:	f107 0314 	add.w	r3, r7, #20
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	605a      	str	r2, [r3, #4]
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <HAL_SPI_MspInit+0xb4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d144      	bne.n	80060e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800605e:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 8006064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006068:	6413      	str	r3, [r2, #64]	; 0x40
 800606a:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006076:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006080:	6313      	str	r3, [r2, #48]	; 0x30
 8006082:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 8006094:	f043 0302 	orr.w	r3, r3, #2
 8006098:	6313      	str	r3, [r2, #48]	; 0x30
 800609a:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <HAL_SPI_MspInit+0xb8>)
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80060a6:	2303      	movs	r3, #3
 80060a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060aa:	2302      	movs	r3, #2
 80060ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b2:	2303      	movs	r3, #3
 80060b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060b6:	2305      	movs	r3, #5
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80060ba:	f107 0314 	add.w	r3, r7, #20
 80060be:	4619      	mov	r1, r3
 80060c0:	480d      	ldr	r0, [pc, #52]	; (80060f8 <HAL_SPI_MspInit+0xbc>)
 80060c2:	f001 feaf 	bl	8007e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80060c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80060ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060cc:	2302      	movs	r3, #2
 80060ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d4:	2300      	movs	r3, #0
 80060d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060d8:	2305      	movs	r3, #5
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4619      	mov	r1, r3
 80060e2:	4806      	ldr	r0, [pc, #24]	; (80060fc <HAL_SPI_MspInit+0xc0>)
 80060e4:	f001 fe9e 	bl	8007e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80060e8:	bf00      	nop
 80060ea:	3728      	adds	r7, #40	; 0x28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40003800 	.word	0x40003800
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40022000 	.word	0x40022000
 80060fc:	40020400 	.word	0x40020400

08006100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	; 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3b      	ldr	r2, [pc, #236]	; (800620c <HAL_TIM_Base_MspInit+0x10c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006122:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	4a3a      	ldr	r2, [pc, #232]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6453      	str	r3, [r2, #68]	; 0x44
 800612e:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800613a:	e062      	b.n	8006202 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d10c      	bne.n	8006160 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006146:	4b32      	ldr	r3, [pc, #200]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	4a31      	ldr	r2, [pc, #196]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	6413      	str	r3, [r2, #64]	; 0x40
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	e050      	b.n	8006202 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <HAL_TIM_Base_MspInit+0x114>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d10c      	bne.n	8006184 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800616a:	4b29      	ldr	r3, [pc, #164]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	4a28      	ldr	r2, [pc, #160]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	6413      	str	r3, [r2, #64]	; 0x40
 8006176:	4b26      	ldr	r3, [pc, #152]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	69bb      	ldr	r3, [r7, #24]
}
 8006182:	e03e      	b.n	8006202 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a23      	ldr	r2, [pc, #140]	; (8006218 <HAL_TIM_Base_MspInit+0x118>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10c      	bne.n	80061a8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	6413      	str	r3, [r2, #64]	; 0x40
 800619a:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697b      	ldr	r3, [r7, #20]
}
 80061a6:	e02c      	b.n	8006202 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1b      	ldr	r2, [pc, #108]	; (800621c <HAL_TIM_Base_MspInit+0x11c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d127      	bne.n	8006202 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	4a16      	ldr	r2, [pc, #88]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	6453      	str	r3, [r2, #68]	; 0x44
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 80061c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80061ca:	4b11      	ldr	r3, [pc, #68]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a10      	ldr	r2, [pc, #64]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 80061d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30
 80061d6:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <HAL_TIM_Base_MspInit+0x110>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80061e2:	2304      	movs	r3, #4
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e6:	2302      	movs	r3, #2
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ee:	2300      	movs	r3, #0
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80061f2:	2303      	movs	r3, #3
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80061f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fa:	4619      	mov	r1, r3
 80061fc:	4808      	ldr	r0, [pc, #32]	; (8006220 <HAL_TIM_Base_MspInit+0x120>)
 80061fe:	f001 fe11 	bl	8007e24 <HAL_GPIO_Init>
}
 8006202:	bf00      	nop
 8006204:	3738      	adds	r7, #56	; 0x38
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40023800 	.word	0x40023800
 8006214:	40000400 	.word	0x40000400
 8006218:	40000c00 	.word	0x40000c00
 800621c:	40010400 	.word	0x40010400
 8006220:	40022000 	.word	0x40022000

08006224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b0b0      	sub	sp, #192	; 0xc0
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800622c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	609a      	str	r2, [r3, #8]
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800623c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006240:	2284      	movs	r2, #132	; 0x84
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f009 fad1 	bl	800f7ec <memset>
  if(huart->Instance==UART7)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a79      	ldr	r2, [pc, #484]	; (8006434 <HAL_UART_MspInit+0x210>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d13d      	bne.n	80062d0 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800625a:	2300      	movs	r3, #0
 800625c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006264:	4618      	mov	r0, r3
 8006266:	f003 ff9f 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006270:	f7fd fd38 	bl	8003ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8006274:	4b70      	ldr	r3, [pc, #448]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	4a6f      	ldr	r2, [pc, #444]	; (8006438 <HAL_UART_MspInit+0x214>)
 800627a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800627e:	6413      	str	r3, [r2, #64]	; 0x40
 8006280:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800628c:	4b6a      	ldr	r3, [pc, #424]	; (8006438 <HAL_UART_MspInit+0x214>)
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	4a69      	ldr	r2, [pc, #420]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006292:	f043 0320 	orr.w	r3, r3, #32
 8006296:	6313      	str	r3, [r2, #48]	; 0x30
 8006298:	4b67      	ldr	r3, [pc, #412]	; (8006438 <HAL_UART_MspInit+0x214>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	623b      	str	r3, [r7, #32]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80062a4:	23c0      	movs	r3, #192	; 0xc0
 80062a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062aa:	2302      	movs	r3, #2
 80062ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b6:	2303      	movs	r3, #3
 80062b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80062bc:	2308      	movs	r3, #8
 80062be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80062c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80062c6:	4619      	mov	r1, r3
 80062c8:	485c      	ldr	r0, [pc, #368]	; (800643c <HAL_UART_MspInit+0x218>)
 80062ca:	f001 fdab 	bl	8007e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80062ce:	e0ac      	b.n	800642a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a5a      	ldr	r2, [pc, #360]	; (8006440 <HAL_UART_MspInit+0x21c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d165      	bne.n	80063a6 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80062da:	2340      	movs	r3, #64	; 0x40
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80062de:	2300      	movs	r3, #0
 80062e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062e6:	4618      	mov	r0, r3
 80062e8:	f003 ff5e 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80062f2:	f7fd fcf7 	bl	8003ce4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80062f6:	4b50      	ldr	r3, [pc, #320]	; (8006438 <HAL_UART_MspInit+0x214>)
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	4a4f      	ldr	r2, [pc, #316]	; (8006438 <HAL_UART_MspInit+0x214>)
 80062fc:	f043 0310 	orr.w	r3, r3, #16
 8006300:	6453      	str	r3, [r2, #68]	; 0x44
 8006302:	4b4d      	ldr	r3, [pc, #308]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800630e:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	4a49      	ldr	r2, [pc, #292]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	6313      	str	r3, [r2, #48]	; 0x30
 800631a:	4b47      	ldr	r3, [pc, #284]	; (8006438 <HAL_UART_MspInit+0x214>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006326:	4b44      	ldr	r3, [pc, #272]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	4a43      	ldr	r2, [pc, #268]	; (8006438 <HAL_UART_MspInit+0x214>)
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6313      	str	r3, [r2, #48]	; 0x30
 8006332:	4b41      	ldr	r3, [pc, #260]	; (8006438 <HAL_UART_MspInit+0x214>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006344:	2302      	movs	r3, #2
 8006346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006356:	2307      	movs	r3, #7
 8006358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800635c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006360:	4619      	mov	r1, r3
 8006362:	4838      	ldr	r0, [pc, #224]	; (8006444 <HAL_UART_MspInit+0x220>)
 8006364:	f001 fd5e 	bl	8007e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006370:	2302      	movs	r3, #2
 8006372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006382:	2307      	movs	r3, #7
 8006384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006388:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800638c:	4619      	mov	r1, r3
 800638e:	482e      	ldr	r0, [pc, #184]	; (8006448 <HAL_UART_MspInit+0x224>)
 8006390:	f001 fd48 	bl	8007e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006394:	2200      	movs	r2, #0
 8006396:	2105      	movs	r1, #5
 8006398:	2025      	movs	r0, #37	; 0x25
 800639a:	f000 fe4d 	bl	8007038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800639e:	2025      	movs	r0, #37	; 0x25
 80063a0:	f000 fe66 	bl	8007070 <HAL_NVIC_EnableIRQ>
}
 80063a4:	e041      	b.n	800642a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_UART_MspInit+0x228>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d13c      	bne.n	800642a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80063b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063c0:	4618      	mov	r0, r3
 80063c2:	f003 fef1 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80063cc:	f7fd fc8a 	bl	8003ce4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <HAL_UART_MspInit+0x214>)
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_UART_MspInit+0x214>)
 80063d6:	f043 0320 	orr.w	r3, r3, #32
 80063da:	6453      	str	r3, [r2, #68]	; 0x44
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <HAL_UART_MspInit+0x214>)
 80063de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <HAL_UART_MspInit+0x214>)
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	4a12      	ldr	r2, [pc, #72]	; (8006438 <HAL_UART_MspInit+0x214>)
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	6313      	str	r3, [r2, #48]	; 0x30
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <HAL_UART_MspInit+0x214>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8006400:	23c0      	movs	r3, #192	; 0xc0
 8006402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006406:	2302      	movs	r3, #2
 8006408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006412:	2303      	movs	r3, #3
 8006414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006418:	2308      	movs	r3, #8
 800641a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800641e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006422:	4619      	mov	r1, r3
 8006424:	480a      	ldr	r0, [pc, #40]	; (8006450 <HAL_UART_MspInit+0x22c>)
 8006426:	f001 fcfd 	bl	8007e24 <HAL_GPIO_Init>
}
 800642a:	bf00      	nop
 800642c:	37c0      	adds	r7, #192	; 0xc0
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40007800 	.word	0x40007800
 8006438:	40023800 	.word	0x40023800
 800643c:	40021400 	.word	0x40021400
 8006440:	40011000 	.word	0x40011000
 8006444:	40020400 	.word	0x40020400
 8006448:	40020000 	.word	0x40020000
 800644c:	40011400 	.word	0x40011400
 8006450:	40020800 	.word	0x40020800

08006454 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006468:	4b3a      	ldr	r3, [pc, #232]	; (8006554 <HAL_FMC_MspInit+0x100>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d16d      	bne.n	800654c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8006470:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_FMC_MspInit+0x100>)
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006476:	4b38      	ldr	r3, [pc, #224]	; (8006558 <HAL_FMC_MspInit+0x104>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	4a37      	ldr	r2, [pc, #220]	; (8006558 <HAL_FMC_MspInit+0x104>)
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	6393      	str	r3, [r2, #56]	; 0x38
 8006482:	4b35      	ldr	r3, [pc, #212]	; (8006558 <HAL_FMC_MspInit+0x104>)
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800648e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006492:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006494:	2302      	movs	r3, #2
 8006496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800649c:	2303      	movs	r3, #3
 800649e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064a0:	230c      	movs	r3, #12
 80064a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	482c      	ldr	r0, [pc, #176]	; (800655c <HAL_FMC_MspInit+0x108>)
 80064aa:	f001 fcbb 	bl	8007e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80064ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80064b2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b4:	2302      	movs	r3, #2
 80064b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064bc:	2303      	movs	r3, #3
 80064be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064c0:	230c      	movs	r3, #12
 80064c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4825      	ldr	r0, [pc, #148]	; (8006560 <HAL_FMC_MspInit+0x10c>)
 80064ca:	f001 fcab 	bl	8007e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80064ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80064d2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d4:	2302      	movs	r3, #2
 80064d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064dc:	2303      	movs	r3, #3
 80064de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064e0:	230c      	movs	r3, #12
 80064e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064e4:	1d3b      	adds	r3, r7, #4
 80064e6:	4619      	mov	r1, r3
 80064e8:	481e      	ldr	r0, [pc, #120]	; (8006564 <HAL_FMC_MspInit+0x110>)
 80064ea:	f001 fc9b 	bl	8007e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80064ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80064f2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f4:	2302      	movs	r3, #2
 80064f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064fc:	2303      	movs	r3, #3
 80064fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006500:	230c      	movs	r3, #12
 8006502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006504:	1d3b      	adds	r3, r7, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4817      	ldr	r0, [pc, #92]	; (8006568 <HAL_FMC_MspInit+0x114>)
 800650a:	f001 fc8b 	bl	8007e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800650e:	2328      	movs	r3, #40	; 0x28
 8006510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006512:	2302      	movs	r3, #2
 8006514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800651a:	2303      	movs	r3, #3
 800651c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800651e:	230c      	movs	r3, #12
 8006520:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4811      	ldr	r0, [pc, #68]	; (800656c <HAL_FMC_MspInit+0x118>)
 8006528:	f001 fc7c 	bl	8007e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800652c:	2308      	movs	r3, #8
 800652e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006530:	2302      	movs	r3, #2
 8006532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006538:	2303      	movs	r3, #3
 800653a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800653c:	230c      	movs	r3, #12
 800653e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	4619      	mov	r1, r3
 8006544:	480a      	ldr	r0, [pc, #40]	; (8006570 <HAL_FMC_MspInit+0x11c>)
 8006546:	f001 fc6d 	bl	8007e24 <HAL_GPIO_Init>
 800654a:	e000      	b.n	800654e <HAL_FMC_MspInit+0xfa>
    return;
 800654c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	200005d0 	.word	0x200005d0
 8006558:	40023800 	.word	0x40023800
 800655c:	40021000 	.word	0x40021000
 8006560:	40021800 	.word	0x40021800
 8006564:	40020c00 	.word	0x40020c00
 8006568:	40021400 	.word	0x40021400
 800656c:	40021c00 	.word	0x40021c00
 8006570:	40020800 	.word	0x40020800

08006574 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800657c:	f7ff ff6a 	bl	8006454 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	; 0x30
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006598:	2200      	movs	r2, #0
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	2036      	movs	r0, #54	; 0x36
 800659e:	f000 fd4b 	bl	8007038 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80065a2:	2036      	movs	r0, #54	; 0x36
 80065a4:	f000 fd64 	bl	8007070 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80065a8:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <HAL_InitTick+0xa0>)
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_InitTick+0xa0>)
 80065ae:	f043 0310 	orr.w	r3, r3, #16
 80065b2:	6413      	str	r3, [r2, #64]	; 0x40
 80065b4:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <HAL_InitTick+0xa0>)
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065c0:	f107 0210 	add.w	r2, r7, #16
 80065c4:	f107 0314 	add.w	r3, r7, #20
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f003 fdba 	bl	800a144 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80065d0:	f003 fd90 	bl	800a0f4 <HAL_RCC_GetPCLK1Freq>
 80065d4:	4603      	mov	r3, r0
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	4a13      	ldr	r2, [pc, #76]	; (800662c <HAL_InitTick+0xa4>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	0c9b      	lsrs	r3, r3, #18
 80065e4:	3b01      	subs	r3, #1
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80065e8:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_InitTick+0xa8>)
 80065ea:	4a12      	ldr	r2, [pc, #72]	; (8006634 <HAL_InitTick+0xac>)
 80065ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <HAL_InitTick+0xa8>)
 80065f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80065f6:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <HAL_InitTick+0xa8>)
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <HAL_InitTick+0xa8>)
 80065fe:	2200      	movs	r2, #0
 8006600:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <HAL_InitTick+0xa8>)
 8006604:	2200      	movs	r2, #0
 8006606:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006608:	4809      	ldr	r0, [pc, #36]	; (8006630 <HAL_InitTick+0xa8>)
 800660a:	f004 fed1 	bl	800b3b0 <HAL_TIM_Base_Init>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006614:	4806      	ldr	r0, [pc, #24]	; (8006630 <HAL_InitTick+0xa8>)
 8006616:	f004 ff23 	bl	800b460 <HAL_TIM_Base_Start_IT>
 800661a:	4603      	mov	r3, r0
 800661c:	e000      	b.n	8006620 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
}
 8006620:	4618      	mov	r0, r3
 8006622:	3730      	adds	r7, #48	; 0x30
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40023800 	.word	0x40023800
 800662c:	431bde83 	.word	0x431bde83
 8006630:	20008e84 	.word	0x20008e84
 8006634:	40001000 	.word	0x40001000

08006638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800663c:	e7fe      	b.n	800663c <NMI_Handler+0x4>

0800663e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800663e:	b480      	push	{r7}
 8006640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006642:	e7fe      	b.n	8006642 <HardFault_Handler+0x4>

08006644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006648:	e7fe      	b.n	8006648 <MemManage_Handler+0x4>

0800664a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800664a:	b480      	push	{r7}
 800664c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800664e:	e7fe      	b.n	800664e <BusFault_Handler+0x4>

08006650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006654:	e7fe      	b.n	8006654 <UsageFault_Handler+0x4>

08006656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006656:	b480      	push	{r7}
 8006658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006668:	4802      	ldr	r0, [pc, #8]	; (8006674 <USART1_IRQHandler+0x10>)
 800666a:	f005 fbb7 	bl	800bddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20008554 	.word	0x20008554

08006678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 800667c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006680:	f001 febc 	bl	80083fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006684:	bf00      	nop
 8006686:	bd80      	pop	{r7, pc}

08006688 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <TIM6_DAC_IRQHandler+0x20>)
 800668e:	791b      	ldrb	r3, [r3, #4]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8006696:	4804      	ldr	r0, [pc, #16]	; (80066a8 <TIM6_DAC_IRQHandler+0x20>)
 8006698:	f000 fd1a 	bl	80070d0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800669c:	4803      	ldr	r0, [pc, #12]	; (80066ac <TIM6_DAC_IRQHandler+0x24>)
 800669e:	f004 ff57 	bl	800b550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200085dc 	.word	0x200085dc
 80066ac:	20008e84 	.word	0x20008e84

080066b0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80066b4:	4802      	ldr	r0, [pc, #8]	; (80066c0 <LTDC_IRQHandler+0x10>)
 80066b6:	f002 fdc3 	bl	8009240 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20008414 	.word	0x20008414

080066c4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80066c8:	4802      	ldr	r0, [pc, #8]	; (80066d4 <DMA2D_IRQHandler+0x10>)
 80066ca:	f001 f96d 	bl	80079a8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20008ce4 	.word	0x20008ce4

080066d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <SystemInit+0x20>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	4a05      	ldr	r2, [pc, #20]	; (80066f8 <SystemInit+0x20>)
 80066e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	e000ed00 	.word	0xe000ed00

080066fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80066fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006700:	480d      	ldr	r0, [pc, #52]	; (8006738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006702:	490e      	ldr	r1, [pc, #56]	; (800673c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006704:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006708:	e002      	b.n	8006710 <LoopCopyDataInit>

0800670a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800670a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800670c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800670e:	3304      	adds	r3, #4

08006710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006714:	d3f9      	bcc.n	800670a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006716:	4a0b      	ldr	r2, [pc, #44]	; (8006744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006718:	4c0b      	ldr	r4, [pc, #44]	; (8006748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800671a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800671c:	e001      	b.n	8006722 <LoopFillZerobss>

0800671e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800671e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006720:	3204      	adds	r2, #4

08006722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006724:	d3fb      	bcc.n	800671e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006726:	f7ff ffd7 	bl	80066d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800672a:	f009 f82b 	bl	800f784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800672e:	f7fb f8ed 	bl	800190c <main>
  bx  lr    
 8006732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006734:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800673c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8006740:	08035d30 	.word	0x08035d30
  ldr r2, =_sbss
 8006744:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8006748:	20008ee0 	.word	0x20008ee0

0800674c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800674c:	e7fe      	b.n	800674c <ADC_IRQHandler>
	...

08006750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_Init+0x28>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_Init+0x28>)
 800675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006760:	2003      	movs	r0, #3
 8006762:	f000 fc5e 	bl	8007022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006766:	200f      	movs	r0, #15
 8006768:	f7ff ff0e 	bl	8006588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800676c:	f7ff f94e 	bl	8005a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023c00 	.word	0x40023c00

0800677c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <HAL_IncTick+0x20>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_IncTick+0x24>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4413      	add	r3, r2
 800678c:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <HAL_IncTick+0x24>)
 800678e:	6013      	str	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000048 	.word	0x20000048
 80067a0:	20008ed0 	.word	0x20008ed0

080067a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return uwTick;
 80067a8:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <HAL_GetTick+0x14>)
 80067aa:	681b      	ldr	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20008ed0 	.word	0x20008ed0

080067bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067c4:	f7ff ffee 	bl	80067a4 <HAL_GetTick>
 80067c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d005      	beq.n	80067e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <HAL_Delay+0x44>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067e2:	bf00      	nop
 80067e4:	f7ff ffde 	bl	80067a4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d8f7      	bhi.n	80067e4 <HAL_Delay+0x28>
  {
  }
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000048 	.word	0x20000048

08006804 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e031      	b.n	800687e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff f91a 	bl	8005a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d116      	bne.n	8006870 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006846:	4b10      	ldr	r3, [pc, #64]	; (8006888 <HAL_ADC_Init+0x84>)
 8006848:	4013      	ands	r3, r2
 800684a:	f043 0202 	orr.w	r2, r3, #2
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa3e 	bl	8006cd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	641a      	str	r2, [r3, #64]	; 0x40
 800686e:	e001      	b.n	8006874 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	ffffeefd 	.word	0xffffeefd

0800688c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_ADC_Start+0x1a>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0ad      	b.n	8006a02 <HAL_ADC_Start+0x176>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d018      	beq.n	80068ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068cc:	4b50      	ldr	r3, [pc, #320]	; (8006a10 <HAL_ADC_Start+0x184>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a50      	ldr	r2, [pc, #320]	; (8006a14 <HAL_ADC_Start+0x188>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	0c9a      	lsrs	r2, r3, #18
 80068d8:	4613      	mov	r3, r2
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	4413      	add	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068e0:	e002      	b.n	80068e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f9      	bne.n	80068e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d175      	bne.n	80069e8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006900:	4b45      	ldr	r3, [pc, #276]	; (8006a18 <HAL_ADC_Start+0x18c>)
 8006902:	4013      	ands	r3, r2
 8006904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006922:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	d106      	bne.n	8006946 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693c:	f023 0206 	bic.w	r2, r3, #6
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	645a      	str	r2, [r3, #68]	; 0x44
 8006944:	e002      	b.n	800694c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800695c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800695e:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <HAL_ADC_Start+0x190>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10f      	bne.n	800698a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d143      	bne.n	8006a00 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	e03a      	b.n	8006a00 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <HAL_ADC_Start+0x194>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10e      	bne.n	80069b2 <HAL_ADC_Start+0x126>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d107      	bne.n	80069b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <HAL_ADC_Start+0x190>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d120      	bne.n	8006a00 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_ADC_Start+0x198>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d11b      	bne.n	8006a00 <HAL_ADC_Start+0x174>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d114      	bne.n	8006a00 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069e4:	609a      	str	r2, [r3, #8]
 80069e6:	e00b      	b.n	8006a00 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	f043 0210 	orr.w	r2, r3, #16
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f8:	f043 0201 	orr.w	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000040 	.word	0x20000040
 8006a14:	431bde83 	.word	0x431bde83
 8006a18:	fffff8fe 	.word	0xfffff8fe
 8006a1c:	40012300 	.word	0x40012300
 8006a20:	40012000 	.word	0x40012000
 8006a24:	40012200 	.word	0x40012200

08006a28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_ADC_ConfigChannel+0x1c>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e136      	b.n	8006cb2 <HAL_ADC_ConfigChannel+0x28a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b09      	cmp	r3, #9
 8006a52:	d93a      	bls.n	8006aca <HAL_ADC_ConfigChannel+0xa2>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d035      	beq.n	8006aca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68d9      	ldr	r1, [r3, #12]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	3b1e      	subs	r3, #30
 8006a74:	2207      	movs	r2, #7
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	400a      	ands	r2, r1
 8006a82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a8d      	ldr	r2, [pc, #564]	; (8006cc0 <HAL_ADC_ConfigChannel+0x298>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d10a      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68d9      	ldr	r1, [r3, #12]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	061a      	lsls	r2, r3, #24
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006aa2:	e035      	b.n	8006b10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68d9      	ldr	r1, [r3, #12]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4403      	add	r3, r0
 8006abc:	3b1e      	subs	r3, #30
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ac8:	e022      	b.n	8006b10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6919      	ldr	r1, [r3, #16]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4613      	mov	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4413      	add	r3, r2
 8006ade:	2207      	movs	r2, #7
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	43da      	mvns	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	400a      	ands	r2, r1
 8006aec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6919      	ldr	r1, [r3, #16]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4618      	mov	r0, r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	4403      	add	r3, r0
 8006b06:	409a      	lsls	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b06      	cmp	r3, #6
 8006b16:	d824      	bhi.n	8006b62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	3b05      	subs	r3, #5
 8006b2a:	221f      	movs	r2, #31
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	43da      	mvns	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	400a      	ands	r2, r1
 8006b38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4618      	mov	r0, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	3b05      	subs	r3, #5
 8006b54:	fa00 f203 	lsl.w	r2, r0, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	635a      	str	r2, [r3, #52]	; 0x34
 8006b60:	e04c      	b.n	8006bfc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b0c      	cmp	r3, #12
 8006b68:	d824      	bhi.n	8006bb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	3b23      	subs	r3, #35	; 0x23
 8006b7c:	221f      	movs	r2, #31
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43da      	mvns	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	400a      	ands	r2, r1
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4618      	mov	r0, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3b23      	subs	r3, #35	; 0x23
 8006ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb2:	e023      	b.n	8006bfc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3b41      	subs	r3, #65	; 0x41
 8006bc6:	221f      	movs	r2, #31
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	43da      	mvns	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	400a      	ands	r2, r1
 8006bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4618      	mov	r0, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	3b41      	subs	r3, #65	; 0x41
 8006bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a30      	ldr	r2, [pc, #192]	; (8006cc4 <HAL_ADC_ConfigChannel+0x29c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10a      	bne.n	8006c1c <HAL_ADC_ConfigChannel+0x1f4>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c0e:	d105      	bne.n	8006c1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006c10:	4b2d      	ldr	r3, [pc, #180]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006c1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <HAL_ADC_ConfigChannel+0x29c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10f      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0x21e>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b12      	cmp	r3, #18
 8006c2c:	d10b      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006c2e:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4a25      	ldr	r2, [pc, #148]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006c3a:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4a22      	ldr	r2, [pc, #136]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <HAL_ADC_ConfigChannel+0x29c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d12b      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x280>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_ADC_ConfigChannel+0x298>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <HAL_ADC_ConfigChannel+0x23a>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b11      	cmp	r3, #17
 8006c60:	d122      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006c6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <HAL_ADC_ConfigChannel+0x298>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d111      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006c84:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <HAL_ADC_ConfigChannel+0x2a4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <HAL_ADC_ConfigChannel+0x2a8>)
 8006c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8e:	0c9a      	lsrs	r2, r3, #18
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006c9a:	e002      	b.n	8006ca2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f9      	bne.n	8006c9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	10000012 	.word	0x10000012
 8006cc4:	40012000 	.word	0x40012000
 8006cc8:	40012300 	.word	0x40012300
 8006ccc:	20000040 	.word	0x20000040
 8006cd0:	431bde83 	.word	0x431bde83

08006cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006cdc:	4b78      	ldr	r3, [pc, #480]	; (8006ec0 <ADC_Init+0x1ec>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4a77      	ldr	r2, [pc, #476]	; (8006ec0 <ADC_Init+0x1ec>)
 8006ce2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006ce6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006ce8:	4b75      	ldr	r3, [pc, #468]	; (8006ec0 <ADC_Init+0x1ec>)
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4973      	ldr	r1, [pc, #460]	; (8006ec0 <ADC_Init+0x1ec>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6859      	ldr	r1, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	021a      	lsls	r2, r3, #8
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6899      	ldr	r1, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	4a58      	ldr	r2, [pc, #352]	; (8006ec4 <ADC_Init+0x1f0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d022      	beq.n	8006dae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6899      	ldr	r1, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]
 8006dac:	e00f      	b.n	8006dce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0202 	bic.w	r2, r2, #2
 8006ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6899      	ldr	r1, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	005a      	lsls	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01b      	beq.n	8006e34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6859      	ldr	r1, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	3b01      	subs	r3, #1
 8006e28:	035a      	lsls	r2, r3, #13
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
 8006e32:	e007      	b.n	8006e44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	051a      	lsls	r2, r3, #20
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6899      	ldr	r1, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e86:	025a      	lsls	r2, r3, #9
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6899      	ldr	r1, [r3, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	029a      	lsls	r2, r3, #10
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40012300 	.word	0x40012300
 8006ec4:	0f000001 	.word	0x0f000001

08006ec8 <__NVIC_SetPriorityGrouping>:
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <__NVIC_SetPriorityGrouping+0x40>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <__NVIC_SetPriorityGrouping+0x44>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <__NVIC_SetPriorityGrouping+0x40>)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	60d3      	str	r3, [r2, #12]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	e000ed00 	.word	0xe000ed00
 8006f0c:	05fa0000 	.word	0x05fa0000

08006f10 <__NVIC_GetPriorityGrouping>:
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <__NVIC_GetPriorityGrouping+0x18>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	f003 0307 	and.w	r3, r3, #7
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	e000ed00 	.word	0xe000ed00

08006f2c <__NVIC_EnableIRQ>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db0b      	blt.n	8006f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	f003 021f 	and.w	r2, r3, #31
 8006f44:	4907      	ldr	r1, [pc, #28]	; (8006f64 <__NVIC_EnableIRQ+0x38>)
 8006f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	e000e100 	.word	0xe000e100

08006f68 <__NVIC_SetPriority>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	db0a      	blt.n	8006f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	490c      	ldr	r1, [pc, #48]	; (8006fb4 <__NVIC_SetPriority+0x4c>)
 8006f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f86:	0112      	lsls	r2, r2, #4
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f90:	e00a      	b.n	8006fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	4908      	ldr	r1, [pc, #32]	; (8006fb8 <__NVIC_SetPriority+0x50>)
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	0112      	lsls	r2, r2, #4
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	761a      	strb	r2, [r3, #24]
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	e000e100 	.word	0xe000e100
 8006fb8:	e000ed00 	.word	0xe000ed00

08006fbc <NVIC_EncodePriority>:
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b089      	sub	sp, #36	; 0x24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f1c3 0307 	rsb	r3, r3, #7
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	bf28      	it	cs
 8006fda:	2304      	movcs	r3, #4
 8006fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d902      	bls.n	8006fec <NVIC_EncodePriority+0x30>
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	3b03      	subs	r3, #3
 8006fea:	e000      	b.n	8006fee <NVIC_EncodePriority+0x32>
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	43da      	mvns	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	401a      	ands	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007004:	f04f 31ff 	mov.w	r1, #4294967295
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	fa01 f303 	lsl.w	r3, r1, r3
 800700e:	43d9      	mvns	r1, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007014:	4313      	orrs	r3, r2
}
 8007016:	4618      	mov	r0, r3
 8007018:	3724      	adds	r7, #36	; 0x24
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff ff4c 	bl	8006ec8 <__NVIC_SetPriorityGrouping>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800704a:	f7ff ff61 	bl	8006f10 <__NVIC_GetPriorityGrouping>
 800704e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	6978      	ldr	r0, [r7, #20]
 8007056:	f7ff ffb1 	bl	8006fbc <NVIC_EncodePriority>
 800705a:	4602      	mov	r2, r0
 800705c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff ff80 	bl	8006f68 <__NVIC_SetPriority>
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800707a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ff54 	bl	8006f2c <__NVIC_EnableIRQ>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e014      	b.n	80070c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fe fd42 	bl	8005b38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e6:	d120      	bne.n	800712a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f6:	d118      	bne.n	800712a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2204      	movs	r2, #4
 80070fc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007112:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007122:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f82d 	bl	8007184 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007138:	d120      	bne.n	800717c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007148:	d118      	bne.n	800717c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2204      	movs	r2, #4
 800714e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f043 0202 	orr.w	r2, r3, #2
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007164:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007174:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f85d 	bl	8007236 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	795b      	ldrb	r3, [r3, #5]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_DAC_ConfigChannel+0x18>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e03c      	b.n	800722a <HAL_DAC_ConfigChannel+0x92>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	43db      	mvns	r3, r3
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4013      	ands	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6819      	ldr	r1, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	22c0      	movs	r2, #192	; 0xc0
 800720e:	fa02 f303 	lsl.w	r3, r2, r3
 8007212:	43da      	mvns	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	400a      	ands	r2, r1
 800721a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007258:	f7ff faa4 	bl	80067a4 <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e099      	b.n	800739c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007288:	e00f      	b.n	80072aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800728a:	f7ff fa8b 	bl	80067a4 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b05      	cmp	r3, #5
 8007296:	d908      	bls.n	80072aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2203      	movs	r2, #3
 80072a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e078      	b.n	800739c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e8      	bne.n	800728a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4b38      	ldr	r3, [pc, #224]	; (80073a4 <HAL_DMA_Init+0x158>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b04      	cmp	r3, #4
 8007302:	d107      	bne.n	8007314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	4313      	orrs	r3, r2
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b04      	cmp	r3, #4
 800733c:	d117      	bne.n	800736e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00e      	beq.n	800736e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f94f 	bl	80075f4 <DMA_CheckFifoParam>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2240      	movs	r2, #64	; 0x40
 8007360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800736a:	2301      	movs	r3, #1
 800736c:	e016      	b.n	800739c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f906 	bl	8007588 <DMA_CalcBaseAndBitshift>
 800737c:	4603      	mov	r3, r0
 800737e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	223f      	movs	r2, #63	; 0x3f
 8007386:	409a      	lsls	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	f010803f 	.word	0xf010803f

080073a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e050      	b.n	800745c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d101      	bne.n	80073ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80073c6:	2302      	movs	r3, #2
 80073c8:	e048      	b.n	800745c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2221      	movs	r2, #33	; 0x21
 8007408:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8bc 	bl	8007588 <DMA_CalcBaseAndBitshift>
 8007410:	4603      	mov	r3, r0
 8007412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007418:	223f      	movs	r2, #63	; 0x3f
 800741a:	409a      	lsls	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007470:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007472:	f7ff f997 	bl	80067a4 <HAL_GetTick>
 8007476:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d008      	beq.n	8007496 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2280      	movs	r2, #128	; 0x80
 8007488:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e052      	b.n	800753c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0216 	bic.w	r2, r2, #22
 80074a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <HAL_DMA_Abort+0x62>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0208 	bic.w	r2, r2, #8
 80074d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074e6:	e013      	b.n	8007510 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074e8:	f7ff f95c 	bl	80067a4 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	d90c      	bls.n	8007510 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2203      	movs	r2, #3
 8007500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e015      	b.n	800753c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e4      	bne.n	80074e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007522:	223f      	movs	r2, #63	; 0x3f
 8007524:	409a      	lsls	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d004      	beq.n	8007562 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2280      	movs	r2, #128	; 0x80
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e00c      	b.n	800757c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2205      	movs	r2, #5
 8007566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0201 	bic.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	3b10      	subs	r3, #16
 8007598:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <DMA_CalcBaseAndBitshift+0x60>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	091b      	lsrs	r3, r3, #4
 80075a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075a2:	4a12      	ldr	r2, [pc, #72]	; (80075ec <DMA_CalcBaseAndBitshift+0x64>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d908      	bls.n	80075c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <DMA_CalcBaseAndBitshift+0x68>)
 80075be:	4013      	ands	r3, r2
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	659a      	str	r2, [r3, #88]	; 0x58
 80075c6:	e006      	b.n	80075d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <DMA_CalcBaseAndBitshift+0x68>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	aaaaaaab 	.word	0xaaaaaaab
 80075ec:	08035cb8 	.word	0x08035cb8
 80075f0:	fffffc00 	.word	0xfffffc00

080075f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d11f      	bne.n	800764e <DMA_CheckFifoParam+0x5a>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b03      	cmp	r3, #3
 8007612:	d856      	bhi.n	80076c2 <DMA_CheckFifoParam+0xce>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <DMA_CheckFifoParam+0x28>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	0800762d 	.word	0x0800762d
 8007620:	0800763f 	.word	0x0800763f
 8007624:	0800762d 	.word	0x0800762d
 8007628:	080076c3 	.word	0x080076c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d046      	beq.n	80076c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800763c:	e043      	b.n	80076c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007646:	d140      	bne.n	80076ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800764c:	e03d      	b.n	80076ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007656:	d121      	bne.n	800769c <DMA_CheckFifoParam+0xa8>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d837      	bhi.n	80076ce <DMA_CheckFifoParam+0xda>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <DMA_CheckFifoParam+0x70>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007675 	.word	0x08007675
 8007668:	0800767b 	.word	0x0800767b
 800766c:	08007675 	.word	0x08007675
 8007670:	0800768d 	.word	0x0800768d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
      break;
 8007678:	e030      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d025      	beq.n	80076d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800768a:	e022      	b.n	80076d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007694:	d11f      	bne.n	80076d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800769a:	e01c      	b.n	80076d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d903      	bls.n	80076aa <DMA_CheckFifoParam+0xb6>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d003      	beq.n	80076b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076a8:	e018      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
      break;
 80076ae:	e015      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
      break;
 80076c0:	e00b      	b.n	80076da <DMA_CheckFifoParam+0xe6>
      break;
 80076c2:	bf00      	nop
 80076c4:	e00a      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      break;
 80076c6:	bf00      	nop
 80076c8:	e008      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      break;
 80076ca:	bf00      	nop
 80076cc:	e006      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      break;
 80076ce:	bf00      	nop
 80076d0:	e004      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      break;
 80076d2:	bf00      	nop
 80076d4:	e002      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      break;   
 80076d6:	bf00      	nop
 80076d8:	e000      	b.n	80076dc <DMA_CheckFifoParam+0xe8>
      break;
 80076da:	bf00      	nop
    }
  } 
  
  return status; 
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop

080076ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e039      	b.n	8007772 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fe fa58 	bl	8005bc8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773c:	f023 0107 	bic.w	r1, r3, #7
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <HAL_DMA2D_Init+0x90>)
 8007754:	4013      	ands	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68d1      	ldr	r1, [r2, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	430b      	orrs	r3, r1
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	ffffc000 	.word	0xffffc000

08007780 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_DMA2D_Start+0x1c>
 8007798:	2302      	movs	r3, #2
 800779a:	e018      	b.n	80077ce <HAL_DMA2D_Start+0x4e>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa98 	bl	8007cec <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d056      	beq.n	80078a0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80077f2:	f7fe ffd7 	bl	80067a4 <HAL_GetTick>
 80077f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80077f8:	e04b      	b.n	8007892 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007808:	2b00      	cmp	r3, #0
 800780a:	d023      	beq.n	8007854 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	f043 0202 	orr.w	r2, r3, #2
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	f043 0201 	orr.w	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2221      	movs	r2, #33	; 0x21
 800783e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2204      	movs	r2, #4
 8007844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e0a5      	b.n	80079a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d01a      	beq.n	8007892 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800785c:	f7fe ffa2 	bl	80067a4 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d302      	bcc.n	8007872 <HAL_DMA2D_PollForTransfer+0x9c>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10f      	bne.n	8007892 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	f043 0220 	orr.w	r2, r3, #32
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2203      	movs	r2, #3
 8007882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e086      	b.n	80079a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0ac      	beq.n	80077fa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d061      	beq.n	8007986 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80078c2:	f7fe ff6f 	bl	80067a4 <HAL_GetTick>
 80078c6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078c8:	e056      	b.n	8007978 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d02e      	beq.n	800793a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ea:	f043 0204 	orr.w	r2, r3, #4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007900:	f043 0202 	orr.w	r2, r3, #2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2229      	movs	r2, #41	; 0x29
 8007924:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e032      	b.n	80079a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d01a      	beq.n	8007978 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007942:	f7fe ff2f 	bl	80067a4 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d302      	bcc.n	8007958 <HAL_DMA2D_PollForTransfer+0x182>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10f      	bne.n	8007978 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	f043 0220 	orr.w	r2, r3, #32
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e013      	b.n	80079a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0a1      	beq.n	80078ca <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2212      	movs	r2, #18
 800798c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d026      	beq.n	8007a18 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d021      	beq.n	8007a18 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079e2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e8:	f043 0201 	orr.w	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2204      	movs	r2, #4
 80079fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d026      	beq.n	8007a70 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d021      	beq.n	8007a70 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a3a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2220      	movs	r2, #32
 8007a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a48:	f043 0202 	orr.w	r2, r3, #2
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2204      	movs	r2, #4
 8007a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d026      	beq.n	8007ac8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d021      	beq.n	8007ac8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a92:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	f043 0204 	orr.w	r2, r3, #4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d013      	beq.n	8007afa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00e      	beq.n	8007afa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2204      	movs	r2, #4
 8007af2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f853 	bl	8007ba0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d024      	beq.n	8007b4e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d01f      	beq.n	8007b4e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b1c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2202      	movs	r2, #2
 8007b24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01f      	beq.n	8007b98 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01a      	beq.n	8007b98 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2210      	movs	r2, #16
 8007b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f80e 	bl	8007bb4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_DMA2D_ConfigLayer+0x20>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e079      	b.n	8007cdc <HAL_DMA2D_ConfigLayer+0x114>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	3318      	adds	r3, #24
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	041b      	lsls	r3, r3, #16
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007c12:	4b35      	ldr	r3, [pc, #212]	; (8007ce8 <HAL_DMA2D_ConfigLayer+0x120>)
 8007c14:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b0a      	cmp	r3, #10
 8007c1c:	d003      	beq.n	8007c26 <HAL_DMA2D_ConfigLayer+0x5e>
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d107      	bne.n	8007c36 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e005      	b.n	8007c42 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	061b      	lsls	r3, r3, #24
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d120      	bne.n	8007c8a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	43db      	mvns	r3, r3
 8007c52:	ea02 0103 	and.w	r1, r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b0a      	cmp	r3, #10
 8007c70:	d003      	beq.n	8007c7a <HAL_DMA2D_ConfigLayer+0xb2>
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b09      	cmp	r3, #9
 8007c78:	d127      	bne.n	8007cca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007c86:	629a      	str	r2, [r3, #40]	; 0x28
 8007c88:	e01f      	b.n	8007cca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	ea02 0103 	and.w	r1, r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b0a      	cmp	r3, #10
 8007cb2:	d003      	beq.n	8007cbc <HAL_DMA2D_ConfigLayer+0xf4>
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d106      	bne.n	8007cca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007cc8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	ff03000f 	.word	0xff03000f

08007cec <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b08b      	sub	sp, #44	; 0x2c
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	041a      	lsls	r2, r3, #16
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d24:	d174      	bne.n	8007e10 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d2c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d34:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d3c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5c:	e053      	b.n	8007e06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d106      	bne.n	8007d74 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
 8007d72:	e048      	b.n	8007e06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d111      	bne.n	8007da0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	0cdb      	lsrs	r3, r3, #19
 8007d80:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	0a9b      	lsrs	r3, r3, #10
 8007d86:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	08db      	lsrs	r3, r3, #3
 8007d8c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	02db      	lsls	r3, r3, #11
 8007d96:	4313      	orrs	r3, r2
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d9e:	e032      	b.n	8007e06 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d117      	bne.n	8007dd8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	0fdb      	lsrs	r3, r3, #31
 8007dac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	0cdb      	lsrs	r3, r3, #19
 8007db2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	0adb      	lsrs	r3, r3, #11
 8007db8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	08db      	lsrs	r3, r3, #3
 8007dbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	03db      	lsls	r3, r3, #15
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd6:	e016      	b.n	8007e06 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	0f1b      	lsrs	r3, r3, #28
 8007ddc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	0d1b      	lsrs	r3, r3, #20
 8007de2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	0b1b      	lsrs	r3, r3, #12
 8007de8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	091b      	lsrs	r3, r3, #4
 8007dee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	011a      	lsls	r2, r3, #4
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	031b      	lsls	r3, r3, #12
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007e0e:	e003      	b.n	8007e18 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	60da      	str	r2, [r3, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	372c      	adds	r7, #44	; 0x2c
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b089      	sub	sp, #36	; 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e175      	b.n	8008130 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e44:	2201      	movs	r2, #1
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4013      	ands	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	f040 8164 	bne.w	800812a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d005      	beq.n	8007e7a <HAL_GPIO_Init+0x56>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d130      	bne.n	8007edc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	2203      	movs	r2, #3
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	091b      	lsrs	r3, r3, #4
 8007ec6:	f003 0201 	and.w	r2, r3, #1
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d017      	beq.n	8007f18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4013      	ands	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d123      	bne.n	8007f6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	08da      	lsrs	r2, r3, #3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3208      	adds	r2, #8
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	220f      	movs	r2, #15
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4013      	ands	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	08da      	lsrs	r2, r3, #3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3208      	adds	r2, #8
 8007f66:	69b9      	ldr	r1, [r7, #24]
 8007f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	2203      	movs	r2, #3
 8007f78:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	4013      	ands	r3, r2
 8007f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 0203 	and.w	r2, r3, #3
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 80be 	beq.w	800812a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fae:	4b66      	ldr	r3, [pc, #408]	; (8008148 <HAL_GPIO_Init+0x324>)
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb2:	4a65      	ldr	r2, [pc, #404]	; (8008148 <HAL_GPIO_Init+0x324>)
 8007fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8007fba:	4b63      	ldr	r3, [pc, #396]	; (8008148 <HAL_GPIO_Init+0x324>)
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007fc6:	4a61      	ldr	r2, [pc, #388]	; (800814c <HAL_GPIO_Init+0x328>)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	3302      	adds	r3, #2
 8007fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	220f      	movs	r2, #15
 8007fde:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a58      	ldr	r2, [pc, #352]	; (8008150 <HAL_GPIO_Init+0x32c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d037      	beq.n	8008062 <HAL_GPIO_Init+0x23e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a57      	ldr	r2, [pc, #348]	; (8008154 <HAL_GPIO_Init+0x330>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d031      	beq.n	800805e <HAL_GPIO_Init+0x23a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a56      	ldr	r2, [pc, #344]	; (8008158 <HAL_GPIO_Init+0x334>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d02b      	beq.n	800805a <HAL_GPIO_Init+0x236>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a55      	ldr	r2, [pc, #340]	; (800815c <HAL_GPIO_Init+0x338>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d025      	beq.n	8008056 <HAL_GPIO_Init+0x232>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a54      	ldr	r2, [pc, #336]	; (8008160 <HAL_GPIO_Init+0x33c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d01f      	beq.n	8008052 <HAL_GPIO_Init+0x22e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a53      	ldr	r2, [pc, #332]	; (8008164 <HAL_GPIO_Init+0x340>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d019      	beq.n	800804e <HAL_GPIO_Init+0x22a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a52      	ldr	r2, [pc, #328]	; (8008168 <HAL_GPIO_Init+0x344>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d013      	beq.n	800804a <HAL_GPIO_Init+0x226>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a51      	ldr	r2, [pc, #324]	; (800816c <HAL_GPIO_Init+0x348>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00d      	beq.n	8008046 <HAL_GPIO_Init+0x222>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a50      	ldr	r2, [pc, #320]	; (8008170 <HAL_GPIO_Init+0x34c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d007      	beq.n	8008042 <HAL_GPIO_Init+0x21e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a4f      	ldr	r2, [pc, #316]	; (8008174 <HAL_GPIO_Init+0x350>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d101      	bne.n	800803e <HAL_GPIO_Init+0x21a>
 800803a:	2309      	movs	r3, #9
 800803c:	e012      	b.n	8008064 <HAL_GPIO_Init+0x240>
 800803e:	230a      	movs	r3, #10
 8008040:	e010      	b.n	8008064 <HAL_GPIO_Init+0x240>
 8008042:	2308      	movs	r3, #8
 8008044:	e00e      	b.n	8008064 <HAL_GPIO_Init+0x240>
 8008046:	2307      	movs	r3, #7
 8008048:	e00c      	b.n	8008064 <HAL_GPIO_Init+0x240>
 800804a:	2306      	movs	r3, #6
 800804c:	e00a      	b.n	8008064 <HAL_GPIO_Init+0x240>
 800804e:	2305      	movs	r3, #5
 8008050:	e008      	b.n	8008064 <HAL_GPIO_Init+0x240>
 8008052:	2304      	movs	r3, #4
 8008054:	e006      	b.n	8008064 <HAL_GPIO_Init+0x240>
 8008056:	2303      	movs	r3, #3
 8008058:	e004      	b.n	8008064 <HAL_GPIO_Init+0x240>
 800805a:	2302      	movs	r3, #2
 800805c:	e002      	b.n	8008064 <HAL_GPIO_Init+0x240>
 800805e:	2301      	movs	r3, #1
 8008060:	e000      	b.n	8008064 <HAL_GPIO_Init+0x240>
 8008062:	2300      	movs	r3, #0
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	f002 0203 	and.w	r2, r2, #3
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	4093      	lsls	r3, r2
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	4313      	orrs	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008074:	4935      	ldr	r1, [pc, #212]	; (800814c <HAL_GPIO_Init+0x328>)
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	089b      	lsrs	r3, r3, #2
 800807a:	3302      	adds	r3, #2
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008082:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <HAL_GPIO_Init+0x354>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	43db      	mvns	r3, r3
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	4013      	ands	r3, r2
 8008090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080a6:	4a34      	ldr	r2, [pc, #208]	; (8008178 <HAL_GPIO_Init+0x354>)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080ac:	4b32      	ldr	r3, [pc, #200]	; (8008178 <HAL_GPIO_Init+0x354>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	43db      	mvns	r3, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	4013      	ands	r3, r2
 80080ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080d0:	4a29      	ldr	r2, [pc, #164]	; (8008178 <HAL_GPIO_Init+0x354>)
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080d6:	4b28      	ldr	r3, [pc, #160]	; (8008178 <HAL_GPIO_Init+0x354>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	43db      	mvns	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080fa:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <HAL_GPIO_Init+0x354>)
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008100:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <HAL_GPIO_Init+0x354>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	43db      	mvns	r3, r3
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	4013      	ands	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <HAL_GPIO_Init+0x354>)
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b0f      	cmp	r3, #15
 8008134:	f67f ae86 	bls.w	8007e44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	3724      	adds	r7, #36	; 0x24
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40023800 	.word	0x40023800
 800814c:	40013800 	.word	0x40013800
 8008150:	40020000 	.word	0x40020000
 8008154:	40020400 	.word	0x40020400
 8008158:	40020800 	.word	0x40020800
 800815c:	40020c00 	.word	0x40020c00
 8008160:	40021000 	.word	0x40021000
 8008164:	40021400 	.word	0x40021400
 8008168:	40021800 	.word	0x40021800
 800816c:	40021c00 	.word	0x40021c00
 8008170:	40022000 	.word	0x40022000
 8008174:	40022400 	.word	0x40022400
 8008178:	40013c00 	.word	0x40013c00

0800817c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
 8008196:	e0d9      	b.n	800834c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008198:	2201      	movs	r2, #1
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4013      	ands	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	f040 80c9 	bne.w	8008346 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80081b4:	4a6b      	ldr	r2, [pc, #428]	; (8008364 <HAL_GPIO_DeInit+0x1e8>)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	089b      	lsrs	r3, r3, #2
 80081ba:	3302      	adds	r3, #2
 80081bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	220f      	movs	r2, #15
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	4013      	ands	r3, r2
 80081d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a63      	ldr	r2, [pc, #396]	; (8008368 <HAL_GPIO_DeInit+0x1ec>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d037      	beq.n	800824e <HAL_GPIO_DeInit+0xd2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a62      	ldr	r2, [pc, #392]	; (800836c <HAL_GPIO_DeInit+0x1f0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d031      	beq.n	800824a <HAL_GPIO_DeInit+0xce>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a61      	ldr	r2, [pc, #388]	; (8008370 <HAL_GPIO_DeInit+0x1f4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d02b      	beq.n	8008246 <HAL_GPIO_DeInit+0xca>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a60      	ldr	r2, [pc, #384]	; (8008374 <HAL_GPIO_DeInit+0x1f8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d025      	beq.n	8008242 <HAL_GPIO_DeInit+0xc6>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a5f      	ldr	r2, [pc, #380]	; (8008378 <HAL_GPIO_DeInit+0x1fc>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d01f      	beq.n	800823e <HAL_GPIO_DeInit+0xc2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a5e      	ldr	r2, [pc, #376]	; (800837c <HAL_GPIO_DeInit+0x200>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d019      	beq.n	800823a <HAL_GPIO_DeInit+0xbe>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a5d      	ldr	r2, [pc, #372]	; (8008380 <HAL_GPIO_DeInit+0x204>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d013      	beq.n	8008236 <HAL_GPIO_DeInit+0xba>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a5c      	ldr	r2, [pc, #368]	; (8008384 <HAL_GPIO_DeInit+0x208>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00d      	beq.n	8008232 <HAL_GPIO_DeInit+0xb6>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a5b      	ldr	r2, [pc, #364]	; (8008388 <HAL_GPIO_DeInit+0x20c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d007      	beq.n	800822e <HAL_GPIO_DeInit+0xb2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a5a      	ldr	r2, [pc, #360]	; (800838c <HAL_GPIO_DeInit+0x210>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d101      	bne.n	800822a <HAL_GPIO_DeInit+0xae>
 8008226:	2309      	movs	r3, #9
 8008228:	e012      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 800822a:	230a      	movs	r3, #10
 800822c:	e010      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 800822e:	2308      	movs	r3, #8
 8008230:	e00e      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 8008232:	2307      	movs	r3, #7
 8008234:	e00c      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 8008236:	2306      	movs	r3, #6
 8008238:	e00a      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 800823a:	2305      	movs	r3, #5
 800823c:	e008      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 800823e:	2304      	movs	r3, #4
 8008240:	e006      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 8008242:	2303      	movs	r3, #3
 8008244:	e004      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 8008246:	2302      	movs	r3, #2
 8008248:	e002      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <HAL_GPIO_DeInit+0xd4>
 800824e:	2300      	movs	r3, #0
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	f002 0203 	and.w	r2, r2, #3
 8008256:	0092      	lsls	r2, r2, #2
 8008258:	4093      	lsls	r3, r2
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	429a      	cmp	r2, r3
 800825e:	d132      	bne.n	80082c6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008260:	4b4b      	ldr	r3, [pc, #300]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	43db      	mvns	r3, r3
 8008268:	4949      	ldr	r1, [pc, #292]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 800826a:	4013      	ands	r3, r2
 800826c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800826e:	4b48      	ldr	r3, [pc, #288]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	43db      	mvns	r3, r3
 8008276:	4946      	ldr	r1, [pc, #280]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 8008278:	4013      	ands	r3, r2
 800827a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800827c:	4b44      	ldr	r3, [pc, #272]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	43db      	mvns	r3, r3
 8008284:	4942      	ldr	r1, [pc, #264]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 8008286:	4013      	ands	r3, r2
 8008288:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800828a:	4b41      	ldr	r3, [pc, #260]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	43db      	mvns	r3, r3
 8008292:	493f      	ldr	r1, [pc, #252]	; (8008390 <HAL_GPIO_DeInit+0x214>)
 8008294:	4013      	ands	r3, r2
 8008296:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	220f      	movs	r2, #15
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80082a8:	4a2e      	ldr	r2, [pc, #184]	; (8008364 <HAL_GPIO_DeInit+0x1e8>)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	089b      	lsrs	r3, r3, #2
 80082ae:	3302      	adds	r3, #2
 80082b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	43da      	mvns	r2, r3
 80082b8:	482a      	ldr	r0, [pc, #168]	; (8008364 <HAL_GPIO_DeInit+0x1e8>)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	089b      	lsrs	r3, r3, #2
 80082be:	400a      	ands	r2, r1
 80082c0:	3302      	adds	r3, #2
 80082c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	2103      	movs	r1, #3
 80082d0:	fa01 f303 	lsl.w	r3, r1, r3
 80082d4:	43db      	mvns	r3, r3
 80082d6:	401a      	ands	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	08da      	lsrs	r2, r3, #3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3208      	adds	r2, #8
 80082e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	220f      	movs	r2, #15
 80082f2:	fa02 f303 	lsl.w	r3, r2, r3
 80082f6:	43db      	mvns	r3, r3
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	08d2      	lsrs	r2, r2, #3
 80082fc:	4019      	ands	r1, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3208      	adds	r2, #8
 8008302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	2103      	movs	r1, #3
 8008310:	fa01 f303 	lsl.w	r3, r1, r3
 8008314:	43db      	mvns	r3, r3
 8008316:	401a      	ands	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	2101      	movs	r1, #1
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	fa01 f303 	lsl.w	r3, r1, r3
 8008328:	43db      	mvns	r3, r3
 800832a:	401a      	ands	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	2103      	movs	r1, #3
 800833a:	fa01 f303 	lsl.w	r3, r1, r3
 800833e:	43db      	mvns	r3, r3
 8008340:	401a      	ands	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	3301      	adds	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b0f      	cmp	r3, #15
 8008350:	f67f af22 	bls.w	8008198 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40013800 	.word	0x40013800
 8008368:	40020000 	.word	0x40020000
 800836c:	40020400 	.word	0x40020400
 8008370:	40020800 	.word	0x40020800
 8008374:	40020c00 	.word	0x40020c00
 8008378:	40021000 	.word	0x40021000
 800837c:	40021400 	.word	0x40021400
 8008380:	40021800 	.word	0x40021800
 8008384:	40021c00 	.word	0x40021c00
 8008388:	40022000 	.word	0x40022000
 800838c:	40022400 	.word	0x40022400
 8008390:	40013c00 	.word	0x40013c00

08008394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
 80083a0:	4613      	mov	r3, r2
 80083a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083a4:	787b      	ldrb	r3, [r7, #1]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083aa:	887a      	ldrh	r2, [r7, #2]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80083b0:	e003      	b.n	80083ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80083b2:	887b      	ldrh	r3, [r7, #2]
 80083b4:	041a      	lsls	r2, r3, #16
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	619a      	str	r2, [r3, #24]
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083d8:	887a      	ldrh	r2, [r7, #2]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4013      	ands	r3, r2
 80083de:	041a      	lsls	r2, r3, #16
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	43d9      	mvns	r1, r3
 80083e4:	887b      	ldrh	r3, [r7, #2]
 80083e6:	400b      	ands	r3, r1
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	619a      	str	r2, [r3, #24]
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008406:	4b08      	ldr	r3, [pc, #32]	; (8008428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d006      	beq.n	8008420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008412:	4a05      	ldr	r2, [pc, #20]	; (8008428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fa fc34 	bl	8002c88 <HAL_GPIO_EXTI_Callback>
  }
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40013c00 	.word	0x40013c00

0800842c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e07f      	b.n	800853e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7fd fbde 	bl	8005c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2224      	movs	r2, #36	; 0x24
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0201 	bic.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800847c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800848c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d107      	bne.n	80084a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	e006      	b.n	80084b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d104      	bne.n	80084c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6859      	ldr	r1, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <HAL_I2C_Init+0x11c>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69d9      	ldr	r1, [r3, #28]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	02008000 	.word	0x02008000

0800854c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e021      	b.n	80085a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2224      	movs	r2, #36	; 0x24
 8008562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fd fbf4 	bl	8005d64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	461a      	mov	r2, r3
 80085ba:	4603      	mov	r3, r0
 80085bc:	817b      	strh	r3, [r7, #10]
 80085be:	460b      	mov	r3, r1
 80085c0:	813b      	strh	r3, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	f040 80f9 	bne.w	80087c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_I2C_Mem_Write+0x34>
 80085da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0ed      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_I2C_Mem_Write+0x4e>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e0e6      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008602:	f7fe f8cf 	bl	80067a4 <HAL_GetTick>
 8008606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	2319      	movs	r3, #25
 800860e:	2201      	movs	r2, #1
 8008610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fad1 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e0d1      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2221      	movs	r2, #33	; 0x21
 8008628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2240      	movs	r2, #64	; 0x40
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a3a      	ldr	r2, [r7, #32]
 800863e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800864c:	88f8      	ldrh	r0, [r7, #6]
 800864e:	893a      	ldrh	r2, [r7, #8]
 8008650:	8979      	ldrh	r1, [r7, #10]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	4603      	mov	r3, r0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f9e1 	bl	8008a24 <I2C_RequestMemoryWrite>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e0a9      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29b      	uxth	r3, r3
 800867a:	2bff      	cmp	r3, #255	; 0xff
 800867c:	d90e      	bls.n	800869c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	22ff      	movs	r2, #255	; 0xff
 8008682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008688:	b2da      	uxtb	r2, r3
 800868a:	8979      	ldrh	r1, [r7, #10]
 800868c:	2300      	movs	r3, #0
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fc39 	bl	8008f0c <I2C_TransferConfig>
 800869a:	e00f      	b.n	80086bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	8979      	ldrh	r1, [r7, #10]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 fc28 	bl	8008f0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fabb 	bl	8008c3c <I2C_WaitOnTXISFlagUntilTimeout>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e07b      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d034      	beq.n	8008774 <HAL_I2C_Mem_Write+0x1c8>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d130      	bne.n	8008774 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	2200      	movs	r2, #0
 800871a:	2180      	movs	r1, #128	; 0x80
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fa4d 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e04d      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29b      	uxth	r3, r3
 8008732:	2bff      	cmp	r3, #255	; 0xff
 8008734:	d90e      	bls.n	8008754 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	22ff      	movs	r2, #255	; 0xff
 800873a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	b2da      	uxtb	r2, r3
 8008742:	8979      	ldrh	r1, [r7, #10]
 8008744:	2300      	movs	r3, #0
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fbdd 	bl	8008f0c <I2C_TransferConfig>
 8008752:	e00f      	b.n	8008774 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008762:	b2da      	uxtb	r2, r3
 8008764:	8979      	ldrh	r1, [r7, #10]
 8008766:	2300      	movs	r3, #0
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fbcc 	bl	8008f0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d19e      	bne.n	80086bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 fa9a 	bl	8008cbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e01a      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2220      	movs	r2, #32
 8008798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6859      	ldr	r1, [r3, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <HAL_I2C_Mem_Write+0x224>)
 80087a6:	400b      	ands	r3, r1
 80087a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e000      	b.n	80087c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80087c6:	2302      	movs	r3, #2
  }
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	fe00e800 	.word	0xfe00e800

080087d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af02      	add	r7, sp, #8
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	461a      	mov	r2, r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	817b      	strh	r3, [r7, #10]
 80087e6:	460b      	mov	r3, r1
 80087e8:	813b      	strh	r3, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	f040 80fd 	bne.w	80089f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_I2C_Mem_Read+0x34>
 8008802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	d105      	bne.n	8008814 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800880e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e0f1      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800881a:	2b01      	cmp	r3, #1
 800881c:	d101      	bne.n	8008822 <HAL_I2C_Mem_Read+0x4e>
 800881e:	2302      	movs	r3, #2
 8008820:	e0ea      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800882a:	f7fd ffbb 	bl	80067a4 <HAL_GetTick>
 800882e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	2319      	movs	r3, #25
 8008836:	2201      	movs	r2, #1
 8008838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f9bd 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e0d5      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2222      	movs	r2, #34	; 0x22
 8008850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2240      	movs	r2, #64	; 0x40
 8008858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a3a      	ldr	r2, [r7, #32]
 8008866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800886c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008874:	88f8      	ldrh	r0, [r7, #6]
 8008876:	893a      	ldrh	r2, [r7, #8]
 8008878:	8979      	ldrh	r1, [r7, #10]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	4603      	mov	r3, r0
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f921 	bl	8008acc <I2C_RequestMemoryRead>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0ad      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2bff      	cmp	r3, #255	; 0xff
 80088a4:	d90e      	bls.n	80088c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	22ff      	movs	r2, #255	; 0xff
 80088aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	8979      	ldrh	r1, [r7, #10]
 80088b4:	4b52      	ldr	r3, [pc, #328]	; (8008a00 <HAL_I2C_Mem_Read+0x22c>)
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fb25 	bl	8008f0c <I2C_TransferConfig>
 80088c2:	e00f      	b.n	80088e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	8979      	ldrh	r1, [r7, #10]
 80088d6:	4b4a      	ldr	r3, [pc, #296]	; (8008a00 <HAL_I2C_Mem_Read+0x22c>)
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fb14 	bl	8008f0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	2200      	movs	r2, #0
 80088ec:	2104      	movs	r1, #4
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f964 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e07c      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d034      	beq.n	80089a4 <HAL_I2C_Mem_Read+0x1d0>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d130      	bne.n	80089a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	2200      	movs	r2, #0
 800894a:	2180      	movs	r1, #128	; 0x80
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f935 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e04d      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008960:	b29b      	uxth	r3, r3
 8008962:	2bff      	cmp	r3, #255	; 0xff
 8008964:	d90e      	bls.n	8008984 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008970:	b2da      	uxtb	r2, r3
 8008972:	8979      	ldrh	r1, [r7, #10]
 8008974:	2300      	movs	r3, #0
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fac5 	bl	8008f0c <I2C_TransferConfig>
 8008982:	e00f      	b.n	80089a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008992:	b2da      	uxtb	r2, r3
 8008994:	8979      	ldrh	r1, [r7, #10]
 8008996:	2300      	movs	r3, #0
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fab4 	bl	8008f0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d19a      	bne.n	80088e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f982 	bl	8008cbc <I2C_WaitOnSTOPFlagUntilTimeout>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e01a      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2220      	movs	r2, #32
 80089c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6859      	ldr	r1, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <HAL_I2C_Mem_Read+0x230>)
 80089d6:	400b      	ands	r3, r1
 80089d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e000      	b.n	80089f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089f6:	2302      	movs	r3, #2
  }
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	80002400 	.word	0x80002400
 8008a04:	fe00e800 	.word	0xfe00e800

08008a08 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a16:	b2db      	uxtb	r3, r3
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	817b      	strh	r3, [r7, #10]
 8008a36:	460b      	mov	r3, r1
 8008a38:	813b      	strh	r3, [r7, #8]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a3e:	88fb      	ldrh	r3, [r7, #6]
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	8979      	ldrh	r1, [r7, #10]
 8008a44:	4b20      	ldr	r3, [pc, #128]	; (8008ac8 <I2C_RequestMemoryWrite+0xa4>)
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fa5d 	bl	8008f0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	69b9      	ldr	r1, [r7, #24]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 f8f0 	bl	8008c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e02c      	b.n	8008ac0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d105      	bne.n	8008a78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a6c:	893b      	ldrh	r3, [r7, #8]
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	629a      	str	r2, [r3, #40]	; 0x28
 8008a76:	e015      	b.n	8008aa4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	69b9      	ldr	r1, [r7, #24]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f8d6 	bl	8008c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e012      	b.n	8008ac0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a9a:	893b      	ldrh	r3, [r7, #8]
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2180      	movs	r1, #128	; 0x80
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 f884 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	80002000 	.word	0x80002000

08008acc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af02      	add	r7, sp, #8
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	817b      	strh	r3, [r7, #10]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	813b      	strh	r3, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	8979      	ldrh	r1, [r7, #10]
 8008aec:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <I2C_RequestMemoryRead+0xa4>)
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2300      	movs	r3, #0
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 fa0a 	bl	8008f0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	69b9      	ldr	r1, [r7, #24]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f89d 	bl	8008c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e02c      	b.n	8008b66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d105      	bne.n	8008b1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b12:	893b      	ldrh	r3, [r7, #8]
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b1c:	e015      	b.n	8008b4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	0a1b      	lsrs	r3, r3, #8
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	69b9      	ldr	r1, [r7, #24]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f883 	bl	8008c3c <I2C_WaitOnTXISFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e012      	b.n	8008b66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b40:	893b      	ldrh	r3, [r7, #8]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2200      	movs	r2, #0
 8008b52:	2140      	movs	r1, #64	; 0x40
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f831 	bl	8008bbc <I2C_WaitOnFlagUntilTimeout>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	80002000 	.word	0x80002000

08008b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d103      	bne.n	8008b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d007      	beq.n	8008bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699a      	ldr	r2, [r3, #24]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	619a      	str	r2, [r3, #24]
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bcc:	e022      	b.n	8008c14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd4:	d01e      	beq.n	8008c14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bd6:	f7fd fde5 	bl	80067a4 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d302      	bcc.n	8008bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d113      	bne.n	8008c14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	f043 0220 	orr.w	r2, r3, #32
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e00f      	b.n	8008c34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	699a      	ldr	r2, [r3, #24]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	bf0c      	ite	eq
 8008c24:	2301      	moveq	r3, #1
 8008c26:	2300      	movne	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d0cd      	beq.n	8008bce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c48:	e02c      	b.n	8008ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	68b9      	ldr	r1, [r7, #8]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 f870 	bl	8008d34 <I2C_IsErrorOccurred>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e02a      	b.n	8008cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c64:	d01e      	beq.n	8008ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c66:	f7fd fd9d 	bl	80067a4 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d302      	bcc.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d113      	bne.n	8008ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c80:	f043 0220 	orr.w	r2, r3, #32
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e007      	b.n	8008cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d1cb      	bne.n	8008c4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cc8:	e028      	b.n	8008d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	68b9      	ldr	r1, [r7, #8]
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 f830 	bl	8008d34 <I2C_IsErrorOccurred>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e026      	b.n	8008d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cde:	f7fd fd61 	bl	80067a4 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d302      	bcc.n	8008cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d113      	bne.n	8008d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf8:	f043 0220 	orr.w	r2, r3, #32
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e007      	b.n	8008d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d1cf      	bne.n	8008cca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	; 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d075      	beq.n	8008e4c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2210      	movs	r2, #16
 8008d66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d68:	e056      	b.n	8008e18 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d052      	beq.n	8008e18 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d72:	f7fd fd17 	bl	80067a4 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d302      	bcc.n	8008d88 <I2C_IsErrorOccurred+0x54>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d147      	bne.n	8008e18 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008daa:	d12e      	bne.n	8008e0a <I2C_IsErrorOccurred+0xd6>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db2:	d02a      	beq.n	8008e0a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008db4:	7cfb      	ldrb	r3, [r7, #19]
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d027      	beq.n	8008e0a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dc8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008dca:	f7fd fceb 	bl	80067a4 <HAL_GetTick>
 8008dce:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dd0:	e01b      	b.n	8008e0a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008dd2:	f7fd fce7 	bl	80067a4 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	2b19      	cmp	r3, #25
 8008dde:	d914      	bls.n	8008e0a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d1dc      	bne.n	8008dd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	d003      	beq.n	8008e2e <I2C_IsErrorOccurred+0xfa>
 8008e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d09d      	beq.n	8008d6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d103      	bne.n	8008e3e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	f043 0304 	orr.w	r3, r3, #4
 8008e44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	f043 0301 	orr.w	r3, r3, #1
 8008e64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	f043 0308 	orr.w	r3, r3, #8
 8008e86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	f043 0302 	orr.w	r3, r3, #2
 8008ea8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d01c      	beq.n	8008efc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f7ff fe56 	bl	8008b74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6859      	ldr	r1, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <I2C_IsErrorOccurred+0x1d4>)
 8008ed4:	400b      	ands	r3, r1
 8008ed6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3728      	adds	r7, #40	; 0x28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	fe00e800 	.word	0xfe00e800

08008f0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	817b      	strh	r3, [r7, #10]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f24:	7a7b      	ldrb	r3, [r7, #9]
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f2c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	0d5b      	lsrs	r3, r3, #21
 8008f46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f4a:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <I2C_TransferConfig+0x60>)
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	43db      	mvns	r3, r3
 8008f50:	ea02 0103 	and.w	r1, r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	03ff63ff 	.word	0x03ff63ff

08008f70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d138      	bne.n	8008ff8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f90:	2302      	movs	r3, #2
 8008f92:	e032      	b.n	8008ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2224      	movs	r2, #36	; 0x24
 8008fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6819      	ldr	r1, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0201 	orr.w	r2, r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e000      	b.n	8008ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ff8:	2302      	movs	r3, #2
  }
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009006:	b480      	push	{r7}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b20      	cmp	r3, #32
 800901a:	d139      	bne.n	8009090 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009026:	2302      	movs	r3, #2
 8009028:	e033      	b.n	8009092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2224      	movs	r2, #36	; 0x24
 8009036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0201 	bic.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009058:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	e000      	b.n	8009092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009090:	2302      	movs	r3, #2
  }
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e0bf      	b.n	8009232 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fc fe88 	bl	8005ddc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699a      	ldr	r2, [r3, #24]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80090e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6999      	ldr	r1, [r3, #24]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6899      	ldr	r1, [r3, #8]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b4a      	ldr	r3, [pc, #296]	; (800923c <HAL_LTDC_Init+0x19c>)
 8009114:	400b      	ands	r3, r1
 8009116:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	041b      	lsls	r3, r3, #16
 800911e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6899      	ldr	r1, [r3, #8]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68d9      	ldr	r1, [r3, #12]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b3e      	ldr	r3, [pc, #248]	; (800923c <HAL_LTDC_Init+0x19c>)
 8009142:	400b      	ands	r3, r1
 8009144:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	041b      	lsls	r3, r3, #16
 800914c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68d9      	ldr	r1, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a1a      	ldr	r2, [r3, #32]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6919      	ldr	r1, [r3, #16]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b33      	ldr	r3, [pc, #204]	; (800923c <HAL_LTDC_Init+0x19c>)
 8009170:	400b      	ands	r3, r1
 8009172:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6919      	ldr	r1, [r3, #16]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	431a      	orrs	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6959      	ldr	r1, [r3, #20]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	4b27      	ldr	r3, [pc, #156]	; (800923c <HAL_LTDC_Init+0x19c>)
 800919e:	400b      	ands	r3, r1
 80091a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	041b      	lsls	r3, r3, #16
 80091a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6959      	ldr	r1, [r3, #20]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80091d0:	041b      	lsls	r3, r3, #16
 80091d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0206 	orr.w	r2, r2, #6
 800920e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699a      	ldr	r2, [r3, #24]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0201 	orr.w	r2, r2, #1
 800921e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	f000f800 	.word	0xf000f800

08009240 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009256:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d023      	beq.n	80092aa <HAL_LTDC_IRQHandler+0x6a>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d01e      	beq.n	80092aa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0204 	bic.w	r2, r2, #4
 800927a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2204      	movs	r2, #4
 8009282:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800928a:	f043 0201 	orr.w	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2204      	movs	r2, #4
 8009298:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f86f 	bl	8009388 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d023      	beq.n	80092fc <HAL_LTDC_IRQHandler+0xbc>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d01e      	beq.n	80092fc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0202 	bic.w	r2, r2, #2
 80092cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2202      	movs	r2, #2
 80092d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092dc:	f043 0202 	orr.w	r2, r3, #2
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2204      	movs	r2, #4
 80092ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f846 	bl	8009388 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01b      	beq.n	800933e <HAL_LTDC_IRQHandler+0xfe>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d016      	beq.n	800933e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0201 	bic.w	r2, r2, #1
 800931e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2201      	movs	r2, #1
 8009326:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f82f 	bl	800939c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01b      	beq.n	8009380 <HAL_LTDC_IRQHandler+0x140>
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d016      	beq.n	8009380 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0208 	bic.w	r2, r2, #8
 8009360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2208      	movs	r2, #8
 8009368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f818 	bl	80093b0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80093c4:	b5b0      	push	{r4, r5, r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d101      	bne.n	80093de <HAL_LTDC_ConfigLayer+0x1a>
 80093da:	2302      	movs	r3, #2
 80093dc:	e02c      	b.n	8009438 <HAL_LTDC_ConfigLayer+0x74>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2134      	movs	r1, #52	; 0x34
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	4413      	add	r3, r2
 80093fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4614      	mov	r4, r2
 8009402:	461d      	mov	r5, r3
 8009404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800940a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800940c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800940e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 f81f 	bl	800945c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2201      	movs	r2, #1
 8009424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bdb0      	pop	{r4, r5, r7, pc}

08009440 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800944e:	b2db      	uxtb	r3, r3
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800945c:	b480      	push	{r7}
 800945e:	b089      	sub	sp, #36	; 0x24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009478:	4413      	add	r3, r2
 800947a:	041b      	lsls	r3, r3, #16
 800947c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	01db      	lsls	r3, r3, #7
 8009488:	4413      	add	r3, r2
 800948a:	3384      	adds	r3, #132	; 0x84
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	6812      	ldr	r2, [r2, #0]
 8009492:	4611      	mov	r1, r2
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	01d2      	lsls	r2, r2, #7
 8009498:	440a      	add	r2, r1
 800949a:	3284      	adds	r2, #132	; 0x84
 800949c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80094a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b2:	4413      	add	r3, r2
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4619      	mov	r1, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	01db      	lsls	r3, r3, #7
 80094c0:	440b      	add	r3, r1
 80094c2:	3384      	adds	r3, #132	; 0x84
 80094c4:	4619      	mov	r1, r3
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094da:	4413      	add	r3, r2
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	01db      	lsls	r3, r3, #7
 80094ea:	4413      	add	r3, r2
 80094ec:	3384      	adds	r3, #132	; 0x84
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	4611      	mov	r1, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	01d2      	lsls	r2, r2, #7
 80094fa:	440a      	add	r2, r1
 80094fc:	3284      	adds	r2, #132	; 0x84
 80094fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009502:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009512:	4413      	add	r3, r2
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4619      	mov	r1, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	01db      	lsls	r3, r3, #7
 8009520:	440b      	add	r3, r1
 8009522:	3384      	adds	r3, #132	; 0x84
 8009524:	4619      	mov	r1, r3
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4313      	orrs	r3, r2
 800952a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	01db      	lsls	r3, r3, #7
 8009536:	4413      	add	r3, r2
 8009538:	3384      	adds	r3, #132	; 0x84
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	4611      	mov	r1, r2
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	01d2      	lsls	r2, r2, #7
 8009546:	440a      	add	r2, r1
 8009548:	3284      	adds	r2, #132	; 0x84
 800954a:	f023 0307 	bic.w	r3, r3, #7
 800954e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	01db      	lsls	r3, r3, #7
 800955a:	4413      	add	r3, r2
 800955c:	3384      	adds	r3, #132	; 0x84
 800955e:	461a      	mov	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009576:	041b      	lsls	r3, r3, #16
 8009578:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	061b      	lsls	r3, r3, #24
 8009580:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	01db      	lsls	r3, r3, #7
 800958c:	4413      	add	r3, r2
 800958e:	3384      	adds	r3, #132	; 0x84
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	01db      	lsls	r3, r3, #7
 800959c:	4413      	add	r3, r2
 800959e:	3384      	adds	r3, #132	; 0x84
 80095a0:	461a      	mov	r2, r3
 80095a2:	2300      	movs	r3, #0
 80095a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095ac:	461a      	mov	r2, r3
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	431a      	orrs	r2, r3
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	431a      	orrs	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4619      	mov	r1, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	01db      	lsls	r3, r3, #7
 80095c0:	440b      	add	r3, r1
 80095c2:	3384      	adds	r3, #132	; 0x84
 80095c4:	4619      	mov	r1, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	01db      	lsls	r3, r3, #7
 80095d6:	4413      	add	r3, r2
 80095d8:	3384      	adds	r3, #132	; 0x84
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	6812      	ldr	r2, [r2, #0]
 80095e0:	4611      	mov	r1, r2
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	01d2      	lsls	r2, r2, #7
 80095e6:	440a      	add	r2, r1
 80095e8:	3284      	adds	r2, #132	; 0x84
 80095ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	01db      	lsls	r3, r3, #7
 80095fa:	4413      	add	r3, r2
 80095fc:	3384      	adds	r3, #132	; 0x84
 80095fe:	461a      	mov	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	01db      	lsls	r3, r3, #7
 8009610:	4413      	add	r3, r2
 8009612:	3384      	adds	r3, #132	; 0x84
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	01db      	lsls	r3, r3, #7
 8009620:	440b      	add	r3, r1
 8009622:	3384      	adds	r3, #132	; 0x84
 8009624:	4619      	mov	r1, r3
 8009626:	4b58      	ldr	r3, [pc, #352]	; (8009788 <LTDC_SetConfig+0x32c>)
 8009628:	4013      	ands	r3, r2
 800962a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	69da      	ldr	r2, [r3, #28]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	68f9      	ldr	r1, [r7, #12]
 8009636:	6809      	ldr	r1, [r1, #0]
 8009638:	4608      	mov	r0, r1
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	01c9      	lsls	r1, r1, #7
 800963e:	4401      	add	r1, r0
 8009640:	3184      	adds	r1, #132	; 0x84
 8009642:	4313      	orrs	r3, r2
 8009644:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	01db      	lsls	r3, r3, #7
 8009650:	4413      	add	r3, r2
 8009652:	3384      	adds	r3, #132	; 0x84
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	01db      	lsls	r3, r3, #7
 8009660:	4413      	add	r3, r2
 8009662:	3384      	adds	r3, #132	; 0x84
 8009664:	461a      	mov	r2, r3
 8009666:	2300      	movs	r3, #0
 8009668:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	01db      	lsls	r3, r3, #7
 8009674:	4413      	add	r3, r2
 8009676:	3384      	adds	r3, #132	; 0x84
 8009678:	461a      	mov	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009688:	2304      	movs	r3, #4
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e01b      	b.n	80096c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d102      	bne.n	800969c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009696:	2303      	movs	r3, #3
 8009698:	61fb      	str	r3, [r7, #28]
 800969a:	e014      	b.n	80096c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d00b      	beq.n	80096bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d007      	beq.n	80096bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d003      	beq.n	80096bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80096b8:	2b07      	cmp	r3, #7
 80096ba:	d102      	bne.n	80096c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80096bc:	2302      	movs	r3, #2
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	e001      	b.n	80096c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80096c2:	2301      	movs	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	01db      	lsls	r3, r3, #7
 80096d0:	4413      	add	r3, r2
 80096d2:	3384      	adds	r3, #132	; 0x84
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	4611      	mov	r1, r2
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	01d2      	lsls	r2, r2, #7
 80096e0:	440a      	add	r2, r1
 80096e2:	3284      	adds	r2, #132	; 0x84
 80096e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80096e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	fb02 f303 	mul.w	r3, r2, r3
 80096f4:	041a      	lsls	r2, r3, #16
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6859      	ldr	r1, [r3, #4]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1acb      	subs	r3, r1, r3
 8009700:	69f9      	ldr	r1, [r7, #28]
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	3303      	adds	r3, #3
 8009708:	68f9      	ldr	r1, [r7, #12]
 800970a:	6809      	ldr	r1, [r1, #0]
 800970c:	4608      	mov	r0, r1
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	01c9      	lsls	r1, r1, #7
 8009712:	4401      	add	r1, r0
 8009714:	3184      	adds	r1, #132	; 0x84
 8009716:	4313      	orrs	r3, r2
 8009718:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	01db      	lsls	r3, r3, #7
 8009724:	4413      	add	r3, r2
 8009726:	3384      	adds	r3, #132	; 0x84
 8009728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4619      	mov	r1, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	01db      	lsls	r3, r3, #7
 8009734:	440b      	add	r3, r1
 8009736:	3384      	adds	r3, #132	; 0x84
 8009738:	4619      	mov	r1, r3
 800973a:	4b14      	ldr	r3, [pc, #80]	; (800978c <LTDC_SetConfig+0x330>)
 800973c:	4013      	ands	r3, r2
 800973e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	01db      	lsls	r3, r3, #7
 800974a:	4413      	add	r3, r2
 800974c:	3384      	adds	r3, #132	; 0x84
 800974e:	461a      	mov	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	01db      	lsls	r3, r3, #7
 8009760:	4413      	add	r3, r2
 8009762:	3384      	adds	r3, #132	; 0x84
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	4611      	mov	r1, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	01d2      	lsls	r2, r2, #7
 8009770:	440a      	add	r2, r1
 8009772:	3284      	adds	r2, #132	; 0x84
 8009774:	f043 0301 	orr.w	r3, r3, #1
 8009778:	6013      	str	r3, [r2, #0]
}
 800977a:	bf00      	nop
 800977c:	3724      	adds	r7, #36	; 0x24
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	fffff8f8 	.word	0xfffff8f8
 800978c:	fffff800 	.word	0xfffff800

08009790 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a04      	ldr	r2, [pc, #16]	; (80097ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800979a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800979e:	6013      	str	r3, [r2, #0]
}
 80097a0:	bf00      	nop
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40007000 	.word	0x40007000

080097b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80097ba:	4b23      	ldr	r3, [pc, #140]	; (8009848 <HAL_PWREx_EnableOverDrive+0x98>)
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	4a22      	ldr	r2, [pc, #136]	; (8009848 <HAL_PWREx_EnableOverDrive+0x98>)
 80097c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c4:	6413      	str	r3, [r2, #64]	; 0x40
 80097c6:	4b20      	ldr	r3, [pc, #128]	; (8009848 <HAL_PWREx_EnableOverDrive+0x98>)
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80097d2:	4b1e      	ldr	r3, [pc, #120]	; (800984c <HAL_PWREx_EnableOverDrive+0x9c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a1d      	ldr	r2, [pc, #116]	; (800984c <HAL_PWREx_EnableOverDrive+0x9c>)
 80097d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097de:	f7fc ffe1 	bl	80067a4 <HAL_GetTick>
 80097e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097e4:	e009      	b.n	80097fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097e6:	f7fc ffdd 	bl	80067a4 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097f4:	d901      	bls.n	80097fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e022      	b.n	8009840 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097fa:	4b14      	ldr	r3, [pc, #80]	; (800984c <HAL_PWREx_EnableOverDrive+0x9c>)
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009806:	d1ee      	bne.n	80097e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009808:	4b10      	ldr	r3, [pc, #64]	; (800984c <HAL_PWREx_EnableOverDrive+0x9c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0f      	ldr	r2, [pc, #60]	; (800984c <HAL_PWREx_EnableOverDrive+0x9c>)
 800980e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009812:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009814:	f7fc ffc6 	bl	80067a4 <HAL_GetTick>
 8009818:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800981a:	e009      	b.n	8009830 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800981c:	f7fc ffc2 	bl	80067a4 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800982a:	d901      	bls.n	8009830 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e007      	b.n	8009840 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800983c:	d1ee      	bne.n	800981c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40023800 	.word	0x40023800
 800984c:	40007000 	.word	0x40007000

08009850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e291      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 8087 	beq.w	8009982 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009874:	4b96      	ldr	r3, [pc, #600]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 030c 	and.w	r3, r3, #12
 800987c:	2b04      	cmp	r3, #4
 800987e:	d00c      	beq.n	800989a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009880:	4b93      	ldr	r3, [pc, #588]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 030c 	and.w	r3, r3, #12
 8009888:	2b08      	cmp	r3, #8
 800988a:	d112      	bne.n	80098b2 <HAL_RCC_OscConfig+0x62>
 800988c:	4b90      	ldr	r3, [pc, #576]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009898:	d10b      	bne.n	80098b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800989a:	4b8d      	ldr	r3, [pc, #564]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d06c      	beq.n	8009980 <HAL_RCC_OscConfig+0x130>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d168      	bne.n	8009980 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e26b      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ba:	d106      	bne.n	80098ca <HAL_RCC_OscConfig+0x7a>
 80098bc:	4b84      	ldr	r3, [pc, #528]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a83      	ldr	r2, [pc, #524]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	e02e      	b.n	8009928 <HAL_RCC_OscConfig+0xd8>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10c      	bne.n	80098ec <HAL_RCC_OscConfig+0x9c>
 80098d2:	4b7f      	ldr	r3, [pc, #508]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a7e      	ldr	r2, [pc, #504]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	4b7c      	ldr	r3, [pc, #496]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a7b      	ldr	r2, [pc, #492]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	e01d      	b.n	8009928 <HAL_RCC_OscConfig+0xd8>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f4:	d10c      	bne.n	8009910 <HAL_RCC_OscConfig+0xc0>
 80098f6:	4b76      	ldr	r3, [pc, #472]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a75      	ldr	r2, [pc, #468]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80098fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	4b73      	ldr	r3, [pc, #460]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a72      	ldr	r2, [pc, #456]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800990c:	6013      	str	r3, [r2, #0]
 800990e:	e00b      	b.n	8009928 <HAL_RCC_OscConfig+0xd8>
 8009910:	4b6f      	ldr	r3, [pc, #444]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a6e      	ldr	r2, [pc, #440]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	4b6c      	ldr	r3, [pc, #432]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a6b      	ldr	r2, [pc, #428]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d013      	beq.n	8009958 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009930:	f7fc ff38 	bl	80067a4 <HAL_GetTick>
 8009934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009938:	f7fc ff34 	bl	80067a4 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b64      	cmp	r3, #100	; 0x64
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e21f      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800994a:	4b61      	ldr	r3, [pc, #388]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0f0      	beq.n	8009938 <HAL_RCC_OscConfig+0xe8>
 8009956:	e014      	b.n	8009982 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009958:	f7fc ff24 	bl	80067a4 <HAL_GetTick>
 800995c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800995e:	e008      	b.n	8009972 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009960:	f7fc ff20 	bl	80067a4 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b64      	cmp	r3, #100	; 0x64
 800996c:	d901      	bls.n	8009972 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e20b      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009972:	4b57      	ldr	r3, [pc, #348]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f0      	bne.n	8009960 <HAL_RCC_OscConfig+0x110>
 800997e:	e000      	b.n	8009982 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d069      	beq.n	8009a62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800998e:	4b50      	ldr	r3, [pc, #320]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f003 030c 	and.w	r3, r3, #12
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00b      	beq.n	80099b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800999a:	4b4d      	ldr	r3, [pc, #308]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f003 030c 	and.w	r3, r3, #12
 80099a2:	2b08      	cmp	r3, #8
 80099a4:	d11c      	bne.n	80099e0 <HAL_RCC_OscConfig+0x190>
 80099a6:	4b4a      	ldr	r3, [pc, #296]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d116      	bne.n	80099e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099b2:	4b47      	ldr	r3, [pc, #284]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d005      	beq.n	80099ca <HAL_RCC_OscConfig+0x17a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d001      	beq.n	80099ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e1df      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ca:	4b41      	ldr	r3, [pc, #260]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	493d      	ldr	r1, [pc, #244]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099de:	e040      	b.n	8009a62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d023      	beq.n	8009a30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099e8:	4b39      	ldr	r3, [pc, #228]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a38      	ldr	r2, [pc, #224]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7fc fed6 	bl	80067a4 <HAL_GetTick>
 80099f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099fc:	f7fc fed2 	bl	80067a4 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e1bd      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a0e:	4b30      	ldr	r3, [pc, #192]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0f0      	beq.n	80099fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a1a:	4b2d      	ldr	r3, [pc, #180]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	4929      	ldr	r1, [pc, #164]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	600b      	str	r3, [r1, #0]
 8009a2e:	e018      	b.n	8009a62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a30:	4b27      	ldr	r3, [pc, #156]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a26      	ldr	r2, [pc, #152]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a36:	f023 0301 	bic.w	r3, r3, #1
 8009a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a3c:	f7fc feb2 	bl	80067a4 <HAL_GetTick>
 8009a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a42:	e008      	b.n	8009a56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a44:	f7fc feae 	bl	80067a4 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e199      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a56:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1f0      	bne.n	8009a44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d038      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d019      	beq.n	8009aaa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7a:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a7c:	f043 0301 	orr.w	r3, r3, #1
 8009a80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a82:	f7fc fe8f 	bl	80067a4 <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a8a:	f7fc fe8b 	bl	80067a4 <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e176      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d0f0      	beq.n	8009a8a <HAL_RCC_OscConfig+0x23a>
 8009aa8:	e01a      	b.n	8009ae0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009aaa:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aae:	4a08      	ldr	r2, [pc, #32]	; (8009ad0 <HAL_RCC_OscConfig+0x280>)
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab6:	f7fc fe75 	bl	80067a4 <HAL_GetTick>
 8009aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009abc:	e00a      	b.n	8009ad4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009abe:	f7fc fe71 	bl	80067a4 <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d903      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e15c      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
 8009ad0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ad4:	4b91      	ldr	r3, [pc, #580]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ee      	bne.n	8009abe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 80a4 	beq.w	8009c36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009aee:	4b8b      	ldr	r3, [pc, #556]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009afa:	4b88      	ldr	r3, [pc, #544]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	4a87      	ldr	r2, [pc, #540]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6413      	str	r3, [r2, #64]	; 0x40
 8009b06:	4b85      	ldr	r3, [pc, #532]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b0e:	60bb      	str	r3, [r7, #8]
 8009b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b12:	2301      	movs	r3, #1
 8009b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b16:	4b82      	ldr	r3, [pc, #520]	; (8009d20 <HAL_RCC_OscConfig+0x4d0>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d118      	bne.n	8009b54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009b22:	4b7f      	ldr	r3, [pc, #508]	; (8009d20 <HAL_RCC_OscConfig+0x4d0>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a7e      	ldr	r2, [pc, #504]	; (8009d20 <HAL_RCC_OscConfig+0x4d0>)
 8009b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b2e:	f7fc fe39 	bl	80067a4 <HAL_GetTick>
 8009b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b36:	f7fc fe35 	bl	80067a4 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b64      	cmp	r3, #100	; 0x64
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e120      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b48:	4b75      	ldr	r3, [pc, #468]	; (8009d20 <HAL_RCC_OscConfig+0x4d0>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d106      	bne.n	8009b6a <HAL_RCC_OscConfig+0x31a>
 8009b5c:	4b6f      	ldr	r3, [pc, #444]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b60:	4a6e      	ldr	r2, [pc, #440]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b62:	f043 0301 	orr.w	r3, r3, #1
 8009b66:	6713      	str	r3, [r2, #112]	; 0x70
 8009b68:	e02d      	b.n	8009bc6 <HAL_RCC_OscConfig+0x376>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10c      	bne.n	8009b8c <HAL_RCC_OscConfig+0x33c>
 8009b72:	4b6a      	ldr	r3, [pc, #424]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b76:	4a69      	ldr	r2, [pc, #420]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009b7e:	4b67      	ldr	r3, [pc, #412]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	4a66      	ldr	r2, [pc, #408]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b84:	f023 0304 	bic.w	r3, r3, #4
 8009b88:	6713      	str	r3, [r2, #112]	; 0x70
 8009b8a:	e01c      	b.n	8009bc6 <HAL_RCC_OscConfig+0x376>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b05      	cmp	r3, #5
 8009b92:	d10c      	bne.n	8009bae <HAL_RCC_OscConfig+0x35e>
 8009b94:	4b61      	ldr	r3, [pc, #388]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b98:	4a60      	ldr	r2, [pc, #384]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009b9a:	f043 0304 	orr.w	r3, r3, #4
 8009b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009ba0:	4b5e      	ldr	r3, [pc, #376]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba4:	4a5d      	ldr	r2, [pc, #372]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	6713      	str	r3, [r2, #112]	; 0x70
 8009bac:	e00b      	b.n	8009bc6 <HAL_RCC_OscConfig+0x376>
 8009bae:	4b5b      	ldr	r3, [pc, #364]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb2:	4a5a      	ldr	r2, [pc, #360]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009bb4:	f023 0301 	bic.w	r3, r3, #1
 8009bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8009bba:	4b58      	ldr	r3, [pc, #352]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbe:	4a57      	ldr	r2, [pc, #348]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009bc0:	f023 0304 	bic.w	r3, r3, #4
 8009bc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d015      	beq.n	8009bfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bce:	f7fc fde9 	bl	80067a4 <HAL_GetTick>
 8009bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bd4:	e00a      	b.n	8009bec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bd6:	f7fc fde5 	bl	80067a4 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e0ce      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bec:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0ee      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x386>
 8009bf8:	e014      	b.n	8009c24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bfa:	f7fc fdd3 	bl	80067a4 <HAL_GetTick>
 8009bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c00:	e00a      	b.n	8009c18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c02:	f7fc fdcf 	bl	80067a4 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d901      	bls.n	8009c18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e0b8      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c18:	4b40      	ldr	r3, [pc, #256]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1ee      	bne.n	8009c02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d105      	bne.n	8009c36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c2a:	4b3c      	ldr	r3, [pc, #240]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	4a3b      	ldr	r2, [pc, #236]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 80a4 	beq.w	8009d88 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c40:	4b36      	ldr	r3, [pc, #216]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f003 030c 	and.w	r3, r3, #12
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d06b      	beq.n	8009d24 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d149      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c54:	4b31      	ldr	r3, [pc, #196]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a30      	ldr	r2, [pc, #192]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c60:	f7fc fda0 	bl	80067a4 <HAL_GetTick>
 8009c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c68:	f7fc fd9c 	bl	80067a4 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e087      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c7a:	4b28      	ldr	r3, [pc, #160]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1f0      	bne.n	8009c68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	69da      	ldr	r2, [r3, #28]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	019b      	lsls	r3, r3, #6
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9c:	085b      	lsrs	r3, r3, #1
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	041b      	lsls	r3, r3, #16
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	061b      	lsls	r3, r3, #24
 8009caa:	4313      	orrs	r3, r2
 8009cac:	4a1b      	ldr	r2, [pc, #108]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cb2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cb4:	4b19      	ldr	r3, [pc, #100]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a18      	ldr	r2, [pc, #96]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc0:	f7fc fd70 	bl	80067a4 <HAL_GetTick>
 8009cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cc8:	f7fc fd6c 	bl	80067a4 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e057      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cda:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d0f0      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x478>
 8009ce6:	e04f      	b.n	8009d88 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a0b      	ldr	r2, [pc, #44]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf4:	f7fc fd56 	bl	80067a4 <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cfc:	f7fc fd52 	bl	80067a4 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e03d      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <HAL_RCC_OscConfig+0x4cc>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1f0      	bne.n	8009cfc <HAL_RCC_OscConfig+0x4ac>
 8009d1a:	e035      	b.n	8009d88 <HAL_RCC_OscConfig+0x538>
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009d24:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <HAL_RCC_OscConfig+0x544>)
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d028      	beq.n	8009d84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d121      	bne.n	8009d84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d11a      	bne.n	8009d84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d54:	4013      	ands	r3, r2
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d111      	bne.n	8009d84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d107      	bne.n	8009d84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d001      	beq.n	8009d88 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e000      	b.n	8009d8a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	40023800 	.word	0x40023800

08009d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0d0      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009db0:	4b6a      	ldr	r3, [pc, #424]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d910      	bls.n	8009de0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dbe:	4b67      	ldr	r3, [pc, #412]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f023 020f 	bic.w	r2, r3, #15
 8009dc6:	4965      	ldr	r1, [pc, #404]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dce:	4b63      	ldr	r3, [pc, #396]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 030f 	and.w	r3, r3, #15
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d001      	beq.n	8009de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e0b8      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d020      	beq.n	8009e2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009df8:	4b59      	ldr	r3, [pc, #356]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	4a58      	ldr	r2, [pc, #352]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e10:	4b53      	ldr	r3, [pc, #332]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	4a52      	ldr	r2, [pc, #328]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e1c:	4b50      	ldr	r3, [pc, #320]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	494d      	ldr	r1, [pc, #308]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d040      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d107      	bne.n	8009e52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e42:	4b47      	ldr	r3, [pc, #284]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d115      	bne.n	8009e7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e07f      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d107      	bne.n	8009e6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e5a:	4b41      	ldr	r3, [pc, #260]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d109      	bne.n	8009e7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e073      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e6a:	4b3d      	ldr	r3, [pc, #244]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e06b      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e7a:	4b39      	ldr	r3, [pc, #228]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f023 0203 	bic.w	r2, r3, #3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	4936      	ldr	r1, [pc, #216]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e8c:	f7fc fc8a 	bl	80067a4 <HAL_GetTick>
 8009e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e92:	e00a      	b.n	8009eaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e94:	f7fc fc86 	bl	80067a4 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e053      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eaa:	4b2d      	ldr	r3, [pc, #180]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 020c 	and.w	r2, r3, #12
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d1eb      	bne.n	8009e94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ebc:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 030f 	and.w	r3, r3, #15
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d210      	bcs.n	8009eec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eca:	4b24      	ldr	r3, [pc, #144]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f023 020f 	bic.w	r2, r3, #15
 8009ed2:	4922      	ldr	r1, [pc, #136]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eda:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <HAL_RCC_ClockConfig+0x1c4>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d001      	beq.n	8009eec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e032      	b.n	8009f52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d008      	beq.n	8009f0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ef8:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	4916      	ldr	r1, [pc, #88]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0308 	and.w	r3, r3, #8
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	490e      	ldr	r1, [pc, #56]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009f2a:	f000 f821 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <HAL_RCC_ClockConfig+0x1c8>)
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	091b      	lsrs	r3, r3, #4
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	490a      	ldr	r1, [pc, #40]	; (8009f64 <HAL_RCC_ClockConfig+0x1cc>)
 8009f3c:	5ccb      	ldrb	r3, [r1, r3]
 8009f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f42:	4a09      	ldr	r2, [pc, #36]	; (8009f68 <HAL_RCC_ClockConfig+0x1d0>)
 8009f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <HAL_RCC_ClockConfig+0x1d4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fc fb1c 	bl	8006588 <HAL_InitTick>

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	40023c00 	.word	0x40023c00
 8009f60:	40023800 	.word	0x40023800
 8009f64:	08035ca0 	.word	0x08035ca0
 8009f68:	20000040 	.word	0x20000040
 8009f6c:	20000044 	.word	0x20000044

08009f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f70:	b5b0      	push	{r4, r5, r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009f76:	2100      	movs	r1, #0
 8009f78:	6079      	str	r1, [r7, #4]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	60f9      	str	r1, [r7, #12]
 8009f7e:	2100      	movs	r1, #0
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009f82:	2100      	movs	r1, #0
 8009f84:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f86:	4952      	ldr	r1, [pc, #328]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f88:	6889      	ldr	r1, [r1, #8]
 8009f8a:	f001 010c 	and.w	r1, r1, #12
 8009f8e:	2908      	cmp	r1, #8
 8009f90:	d00d      	beq.n	8009fae <HAL_RCC_GetSysClockFreq+0x3e>
 8009f92:	2908      	cmp	r1, #8
 8009f94:	f200 8094 	bhi.w	800a0c0 <HAL_RCC_GetSysClockFreq+0x150>
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d002      	beq.n	8009fa2 <HAL_RCC_GetSysClockFreq+0x32>
 8009f9c:	2904      	cmp	r1, #4
 8009f9e:	d003      	beq.n	8009fa8 <HAL_RCC_GetSysClockFreq+0x38>
 8009fa0:	e08e      	b.n	800a0c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009fa2:	4b4c      	ldr	r3, [pc, #304]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x164>)
 8009fa4:	60bb      	str	r3, [r7, #8]
      break;
 8009fa6:	e08e      	b.n	800a0c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009fa8:	4b4b      	ldr	r3, [pc, #300]	; (800a0d8 <HAL_RCC_GetSysClockFreq+0x168>)
 8009faa:	60bb      	str	r3, [r7, #8]
      break;
 8009fac:	e08b      	b.n	800a0c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009fae:	4948      	ldr	r1, [pc, #288]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fb0:	6849      	ldr	r1, [r1, #4]
 8009fb2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009fb6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009fb8:	4945      	ldr	r1, [pc, #276]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fba:	6849      	ldr	r1, [r1, #4]
 8009fbc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	d024      	beq.n	800a00e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fc4:	4942      	ldr	r1, [pc, #264]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fc6:	6849      	ldr	r1, [r1, #4]
 8009fc8:	0989      	lsrs	r1, r1, #6
 8009fca:	4608      	mov	r0, r1
 8009fcc:	f04f 0100 	mov.w	r1, #0
 8009fd0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009fd4:	f04f 0500 	mov.w	r5, #0
 8009fd8:	ea00 0204 	and.w	r2, r0, r4
 8009fdc:	ea01 0305 	and.w	r3, r1, r5
 8009fe0:	493d      	ldr	r1, [pc, #244]	; (800a0d8 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fe2:	fb01 f003 	mul.w	r0, r1, r3
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	fb01 f102 	mul.w	r1, r1, r2
 8009fec:	1844      	adds	r4, r0, r1
 8009fee:	493a      	ldr	r1, [pc, #232]	; (800a0d8 <HAL_RCC_GetSysClockFreq+0x168>)
 8009ff0:	fba2 0101 	umull	r0, r1, r2, r1
 8009ff4:	1863      	adds	r3, r4, r1
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f04f 0300 	mov.w	r3, #0
 800a000:	f7f6 f906 	bl	8000210 <__aeabi_uldivmod>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4613      	mov	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	e04a      	b.n	800a0a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a00e:	4b30      	ldr	r3, [pc, #192]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x160>)
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	099b      	lsrs	r3, r3, #6
 800a014:	461a      	mov	r2, r3
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a01e:	f04f 0100 	mov.w	r1, #0
 800a022:	ea02 0400 	and.w	r4, r2, r0
 800a026:	ea03 0501 	and.w	r5, r3, r1
 800a02a:	4620      	mov	r0, r4
 800a02c:	4629      	mov	r1, r5
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	f04f 0300 	mov.w	r3, #0
 800a036:	014b      	lsls	r3, r1, #5
 800a038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a03c:	0142      	lsls	r2, r0, #5
 800a03e:	4610      	mov	r0, r2
 800a040:	4619      	mov	r1, r3
 800a042:	1b00      	subs	r0, r0, r4
 800a044:	eb61 0105 	sbc.w	r1, r1, r5
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	018b      	lsls	r3, r1, #6
 800a052:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a056:	0182      	lsls	r2, r0, #6
 800a058:	1a12      	subs	r2, r2, r0
 800a05a:	eb63 0301 	sbc.w	r3, r3, r1
 800a05e:	f04f 0000 	mov.w	r0, #0
 800a062:	f04f 0100 	mov.w	r1, #0
 800a066:	00d9      	lsls	r1, r3, #3
 800a068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a06c:	00d0      	lsls	r0, r2, #3
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	1912      	adds	r2, r2, r4
 800a074:	eb45 0303 	adc.w	r3, r5, r3
 800a078:	f04f 0000 	mov.w	r0, #0
 800a07c:	f04f 0100 	mov.w	r1, #0
 800a080:	0299      	lsls	r1, r3, #10
 800a082:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a086:	0290      	lsls	r0, r2, #10
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4610      	mov	r0, r2
 800a08e:	4619      	mov	r1, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	461a      	mov	r2, r3
 800a094:	f04f 0300 	mov.w	r3, #0
 800a098:	f7f6 f8ba 	bl	8000210 <__aeabi_uldivmod>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	0c1b      	lsrs	r3, r3, #16
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0bc:	60bb      	str	r3, [r7, #8]
      break;
 800a0be:	e002      	b.n	800a0c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x164>)
 800a0c2:	60bb      	str	r3, [r7, #8]
      break;
 800a0c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	00f42400 	.word	0x00f42400
 800a0d8:	017d7840 	.word	0x017d7840

0800a0dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0e0:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20000040 	.word	0x20000040

0800a0f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0f8:	f7ff fff0 	bl	800a0dc <HAL_RCC_GetHCLKFreq>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	0a9b      	lsrs	r3, r3, #10
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	4903      	ldr	r1, [pc, #12]	; (800a118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a10a:	5ccb      	ldrb	r3, [r1, r3]
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40023800 	.word	0x40023800
 800a118:	08035cb0 	.word	0x08035cb0

0800a11c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a120:	f7ff ffdc 	bl	800a0dc <HAL_RCC_GetHCLKFreq>
 800a124:	4602      	mov	r2, r0
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	0b5b      	lsrs	r3, r3, #13
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	4903      	ldr	r1, [pc, #12]	; (800a140 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a132:	5ccb      	ldrb	r3, [r1, r3]
 800a134:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a138:	4618      	mov	r0, r3
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40023800 	.word	0x40023800
 800a140:	08035cb0 	.word	0x08035cb0

0800a144 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	220f      	movs	r2, #15
 800a152:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a154:	4b12      	ldr	r3, [pc, #72]	; (800a1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f003 0203 	and.w	r2, r3, #3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a160:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a16c:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a178:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	08db      	lsrs	r3, r3, #3
 800a17e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a186:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <HAL_RCC_GetClockConfig+0x60>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 020f 	and.w	r2, r3, #15
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	601a      	str	r2, [r3, #0]
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	40023800 	.word	0x40023800
 800a1a4:	40023c00 	.word	0x40023c00

0800a1a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d012      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1d0:	4b69      	ldr	r3, [pc, #420]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	4a68      	ldr	r2, [pc, #416]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a1da:	6093      	str	r3, [r2, #8]
 800a1dc:	4b66      	ldr	r3, [pc, #408]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1de:	689a      	ldr	r2, [r3, #8]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e4:	4964      	ldr	r1, [pc, #400]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d017      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a202:	4b5d      	ldr	r3, [pc, #372]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a210:	4959      	ldr	r1, [pc, #356]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a212:	4313      	orrs	r3, r2
 800a214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a220:	d101      	bne.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a222:	2301      	movs	r3, #1
 800a224:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a22e:	2301      	movs	r3, #1
 800a230:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d017      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a23e:	4b4e      	ldr	r3, [pc, #312]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	494a      	ldr	r1, [pc, #296]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a25c:	d101      	bne.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a25e:	2301      	movs	r3, #1
 800a260:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a26a:	2301      	movs	r3, #1
 800a26c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a27a:	2301      	movs	r3, #1
 800a27c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0320 	and.w	r3, r3, #32
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 808b 	beq.w	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a28c:	4b3a      	ldr	r3, [pc, #232]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a290:	4a39      	ldr	r2, [pc, #228]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a296:	6413      	str	r3, [r2, #64]	; 0x40
 800a298:	4b37      	ldr	r3, [pc, #220]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2a0:	60bb      	str	r3, [r7, #8]
 800a2a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a2a4:	4b35      	ldr	r3, [pc, #212]	; (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a34      	ldr	r2, [pc, #208]	; (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a2aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b0:	f7fc fa78 	bl	80067a4 <HAL_GetTick>
 800a2b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a2b6:	e008      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2b8:	f7fc fa74 	bl	80067a4 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b64      	cmp	r3, #100	; 0x64
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e357      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a2ca:	4b2c      	ldr	r3, [pc, #176]	; (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0f0      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a2d6:	4b28      	ldr	r3, [pc, #160]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d035      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d02e      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2f4:	4b20      	ldr	r3, [pc, #128]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a2fe:	4b1e      	ldr	r3, [pc, #120]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a302:	4a1d      	ldr	r2, [pc, #116]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a308:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a30a:	4b1b      	ldr	r3, [pc, #108]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30e:	4a1a      	ldr	r2, [pc, #104]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a314:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a316:	4a18      	ldr	r2, [pc, #96]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a31c:	4b16      	ldr	r3, [pc, #88]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b01      	cmp	r3, #1
 800a326:	d114      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a328:	f7fc fa3c 	bl	80067a4 <HAL_GetTick>
 800a32c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a32e:	e00a      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a330:	f7fc fa38 	bl	80067a4 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a33e:	4293      	cmp	r3, r2
 800a340:	d901      	bls.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e319      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a346:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0ee      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a35e:	d111      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a360:	4b05      	ldr	r3, [pc, #20]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a36e:	400b      	ands	r3, r1
 800a370:	4901      	ldr	r1, [pc, #4]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a372:	4313      	orrs	r3, r2
 800a374:	608b      	str	r3, [r1, #8]
 800a376:	e00b      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a378:	40023800 	.word	0x40023800
 800a37c:	40007000 	.word	0x40007000
 800a380:	0ffffcff 	.word	0x0ffffcff
 800a384:	4bb1      	ldr	r3, [pc, #708]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	4ab0      	ldr	r2, [pc, #704]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a38a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a38e:	6093      	str	r3, [r2, #8]
 800a390:	4bae      	ldr	r3, [pc, #696]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a39c:	49ab      	ldr	r1, [pc, #684]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0310 	and.w	r3, r3, #16
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d010      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3ae:	4ba7      	ldr	r3, [pc, #668]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3b4:	4aa5      	ldr	r2, [pc, #660]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a3be:	4ba3      	ldr	r3, [pc, #652]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	49a0      	ldr	r1, [pc, #640]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3dc:	4b9b      	ldr	r3, [pc, #620]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ea:	4998      	ldr	r1, [pc, #608]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3fe:	4b93      	ldr	r3, [pc, #588]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a40c:	498f      	ldr	r1, [pc, #572]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a420:	4b8a      	ldr	r3, [pc, #552]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a42e:	4987      	ldr	r1, [pc, #540]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a442:	4b82      	ldr	r3, [pc, #520]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a450:	497e      	ldr	r1, [pc, #504]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a452:	4313      	orrs	r3, r2
 800a454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a464:	4b79      	ldr	r3, [pc, #484]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46a:	f023 0203 	bic.w	r2, r3, #3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a472:	4976      	ldr	r1, [pc, #472]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a474:	4313      	orrs	r3, r2
 800a476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a486:	4b71      	ldr	r3, [pc, #452]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48c:	f023 020c 	bic.w	r2, r3, #12
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a494:	496d      	ldr	r1, [pc, #436]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a4a8:	4b68      	ldr	r3, [pc, #416]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	4965      	ldr	r1, [pc, #404]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4ca:	4b60      	ldr	r3, [pc, #384]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d8:	495c      	ldr	r1, [pc, #368]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4ec:	4b57      	ldr	r3, [pc, #348]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	4954      	ldr	r1, [pc, #336]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a50e:	4b4f      	ldr	r3, [pc, #316]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a514:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a51c:	494b      	ldr	r1, [pc, #300]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a530:	4b46      	ldr	r3, [pc, #280]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a53e:	4943      	ldr	r1, [pc, #268]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a540:	4313      	orrs	r3, r2
 800a542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a552:	4b3e      	ldr	r3, [pc, #248]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a560:	493a      	ldr	r1, [pc, #232]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a574:	4b35      	ldr	r3, [pc, #212]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a57a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a582:	4932      	ldr	r1, [pc, #200]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a584:	4313      	orrs	r3, r2
 800a586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d011      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a596:	4b2d      	ldr	r3, [pc, #180]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a59c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5a4:	4929      	ldr	r1, [pc, #164]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5b4:	d101      	bne.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0308 	and.w	r3, r3, #8
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e4:	4919      	ldr	r1, [pc, #100]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00b      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a5f8:	4b14      	ldr	r3, [pc, #80]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a608:	4910      	ldr	r1, [pc, #64]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d006      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 80d9 	beq.w	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a624:	4b09      	ldr	r3, [pc, #36]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a08      	ldr	r2, [pc, #32]	; (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a62a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a62e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a630:	f7fc f8b8 	bl	80067a4 <HAL_GetTick>
 800a634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a636:	e00b      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a638:	f7fc f8b4 	bl	80067a4 <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b64      	cmp	r3, #100	; 0x64
 800a644:	d904      	bls.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e197      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a64a:	bf00      	nop
 800a64c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a650:	4b6c      	ldr	r3, [pc, #432]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1ed      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d021      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d11d      	bne.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a670:	4b64      	ldr	r3, [pc, #400]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a67e:	4b61      	ldr	r3, [pc, #388]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a684:	0e1b      	lsrs	r3, r3, #24
 800a686:	f003 030f 	and.w	r3, r3, #15
 800a68a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	019a      	lsls	r2, r3, #6
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	041b      	lsls	r3, r3, #16
 800a696:	431a      	orrs	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	061b      	lsls	r3, r3, #24
 800a69c:	431a      	orrs	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	071b      	lsls	r3, r3, #28
 800a6a4:	4957      	ldr	r1, [pc, #348]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d004      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6c0:	d00a      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d02e      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6d6:	d129      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a6d8:	4b4a      	ldr	r3, [pc, #296]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6de:	0c1b      	lsrs	r3, r3, #16
 800a6e0:	f003 0303 	and.w	r3, r3, #3
 800a6e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a6e6:	4b47      	ldr	r3, [pc, #284]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6ec:	0f1b      	lsrs	r3, r3, #28
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	019a      	lsls	r2, r3, #6
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	041b      	lsls	r3, r3, #16
 800a6fe:	431a      	orrs	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	061b      	lsls	r3, r3, #24
 800a706:	431a      	orrs	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	071b      	lsls	r3, r3, #28
 800a70c:	493d      	ldr	r1, [pc, #244]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a714:	4b3b      	ldr	r3, [pc, #236]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a71a:	f023 021f 	bic.w	r2, r3, #31
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	3b01      	subs	r3, #1
 800a724:	4937      	ldr	r1, [pc, #220]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a726:	4313      	orrs	r3, r2
 800a728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01d      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a738:	4b32      	ldr	r3, [pc, #200]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a73e:	0e1b      	lsrs	r3, r3, #24
 800a740:	f003 030f 	and.w	r3, r3, #15
 800a744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a746:	4b2f      	ldr	r3, [pc, #188]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a74c:	0f1b      	lsrs	r3, r3, #28
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	019a      	lsls	r2, r3, #6
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	041b      	lsls	r3, r3, #16
 800a760:	431a      	orrs	r2, r3
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	061b      	lsls	r3, r3, #24
 800a766:	431a      	orrs	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	071b      	lsls	r3, r3, #28
 800a76c:	4925      	ldr	r1, [pc, #148]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d011      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	019a      	lsls	r2, r3, #6
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	061b      	lsls	r3, r3, #24
 800a794:	431a      	orrs	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	071b      	lsls	r3, r3, #28
 800a79c:	4919      	ldr	r1, [pc, #100]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a7a4:	4b17      	ldr	r3, [pc, #92]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a16      	ldr	r2, [pc, #88]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b0:	f7fb fff8 	bl	80067a4 <HAL_GetTick>
 800a7b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a7b6:	e008      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a7b8:	f7fb fff4 	bl	80067a4 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	2b64      	cmp	r3, #100	; 0x64
 800a7c4:	d901      	bls.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e0d7      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0f0      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	f040 80cd 	bne.w	800a978 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a08      	ldr	r2, [pc, #32]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7ea:	f7fb ffdb 	bl	80067a4 <HAL_GetTick>
 800a7ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7f0:	e00a      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a7f2:	f7fb ffd7 	bl	80067a4 <HAL_GetTick>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	2b64      	cmp	r3, #100	; 0x64
 800a7fe:	d903      	bls.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e0ba      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a804:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a808:	4b5e      	ldr	r3, [pc, #376]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a814:	d0ed      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d009      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a832:	2b00      	cmp	r3, #0
 800a834:	d02e      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d12a      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a83e:	4b51      	ldr	r3, [pc, #324]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a844:	0c1b      	lsrs	r3, r3, #16
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a84c:	4b4d      	ldr	r3, [pc, #308]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a852:	0f1b      	lsrs	r3, r3, #28
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	019a      	lsls	r2, r3, #6
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	041b      	lsls	r3, r3, #16
 800a864:	431a      	orrs	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	061b      	lsls	r3, r3, #24
 800a86c:	431a      	orrs	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	071b      	lsls	r3, r3, #28
 800a872:	4944      	ldr	r1, [pc, #272]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a874:	4313      	orrs	r3, r2
 800a876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a87a:	4b42      	ldr	r3, [pc, #264]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a880:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a888:	3b01      	subs	r3, #1
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	493d      	ldr	r1, [pc, #244]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a88e:	4313      	orrs	r3, r2
 800a890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d022      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8a8:	d11d      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a8aa:	4b36      	ldr	r3, [pc, #216]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	0e1b      	lsrs	r3, r3, #24
 800a8b2:	f003 030f 	and.w	r3, r3, #15
 800a8b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a8b8:	4b32      	ldr	r3, [pc, #200]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	0f1b      	lsrs	r3, r3, #28
 800a8c0:	f003 0307 	and.w	r3, r3, #7
 800a8c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	019a      	lsls	r2, r3, #6
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	041b      	lsls	r3, r3, #16
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	061b      	lsls	r3, r3, #24
 800a8d8:	431a      	orrs	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	071b      	lsls	r3, r3, #28
 800a8de:	4929      	ldr	r1, [pc, #164]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0308 	and.w	r3, r3, #8
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d028      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a8f2:	4b24      	ldr	r3, [pc, #144]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f8:	0e1b      	lsrs	r3, r3, #24
 800a8fa:	f003 030f 	and.w	r3, r3, #15
 800a8fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a900:	4b20      	ldr	r3, [pc, #128]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a906:	0c1b      	lsrs	r3, r3, #16
 800a908:	f003 0303 	and.w	r3, r3, #3
 800a90c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	019a      	lsls	r2, r3, #6
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	431a      	orrs	r2, r3
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	061b      	lsls	r3, r3, #24
 800a91e:	431a      	orrs	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	071b      	lsls	r3, r3, #28
 800a926:	4917      	ldr	r1, [pc, #92]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a92e:	4b15      	ldr	r3, [pc, #84]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	4911      	ldr	r1, [pc, #68]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a944:	4b0f      	ldr	r3, [pc, #60]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a0e      	ldr	r2, [pc, #56]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a94a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a94e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a950:	f7fb ff28 	bl	80067a4 <HAL_GetTick>
 800a954:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a956:	e008      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a958:	f7fb ff24 	bl	80067a4 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	2b64      	cmp	r3, #100	; 0x64
 800a964:	d901      	bls.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e007      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a96a:	4b06      	ldr	r3, [pc, #24]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a976:	d1ef      	bne.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	40023800 	.word	0x40023800

0800a988 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e081      	b.n	800aa9e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	7f5b      	ldrb	r3, [r3, #29]
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d105      	bne.n	800a9b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7fb fb18 	bl	8005fe0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	22ca      	movs	r2, #202	; 0xca
 800a9bc:	625a      	str	r2, [r3, #36]	; 0x24
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2253      	movs	r2, #83	; 0x53
 800a9c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fb16 	bl	800aff8 <RTC_EnterInitMode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d008      	beq.n	800a9e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	22ff      	movs	r2, #255	; 0xff
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e05c      	b.n	800aa9e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6899      	ldr	r1, [r3, #8]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b2e      	ldr	r3, [pc, #184]	; (800aaa8 <HAL_RTC_Init+0x120>)
 800a9f0:	400b      	ands	r3, r1
 800a9f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6899      	ldr	r1, [r3, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	431a      	orrs	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	431a      	orrs	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	68d2      	ldr	r2, [r2, #12]
 800aa1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6919      	ldr	r1, [r3, #16]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	041a      	lsls	r2, r3, #16
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa3e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10e      	bne.n	800aa6c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 faaa 	bl	800afa8 <HAL_RTC_WaitForSynchro>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d008      	beq.n	800aa6c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	22ff      	movs	r2, #255	; 0xff
 800aa60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2204      	movs	r2, #4
 800aa66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e018      	b.n	800aa9e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f022 0208 	bic.w	r2, r2, #8
 800aa7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699a      	ldr	r2, [r3, #24]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	22ff      	movs	r2, #255	; 0xff
 800aa94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
  }
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	ff8fffbf 	.word	0xff8fffbf

0800aaac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aaac:	b590      	push	{r4, r7, lr}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	7f1b      	ldrb	r3, [r3, #28]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <HAL_RTC_SetTime+0x1c>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e0a8      	b.n	800ac1a <HAL_RTC_SetTime+0x16e>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2202      	movs	r2, #2
 800aad2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d126      	bne.n	800ab28 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2200      	movs	r2, #0
 800aaec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 faac 	bl	800b050 <RTC_ByteToBcd2>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 faa5 	bl	800b050 <RTC_ByteToBcd2>
 800ab06:	4603      	mov	r3, r0
 800ab08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ab0a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	789b      	ldrb	r3, [r3, #2]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fa9d 	bl	800b050 <RTC_ByteToBcd2>
 800ab16:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ab18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	7b1b      	ldrb	r3, [r3, #12]
 800ab20:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ab22:	4313      	orrs	r3, r2
 800ab24:	617b      	str	r3, [r7, #20]
 800ab26:	e018      	b.n	800ab5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab48:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ab4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	7b1b      	ldrb	r3, [r3, #12]
 800ab54:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	22ca      	movs	r2, #202	; 0xca
 800ab60:	625a      	str	r2, [r3, #36]	; 0x24
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2253      	movs	r2, #83	; 0x53
 800ab68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 fa44 	bl	800aff8 <RTC_EnterInitMode>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	22ff      	movs	r2, #255	; 0xff
 800ab7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2204      	movs	r2, #4
 800ab82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e045      	b.n	800ac1a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	6979      	ldr	r1, [r7, #20]
 800ab94:	4b23      	ldr	r3, [pc, #140]	; (800ac24 <HAL_RTC_SetTime+0x178>)
 800ab96:	400b      	ands	r3, r1
 800ab98:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aba8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6899      	ldr	r1, [r3, #8]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	431a      	orrs	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d111      	bne.n	800ac04 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f9e1 	bl	800afa8 <HAL_RTC_WaitForSynchro>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	22ff      	movs	r2, #255	; 0xff
 800abf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2204      	movs	r2, #4
 800abf8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e00a      	b.n	800ac1a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	22ff      	movs	r2, #255	; 0xff
 800ac0a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ac18:	2300      	movs	r3, #0
  }
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd90      	pop	{r4, r7, pc}
 800ac22:	bf00      	nop
 800ac24:	007f7f7f 	.word	0x007f7f7f

0800ac28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac28:	b590      	push	{r4, r7, lr}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	7f1b      	ldrb	r3, [r3, #28]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d101      	bne.n	800ac44 <HAL_RTC_SetDate+0x1c>
 800ac40:	2302      	movs	r3, #2
 800ac42:	e092      	b.n	800ad6a <HAL_RTC_SetDate+0x142>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10e      	bne.n	800ac74 <HAL_RTC_SetDate+0x4c>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	f003 0310 	and.w	r3, r3, #16
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d008      	beq.n	800ac74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	f023 0310 	bic.w	r3, r3, #16
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	330a      	adds	r3, #10
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d11c      	bne.n	800acb4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	78db      	ldrb	r3, [r3, #3]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 f9e6 	bl	800b050 <RTC_ByteToBcd2>
 800ac84:	4603      	mov	r3, r0
 800ac86:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	785b      	ldrb	r3, [r3, #1]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 f9df 	bl	800b050 <RTC_ByteToBcd2>
 800ac92:	4603      	mov	r3, r0
 800ac94:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ac96:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	789b      	ldrb	r3, [r3, #2]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 f9d7 	bl	800b050 <RTC_ByteToBcd2>
 800aca2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800aca4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800acae:	4313      	orrs	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	e00e      	b.n	800acd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	78db      	ldrb	r3, [r3, #3]
 800acb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	785b      	ldrb	r3, [r3, #1]
 800acbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800acc0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800acc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800acce:	4313      	orrs	r3, r2
 800acd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	22ca      	movs	r2, #202	; 0xca
 800acd8:	625a      	str	r2, [r3, #36]	; 0x24
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2253      	movs	r2, #83	; 0x53
 800ace0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f988 	bl	800aff8 <RTC_EnterInitMode>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00b      	beq.n	800ad06 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	22ff      	movs	r2, #255	; 0xff
 800acf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2204      	movs	r2, #4
 800acfa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e031      	b.n	800ad6a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	6979      	ldr	r1, [r7, #20]
 800ad0c:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <HAL_RTC_SetDate+0x14c>)
 800ad0e:	400b      	ands	r3, r1
 800ad10:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d111      	bne.n	800ad54 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f000 f939 	bl	800afa8 <HAL_RTC_WaitForSynchro>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	22ff      	movs	r2, #255	; 0xff
 800ad42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2204      	movs	r2, #4
 800ad48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e00a      	b.n	800ad6a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	22ff      	movs	r2, #255	; 0xff
 800ad5a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ad68:	2300      	movs	r3, #0
  }
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}
 800ad72:	bf00      	nop
 800ad74:	00ffff3f 	.word	0x00ffff3f

0800ad78 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b089      	sub	sp, #36	; 0x24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61fb      	str	r3, [r7, #28]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	7f1b      	ldrb	r3, [r3, #28]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_RTC_SetAlarm+0x24>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e101      	b.n	800afa0 <HAL_RTC_SetAlarm+0x228>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d137      	bne.n	800ae1e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2200      	movs	r2, #0
 800adc0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 f942 	bl	800b050 <RTC_ByteToBcd2>
 800adcc:	4603      	mov	r3, r0
 800adce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	785b      	ldrb	r3, [r3, #1]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 f93b 	bl	800b050 <RTC_ByteToBcd2>
 800adda:	4603      	mov	r3, r0
 800addc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800adde:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	789b      	ldrb	r3, [r3, #2]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 f933 	bl	800b050 <RTC_ByteToBcd2>
 800adea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800adec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	7b1b      	ldrb	r3, [r3, #12]
 800adf4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800adf6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 f925 	bl	800b050 <RTC_ByteToBcd2>
 800ae06:	4603      	mov	r3, r0
 800ae08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ae0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ae12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	61fb      	str	r3, [r7, #28]
 800ae1c:	e023      	b.n	800ae66 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d102      	bne.n	800ae32 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ae3e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ae44:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	7b1b      	ldrb	r3, [r3, #12]
 800ae4a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ae4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ae56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ae5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ae62:	4313      	orrs	r3, r2
 800ae64:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	22ca      	movs	r2, #202	; 0xca
 800ae78:	625a      	str	r2, [r3, #36]	; 0x24
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2253      	movs	r2, #83	; 0x53
 800ae80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae8a:	d13f      	bne.n	800af0c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae9a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689a      	ldr	r2, [r3, #8]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aeaa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aeac:	f7fb fc7a 	bl	80067a4 <HAL_GetTick>
 800aeb0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800aeb2:	e013      	b.n	800aedc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aeb4:	f7fb fc76 	bl	80067a4 <HAL_GetTick>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aec2:	d90b      	bls.n	800aedc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	22ff      	movs	r2, #255	; 0xff
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2203      	movs	r2, #3
 800aed0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e061      	b.n	800afa0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0e4      	beq.n	800aeb4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	69fa      	ldr	r2, [r7, #28]
 800aef0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af08:	609a      	str	r2, [r3, #8]
 800af0a:	e03e      	b.n	800af8a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af1a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689a      	ldr	r2, [r3, #8]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af2a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af2c:	f7fb fc3a 	bl	80067a4 <HAL_GetTick>
 800af30:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800af32:	e013      	b.n	800af5c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800af34:	f7fb fc36 	bl	80067a4 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af42:	d90b      	bls.n	800af5c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	22ff      	movs	r2, #255	; 0xff
 800af4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2203      	movs	r2, #3
 800af50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e021      	b.n	800afa0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0e4      	beq.n	800af34 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af88:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	22ff      	movs	r2, #255	; 0xff
 800af90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2201      	movs	r2, #1
 800af96:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3724      	adds	r7, #36	; 0x24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd90      	pop	{r4, r7, pc}

0800afa8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800afc2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800afc4:	f7fb fbee 	bl	80067a4 <HAL_GetTick>
 800afc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800afca:	e009      	b.n	800afe0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800afcc:	f7fb fbea 	bl	80067a4 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afda:	d901      	bls.n	800afe0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e007      	b.n	800aff0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f003 0320 	and.w	r3, r3, #32
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0ee      	beq.n	800afcc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d119      	bne.n	800b046 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b01c:	f7fb fbc2 	bl	80067a4 <HAL_GetTick>
 800b020:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b022:	e009      	b.n	800b038 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b024:	f7fb fbbe 	bl	80067a4 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b032:	d901      	bls.n	800b038 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e007      	b.n	800b048 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0ee      	beq.n	800b024 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800b05e:	e005      	b.n	800b06c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	3b0a      	subs	r3, #10
 800b06a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	2b09      	cmp	r3, #9
 800b070:	d8f6      	bhi.n	800b060 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	79fb      	ldrb	r3, [r7, #7]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	b2db      	uxtb	r3, r3
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	7f1b      	ldrb	r3, [r3, #28]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d101      	bne.n	800b0a8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	e03e      	b.n	800b126 <HAL_RTCEx_SetTimeStamp+0x9a>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	22ca      	movs	r2, #202	; 0xca
 800b0ce:	625a      	str	r2, [r3, #36]	; 0x24
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2253      	movs	r2, #83	; 0x53
 800b0d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0206 	bic.w	r2, r2, #6
 800b0e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689a      	ldr	r2, [r3, #8]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b10e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	22ff      	movs	r2, #255	; 0xff
 800b116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	371c      	adds	r7, #28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	fffff7f7 	.word	0xfffff7f7

0800b138 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e025      	b.n	800b198 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7fb fa07 	bl	8006574 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2202      	movs	r2, #2
 800b16a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3304      	adds	r3, #4
 800b176:	4619      	mov	r1, r3
 800b178:	4610      	mov	r0, r2
 800b17a:	f001 fdb7 	bl	800ccec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6818      	ldr	r0, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	461a      	mov	r2, r3
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	f001 fe0b 	bl	800cda4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d101      	bne.n	800b1be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e021      	b.n	800b202 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d002      	beq.n	800b1ca <HAL_SDRAM_SendCommand+0x2a>
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
 800b1c6:	2b05      	cmp	r3, #5
 800b1c8:	d118      	bne.n	800b1fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 fe4c 	bl	800ce78 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d104      	bne.n	800b1f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2205      	movs	r2, #5
 800b1ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1f0:	e006      	b.n	800b200 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1fa:	e001      	b.n	800b200 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e000      	b.n	800b202 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d101      	bne.n	800b224 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b220:	2302      	movs	r3, #2
 800b222:	e016      	b.n	800b252 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d10f      	bne.n	800b250 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f001 fe3e 	bl	800cec0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e09d      	b.n	800b3a8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	d108      	bne.n	800b286 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b27c:	d009      	beq.n	800b292 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	61da      	str	r2, [r3, #28]
 800b284:	e005      	b.n	800b292 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d106      	bne.n	800b2b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7fa fec5 	bl	800603c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2d2:	d902      	bls.n	800b2da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	e002      	b.n	800b2e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b2da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b2e8:	d007      	beq.n	800b2fa <HAL_SPI_Init+0xa0>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2f2:	d002      	beq.n	800b2fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b30a:	431a      	orrs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	f003 0302 	and.w	r3, r3, #2
 800b314:	431a      	orrs	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b332:	431a      	orrs	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33c:	ea42 0103 	orr.w	r1, r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b344:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	0c1b      	lsrs	r3, r3, #16
 800b356:	f003 0204 	and.w	r2, r3, #4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	f003 0310 	and.w	r3, r3, #16
 800b362:	431a      	orrs	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	431a      	orrs	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b376:	ea42 0103 	orr.w	r1, r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	69da      	ldr	r2, [r3, #28]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b396:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e049      	b.n	800b456 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d106      	bne.n	800b3dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7fa fe92 	bl	8006100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	f000 fac0 	bl	800b974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b01      	cmp	r3, #1
 800b472:	d001      	beq.n	800b478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e054      	b.n	800b522 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0201 	orr.w	r2, r2, #1
 800b48e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a26      	ldr	r2, [pc, #152]	; (800b530 <HAL_TIM_Base_Start_IT+0xd0>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d022      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a2:	d01d      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a22      	ldr	r2, [pc, #136]	; (800b534 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d018      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a21      	ldr	r2, [pc, #132]	; (800b538 <HAL_TIM_Base_Start_IT+0xd8>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d013      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a1f      	ldr	r2, [pc, #124]	; (800b53c <HAL_TIM_Base_Start_IT+0xdc>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d00e      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a1e      	ldr	r2, [pc, #120]	; (800b540 <HAL_TIM_Base_Start_IT+0xe0>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d009      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a1c      	ldr	r2, [pc, #112]	; (800b544 <HAL_TIM_Base_Start_IT+0xe4>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d004      	beq.n	800b4e0 <HAL_TIM_Base_Start_IT+0x80>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a1b      	ldr	r2, [pc, #108]	; (800b548 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d115      	bne.n	800b50c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	4b19      	ldr	r3, [pc, #100]	; (800b54c <HAL_TIM_Base_Start_IT+0xec>)
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b06      	cmp	r3, #6
 800b4f0:	d015      	beq.n	800b51e <HAL_TIM_Base_Start_IT+0xbe>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4f8:	d011      	beq.n	800b51e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f042 0201 	orr.w	r2, r2, #1
 800b508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50a:	e008      	b.n	800b51e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0201 	orr.w	r2, r2, #1
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	e000      	b.n	800b520 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b51e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	40010000 	.word	0x40010000
 800b534:	40000400 	.word	0x40000400
 800b538:	40000800 	.word	0x40000800
 800b53c:	40000c00 	.word	0x40000c00
 800b540:	40010400 	.word	0x40010400
 800b544:	40014000 	.word	0x40014000
 800b548:	40001800 	.word	0x40001800
 800b54c:	00010007 	.word	0x00010007

0800b550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b02      	cmp	r3, #2
 800b564:	d122      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	f003 0302 	and.w	r3, r3, #2
 800b570:	2b02      	cmp	r3, #2
 800b572:	d11b      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f06f 0202 	mvn.w	r2, #2
 800b57c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f9d0 	bl	800b938 <HAL_TIM_IC_CaptureCallback>
 800b598:	e005      	b.n	800b5a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9c2 	bl	800b924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f9d3 	bl	800b94c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d122      	bne.n	800b600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f003 0304 	and.w	r3, r3, #4
 800b5c4:	2b04      	cmp	r3, #4
 800b5c6:	d11b      	bne.n	800b600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f06f 0204 	mvn.w	r2, #4
 800b5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f9a6 	bl	800b938 <HAL_TIM_IC_CaptureCallback>
 800b5ec:	e005      	b.n	800b5fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f998 	bl	800b924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f9a9 	bl	800b94c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	f003 0308 	and.w	r3, r3, #8
 800b60a:	2b08      	cmp	r3, #8
 800b60c:	d122      	bne.n	800b654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f003 0308 	and.w	r3, r3, #8
 800b618:	2b08      	cmp	r3, #8
 800b61a:	d11b      	bne.n	800b654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f06f 0208 	mvn.w	r2, #8
 800b624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2204      	movs	r2, #4
 800b62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f97c 	bl	800b938 <HAL_TIM_IC_CaptureCallback>
 800b640:	e005      	b.n	800b64e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f96e 	bl	800b924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f97f 	bl	800b94c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f003 0310 	and.w	r3, r3, #16
 800b65e:	2b10      	cmp	r3, #16
 800b660:	d122      	bne.n	800b6a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f003 0310 	and.w	r3, r3, #16
 800b66c:	2b10      	cmp	r3, #16
 800b66e:	d11b      	bne.n	800b6a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f06f 0210 	mvn.w	r2, #16
 800b678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2208      	movs	r2, #8
 800b67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f952 	bl	800b938 <HAL_TIM_IC_CaptureCallback>
 800b694:	e005      	b.n	800b6a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f944 	bl	800b924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f955 	bl	800b94c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d10e      	bne.n	800b6d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d107      	bne.n	800b6d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f06f 0201 	mvn.w	r2, #1
 800b6cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7f8 faf6 	bl	8003cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6de:	2b80      	cmp	r3, #128	; 0x80
 800b6e0:	d10e      	bne.n	800b700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ec:	2b80      	cmp	r3, #128	; 0x80
 800b6ee:	d107      	bne.n	800b700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fb0c 	bl	800bd18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70e:	d10e      	bne.n	800b72e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b71a:	2b80      	cmp	r3, #128	; 0x80
 800b71c:	d107      	bne.n	800b72e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 faff 	bl	800bd2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b738:	2b40      	cmp	r3, #64	; 0x40
 800b73a:	d10e      	bne.n	800b75a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b746:	2b40      	cmp	r3, #64	; 0x40
 800b748:	d107      	bne.n	800b75a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f903 	bl	800b960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	f003 0320 	and.w	r3, r3, #32
 800b764:	2b20      	cmp	r3, #32
 800b766:	d10e      	bne.n	800b786 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	f003 0320 	and.w	r3, r3, #32
 800b772:	2b20      	cmp	r3, #32
 800b774:	d107      	bne.n	800b786 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f06f 0220 	mvn.w	r2, #32
 800b77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fabf 	bl	800bd04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b786:	bf00      	nop
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d101      	bne.n	800b7ac <HAL_TIM_ConfigClockSource+0x1c>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e0b4      	b.n	800b916 <HAL_TIM_ConfigClockSource+0x186>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	4b56      	ldr	r3, [pc, #344]	; (800b920 <HAL_TIM_ConfigClockSource+0x190>)
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e4:	d03e      	beq.n	800b864 <HAL_TIM_ConfigClockSource+0xd4>
 800b7e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ea:	f200 8087 	bhi.w	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f2:	f000 8086 	beq.w	800b902 <HAL_TIM_ConfigClockSource+0x172>
 800b7f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7fa:	d87f      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b7fc:	2b70      	cmp	r3, #112	; 0x70
 800b7fe:	d01a      	beq.n	800b836 <HAL_TIM_ConfigClockSource+0xa6>
 800b800:	2b70      	cmp	r3, #112	; 0x70
 800b802:	d87b      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b804:	2b60      	cmp	r3, #96	; 0x60
 800b806:	d050      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0x11a>
 800b808:	2b60      	cmp	r3, #96	; 0x60
 800b80a:	d877      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b80c:	2b50      	cmp	r3, #80	; 0x50
 800b80e:	d03c      	beq.n	800b88a <HAL_TIM_ConfigClockSource+0xfa>
 800b810:	2b50      	cmp	r3, #80	; 0x50
 800b812:	d873      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b814:	2b40      	cmp	r3, #64	; 0x40
 800b816:	d058      	beq.n	800b8ca <HAL_TIM_ConfigClockSource+0x13a>
 800b818:	2b40      	cmp	r3, #64	; 0x40
 800b81a:	d86f      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b81c:	2b30      	cmp	r3, #48	; 0x30
 800b81e:	d064      	beq.n	800b8ea <HAL_TIM_ConfigClockSource+0x15a>
 800b820:	2b30      	cmp	r3, #48	; 0x30
 800b822:	d86b      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b824:	2b20      	cmp	r3, #32
 800b826:	d060      	beq.n	800b8ea <HAL_TIM_ConfigClockSource+0x15a>
 800b828:	2b20      	cmp	r3, #32
 800b82a:	d867      	bhi.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d05c      	beq.n	800b8ea <HAL_TIM_ConfigClockSource+0x15a>
 800b830:	2b10      	cmp	r3, #16
 800b832:	d05a      	beq.n	800b8ea <HAL_TIM_ConfigClockSource+0x15a>
 800b834:	e062      	b.n	800b8fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	6899      	ldr	r1, [r3, #8]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f000 f9af 	bl	800bba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	609a      	str	r2, [r3, #8]
      break;
 800b862:	e04f      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	6899      	ldr	r1, [r3, #8]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	f000 f998 	bl	800bba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b886:	609a      	str	r2, [r3, #8]
      break;
 800b888:	e03c      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6859      	ldr	r1, [r3, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	461a      	mov	r2, r3
 800b898:	f000 f90c 	bl	800bab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2150      	movs	r1, #80	; 0x50
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f965 	bl	800bb72 <TIM_ITRx_SetConfig>
      break;
 800b8a8:	e02c      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6859      	ldr	r1, [r3, #4]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f000 f92b 	bl	800bb12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2160      	movs	r1, #96	; 0x60
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 f955 	bl	800bb72 <TIM_ITRx_SetConfig>
      break;
 800b8c8:	e01c      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	6859      	ldr	r1, [r3, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f000 f8ec 	bl	800bab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2140      	movs	r1, #64	; 0x40
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f945 	bl	800bb72 <TIM_ITRx_SetConfig>
      break;
 800b8e8:	e00c      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	f000 f93c 	bl	800bb72 <TIM_ITRx_SetConfig>
      break;
 800b8fa:	e003      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b900:	e000      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b914:	7bfb      	ldrb	r3, [r7, #15]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	fffeff88 	.word	0xfffeff88

0800b924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a40      	ldr	r2, [pc, #256]	; (800ba88 <TIM_Base_SetConfig+0x114>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d013      	beq.n	800b9b4 <TIM_Base_SetConfig+0x40>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b992:	d00f      	beq.n	800b9b4 <TIM_Base_SetConfig+0x40>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a3d      	ldr	r2, [pc, #244]	; (800ba8c <TIM_Base_SetConfig+0x118>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00b      	beq.n	800b9b4 <TIM_Base_SetConfig+0x40>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a3c      	ldr	r2, [pc, #240]	; (800ba90 <TIM_Base_SetConfig+0x11c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d007      	beq.n	800b9b4 <TIM_Base_SetConfig+0x40>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a3b      	ldr	r2, [pc, #236]	; (800ba94 <TIM_Base_SetConfig+0x120>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d003      	beq.n	800b9b4 <TIM_Base_SetConfig+0x40>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a3a      	ldr	r2, [pc, #232]	; (800ba98 <TIM_Base_SetConfig+0x124>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d108      	bne.n	800b9c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a2f      	ldr	r2, [pc, #188]	; (800ba88 <TIM_Base_SetConfig+0x114>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d02b      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d4:	d027      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a2c      	ldr	r2, [pc, #176]	; (800ba8c <TIM_Base_SetConfig+0x118>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d023      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a2b      	ldr	r2, [pc, #172]	; (800ba90 <TIM_Base_SetConfig+0x11c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d01f      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a2a      	ldr	r2, [pc, #168]	; (800ba94 <TIM_Base_SetConfig+0x120>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d01b      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a29      	ldr	r2, [pc, #164]	; (800ba98 <TIM_Base_SetConfig+0x124>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d017      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a28      	ldr	r2, [pc, #160]	; (800ba9c <TIM_Base_SetConfig+0x128>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d013      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a27      	ldr	r2, [pc, #156]	; (800baa0 <TIM_Base_SetConfig+0x12c>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d00f      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a26      	ldr	r2, [pc, #152]	; (800baa4 <TIM_Base_SetConfig+0x130>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00b      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a25      	ldr	r2, [pc, #148]	; (800baa8 <TIM_Base_SetConfig+0x134>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d007      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a24      	ldr	r2, [pc, #144]	; (800baac <TIM_Base_SetConfig+0x138>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d003      	beq.n	800ba26 <TIM_Base_SetConfig+0xb2>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a23      	ldr	r2, [pc, #140]	; (800bab0 <TIM_Base_SetConfig+0x13c>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d108      	bne.n	800ba38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689a      	ldr	r2, [r3, #8]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a0a      	ldr	r2, [pc, #40]	; (800ba88 <TIM_Base_SetConfig+0x114>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d003      	beq.n	800ba6c <TIM_Base_SetConfig+0xf8>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a0c      	ldr	r2, [pc, #48]	; (800ba98 <TIM_Base_SetConfig+0x124>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d103      	bne.n	800ba74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	691a      	ldr	r2, [r3, #16]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	615a      	str	r2, [r3, #20]
}
 800ba7a:	bf00      	nop
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	40010000 	.word	0x40010000
 800ba8c:	40000400 	.word	0x40000400
 800ba90:	40000800 	.word	0x40000800
 800ba94:	40000c00 	.word	0x40000c00
 800ba98:	40010400 	.word	0x40010400
 800ba9c:	40014000 	.word	0x40014000
 800baa0:	40014400 	.word	0x40014400
 800baa4:	40014800 	.word	0x40014800
 800baa8:	40001800 	.word	0x40001800
 800baac:	40001c00 	.word	0x40001c00
 800bab0:	40002000 	.word	0x40002000

0800bab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	f023 0201 	bic.w	r2, r3, #1
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f023 030a 	bic.w	r3, r3, #10
 800baf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	621a      	str	r2, [r3, #32]
}
 800bb06:	bf00      	nop
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b087      	sub	sp, #28
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	f023 0210 	bic.w	r2, r3, #16
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	031b      	lsls	r3, r3, #12
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	621a      	str	r2, [r3, #32]
}
 800bb66:	bf00      	nop
 800bb68:	371c      	adds	r7, #28
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b085      	sub	sp, #20
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	f043 0307 	orr.w	r3, r3, #7
 800bb94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	609a      	str	r2, [r3, #8]
}
 800bb9c:	bf00      	nop
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
 800bbb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	021a      	lsls	r2, r3, #8
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	609a      	str	r2, [r3, #8]
}
 800bbdc:	bf00      	nop
 800bbde:	371c      	adds	r7, #28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d101      	bne.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e06d      	b.n	800bcdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a30      	ldr	r2, [pc, #192]	; (800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d004      	beq.n	800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a2f      	ldr	r2, [pc, #188]	; (800bcec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d108      	bne.n	800bc46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a20      	ldr	r2, [pc, #128]	; (800bce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d022      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc72:	d01d      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a1d      	ldr	r2, [pc, #116]	; (800bcf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d018      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a1c      	ldr	r2, [pc, #112]	; (800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d013      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a1a      	ldr	r2, [pc, #104]	; (800bcf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00e      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a15      	ldr	r2, [pc, #84]	; (800bcec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d009      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a16      	ldr	r2, [pc, #88]	; (800bcfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d004      	beq.n	800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a15      	ldr	r2, [pc, #84]	; (800bd00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d10c      	bne.n	800bcca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	40010000 	.word	0x40010000
 800bcec:	40010400 	.word	0x40010400
 800bcf0:	40000400 	.word	0x40000400
 800bcf4:	40000800 	.word	0x40000800
 800bcf8:	40000c00 	.word	0x40000c00
 800bcfc:	40014000 	.word	0x40014000
 800bd00:	40001800 	.word	0x40001800

0800bd04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e040      	b.n	800bdd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7fa fa5e 	bl	8006224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2224      	movs	r2, #36	; 0x24
 800bd6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 0201 	bic.w	r2, r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fb16 	bl	800c3b0 <UART_SetConfig>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d101      	bne.n	800bd8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e022      	b.n	800bdd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fd6c 	bl	800c874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689a      	ldr	r2, [r3, #8]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0201 	orr.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fdf3 	bl	800c9b8 <UART_CheckIdleState>
 800bdd2:	4603      	mov	r3, r0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b0ba      	sub	sp, #232	; 0xe8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800be06:	f640 030f 	movw	r3, #2063	; 0x80f
 800be0a:	4013      	ands	r3, r2
 800be0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800be10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d115      	bne.n	800be44 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800be18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be1c:	f003 0320 	and.w	r3, r3, #32
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00f      	beq.n	800be44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800be24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be28:	f003 0320 	and.w	r3, r3, #32
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d009      	beq.n	800be44 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 828f 	beq.w	800c358 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	4798      	blx	r3
      }
      return;
 800be42:	e289      	b.n	800c358 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8117 	beq.w	800c07c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800be4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d106      	bne.n	800be68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800be5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be5e:	4b85      	ldr	r3, [pc, #532]	; (800c074 <HAL_UART_IRQHandler+0x298>)
 800be60:	4013      	ands	r3, r2
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 810a 	beq.w	800c07c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d011      	beq.n	800be98 <HAL_UART_IRQHandler+0xbc>
 800be74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00b      	beq.n	800be98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2201      	movs	r2, #1
 800be86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be8e:	f043 0201 	orr.w	r2, r3, #1
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d011      	beq.n	800bec8 <HAL_UART_IRQHandler+0xec>
 800bea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2202      	movs	r2, #2
 800beb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bebe:	f043 0204 	orr.w	r2, r3, #4
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d011      	beq.n	800bef8 <HAL_UART_IRQHandler+0x11c>
 800bed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2204      	movs	r2, #4
 800bee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beee:	f043 0202 	orr.w	r2, r3, #2
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d017      	beq.n	800bf34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bf04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf08:	f003 0320 	and.w	r3, r3, #32
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d105      	bne.n	800bf1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bf10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00b      	beq.n	800bf34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2208      	movs	r2, #8
 800bf22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf2a:	f043 0208 	orr.w	r2, r3, #8
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d012      	beq.n	800bf66 <HAL_UART_IRQHandler+0x18a>
 800bf40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00c      	beq.n	800bf66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf5c:	f043 0220 	orr.w	r2, r3, #32
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 81f5 	beq.w	800c35c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00d      	beq.n	800bf9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bf7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfae:	2b40      	cmp	r3, #64	; 0x40
 800bfb0:	d005      	beq.n	800bfbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d04f      	beq.n	800c05e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fdf1 	bl	800cba6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfce:	2b40      	cmp	r3, #64	; 0x40
 800bfd0:	d141      	bne.n	800c056 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3308      	adds	r3, #8
 800bffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c00a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1d9      	bne.n	800bfd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c022:	2b00      	cmp	r3, #0
 800c024:	d013      	beq.n	800c04e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02a:	4a13      	ldr	r2, [pc, #76]	; (800c078 <HAL_UART_IRQHandler+0x29c>)
 800c02c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c032:	4618      	mov	r0, r3
 800c034:	f7fb fa86 	bl	8007544 <HAL_DMA_Abort_IT>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d017      	beq.n	800c06e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c04c:	e00f      	b.n	800c06e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f998 	bl	800c384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c054:	e00b      	b.n	800c06e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f994 	bl	800c384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	e007      	b.n	800c06e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f990 	bl	800c384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c06c:	e176      	b.n	800c35c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06e:	bf00      	nop
    return;
 800c070:	e174      	b.n	800c35c <HAL_UART_IRQHandler+0x580>
 800c072:	bf00      	nop
 800c074:	04000120 	.word	0x04000120
 800c078:	0800cc6d 	.word	0x0800cc6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c080:	2b01      	cmp	r3, #1
 800c082:	f040 8144 	bne.w	800c30e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c08a:	f003 0310 	and.w	r3, r3, #16
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 813d 	beq.w	800c30e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c098:	f003 0310 	and.w	r3, r3, #16
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 8136 	beq.w	800c30e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2210      	movs	r2, #16
 800c0a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b4:	2b40      	cmp	r3, #64	; 0x40
 800c0b6:	f040 80b2 	bne.w	800c21e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 8148 	beq.w	800c360 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c0d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	f080 8140 	bcs.w	800c360 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f4:	f000 8085 	beq.w	800c202 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c10c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c126:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c12e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c13a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1da      	bne.n	800c0f8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3308      	adds	r3, #8
 800c148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c154:	f023 0301 	bic.w	r3, r3, #1
 800c158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3308      	adds	r3, #8
 800c162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c16a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c16e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c172:	e841 2300 	strex	r3, r2, [r1]
 800c176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e1      	bne.n	800c142 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3308      	adds	r3, #8
 800c184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c18e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3308      	adds	r3, #8
 800c19e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e3      	bne.n	800c17e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ca:	e853 3f00 	ldrex	r3, [r3]
 800c1ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	f023 0310 	bic.w	r3, r3, #16
 800c1d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1ec:	e841 2300 	strex	r3, r2, [r1]
 800c1f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e4      	bne.n	800c1c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fb f931 	bl	8007464 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	b29b      	uxth	r3, r3
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f8be 	bl	800c398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c21c:	e0a0      	b.n	800c360 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c238:	b29b      	uxth	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 8092 	beq.w	800c364 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800c240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 808d 	beq.w	800c364 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	e853 3f00 	ldrex	r3, [r3]
 800c256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c25e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c26c:	647b      	str	r3, [r7, #68]	; 0x44
 800c26e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c270:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c274:	e841 2300 	strex	r3, r2, [r1]
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1e4      	bne.n	800c24a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3308      	adds	r3, #8
 800c286:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	e853 3f00 	ldrex	r3, [r3]
 800c28e:	623b      	str	r3, [r7, #32]
   return(result);
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	f023 0301 	bic.w	r3, r3, #1
 800c296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2a4:	633a      	str	r2, [r7, #48]	; 0x30
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e3      	bne.n	800c280 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2220      	movs	r2, #32
 800c2bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	e853 3f00 	ldrex	r3, [r3]
 800c2d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f023 0310 	bic.w	r3, r3, #16
 800c2de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c2ec:	61fb      	str	r3, [r7, #28]
 800c2ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	69b9      	ldr	r1, [r7, #24]
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e4      	bne.n	800c2ca <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f846 	bl	800c398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c30c:	e02a      	b.n	800c364 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00e      	beq.n	800c338 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d008      	beq.n	800c338 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d01c      	beq.n	800c368 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	4798      	blx	r3
    }
    return;
 800c336:	e017      	b.n	800c368 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d012      	beq.n	800c36a <HAL_UART_IRQHandler+0x58e>
 800c344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00c      	beq.n	800c36a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fca1 	bl	800cc98 <UART_EndTransmit_IT>
    return;
 800c356:	e008      	b.n	800c36a <HAL_UART_IRQHandler+0x58e>
      return;
 800c358:	bf00      	nop
 800c35a:	e006      	b.n	800c36a <HAL_UART_IRQHandler+0x58e>
    return;
 800c35c:	bf00      	nop
 800c35e:	e004      	b.n	800c36a <HAL_UART_IRQHandler+0x58e>
      return;
 800c360:	bf00      	nop
 800c362:	e002      	b.n	800c36a <HAL_UART_IRQHandler+0x58e>
      return;
 800c364:	bf00      	nop
 800c366:	e000      	b.n	800c36a <HAL_UART_IRQHandler+0x58e>
    return;
 800c368:	bf00      	nop
  }

}
 800c36a:	37e8      	adds	r7, #232	; 0xe8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689a      	ldr	r2, [r3, #8]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	695b      	ldr	r3, [r3, #20]
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	69db      	ldr	r3, [r3, #28]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4ba7      	ldr	r3, [pc, #668]	; (800c678 <UART_SetConfig+0x2c8>)
 800c3dc:	4013      	ands	r3, r2
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	6812      	ldr	r2, [r2, #0]
 800c3e2:	6979      	ldr	r1, [r7, #20]
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a1b      	ldr	r3, [r3, #32]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	430a      	orrs	r2, r1
 800c420:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a95      	ldr	r2, [pc, #596]	; (800c67c <UART_SetConfig+0x2cc>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d120      	bne.n	800c46e <UART_SetConfig+0xbe>
 800c42c:	4b94      	ldr	r3, [pc, #592]	; (800c680 <UART_SetConfig+0x2d0>)
 800c42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c432:	f003 0303 	and.w	r3, r3, #3
 800c436:	2b03      	cmp	r3, #3
 800c438:	d816      	bhi.n	800c468 <UART_SetConfig+0xb8>
 800c43a:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <UART_SetConfig+0x90>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c451 	.word	0x0800c451
 800c444:	0800c45d 	.word	0x0800c45d
 800c448:	0800c457 	.word	0x0800c457
 800c44c:	0800c463 	.word	0x0800c463
 800c450:	2301      	movs	r3, #1
 800c452:	77fb      	strb	r3, [r7, #31]
 800c454:	e14f      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c456:	2302      	movs	r3, #2
 800c458:	77fb      	strb	r3, [r7, #31]
 800c45a:	e14c      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c45c:	2304      	movs	r3, #4
 800c45e:	77fb      	strb	r3, [r7, #31]
 800c460:	e149      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c462:	2308      	movs	r3, #8
 800c464:	77fb      	strb	r3, [r7, #31]
 800c466:	e146      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c468:	2310      	movs	r3, #16
 800c46a:	77fb      	strb	r3, [r7, #31]
 800c46c:	e143      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a84      	ldr	r2, [pc, #528]	; (800c684 <UART_SetConfig+0x2d4>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d132      	bne.n	800c4de <UART_SetConfig+0x12e>
 800c478:	4b81      	ldr	r3, [pc, #516]	; (800c680 <UART_SetConfig+0x2d0>)
 800c47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c47e:	f003 030c 	and.w	r3, r3, #12
 800c482:	2b0c      	cmp	r3, #12
 800c484:	d828      	bhi.n	800c4d8 <UART_SetConfig+0x128>
 800c486:	a201      	add	r2, pc, #4	; (adr r2, 800c48c <UART_SetConfig+0xdc>)
 800c488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48c:	0800c4c1 	.word	0x0800c4c1
 800c490:	0800c4d9 	.word	0x0800c4d9
 800c494:	0800c4d9 	.word	0x0800c4d9
 800c498:	0800c4d9 	.word	0x0800c4d9
 800c49c:	0800c4cd 	.word	0x0800c4cd
 800c4a0:	0800c4d9 	.word	0x0800c4d9
 800c4a4:	0800c4d9 	.word	0x0800c4d9
 800c4a8:	0800c4d9 	.word	0x0800c4d9
 800c4ac:	0800c4c7 	.word	0x0800c4c7
 800c4b0:	0800c4d9 	.word	0x0800c4d9
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4d9 	.word	0x0800c4d9
 800c4bc:	0800c4d3 	.word	0x0800c4d3
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	77fb      	strb	r3, [r7, #31]
 800c4c4:	e117      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	77fb      	strb	r3, [r7, #31]
 800c4ca:	e114      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c4cc:	2304      	movs	r3, #4
 800c4ce:	77fb      	strb	r3, [r7, #31]
 800c4d0:	e111      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c4d2:	2308      	movs	r3, #8
 800c4d4:	77fb      	strb	r3, [r7, #31]
 800c4d6:	e10e      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	77fb      	strb	r3, [r7, #31]
 800c4dc:	e10b      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a69      	ldr	r2, [pc, #420]	; (800c688 <UART_SetConfig+0x2d8>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d120      	bne.n	800c52a <UART_SetConfig+0x17a>
 800c4e8:	4b65      	ldr	r3, [pc, #404]	; (800c680 <UART_SetConfig+0x2d0>)
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c4f2:	2b30      	cmp	r3, #48	; 0x30
 800c4f4:	d013      	beq.n	800c51e <UART_SetConfig+0x16e>
 800c4f6:	2b30      	cmp	r3, #48	; 0x30
 800c4f8:	d814      	bhi.n	800c524 <UART_SetConfig+0x174>
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	d009      	beq.n	800c512 <UART_SetConfig+0x162>
 800c4fe:	2b20      	cmp	r3, #32
 800c500:	d810      	bhi.n	800c524 <UART_SetConfig+0x174>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <UART_SetConfig+0x15c>
 800c506:	2b10      	cmp	r3, #16
 800c508:	d006      	beq.n	800c518 <UART_SetConfig+0x168>
 800c50a:	e00b      	b.n	800c524 <UART_SetConfig+0x174>
 800c50c:	2300      	movs	r3, #0
 800c50e:	77fb      	strb	r3, [r7, #31]
 800c510:	e0f1      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c512:	2302      	movs	r3, #2
 800c514:	77fb      	strb	r3, [r7, #31]
 800c516:	e0ee      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c518:	2304      	movs	r3, #4
 800c51a:	77fb      	strb	r3, [r7, #31]
 800c51c:	e0eb      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c51e:	2308      	movs	r3, #8
 800c520:	77fb      	strb	r3, [r7, #31]
 800c522:	e0e8      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c524:	2310      	movs	r3, #16
 800c526:	77fb      	strb	r3, [r7, #31]
 800c528:	e0e5      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a57      	ldr	r2, [pc, #348]	; (800c68c <UART_SetConfig+0x2dc>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d120      	bne.n	800c576 <UART_SetConfig+0x1c6>
 800c534:	4b52      	ldr	r3, [pc, #328]	; (800c680 <UART_SetConfig+0x2d0>)
 800c536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c53a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c53e:	2bc0      	cmp	r3, #192	; 0xc0
 800c540:	d013      	beq.n	800c56a <UART_SetConfig+0x1ba>
 800c542:	2bc0      	cmp	r3, #192	; 0xc0
 800c544:	d814      	bhi.n	800c570 <UART_SetConfig+0x1c0>
 800c546:	2b80      	cmp	r3, #128	; 0x80
 800c548:	d009      	beq.n	800c55e <UART_SetConfig+0x1ae>
 800c54a:	2b80      	cmp	r3, #128	; 0x80
 800c54c:	d810      	bhi.n	800c570 <UART_SetConfig+0x1c0>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <UART_SetConfig+0x1a8>
 800c552:	2b40      	cmp	r3, #64	; 0x40
 800c554:	d006      	beq.n	800c564 <UART_SetConfig+0x1b4>
 800c556:	e00b      	b.n	800c570 <UART_SetConfig+0x1c0>
 800c558:	2300      	movs	r3, #0
 800c55a:	77fb      	strb	r3, [r7, #31]
 800c55c:	e0cb      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c55e:	2302      	movs	r3, #2
 800c560:	77fb      	strb	r3, [r7, #31]
 800c562:	e0c8      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c564:	2304      	movs	r3, #4
 800c566:	77fb      	strb	r3, [r7, #31]
 800c568:	e0c5      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c56a:	2308      	movs	r3, #8
 800c56c:	77fb      	strb	r3, [r7, #31]
 800c56e:	e0c2      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c570:	2310      	movs	r3, #16
 800c572:	77fb      	strb	r3, [r7, #31]
 800c574:	e0bf      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a45      	ldr	r2, [pc, #276]	; (800c690 <UART_SetConfig+0x2e0>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d125      	bne.n	800c5cc <UART_SetConfig+0x21c>
 800c580:	4b3f      	ldr	r3, [pc, #252]	; (800c680 <UART_SetConfig+0x2d0>)
 800c582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c58a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c58e:	d017      	beq.n	800c5c0 <UART_SetConfig+0x210>
 800c590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c594:	d817      	bhi.n	800c5c6 <UART_SetConfig+0x216>
 800c596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c59a:	d00b      	beq.n	800c5b4 <UART_SetConfig+0x204>
 800c59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5a0:	d811      	bhi.n	800c5c6 <UART_SetConfig+0x216>
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <UART_SetConfig+0x1fe>
 800c5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5aa:	d006      	beq.n	800c5ba <UART_SetConfig+0x20a>
 800c5ac:	e00b      	b.n	800c5c6 <UART_SetConfig+0x216>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	77fb      	strb	r3, [r7, #31]
 800c5b2:	e0a0      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	77fb      	strb	r3, [r7, #31]
 800c5b8:	e09d      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c5ba:	2304      	movs	r3, #4
 800c5bc:	77fb      	strb	r3, [r7, #31]
 800c5be:	e09a      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	77fb      	strb	r3, [r7, #31]
 800c5c4:	e097      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c5c6:	2310      	movs	r3, #16
 800c5c8:	77fb      	strb	r3, [r7, #31]
 800c5ca:	e094      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a30      	ldr	r2, [pc, #192]	; (800c694 <UART_SetConfig+0x2e4>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d125      	bne.n	800c622 <UART_SetConfig+0x272>
 800c5d6:	4b2a      	ldr	r3, [pc, #168]	; (800c680 <UART_SetConfig+0x2d0>)
 800c5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c5e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5e4:	d017      	beq.n	800c616 <UART_SetConfig+0x266>
 800c5e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5ea:	d817      	bhi.n	800c61c <UART_SetConfig+0x26c>
 800c5ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5f0:	d00b      	beq.n	800c60a <UART_SetConfig+0x25a>
 800c5f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5f6:	d811      	bhi.n	800c61c <UART_SetConfig+0x26c>
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <UART_SetConfig+0x254>
 800c5fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c600:	d006      	beq.n	800c610 <UART_SetConfig+0x260>
 800c602:	e00b      	b.n	800c61c <UART_SetConfig+0x26c>
 800c604:	2301      	movs	r3, #1
 800c606:	77fb      	strb	r3, [r7, #31]
 800c608:	e075      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c60a:	2302      	movs	r3, #2
 800c60c:	77fb      	strb	r3, [r7, #31]
 800c60e:	e072      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c610:	2304      	movs	r3, #4
 800c612:	77fb      	strb	r3, [r7, #31]
 800c614:	e06f      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c616:	2308      	movs	r3, #8
 800c618:	77fb      	strb	r3, [r7, #31]
 800c61a:	e06c      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c61c:	2310      	movs	r3, #16
 800c61e:	77fb      	strb	r3, [r7, #31]
 800c620:	e069      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <UART_SetConfig+0x2e8>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d137      	bne.n	800c69c <UART_SetConfig+0x2ec>
 800c62c:	4b14      	ldr	r3, [pc, #80]	; (800c680 <UART_SetConfig+0x2d0>)
 800c62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c632:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c63a:	d017      	beq.n	800c66c <UART_SetConfig+0x2bc>
 800c63c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c640:	d817      	bhi.n	800c672 <UART_SetConfig+0x2c2>
 800c642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c646:	d00b      	beq.n	800c660 <UART_SetConfig+0x2b0>
 800c648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c64c:	d811      	bhi.n	800c672 <UART_SetConfig+0x2c2>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <UART_SetConfig+0x2aa>
 800c652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c656:	d006      	beq.n	800c666 <UART_SetConfig+0x2b6>
 800c658:	e00b      	b.n	800c672 <UART_SetConfig+0x2c2>
 800c65a:	2300      	movs	r3, #0
 800c65c:	77fb      	strb	r3, [r7, #31]
 800c65e:	e04a      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c660:	2302      	movs	r3, #2
 800c662:	77fb      	strb	r3, [r7, #31]
 800c664:	e047      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c666:	2304      	movs	r3, #4
 800c668:	77fb      	strb	r3, [r7, #31]
 800c66a:	e044      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c66c:	2308      	movs	r3, #8
 800c66e:	77fb      	strb	r3, [r7, #31]
 800c670:	e041      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c672:	2310      	movs	r3, #16
 800c674:	77fb      	strb	r3, [r7, #31]
 800c676:	e03e      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c678:	efff69f3 	.word	0xefff69f3
 800c67c:	40011000 	.word	0x40011000
 800c680:	40023800 	.word	0x40023800
 800c684:	40004400 	.word	0x40004400
 800c688:	40004800 	.word	0x40004800
 800c68c:	40004c00 	.word	0x40004c00
 800c690:	40005000 	.word	0x40005000
 800c694:	40011400 	.word	0x40011400
 800c698:	40007800 	.word	0x40007800
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a71      	ldr	r2, [pc, #452]	; (800c868 <UART_SetConfig+0x4b8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d125      	bne.n	800c6f2 <UART_SetConfig+0x342>
 800c6a6:	4b71      	ldr	r3, [pc, #452]	; (800c86c <UART_SetConfig+0x4bc>)
 800c6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c6b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c6b4:	d017      	beq.n	800c6e6 <UART_SetConfig+0x336>
 800c6b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c6ba:	d817      	bhi.n	800c6ec <UART_SetConfig+0x33c>
 800c6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6c0:	d00b      	beq.n	800c6da <UART_SetConfig+0x32a>
 800c6c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6c6:	d811      	bhi.n	800c6ec <UART_SetConfig+0x33c>
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d003      	beq.n	800c6d4 <UART_SetConfig+0x324>
 800c6cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6d0:	d006      	beq.n	800c6e0 <UART_SetConfig+0x330>
 800c6d2:	e00b      	b.n	800c6ec <UART_SetConfig+0x33c>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	77fb      	strb	r3, [r7, #31]
 800c6d8:	e00d      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c6da:	2302      	movs	r3, #2
 800c6dc:	77fb      	strb	r3, [r7, #31]
 800c6de:	e00a      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c6e0:	2304      	movs	r3, #4
 800c6e2:	77fb      	strb	r3, [r7, #31]
 800c6e4:	e007      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c6e6:	2308      	movs	r3, #8
 800c6e8:	77fb      	strb	r3, [r7, #31]
 800c6ea:	e004      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	77fb      	strb	r3, [r7, #31]
 800c6f0:	e001      	b.n	800c6f6 <UART_SetConfig+0x346>
 800c6f2:	2310      	movs	r3, #16
 800c6f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6fe:	d15a      	bne.n	800c7b6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800c700:	7ffb      	ldrb	r3, [r7, #31]
 800c702:	2b08      	cmp	r3, #8
 800c704:	d827      	bhi.n	800c756 <UART_SetConfig+0x3a6>
 800c706:	a201      	add	r2, pc, #4	; (adr r2, 800c70c <UART_SetConfig+0x35c>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c731 	.word	0x0800c731
 800c710:	0800c739 	.word	0x0800c739
 800c714:	0800c741 	.word	0x0800c741
 800c718:	0800c757 	.word	0x0800c757
 800c71c:	0800c747 	.word	0x0800c747
 800c720:	0800c757 	.word	0x0800c757
 800c724:	0800c757 	.word	0x0800c757
 800c728:	0800c757 	.word	0x0800c757
 800c72c:	0800c74f 	.word	0x0800c74f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c730:	f7fd fce0 	bl	800a0f4 <HAL_RCC_GetPCLK1Freq>
 800c734:	61b8      	str	r0, [r7, #24]
        break;
 800c736:	e013      	b.n	800c760 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c738:	f7fd fcf0 	bl	800a11c <HAL_RCC_GetPCLK2Freq>
 800c73c:	61b8      	str	r0, [r7, #24]
        break;
 800c73e:	e00f      	b.n	800c760 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c740:	4b4b      	ldr	r3, [pc, #300]	; (800c870 <UART_SetConfig+0x4c0>)
 800c742:	61bb      	str	r3, [r7, #24]
        break;
 800c744:	e00c      	b.n	800c760 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c746:	f7fd fc13 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c74a:	61b8      	str	r0, [r7, #24]
        break;
 800c74c:	e008      	b.n	800c760 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c74e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c752:	61bb      	str	r3, [r7, #24]
        break;
 800c754:	e004      	b.n	800c760 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800c756:	2300      	movs	r3, #0
 800c758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	77bb      	strb	r3, [r7, #30]
        break;
 800c75e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d074      	beq.n	800c850 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	005a      	lsls	r2, r3, #1
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	441a      	add	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	fbb2 f3f3 	udiv	r3, r2, r3
 800c77a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2b0f      	cmp	r3, #15
 800c780:	d916      	bls.n	800c7b0 <UART_SetConfig+0x400>
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c788:	d212      	bcs.n	800c7b0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	f023 030f 	bic.w	r3, r3, #15
 800c792:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	085b      	lsrs	r3, r3, #1
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	89fb      	ldrh	r3, [r7, #14]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	89fa      	ldrh	r2, [r7, #14]
 800c7ac:	60da      	str	r2, [r3, #12]
 800c7ae:	e04f      	b.n	800c850 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	77bb      	strb	r3, [r7, #30]
 800c7b4:	e04c      	b.n	800c850 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7b6:	7ffb      	ldrb	r3, [r7, #31]
 800c7b8:	2b08      	cmp	r3, #8
 800c7ba:	d828      	bhi.n	800c80e <UART_SetConfig+0x45e>
 800c7bc:	a201      	add	r2, pc, #4	; (adr r2, 800c7c4 <UART_SetConfig+0x414>)
 800c7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c2:	bf00      	nop
 800c7c4:	0800c7e9 	.word	0x0800c7e9
 800c7c8:	0800c7f1 	.word	0x0800c7f1
 800c7cc:	0800c7f9 	.word	0x0800c7f9
 800c7d0:	0800c80f 	.word	0x0800c80f
 800c7d4:	0800c7ff 	.word	0x0800c7ff
 800c7d8:	0800c80f 	.word	0x0800c80f
 800c7dc:	0800c80f 	.word	0x0800c80f
 800c7e0:	0800c80f 	.word	0x0800c80f
 800c7e4:	0800c807 	.word	0x0800c807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e8:	f7fd fc84 	bl	800a0f4 <HAL_RCC_GetPCLK1Freq>
 800c7ec:	61b8      	str	r0, [r7, #24]
        break;
 800c7ee:	e013      	b.n	800c818 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7f0:	f7fd fc94 	bl	800a11c <HAL_RCC_GetPCLK2Freq>
 800c7f4:	61b8      	str	r0, [r7, #24]
        break;
 800c7f6:	e00f      	b.n	800c818 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7f8:	4b1d      	ldr	r3, [pc, #116]	; (800c870 <UART_SetConfig+0x4c0>)
 800c7fa:	61bb      	str	r3, [r7, #24]
        break;
 800c7fc:	e00c      	b.n	800c818 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7fe:	f7fd fbb7 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c802:	61b8      	str	r0, [r7, #24]
        break;
 800c804:	e008      	b.n	800c818 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c80a:	61bb      	str	r3, [r7, #24]
        break;
 800c80c:	e004      	b.n	800c818 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	77bb      	strb	r3, [r7, #30]
        break;
 800c816:	bf00      	nop
    }

    if (pclk != 0U)
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d018      	beq.n	800c850 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	085a      	lsrs	r2, r3, #1
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	441a      	add	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c830:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	2b0f      	cmp	r3, #15
 800c836:	d909      	bls.n	800c84c <UART_SetConfig+0x49c>
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c83e:	d205      	bcs.n	800c84c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	b29a      	uxth	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	60da      	str	r2, [r3, #12]
 800c84a:	e001      	b.n	800c850 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c85c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3720      	adds	r7, #32
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	40007c00 	.word	0x40007c00
 800c86c:	40023800 	.word	0x40023800
 800c870:	00f42400 	.word	0x00f42400

0800c874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	f003 0301 	and.w	r3, r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00a      	beq.n	800c89e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	430a      	orrs	r2, r1
 800c89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a2:	f003 0302 	and.w	r3, r3, #2
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	f003 0304 	and.w	r3, r3, #4
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00a      	beq.n	800c8e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	f003 0308 	and.w	r3, r3, #8
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00a      	beq.n	800c904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c908:	f003 0310 	and.w	r3, r3, #16
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00a      	beq.n	800c926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92a:	f003 0320 	and.w	r3, r3, #32
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00a      	beq.n	800c948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c950:	2b00      	cmp	r3, #0
 800c952:	d01a      	beq.n	800c98a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	430a      	orrs	r2, r1
 800c968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c972:	d10a      	bne.n	800c98a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	605a      	str	r2, [r3, #4]
  }
}
 800c9ac:	bf00      	nop
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9c8:	f7f9 feec 	bl	80067a4 <HAL_GetTick>
 800c9cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0308 	and.w	r3, r3, #8
 800c9d8:	2b08      	cmp	r3, #8
 800c9da:	d10e      	bne.n	800c9fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f817 	bl	800ca1e <UART_WaitOnFlagUntilTimeout>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e00d      	b.n	800ca16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2220      	movs	r2, #32
 800ca04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b09c      	sub	sp, #112	; 0x70
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	60f8      	str	r0, [r7, #12]
 800ca26:	60b9      	str	r1, [r7, #8]
 800ca28:	603b      	str	r3, [r7, #0]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca2e:	e0a5      	b.n	800cb7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca36:	f000 80a1 	beq.w	800cb7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca3a:	f7f9 feb3 	bl	80067a4 <HAL_GetTick>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d302      	bcc.n	800ca50 <UART_WaitOnFlagUntilTimeout+0x32>
 800ca4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d13e      	bne.n	800cace <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca58:	e853 3f00 	ldrex	r3, [r3]
 800ca5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ca5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca64:	667b      	str	r3, [r7, #100]	; 0x64
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca76:	e841 2300 	strex	r3, r2, [r1]
 800ca7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ca7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1e6      	bne.n	800ca50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3308      	adds	r3, #8
 800ca88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca8c:	e853 3f00 	ldrex	r3, [r3]
 800ca90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca94:	f023 0301 	bic.w	r3, r3, #1
 800ca98:	663b      	str	r3, [r7, #96]	; 0x60
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	3308      	adds	r3, #8
 800caa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800caa2:	64ba      	str	r2, [r7, #72]	; 0x48
 800caa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800caa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800caaa:	e841 2300 	strex	r3, r2, [r1]
 800caae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1e5      	bne.n	800ca82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2220      	movs	r2, #32
 800caba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2220      	movs	r2, #32
 800cac0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e067      	b.n	800cb9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 0304 	and.w	r3, r3, #4
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d04f      	beq.n	800cb7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	69db      	ldr	r3, [r3, #28]
 800cae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caea:	d147      	bne.n	800cb7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800caf4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	e853 3f00 	ldrex	r3, [r3]
 800cb02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	461a      	mov	r2, r3
 800cb12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb14:	637b      	str	r3, [r7, #52]	; 0x34
 800cb16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb1c:	e841 2300 	strex	r3, r2, [r1]
 800cb20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1e6      	bne.n	800caf6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	e853 3f00 	ldrex	r3, [r3]
 800cb36:	613b      	str	r3, [r7, #16]
   return(result);
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f023 0301 	bic.w	r3, r3, #1
 800cb3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3308      	adds	r3, #8
 800cb46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb48:	623a      	str	r2, [r7, #32]
 800cb4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4c:	69f9      	ldr	r1, [r7, #28]
 800cb4e:	6a3a      	ldr	r2, [r7, #32]
 800cb50:	e841 2300 	strex	r3, r2, [r1]
 800cb54:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1e5      	bne.n	800cb28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2220      	movs	r2, #32
 800cb60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2220      	movs	r2, #32
 800cb66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e010      	b.n	800cb9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	69da      	ldr	r2, [r3, #28]
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	4013      	ands	r3, r2
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	bf0c      	ite	eq
 800cb8c:	2301      	moveq	r3, #1
 800cb8e:	2300      	movne	r3, #0
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	461a      	mov	r2, r3
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	f43f af4a 	beq.w	800ca30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3770      	adds	r7, #112	; 0x70
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cba6:	b480      	push	{r7}
 800cba8:	b095      	sub	sp, #84	; 0x54
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb6:	e853 3f00 	ldrex	r3, [r3]
 800cbba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbcc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbd4:	e841 2300 	strex	r3, r2, [r1]
 800cbd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e6      	bne.n	800cbae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	f023 0301 	bic.w	r3, r3, #1
 800cbf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e5      	bne.n	800cbe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d118      	bne.n	800cc4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f023 0310 	bic.w	r3, r3, #16
 800cc30:	647b      	str	r3, [r7, #68]	; 0x44
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc3a:	61bb      	str	r3, [r7, #24]
 800cc3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	6979      	ldr	r1, [r7, #20]
 800cc40:	69ba      	ldr	r2, [r7, #24]
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	613b      	str	r3, [r7, #16]
   return(result);
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e6      	bne.n	800cc1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2220      	movs	r2, #32
 800cc52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cc60:	bf00      	nop
 800cc62:	3754      	adds	r7, #84	; 0x54
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff fb7a 	bl	800c384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc90:	bf00      	nop
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	e853 3f00 	ldrex	r3, [r3]
 800ccac:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccb4:	61fb      	str	r3, [r7, #28]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	61bb      	str	r3, [r7, #24]
 800ccc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc2:	6979      	ldr	r1, [r7, #20]
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	e841 2300 	strex	r3, r2, [r1]
 800ccca:	613b      	str	r3, [r7, #16]
   return(result);
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e6      	bne.n	800cca0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff fb46 	bl	800c370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cce4:	bf00      	nop
 800cce6:	3720      	adds	r7, #32
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d121      	bne.n	800cd42 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <FMC_SDRAM_Init+0xb4>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	6851      	ldr	r1, [r2, #4]
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	6892      	ldr	r2, [r2, #8]
 800cd0e:	4311      	orrs	r1, r2
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	68d2      	ldr	r2, [r2, #12]
 800cd14:	4311      	orrs	r1, r2
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	6912      	ldr	r2, [r2, #16]
 800cd1a:	4311      	orrs	r1, r2
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	6952      	ldr	r2, [r2, #20]
 800cd20:	4311      	orrs	r1, r2
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	6992      	ldr	r2, [r2, #24]
 800cd26:	4311      	orrs	r1, r2
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	69d2      	ldr	r2, [r2, #28]
 800cd2c:	4311      	orrs	r1, r2
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	6a12      	ldr	r2, [r2, #32]
 800cd32:	4311      	orrs	r1, r2
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cd38:	430a      	orrs	r2, r1
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	e026      	b.n	800cd90 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	69d9      	ldr	r1, [r3, #28]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	4319      	orrs	r1, r3
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd58:	430b      	orrs	r3, r1
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	4b0e      	ldr	r3, [pc, #56]	; (800cda0 <FMC_SDRAM_Init+0xb4>)
 800cd66:	4013      	ands	r3, r2
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	6851      	ldr	r1, [r2, #4]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	6892      	ldr	r2, [r2, #8]
 800cd70:	4311      	orrs	r1, r2
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	68d2      	ldr	r2, [r2, #12]
 800cd76:	4311      	orrs	r1, r2
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	6912      	ldr	r2, [r2, #16]
 800cd7c:	4311      	orrs	r1, r2
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	6952      	ldr	r2, [r2, #20]
 800cd82:	4311      	orrs	r1, r2
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	6992      	ldr	r2, [r2, #24]
 800cd88:	430a      	orrs	r2, r1
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	ffff8000 	.word	0xffff8000

0800cda4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d128      	bne.n	800ce08 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	1e59      	subs	r1, r3, #1
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	011b      	lsls	r3, r3, #4
 800cdcc:	4319      	orrs	r1, r3
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	021b      	lsls	r3, r3, #8
 800cdd6:	4319      	orrs	r1, r3
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	031b      	lsls	r3, r3, #12
 800cde0:	4319      	orrs	r1, r3
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	041b      	lsls	r3, r3, #16
 800cdea:	4319      	orrs	r1, r3
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	051b      	lsls	r3, r3, #20
 800cdf4:	4319      	orrs	r1, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	061b      	lsls	r3, r3, #24
 800cdfe:	430b      	orrs	r3, r1
 800ce00:	431a      	orrs	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	609a      	str	r2, [r3, #8]
 800ce06:	e02d      	b.n	800ce64 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	689a      	ldr	r2, [r3, #8]
 800ce0c:	4b19      	ldr	r3, [pc, #100]	; (800ce74 <FMC_SDRAM_Timing_Init+0xd0>)
 800ce0e:	4013      	ands	r3, r2
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	68d2      	ldr	r2, [r2, #12]
 800ce14:	3a01      	subs	r2, #1
 800ce16:	0311      	lsls	r1, r2, #12
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	6952      	ldr	r2, [r2, #20]
 800ce1c:	3a01      	subs	r2, #1
 800ce1e:	0512      	lsls	r2, r2, #20
 800ce20:	430a      	orrs	r2, r1
 800ce22:	431a      	orrs	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	1e59      	subs	r1, r3, #1
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	011b      	lsls	r3, r3, #4
 800ce3e:	4319      	orrs	r1, r3
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	021b      	lsls	r3, r3, #8
 800ce48:	4319      	orrs	r1, r3
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	041b      	lsls	r3, r3, #16
 800ce52:	4319      	orrs	r1, r3
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	061b      	lsls	r3, r3, #24
 800ce5c:	430b      	orrs	r3, r1
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	ff0f0fff 	.word	0xff0f0fff

0800ce78 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	691a      	ldr	r2, [r3, #16]
 800ce88:	4b0c      	ldr	r3, [pc, #48]	; (800cebc <FMC_SDRAM_SendCommand+0x44>)
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	6811      	ldr	r1, [r2, #0]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	6852      	ldr	r2, [r2, #4]
 800ce94:	4311      	orrs	r1, r2
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	6892      	ldr	r2, [r2, #8]
 800ce9a:	3a01      	subs	r2, #1
 800ce9c:	0152      	lsls	r2, r2, #5
 800ce9e:	4311      	orrs	r1, r2
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	68d2      	ldr	r2, [r2, #12]
 800cea4:	0252      	lsls	r2, r2, #9
 800cea6:	430a      	orrs	r2, r1
 800cea8:	431a      	orrs	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	ffc00000 	.word	0xffc00000

0800cec0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	695a      	ldr	r2, [r3, #20]
 800cece:	4b07      	ldr	r3, [pc, #28]	; (800ceec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	0052      	lsls	r2, r2, #1
 800ced6:	431a      	orrs	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	ffffc001 	.word	0xffffc001

0800cef0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	4603      	mov	r3, r0
 800cef8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cefa:	2300      	movs	r3, #0
 800cefc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cefe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf02:	2b84      	cmp	r3, #132	; 0x84
 800cf04:	d005      	beq.n	800cf12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cf06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	3303      	adds	r3, #3
 800cf10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cf12:	68fb      	ldr	r3, [r7, #12]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cf24:	f001 f9f2 	bl	800e30c <vTaskStartScheduler>
  
  return osOK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cf2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf30:	b089      	sub	sp, #36	; 0x24
 800cf32:	af04      	add	r7, sp, #16
 800cf34:	6078      	str	r0, [r7, #4]
 800cf36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d020      	beq.n	800cf82 <osThreadCreate+0x54>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d01c      	beq.n	800cf82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685c      	ldr	r4, [r3, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681d      	ldr	r5, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	691e      	ldr	r6, [r3, #16]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff ffc8 	bl	800cef0 <makeFreeRtosPriority>
 800cf60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf6a:	9202      	str	r2, [sp, #8]
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	9100      	str	r1, [sp, #0]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	4632      	mov	r2, r6
 800cf74:	4629      	mov	r1, r5
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 feca 	bl	800dd10 <xTaskCreateStatic>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	e01c      	b.n	800cfbc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685c      	ldr	r4, [r3, #4]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf8e:	b29e      	uxth	r6, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff ffaa 	bl	800cef0 <makeFreeRtosPriority>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	f107 030c 	add.w	r3, r7, #12
 800cfa2:	9301      	str	r3, [sp, #4]
 800cfa4:	9200      	str	r2, [sp, #0]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 ff12 	bl	800ddd6 <xTaskCreate>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d001      	beq.n	800cfbc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e000      	b.n	800cfbe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfc6 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f001 f850 	bl	800e074 <vTaskDelete>
  return osOK;
 800cfd4:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <osDelay+0x16>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	e000      	b.n	800cff6 <osDelay+0x18>
 800cff4:	2301      	movs	r3, #1
 800cff6:	4618      	mov	r0, r3
 800cff8:	f001 f952 	bl	800e2a0 <vTaskDelay>
  
  return osOK;
 800cffc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d006:	b590      	push	{r4, r7, lr}
 800d008:	b085      	sub	sp, #20
 800d00a:	af02      	add	r7, sp, #8
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d011      	beq.n	800d03c <osMessageCreate+0x36>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00d      	beq.n	800d03c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6859      	ldr	r1, [r3, #4]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	689a      	ldr	r2, [r3, #8]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	2400      	movs	r4, #0
 800d032:	9400      	str	r4, [sp, #0]
 800d034:	f000 f92e 	bl	800d294 <xQueueGenericCreateStatic>
 800d038:	4603      	mov	r3, r0
 800d03a:	e008      	b.n	800d04e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6818      	ldr	r0, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	4619      	mov	r1, r3
 800d048:	f000 f9a6 	bl	800d398 <xQueueGenericCreate>
 800d04c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d04e:	4618      	mov	r0, r3
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	bd90      	pop	{r4, r7, pc}

0800d056 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d056:	b480      	push	{r7}
 800d058:	b083      	sub	sp, #12
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f103 0208 	add.w	r2, r3, #8
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f04f 32ff 	mov.w	r2, #4294967295
 800d06e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f103 0208 	add.w	r2, r3, #8
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f103 0208 	add.w	r2, r3, #8
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d08a:	bf00      	nop
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d096:	b480      	push	{r7}
 800d098:	b083      	sub	sp, #12
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	689a      	ldr	r2, [r3, #8]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	1c5a      	adds	r2, r3, #1
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	601a      	str	r2, [r3, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	3714      	adds	r7, #20
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10e:	d103      	bne.n	800d118 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e00c      	b.n	800d132 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3308      	adds	r3, #8
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e002      	b.n	800d126 <vListInsert+0x2e>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d2f6      	bcs.n	800d120 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	601a      	str	r2, [r3, #0]
}
 800d15e:	bf00      	nop
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr

0800d16a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d16a:	b480      	push	{r7}
 800d16c:	b085      	sub	sp, #20
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	6892      	ldr	r2, [r2, #8]
 800d180:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	6852      	ldr	r2, [r2, #4]
 800d18a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	429a      	cmp	r2, r3
 800d194:	d103      	bne.n	800d19e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	1e5a      	subs	r2, r3, #1
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
	...

0800d1c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10c      	bne.n	800d1ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	b672      	cpsid	i
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	b662      	cpsie	i
 800d1e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d1ee:	f001 fffd 	bl	800f1ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fa:	68f9      	ldr	r1, [r7, #12]
 800d1fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1fe:	fb01 f303 	mul.w	r3, r1, r3
 800d202:	441a      	add	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21e:	3b01      	subs	r3, #1
 800d220:	68f9      	ldr	r1, [r7, #12]
 800d222:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d224:	fb01 f303 	mul.w	r3, r1, r3
 800d228:	441a      	add	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	22ff      	movs	r2, #255	; 0xff
 800d232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	22ff      	movs	r2, #255	; 0xff
 800d23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d114      	bne.n	800d26e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d01a      	beq.n	800d282 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3310      	adds	r3, #16
 800d250:	4618      	mov	r0, r3
 800d252:	f001 fab9 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d012      	beq.n	800d282 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d25c:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <xQueueGenericReset+0xd0>)
 800d25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	e009      	b.n	800d282 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3310      	adds	r3, #16
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff feef 	bl	800d056 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3324      	adds	r3, #36	; 0x24
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff feea 	bl	800d056 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d282:	f001 ffe7 	bl	800f254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d286:	2301      	movs	r3, #1
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08e      	sub	sp, #56	; 0x38
 800d298:	af02      	add	r7, sp, #8
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10c      	bne.n	800d2c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	b672      	cpsid	i
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	b662      	cpsie	i
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10c      	bne.n	800d2e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	b672      	cpsid	i
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	b662      	cpsie	i
 800d2dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <xQueueGenericCreateStatic+0x5a>
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <xQueueGenericCreateStatic+0x5e>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e000      	b.n	800d2f4 <xQueueGenericCreateStatic+0x60>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10c      	bne.n	800d312 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	b672      	cpsid	i
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	b662      	cpsie	i
 800d30c:	623b      	str	r3, [r7, #32]
}
 800d30e:	bf00      	nop
 800d310:	e7fe      	b.n	800d310 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d102      	bne.n	800d31e <xQueueGenericCreateStatic+0x8a>
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <xQueueGenericCreateStatic+0x8e>
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <xQueueGenericCreateStatic+0x90>
 800d322:	2300      	movs	r3, #0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10c      	bne.n	800d342 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32c:	b672      	cpsid	i
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	b662      	cpsie	i
 800d33c:	61fb      	str	r3, [r7, #28]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d342:	2348      	movs	r3, #72	; 0x48
 800d344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	2b48      	cmp	r3, #72	; 0x48
 800d34a:	d00c      	beq.n	800d366 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	b672      	cpsid	i
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	b662      	cpsie	i
 800d360:	61bb      	str	r3, [r7, #24]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d366:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00d      	beq.n	800d38e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	2201      	movs	r2, #1
 800d376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d37a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	4613      	mov	r3, r2
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f000 f847 	bl	800d41c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d390:	4618      	mov	r0, r3
 800d392:	3730      	adds	r7, #48	; 0x30
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08a      	sub	sp, #40	; 0x28
 800d39c:	af02      	add	r7, sp, #8
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10c      	bne.n	800d3c6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	b672      	cpsid	i
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	b662      	cpsie	i
 800d3c0:	613b      	str	r3, [r7, #16]
}
 800d3c2:	bf00      	nop
 800d3c4:	e7fe      	b.n	800d3c4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d102      	bne.n	800d3d2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	61fb      	str	r3, [r7, #28]
 800d3d0:	e004      	b.n	800d3dc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	fb02 f303 	mul.w	r3, r2, r3
 800d3da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	3348      	adds	r3, #72	; 0x48
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f001 ffeb 	bl	800f3bc <pvPortMalloc>
 800d3e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d011      	beq.n	800d412 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	3348      	adds	r3, #72	; 0x48
 800d3f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d400:	79fa      	ldrb	r2, [r7, #7]
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4613      	mov	r3, r2
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	68b9      	ldr	r1, [r7, #8]
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 f805 	bl	800d41c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d412:	69bb      	ldr	r3, [r7, #24]
	}
 800d414:	4618      	mov	r0, r3
 800d416:	3720      	adds	r7, #32
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
 800d428:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	69ba      	ldr	r2, [r7, #24]
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	e002      	b.n	800d43e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d44a:	2101      	movs	r1, #1
 800d44c:	69b8      	ldr	r0, [r7, #24]
 800d44e:	f7ff feb7 	bl	800d1c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d452:	bf00      	nop
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b082      	sub	sp, #8
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00e      	beq.n	800d486 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d47a:	2300      	movs	r3, #0
 800d47c:	2200      	movs	r2, #0
 800d47e:	2100      	movs	r1, #0
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f81d 	bl	800d4c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b086      	sub	sp, #24
 800d492:	af00      	add	r7, sp, #0
 800d494:	4603      	mov	r3, r0
 800d496:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d498:	2301      	movs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	2300      	movs	r3, #0
 800d49e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	6939      	ldr	r1, [r7, #16]
 800d4a6:	6978      	ldr	r0, [r7, #20]
 800d4a8:	f7ff ff76 	bl	800d398 <xQueueGenericCreate>
 800d4ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff ffd3 	bl	800d45a <prvInitialiseMutex>

		return xNewQueue;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
	}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08e      	sub	sp, #56	; 0x38
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10c      	bne.n	800d4f6 <xQueueGenericSend+0x36>
	__asm volatile
 800d4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e0:	b672      	cpsid	i
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	b662      	cpsie	i
 800d4f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d103      	bne.n	800d504 <xQueueGenericSend+0x44>
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <xQueueGenericSend+0x48>
 800d504:	2301      	movs	r3, #1
 800d506:	e000      	b.n	800d50a <xQueueGenericSend+0x4a>
 800d508:	2300      	movs	r3, #0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10c      	bne.n	800d528 <xQueueGenericSend+0x68>
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	b672      	cpsid	i
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	b662      	cpsie	i
 800d522:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d524:	bf00      	nop
 800d526:	e7fe      	b.n	800d526 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d103      	bne.n	800d536 <xQueueGenericSend+0x76>
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d532:	2b01      	cmp	r3, #1
 800d534:	d101      	bne.n	800d53a <xQueueGenericSend+0x7a>
 800d536:	2301      	movs	r3, #1
 800d538:	e000      	b.n	800d53c <xQueueGenericSend+0x7c>
 800d53a:	2300      	movs	r3, #0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10c      	bne.n	800d55a <xQueueGenericSend+0x9a>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d544:	b672      	cpsid	i
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	b662      	cpsie	i
 800d554:	623b      	str	r3, [r7, #32]
}
 800d556:	bf00      	nop
 800d558:	e7fe      	b.n	800d558 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d55a:	f001 fafd 	bl	800eb58 <xTaskGetSchedulerState>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d102      	bne.n	800d56a <xQueueGenericSend+0xaa>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <xQueueGenericSend+0xae>
 800d56a:	2301      	movs	r3, #1
 800d56c:	e000      	b.n	800d570 <xQueueGenericSend+0xb0>
 800d56e:	2300      	movs	r3, #0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10c      	bne.n	800d58e <xQueueGenericSend+0xce>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d578:	b672      	cpsid	i
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	b662      	cpsie	i
 800d588:	61fb      	str	r3, [r7, #28]
}
 800d58a:	bf00      	nop
 800d58c:	e7fe      	b.n	800d58c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d58e:	f001 fe2d 	bl	800f1ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d302      	bcc.n	800d5a4 <xQueueGenericSend+0xe4>
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d129      	bne.n	800d5f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5a4:	683a      	ldr	r2, [r7, #0]
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5aa:	f000 faa1 	bl	800daf0 <prvCopyDataToQueue>
 800d5ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d010      	beq.n	800d5da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	3324      	adds	r3, #36	; 0x24
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f001 f903 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d013      	beq.n	800d5f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5c8:	4b3f      	ldr	r3, [pc, #252]	; (800d6c8 <xQueueGenericSend+0x208>)
 800d5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ce:	601a      	str	r2, [r3, #0]
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	e00a      	b.n	800d5f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d007      	beq.n	800d5f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5e0:	4b39      	ldr	r3, [pc, #228]	; (800d6c8 <xQueueGenericSend+0x208>)
 800d5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5f0:	f001 fe30 	bl	800f254 <vPortExitCritical>
				return pdPASS;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e063      	b.n	800d6c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d103      	bne.n	800d606 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5fe:	f001 fe29 	bl	800f254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d602:	2300      	movs	r3, #0
 800d604:	e05c      	b.n	800d6c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d106      	bne.n	800d61a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d60c:	f107 0314 	add.w	r3, r7, #20
 800d610:	4618      	mov	r0, r3
 800d612:	f001 f93d 	bl	800e890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d616:	2301      	movs	r3, #1
 800d618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d61a:	f001 fe1b 	bl	800f254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d61e:	f000 fee3 	bl	800e3e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d622:	f001 fde3 	bl	800f1ec <vPortEnterCritical>
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d62c:	b25b      	sxtb	r3, r3
 800d62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d632:	d103      	bne.n	800d63c <xQueueGenericSend+0x17c>
 800d634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d642:	b25b      	sxtb	r3, r3
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d648:	d103      	bne.n	800d652 <xQueueGenericSend+0x192>
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	2200      	movs	r2, #0
 800d64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d652:	f001 fdff 	bl	800f254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d656:	1d3a      	adds	r2, r7, #4
 800d658:	f107 0314 	add.w	r3, r7, #20
 800d65c:	4611      	mov	r1, r2
 800d65e:	4618      	mov	r0, r3
 800d660:	f001 f92c 	bl	800e8bc <xTaskCheckForTimeOut>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d124      	bne.n	800d6b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d66a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d66c:	f000 fb38 	bl	800dce0 <prvIsQueueFull>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d018      	beq.n	800d6a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	3310      	adds	r3, #16
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	4611      	mov	r1, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 f87c 	bl	800e77c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d686:	f000 fac3 	bl	800dc10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d68a:	f000 febb 	bl	800e404 <xTaskResumeAll>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	f47f af7c 	bne.w	800d58e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <xQueueGenericSend+0x208>)
 800d698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	e772      	b.n	800d58e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6aa:	f000 fab1 	bl	800dc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ae:	f000 fea9 	bl	800e404 <xTaskResumeAll>
 800d6b2:	e76c      	b.n	800d58e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6b6:	f000 faab 	bl	800dc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6ba:	f000 fea3 	bl	800e404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3738      	adds	r7, #56	; 0x38
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08c      	sub	sp, #48	; 0x30
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10c      	bne.n	800d700 <xQueueReceive+0x34>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	b672      	cpsid	i
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	b662      	cpsie	i
 800d6fa:	623b      	str	r3, [r7, #32]
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d103      	bne.n	800d70e <xQueueReceive+0x42>
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <xQueueReceive+0x46>
 800d70e:	2301      	movs	r3, #1
 800d710:	e000      	b.n	800d714 <xQueueReceive+0x48>
 800d712:	2300      	movs	r3, #0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10c      	bne.n	800d732 <xQueueReceive+0x66>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	b672      	cpsid	i
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	b662      	cpsie	i
 800d72c:	61fb      	str	r3, [r7, #28]
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d732:	f001 fa11 	bl	800eb58 <xTaskGetSchedulerState>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d102      	bne.n	800d742 <xQueueReceive+0x76>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <xQueueReceive+0x7a>
 800d742:	2301      	movs	r3, #1
 800d744:	e000      	b.n	800d748 <xQueueReceive+0x7c>
 800d746:	2300      	movs	r3, #0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10c      	bne.n	800d766 <xQueueReceive+0x9a>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	b672      	cpsid	i
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	b662      	cpsie	i
 800d760:	61bb      	str	r3, [r7, #24]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d766:	f001 fd41 	bl	800f1ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01f      	beq.n	800d7b6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d776:	68b9      	ldr	r1, [r7, #8]
 800d778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77a:	f000 fa23 	bl	800dbc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	1e5a      	subs	r2, r3, #1
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00f      	beq.n	800d7ae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	3310      	adds	r3, #16
 800d792:	4618      	mov	r0, r3
 800d794:	f001 f818 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d79e:	4b3d      	ldr	r3, [pc, #244]	; (800d894 <xQueueReceive+0x1c8>)
 800d7a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a4:	601a      	str	r2, [r3, #0]
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7ae:	f001 fd51 	bl	800f254 <vPortExitCritical>
				return pdPASS;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e069      	b.n	800d88a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d103      	bne.n	800d7c4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7bc:	f001 fd4a 	bl	800f254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e062      	b.n	800d88a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7ca:	f107 0310 	add.w	r3, r7, #16
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f001 f85e 	bl	800e890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7d8:	f001 fd3c 	bl	800f254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7dc:	f000 fe04 	bl	800e3e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7e0:	f001 fd04 	bl	800f1ec <vPortEnterCritical>
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ea:	b25b      	sxtb	r3, r3
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d103      	bne.n	800d7fa <xQueueReceive+0x12e>
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d800:	b25b      	sxtb	r3, r3
 800d802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d806:	d103      	bne.n	800d810 <xQueueReceive+0x144>
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d810:	f001 fd20 	bl	800f254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d814:	1d3a      	adds	r2, r7, #4
 800d816:	f107 0310 	add.w	r3, r7, #16
 800d81a:	4611      	mov	r1, r2
 800d81c:	4618      	mov	r0, r3
 800d81e:	f001 f84d 	bl	800e8bc <xTaskCheckForTimeOut>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d123      	bne.n	800d870 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d82a:	f000 fa43 	bl	800dcb4 <prvIsQueueEmpty>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d017      	beq.n	800d864 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	3324      	adds	r3, #36	; 0x24
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	4611      	mov	r1, r2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 ff9d 	bl	800e77c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d844:	f000 f9e4 	bl	800dc10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d848:	f000 fddc 	bl	800e404 <xTaskResumeAll>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d189      	bne.n	800d766 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d852:	4b10      	ldr	r3, [pc, #64]	; (800d894 <xQueueReceive+0x1c8>)
 800d854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	e780      	b.n	800d766 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d866:	f000 f9d3 	bl	800dc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d86a:	f000 fdcb 	bl	800e404 <xTaskResumeAll>
 800d86e:	e77a      	b.n	800d766 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d872:	f000 f9cd 	bl	800dc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d876:	f000 fdc5 	bl	800e404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d87c:	f000 fa1a 	bl	800dcb4 <prvIsQueueEmpty>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	f43f af6f 	beq.w	800d766 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3730      	adds	r7, #48	; 0x30
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	e000ed04 	.word	0xe000ed04

0800d898 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	; 0x38
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10c      	bne.n	800d8ce <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	b672      	cpsid	i
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	b662      	cpsie	i
 800d8c8:	623b      	str	r3, [r7, #32]
}
 800d8ca:	bf00      	nop
 800d8cc:	e7fe      	b.n	800d8cc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00c      	beq.n	800d8f0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8da:	b672      	cpsid	i
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	b662      	cpsie	i
 800d8ea:	61fb      	str	r3, [r7, #28]
}
 800d8ec:	bf00      	nop
 800d8ee:	e7fe      	b.n	800d8ee <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8f0:	f001 f932 	bl	800eb58 <xTaskGetSchedulerState>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <xQueueSemaphoreTake+0x68>
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <xQueueSemaphoreTake+0x6c>
 800d900:	2301      	movs	r3, #1
 800d902:	e000      	b.n	800d906 <xQueueSemaphoreTake+0x6e>
 800d904:	2300      	movs	r3, #0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10c      	bne.n	800d924 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	b672      	cpsid	i
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	b662      	cpsie	i
 800d91e:	61bb      	str	r3, [r7, #24]
}
 800d920:	bf00      	nop
 800d922:	e7fe      	b.n	800d922 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d924:	f001 fc62 	bl	800f1ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	2b00      	cmp	r3, #0
 800d932:	d024      	beq.n	800d97e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	1e5a      	subs	r2, r3, #1
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d104      	bne.n	800d94e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d944:	f001 face 	bl	800eee4 <pvTaskIncrementMutexHeldCount>
 800d948:	4602      	mov	r2, r0
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00f      	beq.n	800d976 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d958:	3310      	adds	r3, #16
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 ff34 	bl	800e7c8 <xTaskRemoveFromEventList>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d007      	beq.n	800d976 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d966:	4b55      	ldr	r3, [pc, #340]	; (800dabc <xQueueSemaphoreTake+0x224>)
 800d968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d976:	f001 fc6d 	bl	800f254 <vPortExitCritical>
				return pdPASS;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e099      	b.n	800dab2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d113      	bne.n	800d9ac <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00c      	beq.n	800d9a4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	b672      	cpsid	i
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	b662      	cpsie	i
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d9a4:	f001 fc56 	bl	800f254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e082      	b.n	800dab2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 ff6a 	bl	800e890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9c0:	f001 fc48 	bl	800f254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9c4:	f000 fd10 	bl	800e3e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9c8:	f001 fc10 	bl	800f1ec <vPortEnterCritical>
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9d2:	b25b      	sxtb	r3, r3
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d8:	d103      	bne.n	800d9e2 <xQueueSemaphoreTake+0x14a>
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9e8:	b25b      	sxtb	r3, r3
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	d103      	bne.n	800d9f8 <xQueueSemaphoreTake+0x160>
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9f8:	f001 fc2c 	bl	800f254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	4611      	mov	r1, r2
 800da04:	4618      	mov	r0, r3
 800da06:	f000 ff59 	bl	800e8bc <xTaskCheckForTimeOut>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d132      	bne.n	800da76 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da12:	f000 f94f 	bl	800dcb4 <prvIsQueueEmpty>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d026      	beq.n	800da6a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d109      	bne.n	800da38 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800da24:	f001 fbe2 	bl	800f1ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f001 f8b1 	bl	800eb94 <xTaskPriorityInherit>
 800da32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da34:	f001 fc0e 	bl	800f254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	3324      	adds	r3, #36	; 0x24
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	4611      	mov	r1, r2
 800da40:	4618      	mov	r0, r3
 800da42:	f000 fe9b 	bl	800e77c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da48:	f000 f8e2 	bl	800dc10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da4c:	f000 fcda 	bl	800e404 <xTaskResumeAll>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	f47f af66 	bne.w	800d924 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800da58:	4b18      	ldr	r3, [pc, #96]	; (800dabc <xQueueSemaphoreTake+0x224>)
 800da5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da5e:	601a      	str	r2, [r3, #0]
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	e75c      	b.n	800d924 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da6c:	f000 f8d0 	bl	800dc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da70:	f000 fcc8 	bl	800e404 <xTaskResumeAll>
 800da74:	e756      	b.n	800d924 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da78:	f000 f8ca 	bl	800dc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da7c:	f000 fcc2 	bl	800e404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da82:	f000 f917 	bl	800dcb4 <prvIsQueueEmpty>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f43f af4b 	beq.w	800d924 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00d      	beq.n	800dab0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800da94:	f001 fbaa 	bl	800f1ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da9a:	f000 f811 	bl	800dac0 <prvGetDisinheritPriorityAfterTimeout>
 800da9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daa6:	4618      	mov	r0, r3
 800daa8:	f001 f97e 	bl	800eda8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800daac:	f001 fbd2 	bl	800f254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3738      	adds	r7, #56	; 0x38
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	e000ed04 	.word	0xe000ed04

0800dac0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d006      	beq.n	800dade <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f1c3 0307 	rsb	r3, r3, #7
 800dada:	60fb      	str	r3, [r7, #12]
 800dadc:	e001      	b.n	800dae2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dade:	2300      	movs	r3, #0
 800dae0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dae2:	68fb      	ldr	r3, [r7, #12]
	}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dafc:	2300      	movs	r3, #0
 800dafe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10d      	bne.n	800db2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d14d      	bne.n	800dbb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f001 f8ba 	bl	800ec94 <xTaskPriorityDisinherit>
 800db20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	609a      	str	r2, [r3, #8]
 800db28:	e043      	b.n	800dbb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d119      	bne.n	800db64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6858      	ldr	r0, [r3, #4]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db38:	461a      	mov	r2, r3
 800db3a:	68b9      	ldr	r1, [r7, #8]
 800db3c:	f001 fe48 	bl	800f7d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db48:	441a      	add	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	429a      	cmp	r2, r3
 800db58:	d32b      	bcc.n	800dbb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	605a      	str	r2, [r3, #4]
 800db62:	e026      	b.n	800dbb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	68d8      	ldr	r0, [r3, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6c:	461a      	mov	r2, r3
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	f001 fe2e 	bl	800f7d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68da      	ldr	r2, [r3, #12]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7c:	425b      	negs	r3, r3
 800db7e:	441a      	add	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	68da      	ldr	r2, [r3, #12]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d207      	bcs.n	800dba0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	689a      	ldr	r2, [r3, #8]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db98:	425b      	negs	r3, r3
 800db9a:	441a      	add	r2, r3
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d105      	bne.n	800dbb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dbba:	697b      	ldr	r3, [r7, #20]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d018      	beq.n	800dc08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68da      	ldr	r2, [r3, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbde:	441a      	add	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	68da      	ldr	r2, [r3, #12]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d303      	bcc.n	800dbf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	68d9      	ldr	r1, [r3, #12]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc00:	461a      	mov	r2, r3
 800dc02:	6838      	ldr	r0, [r7, #0]
 800dc04:	f001 fde4 	bl	800f7d0 <memcpy>
	}
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc18:	f001 fae8 	bl	800f1ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc24:	e011      	b.n	800dc4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d012      	beq.n	800dc54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3324      	adds	r3, #36	; 0x24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fdc8 	bl	800e7c8 <xTaskRemoveFromEventList>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc3e:	f000 fea3 	bl	800e988 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc42:	7bfb      	ldrb	r3, [r7, #15]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	dce9      	bgt.n	800dc26 <prvUnlockQueue+0x16>
 800dc52:	e000      	b.n	800dc56 <prvUnlockQueue+0x46>
					break;
 800dc54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	22ff      	movs	r2, #255	; 0xff
 800dc5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc5e:	f001 faf9 	bl	800f254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc62:	f001 fac3 	bl	800f1ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc6e:	e011      	b.n	800dc94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d012      	beq.n	800dc9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	3310      	adds	r3, #16
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 fda3 	bl	800e7c8 <xTaskRemoveFromEventList>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc88:	f000 fe7e 	bl	800e988 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dce9      	bgt.n	800dc70 <prvUnlockQueue+0x60>
 800dc9c:	e000      	b.n	800dca0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	22ff      	movs	r2, #255	; 0xff
 800dca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dca8:	f001 fad4 	bl	800f254 <vPortExitCritical>
}
 800dcac:	bf00      	nop
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcbc:	f001 fa96 	bl	800f1ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	e001      	b.n	800dcd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcd2:	f001 fabf 	bl	800f254 <vPortExitCritical>

	return xReturn;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dce8:	f001 fa80 	bl	800f1ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d102      	bne.n	800dcfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e001      	b.n	800dd02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd02:	f001 faa7 	bl	800f254 <vPortExitCritical>

	return xReturn;
 800dd06:	68fb      	ldr	r3, [r7, #12]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b08e      	sub	sp, #56	; 0x38
 800dd14:	af04      	add	r7, sp, #16
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
 800dd1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10c      	bne.n	800dd3e <xTaskCreateStatic+0x2e>
	__asm volatile
 800dd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd28:	b672      	cpsid	i
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	b662      	cpsie	i
 800dd38:	623b      	str	r3, [r7, #32]
}
 800dd3a:	bf00      	nop
 800dd3c:	e7fe      	b.n	800dd3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10c      	bne.n	800dd5e <xTaskCreateStatic+0x4e>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd48:	b672      	cpsid	i
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	b662      	cpsie	i
 800dd58:	61fb      	str	r3, [r7, #28]
}
 800dd5a:	bf00      	nop
 800dd5c:	e7fe      	b.n	800dd5c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd5e:	23b4      	movs	r3, #180	; 0xb4
 800dd60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2bb4      	cmp	r3, #180	; 0xb4
 800dd66:	d00c      	beq.n	800dd82 <xTaskCreateStatic+0x72>
	__asm volatile
 800dd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6c:	b672      	cpsid	i
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	b662      	cpsie	i
 800dd7c:	61bb      	str	r3, [r7, #24]
}
 800dd7e:	bf00      	nop
 800dd80:	e7fe      	b.n	800dd80 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d01e      	beq.n	800ddc8 <xTaskCreateStatic+0xb8>
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d01b      	beq.n	800ddc8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dda2:	2300      	movs	r3, #0
 800dda4:	9303      	str	r3, [sp, #12]
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	9302      	str	r3, [sp, #8]
 800ddaa:	f107 0314 	add.w	r3, r7, #20
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 f850 	bl	800de60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc2:	f000 f8ed 	bl	800dfa0 <prvAddNewTaskToReadyList>
 800ddc6:	e001      	b.n	800ddcc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ddcc:	697b      	ldr	r3, [r7, #20]
	}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3728      	adds	r7, #40	; 0x28
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b08c      	sub	sp, #48	; 0x30
 800ddda:	af04      	add	r7, sp, #16
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	60b9      	str	r1, [r7, #8]
 800dde0:	603b      	str	r3, [r7, #0]
 800dde2:	4613      	mov	r3, r2
 800dde4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 fae6 	bl	800f3bc <pvPortMalloc>
 800ddf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00e      	beq.n	800de16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddf8:	20b4      	movs	r0, #180	; 0xb4
 800ddfa:	f001 fadf 	bl	800f3bc <pvPortMalloc>
 800ddfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	631a      	str	r2, [r3, #48]	; 0x30
 800de0c:	e005      	b.n	800de1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de0e:	6978      	ldr	r0, [r7, #20]
 800de10:	f001 fb9e 	bl	800f550 <vPortFree>
 800de14:	e001      	b.n	800de1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d017      	beq.n	800de50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	2200      	movs	r2, #0
 800de24:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de28:	88fa      	ldrh	r2, [r7, #6]
 800de2a:	2300      	movs	r3, #0
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	68b9      	ldr	r1, [r7, #8]
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 f80e 	bl	800de60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de44:	69f8      	ldr	r0, [r7, #28]
 800de46:	f000 f8ab 	bl	800dfa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de4a:	2301      	movs	r3, #1
 800de4c:	61bb      	str	r3, [r7, #24]
 800de4e:	e002      	b.n	800de56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de56:	69bb      	ldr	r3, [r7, #24]
	}
 800de58:	4618      	mov	r0, r3
 800de5a:	3720      	adds	r7, #32
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800de78:	440b      	add	r3, r1
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	f023 0307 	bic.w	r3, r3, #7
 800de86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	f003 0307 	and.w	r3, r3, #7
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00c      	beq.n	800deac <prvInitialiseNewTask+0x4c>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	b672      	cpsid	i
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	b662      	cpsie	i
 800dea6:	617b      	str	r3, [r7, #20]
}
 800dea8:	bf00      	nop
 800deaa:	e7fe      	b.n	800deaa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d01f      	beq.n	800def2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800deb2:	2300      	movs	r3, #0
 800deb4:	61fb      	str	r3, [r7, #28]
 800deb6:	e012      	b.n	800dede <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	4413      	add	r3, r2
 800debe:	7819      	ldrb	r1, [r3, #0]
 800dec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	4413      	add	r3, r2
 800dec6:	3334      	adds	r3, #52	; 0x34
 800dec8:	460a      	mov	r2, r1
 800deca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	4413      	add	r3, r2
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	3301      	adds	r3, #1
 800dedc:	61fb      	str	r3, [r7, #28]
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	2b0f      	cmp	r3, #15
 800dee2:	d9e9      	bls.n	800deb8 <prvInitialiseNewTask+0x58>
 800dee4:	e000      	b.n	800dee8 <prvInitialiseNewTask+0x88>
			{
				break;
 800dee6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800def0:	e003      	b.n	800defa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	2200      	movs	r2, #0
 800def6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	2b06      	cmp	r3, #6
 800defe:	d901      	bls.n	800df04 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df00:	2306      	movs	r3, #6
 800df02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	2200      	movs	r2, #0
 800df14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	3304      	adds	r3, #4
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7ff f8bb 	bl	800d096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df22:	3318      	adds	r3, #24
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff f8b6 	bl	800d096 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	f1c3 0207 	rsb	r2, r3, #7
 800df36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df42:	2200      	movs	r2, #0
 800df44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	334c      	adds	r3, #76	; 0x4c
 800df54:	2260      	movs	r2, #96	; 0x60
 800df56:	2100      	movs	r1, #0
 800df58:	4618      	mov	r0, r3
 800df5a:	f001 fc47 	bl	800f7ec <memset>
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	4a0c      	ldr	r2, [pc, #48]	; (800df94 <prvInitialiseNewTask+0x134>)
 800df62:	651a      	str	r2, [r3, #80]	; 0x50
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	4a0c      	ldr	r2, [pc, #48]	; (800df98 <prvInitialiseNewTask+0x138>)
 800df68:	655a      	str	r2, [r3, #84]	; 0x54
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	4a0b      	ldr	r2, [pc, #44]	; (800df9c <prvInitialiseNewTask+0x13c>)
 800df6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	68f9      	ldr	r1, [r7, #12]
 800df74:	69b8      	ldr	r0, [r7, #24]
 800df76:	f001 f82f 	bl	800efd8 <pxPortInitialiseStack>
 800df7a:	4602      	mov	r2, r0
 800df7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df8c:	bf00      	nop
 800df8e:	3720      	adds	r7, #32
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	08035ce0 	.word	0x08035ce0
 800df98:	08035d00 	.word	0x08035d00
 800df9c:	08035cc0 	.word	0x08035cc0

0800dfa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dfa8:	f001 f920 	bl	800f1ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dfac:	4b2a      	ldr	r3, [pc, #168]	; (800e058 <prvAddNewTaskToReadyList+0xb8>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	4a29      	ldr	r2, [pc, #164]	; (800e058 <prvAddNewTaskToReadyList+0xb8>)
 800dfb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dfb6:	4b29      	ldr	r3, [pc, #164]	; (800e05c <prvAddNewTaskToReadyList+0xbc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d109      	bne.n	800dfd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dfbe:	4a27      	ldr	r2, [pc, #156]	; (800e05c <prvAddNewTaskToReadyList+0xbc>)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dfc4:	4b24      	ldr	r3, [pc, #144]	; (800e058 <prvAddNewTaskToReadyList+0xb8>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d110      	bne.n	800dfee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dfcc:	f000 fd00 	bl	800e9d0 <prvInitialiseTaskLists>
 800dfd0:	e00d      	b.n	800dfee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dfd2:	4b23      	ldr	r3, [pc, #140]	; (800e060 <prvAddNewTaskToReadyList+0xc0>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d109      	bne.n	800dfee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dfda:	4b20      	ldr	r3, [pc, #128]	; (800e05c <prvAddNewTaskToReadyList+0xbc>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d802      	bhi.n	800dfee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfe8:	4a1c      	ldr	r2, [pc, #112]	; (800e05c <prvAddNewTaskToReadyList+0xbc>)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfee:	4b1d      	ldr	r3, [pc, #116]	; (800e064 <prvAddNewTaskToReadyList+0xc4>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	4a1b      	ldr	r2, [pc, #108]	; (800e064 <prvAddNewTaskToReadyList+0xc4>)
 800dff6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffc:	2201      	movs	r2, #1
 800dffe:	409a      	lsls	r2, r3
 800e000:	4b19      	ldr	r3, [pc, #100]	; (800e068 <prvAddNewTaskToReadyList+0xc8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4313      	orrs	r3, r2
 800e006:	4a18      	ldr	r2, [pc, #96]	; (800e068 <prvAddNewTaskToReadyList+0xc8>)
 800e008:	6013      	str	r3, [r2, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00e:	4613      	mov	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4a15      	ldr	r2, [pc, #84]	; (800e06c <prvAddNewTaskToReadyList+0xcc>)
 800e018:	441a      	add	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7ff f845 	bl	800d0b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e026:	f001 f915 	bl	800f254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e02a:	4b0d      	ldr	r3, [pc, #52]	; (800e060 <prvAddNewTaskToReadyList+0xc0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00e      	beq.n	800e050 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e032:	4b0a      	ldr	r3, [pc, #40]	; (800e05c <prvAddNewTaskToReadyList+0xbc>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d207      	bcs.n	800e050 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <prvAddNewTaskToReadyList+0xd0>)
 800e042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e046:	601a      	str	r2, [r3, #0]
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	200006d4 	.word	0x200006d4
 800e05c:	200005d4 	.word	0x200005d4
 800e060:	200006e0 	.word	0x200006e0
 800e064:	200006f0 	.word	0x200006f0
 800e068:	200006dc 	.word	0x200006dc
 800e06c:	200005d8 	.word	0x200005d8
 800e070:	e000ed04 	.word	0xe000ed04

0800e074 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e07c:	f001 f8b6 	bl	800f1ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d102      	bne.n	800e08c <vTaskDelete+0x18>
 800e086:	4b3a      	ldr	r3, [pc, #232]	; (800e170 <vTaskDelete+0xfc>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	e000      	b.n	800e08e <vTaskDelete+0x1a>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3304      	adds	r3, #4
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff f868 	bl	800d16a <uxListRemove>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d115      	bne.n	800e0cc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a4:	4933      	ldr	r1, [pc, #204]	; (800e174 <vTaskDelete+0x100>)
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	440b      	add	r3, r1
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10a      	bne.n	800e0cc <vTaskDelete+0x58>
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c0:	43da      	mvns	r2, r3
 800e0c2:	4b2d      	ldr	r3, [pc, #180]	; (800e178 <vTaskDelete+0x104>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	4a2b      	ldr	r2, [pc, #172]	; (800e178 <vTaskDelete+0x104>)
 800e0ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	3318      	adds	r3, #24
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff f846 	bl	800d16a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e0de:	4b27      	ldr	r3, [pc, #156]	; (800e17c <vTaskDelete+0x108>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	4a25      	ldr	r2, [pc, #148]	; (800e17c <vTaskDelete+0x108>)
 800e0e6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e0e8:	4b21      	ldr	r3, [pc, #132]	; (800e170 <vTaskDelete+0xfc>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d10b      	bne.n	800e10a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4821      	ldr	r0, [pc, #132]	; (800e180 <vTaskDelete+0x10c>)
 800e0fa:	f7fe ffd9 	bl	800d0b0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e0fe:	4b21      	ldr	r3, [pc, #132]	; (800e184 <vTaskDelete+0x110>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3301      	adds	r3, #1
 800e104:	4a1f      	ldr	r2, [pc, #124]	; (800e184 <vTaskDelete+0x110>)
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	e009      	b.n	800e11e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e10a:	4b1f      	ldr	r3, [pc, #124]	; (800e188 <vTaskDelete+0x114>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	3b01      	subs	r3, #1
 800e110:	4a1d      	ldr	r2, [pc, #116]	; (800e188 <vTaskDelete+0x114>)
 800e112:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f000 fcc9 	bl	800eaac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e11a:	f000 fcfd 	bl	800eb18 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e11e:	f001 f899 	bl	800f254 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e122:	4b1a      	ldr	r3, [pc, #104]	; (800e18c <vTaskDelete+0x118>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d01d      	beq.n	800e166 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800e12a:	4b11      	ldr	r3, [pc, #68]	; (800e170 <vTaskDelete+0xfc>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	429a      	cmp	r2, r3
 800e132:	d118      	bne.n	800e166 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e134:	4b16      	ldr	r3, [pc, #88]	; (800e190 <vTaskDelete+0x11c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00c      	beq.n	800e156 <vTaskDelete+0xe2>
	__asm volatile
 800e13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e140:	b672      	cpsid	i
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	b662      	cpsie	i
 800e150:	60bb      	str	r3, [r7, #8]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800e156:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <vTaskDelete+0x120>)
 800e158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e166:	bf00      	nop
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	200005d4 	.word	0x200005d4
 800e174:	200005d8 	.word	0x200005d8
 800e178:	200006dc 	.word	0x200006dc
 800e17c:	200006f0 	.word	0x200006f0
 800e180:	200006a8 	.word	0x200006a8
 800e184:	200006bc 	.word	0x200006bc
 800e188:	200006d4 	.word	0x200006d4
 800e18c:	200006e0 	.word	0x200006e0
 800e190:	200006fc 	.word	0x200006fc
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08a      	sub	sp, #40	; 0x28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10c      	bne.n	800e1c6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	b672      	cpsid	i
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	b662      	cpsie	i
 800e1c0:	617b      	str	r3, [r7, #20]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d10c      	bne.n	800e1e6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800e1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d0:	b672      	cpsid	i
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	b662      	cpsie	i
 800e1e0:	613b      	str	r3, [r7, #16]
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800e1e6:	4b2b      	ldr	r3, [pc, #172]	; (800e294 <vTaskDelayUntil+0xfc>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00c      	beq.n	800e208 <vTaskDelayUntil+0x70>
	__asm volatile
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	b672      	cpsid	i
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	b662      	cpsie	i
 800e202:	60fb      	str	r3, [r7, #12]
}
 800e204:	bf00      	nop
 800e206:	e7fe      	b.n	800e206 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800e208:	f000 f8ee 	bl	800e3e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e20c:	4b22      	ldr	r3, [pc, #136]	; (800e298 <vTaskDelayUntil+0x100>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	4413      	add	r3, r2
 800e21a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6a3a      	ldr	r2, [r7, #32]
 800e222:	429a      	cmp	r2, r3
 800e224:	d20b      	bcs.n	800e23e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	69fa      	ldr	r2, [r7, #28]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d211      	bcs.n	800e254 <vTaskDelayUntil+0xbc>
 800e230:	69fa      	ldr	r2, [r7, #28]
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	429a      	cmp	r2, r3
 800e236:	d90d      	bls.n	800e254 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800e238:	2301      	movs	r3, #1
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
 800e23c:	e00a      	b.n	800e254 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	69fa      	ldr	r2, [r7, #28]
 800e244:	429a      	cmp	r2, r3
 800e246:	d303      	bcc.n	800e250 <vTaskDelayUntil+0xb8>
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d901      	bls.n	800e254 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800e250:	2301      	movs	r3, #1
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d006      	beq.n	800e26e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e260:	69fa      	ldr	r2, [r7, #28]
 800e262:	6a3b      	ldr	r3, [r7, #32]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	2100      	movs	r1, #0
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 fe4f 	bl	800ef0c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e26e:	f000 f8c9 	bl	800e404 <xTaskResumeAll>
 800e272:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d107      	bne.n	800e28a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800e27a:	4b08      	ldr	r3, [pc, #32]	; (800e29c <vTaskDelayUntil+0x104>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e28a:	bf00      	nop
 800e28c:	3728      	adds	r7, #40	; 0x28
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	200006fc 	.word	0x200006fc
 800e298:	200006d8 	.word	0x200006d8
 800e29c:	e000ed04 	.word	0xe000ed04

0800e2a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d019      	beq.n	800e2e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2b2:	4b14      	ldr	r3, [pc, #80]	; (800e304 <vTaskDelay+0x64>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00c      	beq.n	800e2d4 <vTaskDelay+0x34>
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2be:	b672      	cpsid	i
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	b662      	cpsie	i
 800e2ce:	60bb      	str	r3, [r7, #8]
}
 800e2d0:	bf00      	nop
 800e2d2:	e7fe      	b.n	800e2d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e2d4:	f000 f888 	bl	800e3e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2d8:	2100      	movs	r1, #0
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fe16 	bl	800ef0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2e0:	f000 f890 	bl	800e404 <xTaskResumeAll>
 800e2e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d107      	bne.n	800e2fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e2ec:	4b06      	ldr	r3, [pc, #24]	; (800e308 <vTaskDelay+0x68>)
 800e2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	f3bf 8f4f 	dsb	sy
 800e2f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2fc:	bf00      	nop
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	200006fc 	.word	0x200006fc
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08a      	sub	sp, #40	; 0x28
 800e310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e316:	2300      	movs	r3, #0
 800e318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e31a:	463a      	mov	r2, r7
 800e31c:	1d39      	adds	r1, r7, #4
 800e31e:	f107 0308 	add.w	r3, r7, #8
 800e322:	4618      	mov	r0, r3
 800e324:	f7f2 f8f0 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	9202      	str	r2, [sp, #8]
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	2300      	movs	r3, #0
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	2300      	movs	r3, #0
 800e338:	460a      	mov	r2, r1
 800e33a:	4923      	ldr	r1, [pc, #140]	; (800e3c8 <vTaskStartScheduler+0xbc>)
 800e33c:	4823      	ldr	r0, [pc, #140]	; (800e3cc <vTaskStartScheduler+0xc0>)
 800e33e:	f7ff fce7 	bl	800dd10 <xTaskCreateStatic>
 800e342:	4603      	mov	r3, r0
 800e344:	4a22      	ldr	r2, [pc, #136]	; (800e3d0 <vTaskStartScheduler+0xc4>)
 800e346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e348:	4b21      	ldr	r3, [pc, #132]	; (800e3d0 <vTaskStartScheduler+0xc4>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e350:	2301      	movs	r3, #1
 800e352:	617b      	str	r3, [r7, #20]
 800e354:	e001      	b.n	800e35a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e356:	2300      	movs	r3, #0
 800e358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d11d      	bne.n	800e39c <vTaskStartScheduler+0x90>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	b672      	cpsid	i
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	b662      	cpsie	i
 800e374:	613b      	str	r3, [r7, #16]
}
 800e376:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e378:	4b16      	ldr	r3, [pc, #88]	; (800e3d4 <vTaskStartScheduler+0xc8>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	334c      	adds	r3, #76	; 0x4c
 800e37e:	4a16      	ldr	r2, [pc, #88]	; (800e3d8 <vTaskStartScheduler+0xcc>)
 800e380:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e382:	4b16      	ldr	r3, [pc, #88]	; (800e3dc <vTaskStartScheduler+0xd0>)
 800e384:	f04f 32ff 	mov.w	r2, #4294967295
 800e388:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e38a:	4b15      	ldr	r3, [pc, #84]	; (800e3e0 <vTaskStartScheduler+0xd4>)
 800e38c:	2201      	movs	r2, #1
 800e38e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e390:	4b14      	ldr	r3, [pc, #80]	; (800e3e4 <vTaskStartScheduler+0xd8>)
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e396:	f000 feab 	bl	800f0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e39a:	e010      	b.n	800e3be <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d10c      	bne.n	800e3be <vTaskStartScheduler+0xb2>
	__asm volatile
 800e3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a8:	b672      	cpsid	i
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	b662      	cpsie	i
 800e3b8:	60fb      	str	r3, [r7, #12]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <vTaskStartScheduler+0xb0>
}
 800e3be:	bf00      	nop
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	0800fb24 	.word	0x0800fb24
 800e3cc:	0800e9a1 	.word	0x0800e9a1
 800e3d0:	200006f8 	.word	0x200006f8
 800e3d4:	200005d4 	.word	0x200005d4
 800e3d8:	20000050 	.word	0x20000050
 800e3dc:	200006f4 	.word	0x200006f4
 800e3e0:	200006e0 	.word	0x200006e0
 800e3e4:	200006d8 	.word	0x200006d8

0800e3e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e3ec:	4b04      	ldr	r3, [pc, #16]	; (800e400 <vTaskSuspendAll+0x18>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	4a03      	ldr	r2, [pc, #12]	; (800e400 <vTaskSuspendAll+0x18>)
 800e3f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e3f6:	bf00      	nop
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	200006fc 	.word	0x200006fc

0800e404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e40e:	2300      	movs	r3, #0
 800e410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e412:	4b42      	ldr	r3, [pc, #264]	; (800e51c <xTaskResumeAll+0x118>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10c      	bne.n	800e434 <xTaskResumeAll+0x30>
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	b672      	cpsid	i
 800e420:	f383 8811 	msr	BASEPRI, r3
 800e424:	f3bf 8f6f 	isb	sy
 800e428:	f3bf 8f4f 	dsb	sy
 800e42c:	b662      	cpsie	i
 800e42e:	603b      	str	r3, [r7, #0]
}
 800e430:	bf00      	nop
 800e432:	e7fe      	b.n	800e432 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e434:	f000 feda 	bl	800f1ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e438:	4b38      	ldr	r3, [pc, #224]	; (800e51c <xTaskResumeAll+0x118>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3b01      	subs	r3, #1
 800e43e:	4a37      	ldr	r2, [pc, #220]	; (800e51c <xTaskResumeAll+0x118>)
 800e440:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e442:	4b36      	ldr	r3, [pc, #216]	; (800e51c <xTaskResumeAll+0x118>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d161      	bne.n	800e50e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e44a:	4b35      	ldr	r3, [pc, #212]	; (800e520 <xTaskResumeAll+0x11c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d05d      	beq.n	800e50e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e452:	e02e      	b.n	800e4b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e454:	4b33      	ldr	r3, [pc, #204]	; (800e524 <xTaskResumeAll+0x120>)
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	3318      	adds	r3, #24
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe fe82 	bl	800d16a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3304      	adds	r3, #4
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fe fe7d 	bl	800d16a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e474:	2201      	movs	r2, #1
 800e476:	409a      	lsls	r2, r3
 800e478:	4b2b      	ldr	r3, [pc, #172]	; (800e528 <xTaskResumeAll+0x124>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	4a2a      	ldr	r2, [pc, #168]	; (800e528 <xTaskResumeAll+0x124>)
 800e480:	6013      	str	r3, [r2, #0]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e486:	4613      	mov	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4413      	add	r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4a27      	ldr	r2, [pc, #156]	; (800e52c <xTaskResumeAll+0x128>)
 800e490:	441a      	add	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3304      	adds	r3, #4
 800e496:	4619      	mov	r1, r3
 800e498:	4610      	mov	r0, r2
 800e49a:	f7fe fe09 	bl	800d0b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a2:	4b23      	ldr	r3, [pc, #140]	; (800e530 <xTaskResumeAll+0x12c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d302      	bcc.n	800e4b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e4ac:	4b21      	ldr	r3, [pc, #132]	; (800e534 <xTaskResumeAll+0x130>)
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4b2:	4b1c      	ldr	r3, [pc, #112]	; (800e524 <xTaskResumeAll+0x120>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1cc      	bne.n	800e454 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4c0:	f000 fb2a 	bl	800eb18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e4c4:	4b1c      	ldr	r3, [pc, #112]	; (800e538 <xTaskResumeAll+0x134>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d010      	beq.n	800e4f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4d0:	f000 f836 	bl	800e540 <xTaskIncrementTick>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e4da:	4b16      	ldr	r3, [pc, #88]	; (800e534 <xTaskResumeAll+0x130>)
 800e4dc:	2201      	movs	r2, #1
 800e4de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1f1      	bne.n	800e4d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e4ec:	4b12      	ldr	r3, [pc, #72]	; (800e538 <xTaskResumeAll+0x134>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4f2:	4b10      	ldr	r3, [pc, #64]	; (800e534 <xTaskResumeAll+0x130>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d009      	beq.n	800e50e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4fe:	4b0f      	ldr	r3, [pc, #60]	; (800e53c <xTaskResumeAll+0x138>)
 800e500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e50e:	f000 fea1 	bl	800f254 <vPortExitCritical>

	return xAlreadyYielded;
 800e512:	68bb      	ldr	r3, [r7, #8]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	200006fc 	.word	0x200006fc
 800e520:	200006d4 	.word	0x200006d4
 800e524:	20000694 	.word	0x20000694
 800e528:	200006dc 	.word	0x200006dc
 800e52c:	200005d8 	.word	0x200005d8
 800e530:	200005d4 	.word	0x200005d4
 800e534:	200006e8 	.word	0x200006e8
 800e538:	200006e4 	.word	0x200006e4
 800e53c:	e000ed04 	.word	0xe000ed04

0800e540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e546:	2300      	movs	r3, #0
 800e548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e54a:	4b4f      	ldr	r3, [pc, #316]	; (800e688 <xTaskIncrementTick+0x148>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f040 808a 	bne.w	800e668 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e554:	4b4d      	ldr	r3, [pc, #308]	; (800e68c <xTaskIncrementTick+0x14c>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3301      	adds	r3, #1
 800e55a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e55c:	4a4b      	ldr	r2, [pc, #300]	; (800e68c <xTaskIncrementTick+0x14c>)
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d122      	bne.n	800e5ae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e568:	4b49      	ldr	r3, [pc, #292]	; (800e690 <xTaskIncrementTick+0x150>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00c      	beq.n	800e58c <xTaskIncrementTick+0x4c>
	__asm volatile
 800e572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e576:	b672      	cpsid	i
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	b662      	cpsie	i
 800e586:	603b      	str	r3, [r7, #0]
}
 800e588:	bf00      	nop
 800e58a:	e7fe      	b.n	800e58a <xTaskIncrementTick+0x4a>
 800e58c:	4b40      	ldr	r3, [pc, #256]	; (800e690 <xTaskIncrementTick+0x150>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	4b40      	ldr	r3, [pc, #256]	; (800e694 <xTaskIncrementTick+0x154>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a3e      	ldr	r2, [pc, #248]	; (800e690 <xTaskIncrementTick+0x150>)
 800e598:	6013      	str	r3, [r2, #0]
 800e59a:	4a3e      	ldr	r2, [pc, #248]	; (800e694 <xTaskIncrementTick+0x154>)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	4b3d      	ldr	r3, [pc, #244]	; (800e698 <xTaskIncrementTick+0x158>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	4a3c      	ldr	r2, [pc, #240]	; (800e698 <xTaskIncrementTick+0x158>)
 800e5a8:	6013      	str	r3, [r2, #0]
 800e5aa:	f000 fab5 	bl	800eb18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5ae:	4b3b      	ldr	r3, [pc, #236]	; (800e69c <xTaskIncrementTick+0x15c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d348      	bcc.n	800e64a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5b8:	4b35      	ldr	r3, [pc, #212]	; (800e690 <xTaskIncrementTick+0x150>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d104      	bne.n	800e5cc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c2:	4b36      	ldr	r3, [pc, #216]	; (800e69c <xTaskIncrementTick+0x15c>)
 800e5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c8:	601a      	str	r2, [r3, #0]
					break;
 800e5ca:	e03e      	b.n	800e64a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5cc:	4b30      	ldr	r3, [pc, #192]	; (800e690 <xTaskIncrementTick+0x150>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5dc:	693a      	ldr	r2, [r7, #16]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d203      	bcs.n	800e5ec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5e4:	4a2d      	ldr	r2, [pc, #180]	; (800e69c <xTaskIncrementTick+0x15c>)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5ea:	e02e      	b.n	800e64a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fe fdba 	bl	800d16a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	3318      	adds	r3, #24
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fdb1 	bl	800d16a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60c:	2201      	movs	r2, #1
 800e60e:	409a      	lsls	r2, r3
 800e610:	4b23      	ldr	r3, [pc, #140]	; (800e6a0 <xTaskIncrementTick+0x160>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4313      	orrs	r3, r2
 800e616:	4a22      	ldr	r2, [pc, #136]	; (800e6a0 <xTaskIncrementTick+0x160>)
 800e618:	6013      	str	r3, [r2, #0]
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61e:	4613      	mov	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	4a1f      	ldr	r2, [pc, #124]	; (800e6a4 <xTaskIncrementTick+0x164>)
 800e628:	441a      	add	r2, r3
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	3304      	adds	r3, #4
 800e62e:	4619      	mov	r1, r3
 800e630:	4610      	mov	r0, r2
 800e632:	f7fe fd3d 	bl	800d0b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63a:	4b1b      	ldr	r3, [pc, #108]	; (800e6a8 <xTaskIncrementTick+0x168>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e640:	429a      	cmp	r2, r3
 800e642:	d3b9      	bcc.n	800e5b8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e644:	2301      	movs	r3, #1
 800e646:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e648:	e7b6      	b.n	800e5b8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e64a:	4b17      	ldr	r3, [pc, #92]	; (800e6a8 <xTaskIncrementTick+0x168>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e650:	4914      	ldr	r1, [pc, #80]	; (800e6a4 <xTaskIncrementTick+0x164>)
 800e652:	4613      	mov	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	440b      	add	r3, r1
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d907      	bls.n	800e672 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e662:	2301      	movs	r3, #1
 800e664:	617b      	str	r3, [r7, #20]
 800e666:	e004      	b.n	800e672 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e668:	4b10      	ldr	r3, [pc, #64]	; (800e6ac <xTaskIncrementTick+0x16c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3301      	adds	r3, #1
 800e66e:	4a0f      	ldr	r2, [pc, #60]	; (800e6ac <xTaskIncrementTick+0x16c>)
 800e670:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e672:	4b0f      	ldr	r3, [pc, #60]	; (800e6b0 <xTaskIncrementTick+0x170>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e67a:	2301      	movs	r3, #1
 800e67c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e67e:	697b      	ldr	r3, [r7, #20]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	200006fc 	.word	0x200006fc
 800e68c:	200006d8 	.word	0x200006d8
 800e690:	2000068c 	.word	0x2000068c
 800e694:	20000690 	.word	0x20000690
 800e698:	200006ec 	.word	0x200006ec
 800e69c:	200006f4 	.word	0x200006f4
 800e6a0:	200006dc 	.word	0x200006dc
 800e6a4:	200005d8 	.word	0x200005d8
 800e6a8:	200005d4 	.word	0x200005d4
 800e6ac:	200006e4 	.word	0x200006e4
 800e6b0:	200006e8 	.word	0x200006e8

0800e6b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6ba:	4b2a      	ldr	r3, [pc, #168]	; (800e764 <vTaskSwitchContext+0xb0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d003      	beq.n	800e6ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6c2:	4b29      	ldr	r3, [pc, #164]	; (800e768 <vTaskSwitchContext+0xb4>)
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6c8:	e046      	b.n	800e758 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e6ca:	4b27      	ldr	r3, [pc, #156]	; (800e768 <vTaskSwitchContext+0xb4>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d0:	4b26      	ldr	r3, [pc, #152]	; (800e76c <vTaskSwitchContext+0xb8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	fab3 f383 	clz	r3, r3
 800e6dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e6de:	7afb      	ldrb	r3, [r7, #11]
 800e6e0:	f1c3 031f 	rsb	r3, r3, #31
 800e6e4:	617b      	str	r3, [r7, #20]
 800e6e6:	4922      	ldr	r1, [pc, #136]	; (800e770 <vTaskSwitchContext+0xbc>)
 800e6e8:	697a      	ldr	r2, [r7, #20]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	440b      	add	r3, r1
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10c      	bne.n	800e714 <vTaskSwitchContext+0x60>
	__asm volatile
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	b672      	cpsid	i
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	b662      	cpsie	i
 800e70e:	607b      	str	r3, [r7, #4]
}
 800e710:	bf00      	nop
 800e712:	e7fe      	b.n	800e712 <vTaskSwitchContext+0x5e>
 800e714:	697a      	ldr	r2, [r7, #20]
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4a14      	ldr	r2, [pc, #80]	; (800e770 <vTaskSwitchContext+0xbc>)
 800e720:	4413      	add	r3, r2
 800e722:	613b      	str	r3, [r7, #16]
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	605a      	str	r2, [r3, #4]
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	3308      	adds	r3, #8
 800e736:	429a      	cmp	r2, r3
 800e738:	d104      	bne.n	800e744 <vTaskSwitchContext+0x90>
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	685a      	ldr	r2, [r3, #4]
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	605a      	str	r2, [r3, #4]
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	4a0a      	ldr	r2, [pc, #40]	; (800e774 <vTaskSwitchContext+0xc0>)
 800e74c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e74e:	4b09      	ldr	r3, [pc, #36]	; (800e774 <vTaskSwitchContext+0xc0>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	334c      	adds	r3, #76	; 0x4c
 800e754:	4a08      	ldr	r2, [pc, #32]	; (800e778 <vTaskSwitchContext+0xc4>)
 800e756:	6013      	str	r3, [r2, #0]
}
 800e758:	bf00      	nop
 800e75a:	371c      	adds	r7, #28
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	200006fc 	.word	0x200006fc
 800e768:	200006e8 	.word	0x200006e8
 800e76c:	200006dc 	.word	0x200006dc
 800e770:	200005d8 	.word	0x200005d8
 800e774:	200005d4 	.word	0x200005d4
 800e778:	20000050 	.word	0x20000050

0800e77c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10c      	bne.n	800e7a6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e790:	b672      	cpsid	i
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	b662      	cpsie	i
 800e7a0:	60fb      	str	r3, [r7, #12]
}
 800e7a2:	bf00      	nop
 800e7a4:	e7fe      	b.n	800e7a4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7a6:	4b07      	ldr	r3, [pc, #28]	; (800e7c4 <vTaskPlaceOnEventList+0x48>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3318      	adds	r3, #24
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7fe fca2 	bl	800d0f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	6838      	ldr	r0, [r7, #0]
 800e7b8:	f000 fba8 	bl	800ef0c <prvAddCurrentTaskToDelayedList>
}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	200005d4 	.word	0x200005d4

0800e7c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d10c      	bne.n	800e7f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e2:	b672      	cpsid	i
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	b662      	cpsie	i
 800e7f2:	60fb      	str	r3, [r7, #12]
}
 800e7f4:	bf00      	nop
 800e7f6:	e7fe      	b.n	800e7f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	3318      	adds	r3, #24
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fe fcb4 	bl	800d16a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e802:	4b1d      	ldr	r3, [pc, #116]	; (800e878 <xTaskRemoveFromEventList+0xb0>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d11c      	bne.n	800e844 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe fcab 	bl	800d16a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e818:	2201      	movs	r2, #1
 800e81a:	409a      	lsls	r2, r3
 800e81c:	4b17      	ldr	r3, [pc, #92]	; (800e87c <xTaskRemoveFromEventList+0xb4>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4313      	orrs	r3, r2
 800e822:	4a16      	ldr	r2, [pc, #88]	; (800e87c <xTaskRemoveFromEventList+0xb4>)
 800e824:	6013      	str	r3, [r2, #0]
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4a13      	ldr	r2, [pc, #76]	; (800e880 <xTaskRemoveFromEventList+0xb8>)
 800e834:	441a      	add	r2, r3
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	3304      	adds	r3, #4
 800e83a:	4619      	mov	r1, r3
 800e83c:	4610      	mov	r0, r2
 800e83e:	f7fe fc37 	bl	800d0b0 <vListInsertEnd>
 800e842:	e005      	b.n	800e850 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	3318      	adds	r3, #24
 800e848:	4619      	mov	r1, r3
 800e84a:	480e      	ldr	r0, [pc, #56]	; (800e884 <xTaskRemoveFromEventList+0xbc>)
 800e84c:	f7fe fc30 	bl	800d0b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4b0c      	ldr	r3, [pc, #48]	; (800e888 <xTaskRemoveFromEventList+0xc0>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d905      	bls.n	800e86a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e85e:	2301      	movs	r3, #1
 800e860:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e862:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <xTaskRemoveFromEventList+0xc4>)
 800e864:	2201      	movs	r2, #1
 800e866:	601a      	str	r2, [r3, #0]
 800e868:	e001      	b.n	800e86e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e86a:	2300      	movs	r3, #0
 800e86c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e86e:	697b      	ldr	r3, [r7, #20]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3718      	adds	r7, #24
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	200006fc 	.word	0x200006fc
 800e87c:	200006dc 	.word	0x200006dc
 800e880:	200005d8 	.word	0x200005d8
 800e884:	20000694 	.word	0x20000694
 800e888:	200005d4 	.word	0x200005d4
 800e88c:	200006e8 	.word	0x200006e8

0800e890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e898:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <vTaskInternalSetTimeOutState+0x24>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8a0:	4b05      	ldr	r3, [pc, #20]	; (800e8b8 <vTaskInternalSetTimeOutState+0x28>)
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	605a      	str	r2, [r3, #4]
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	200006ec 	.word	0x200006ec
 800e8b8:	200006d8 	.word	0x200006d8

0800e8bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b088      	sub	sp, #32
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d10c      	bne.n	800e8e6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d0:	b672      	cpsid	i
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	b662      	cpsie	i
 800e8e0:	613b      	str	r3, [r7, #16]
}
 800e8e2:	bf00      	nop
 800e8e4:	e7fe      	b.n	800e8e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10c      	bne.n	800e906 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f0:	b672      	cpsid	i
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	b662      	cpsie	i
 800e900:	60fb      	str	r3, [r7, #12]
}
 800e902:	bf00      	nop
 800e904:	e7fe      	b.n	800e904 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e906:	f000 fc71 	bl	800f1ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e90a:	4b1d      	ldr	r3, [pc, #116]	; (800e980 <xTaskCheckForTimeOut+0xc4>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	69ba      	ldr	r2, [r7, #24]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e922:	d102      	bne.n	800e92a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e924:	2300      	movs	r3, #0
 800e926:	61fb      	str	r3, [r7, #28]
 800e928:	e023      	b.n	800e972 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	4b15      	ldr	r3, [pc, #84]	; (800e984 <xTaskCheckForTimeOut+0xc8>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	429a      	cmp	r2, r3
 800e934:	d007      	beq.n	800e946 <xTaskCheckForTimeOut+0x8a>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	69ba      	ldr	r2, [r7, #24]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d302      	bcc.n	800e946 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e940:	2301      	movs	r3, #1
 800e942:	61fb      	str	r3, [r7, #28]
 800e944:	e015      	b.n	800e972 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d20b      	bcs.n	800e968 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	1ad2      	subs	r2, r2, r3
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff ff97 	bl	800e890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e962:	2300      	movs	r3, #0
 800e964:	61fb      	str	r3, [r7, #28]
 800e966:	e004      	b.n	800e972 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	2200      	movs	r2, #0
 800e96c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e96e:	2301      	movs	r3, #1
 800e970:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e972:	f000 fc6f 	bl	800f254 <vPortExitCritical>

	return xReturn;
 800e976:	69fb      	ldr	r3, [r7, #28]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3720      	adds	r7, #32
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	200006d8 	.word	0x200006d8
 800e984:	200006ec 	.word	0x200006ec

0800e988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e988:	b480      	push	{r7}
 800e98a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e98c:	4b03      	ldr	r3, [pc, #12]	; (800e99c <vTaskMissedYield+0x14>)
 800e98e:	2201      	movs	r2, #1
 800e990:	601a      	str	r2, [r3, #0]
}
 800e992:	bf00      	nop
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr
 800e99c:	200006e8 	.word	0x200006e8

0800e9a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9a8:	f000 f852 	bl	800ea50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9ac:	4b06      	ldr	r3, [pc, #24]	; (800e9c8 <prvIdleTask+0x28>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d9f9      	bls.n	800e9a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9b4:	4b05      	ldr	r3, [pc, #20]	; (800e9cc <prvIdleTask+0x2c>)
 800e9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ba:	601a      	str	r2, [r3, #0]
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9c4:	e7f0      	b.n	800e9a8 <prvIdleTask+0x8>
 800e9c6:	bf00      	nop
 800e9c8:	200005d8 	.word	0x200005d8
 800e9cc:	e000ed04 	.word	0xe000ed04

0800e9d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	607b      	str	r3, [r7, #4]
 800e9da:	e00c      	b.n	800e9f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4413      	add	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4a12      	ldr	r2, [pc, #72]	; (800ea30 <prvInitialiseTaskLists+0x60>)
 800e9e8:	4413      	add	r3, r2
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fe fb33 	bl	800d056 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	607b      	str	r3, [r7, #4]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2b06      	cmp	r3, #6
 800e9fa:	d9ef      	bls.n	800e9dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9fc:	480d      	ldr	r0, [pc, #52]	; (800ea34 <prvInitialiseTaskLists+0x64>)
 800e9fe:	f7fe fb2a 	bl	800d056 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea02:	480d      	ldr	r0, [pc, #52]	; (800ea38 <prvInitialiseTaskLists+0x68>)
 800ea04:	f7fe fb27 	bl	800d056 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea08:	480c      	ldr	r0, [pc, #48]	; (800ea3c <prvInitialiseTaskLists+0x6c>)
 800ea0a:	f7fe fb24 	bl	800d056 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea0e:	480c      	ldr	r0, [pc, #48]	; (800ea40 <prvInitialiseTaskLists+0x70>)
 800ea10:	f7fe fb21 	bl	800d056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea14:	480b      	ldr	r0, [pc, #44]	; (800ea44 <prvInitialiseTaskLists+0x74>)
 800ea16:	f7fe fb1e 	bl	800d056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea1a:	4b0b      	ldr	r3, [pc, #44]	; (800ea48 <prvInitialiseTaskLists+0x78>)
 800ea1c:	4a05      	ldr	r2, [pc, #20]	; (800ea34 <prvInitialiseTaskLists+0x64>)
 800ea1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea20:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <prvInitialiseTaskLists+0x7c>)
 800ea22:	4a05      	ldr	r2, [pc, #20]	; (800ea38 <prvInitialiseTaskLists+0x68>)
 800ea24:	601a      	str	r2, [r3, #0]
}
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	200005d8 	.word	0x200005d8
 800ea34:	20000664 	.word	0x20000664
 800ea38:	20000678 	.word	0x20000678
 800ea3c:	20000694 	.word	0x20000694
 800ea40:	200006a8 	.word	0x200006a8
 800ea44:	200006c0 	.word	0x200006c0
 800ea48:	2000068c 	.word	0x2000068c
 800ea4c:	20000690 	.word	0x20000690

0800ea50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea56:	e019      	b.n	800ea8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea58:	f000 fbc8 	bl	800f1ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea5c:	4b10      	ldr	r3, [pc, #64]	; (800eaa0 <prvCheckTasksWaitingTermination+0x50>)
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3304      	adds	r3, #4
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe fb7e 	bl	800d16a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea6e:	4b0d      	ldr	r3, [pc, #52]	; (800eaa4 <prvCheckTasksWaitingTermination+0x54>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3b01      	subs	r3, #1
 800ea74:	4a0b      	ldr	r2, [pc, #44]	; (800eaa4 <prvCheckTasksWaitingTermination+0x54>)
 800ea76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea78:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <prvCheckTasksWaitingTermination+0x58>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3b01      	subs	r3, #1
 800ea7e:	4a0a      	ldr	r2, [pc, #40]	; (800eaa8 <prvCheckTasksWaitingTermination+0x58>)
 800ea80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea82:	f000 fbe7 	bl	800f254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f810 	bl	800eaac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea8c:	4b06      	ldr	r3, [pc, #24]	; (800eaa8 <prvCheckTasksWaitingTermination+0x58>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e1      	bne.n	800ea58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	200006a8 	.word	0x200006a8
 800eaa4:	200006d4 	.word	0x200006d4
 800eaa8:	200006bc 	.word	0x200006bc

0800eaac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	334c      	adds	r3, #76	; 0x4c
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 fead 	bl	800f818 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d108      	bne.n	800eada <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eacc:	4618      	mov	r0, r3
 800eace:	f000 fd3f 	bl	800f550 <vPortFree>
				vPortFree( pxTCB );
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 fd3c 	bl	800f550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ead8:	e01a      	b.n	800eb10 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d103      	bne.n	800eaec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fd33 	bl	800f550 <vPortFree>
	}
 800eaea:	e011      	b.n	800eb10 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d00c      	beq.n	800eb10 <prvDeleteTCB+0x64>
	__asm volatile
 800eaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafa:	b672      	cpsid	i
 800eafc:	f383 8811 	msr	BASEPRI, r3
 800eb00:	f3bf 8f6f 	isb	sy
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	b662      	cpsie	i
 800eb0a:	60fb      	str	r3, [r7, #12]
}
 800eb0c:	bf00      	nop
 800eb0e:	e7fe      	b.n	800eb0e <prvDeleteTCB+0x62>
	}
 800eb10:	bf00      	nop
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <prvResetNextTaskUnblockTime+0x38>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb28:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <prvResetNextTaskUnblockTime+0x3c>)
 800eb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb30:	e008      	b.n	800eb44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb32:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <prvResetNextTaskUnblockTime+0x38>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	4a04      	ldr	r2, [pc, #16]	; (800eb54 <prvResetNextTaskUnblockTime+0x3c>)
 800eb42:	6013      	str	r3, [r2, #0]
}
 800eb44:	bf00      	nop
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	2000068c 	.word	0x2000068c
 800eb54:	200006f4 	.word	0x200006f4

0800eb58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb5e:	4b0b      	ldr	r3, [pc, #44]	; (800eb8c <xTaskGetSchedulerState+0x34>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d102      	bne.n	800eb6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb66:	2301      	movs	r3, #1
 800eb68:	607b      	str	r3, [r7, #4]
 800eb6a:	e008      	b.n	800eb7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb6c:	4b08      	ldr	r3, [pc, #32]	; (800eb90 <xTaskGetSchedulerState+0x38>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d102      	bne.n	800eb7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb74:	2302      	movs	r3, #2
 800eb76:	607b      	str	r3, [r7, #4]
 800eb78:	e001      	b.n	800eb7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb7e:	687b      	ldr	r3, [r7, #4]
	}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr
 800eb8c:	200006e0 	.word	0x200006e0
 800eb90:	200006fc 	.word	0x200006fc

0800eb94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d069      	beq.n	800ec7e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebae:	4b36      	ldr	r3, [pc, #216]	; (800ec88 <xTaskPriorityInherit+0xf4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d259      	bcs.n	800ec6c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	db06      	blt.n	800ebce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebc0:	4b31      	ldr	r3, [pc, #196]	; (800ec88 <xTaskPriorityInherit+0xf4>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc6:	f1c3 0207 	rsb	r2, r3, #7
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	6959      	ldr	r1, [r3, #20]
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4a2b      	ldr	r2, [pc, #172]	; (800ec8c <xTaskPriorityInherit+0xf8>)
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4299      	cmp	r1, r3
 800ebe4:	d13a      	bne.n	800ec5c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fe fabd 	bl	800d16a <uxListRemove>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d115      	bne.n	800ec22 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfa:	4924      	ldr	r1, [pc, #144]	; (800ec8c <xTaskPriorityInherit+0xf8>)
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	440b      	add	r3, r1
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10a      	bne.n	800ec22 <xTaskPriorityInherit+0x8e>
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec10:	2201      	movs	r2, #1
 800ec12:	fa02 f303 	lsl.w	r3, r2, r3
 800ec16:	43da      	mvns	r2, r3
 800ec18:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <xTaskPriorityInherit+0xfc>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	4a1c      	ldr	r2, [pc, #112]	; (800ec90 <xTaskPriorityInherit+0xfc>)
 800ec20:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec22:	4b19      	ldr	r3, [pc, #100]	; (800ec88 <xTaskPriorityInherit+0xf4>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec30:	2201      	movs	r2, #1
 800ec32:	409a      	lsls	r2, r3
 800ec34:	4b16      	ldr	r3, [pc, #88]	; (800ec90 <xTaskPriorityInherit+0xfc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	4a15      	ldr	r2, [pc, #84]	; (800ec90 <xTaskPriorityInherit+0xfc>)
 800ec3c:	6013      	str	r3, [r2, #0]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec42:	4613      	mov	r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4413      	add	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4a10      	ldr	r2, [pc, #64]	; (800ec8c <xTaskPriorityInherit+0xf8>)
 800ec4c:	441a      	add	r2, r3
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	3304      	adds	r3, #4
 800ec52:	4619      	mov	r1, r3
 800ec54:	4610      	mov	r0, r2
 800ec56:	f7fe fa2b 	bl	800d0b0 <vListInsertEnd>
 800ec5a:	e004      	b.n	800ec66 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	; (800ec88 <xTaskPriorityInherit+0xf4>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec66:	2301      	movs	r3, #1
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	e008      	b.n	800ec7e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec70:	4b05      	ldr	r3, [pc, #20]	; (800ec88 <xTaskPriorityInherit+0xf4>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d201      	bcs.n	800ec7e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
	}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	200005d4 	.word	0x200005d4
 800ec8c:	200005d8 	.word	0x200005d8
 800ec90:	200006dc 	.word	0x200006dc

0800ec94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eca0:	2300      	movs	r3, #0
 800eca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d072      	beq.n	800ed90 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecaa:	4b3c      	ldr	r3, [pc, #240]	; (800ed9c <xTaskPriorityDisinherit+0x108>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	693a      	ldr	r2, [r7, #16]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d00c      	beq.n	800ecce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ecb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb8:	b672      	cpsid	i
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	b662      	cpsie	i
 800ecc8:	60fb      	str	r3, [r7, #12]
}
 800ecca:	bf00      	nop
 800eccc:	e7fe      	b.n	800eccc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10c      	bne.n	800ecf0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ecd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecda:	b672      	cpsid	i
 800ecdc:	f383 8811 	msr	BASEPRI, r3
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	f3bf 8f4f 	dsb	sy
 800ece8:	b662      	cpsie	i
 800ecea:	60bb      	str	r3, [r7, #8]
}
 800ecec:	bf00      	nop
 800ecee:	e7fe      	b.n	800ecee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecf4:	1e5a      	subs	r2, r3, #1
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d044      	beq.n	800ed90 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d140      	bne.n	800ed90 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	3304      	adds	r3, #4
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fe fa29 	bl	800d16a <uxListRemove>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d115      	bne.n	800ed4a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	491f      	ldr	r1, [pc, #124]	; (800eda0 <xTaskPriorityDisinherit+0x10c>)
 800ed24:	4613      	mov	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	440b      	add	r3, r1
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10a      	bne.n	800ed4a <xTaskPriorityDisinherit+0xb6>
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed38:	2201      	movs	r2, #1
 800ed3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed3e:	43da      	mvns	r2, r3
 800ed40:	4b18      	ldr	r3, [pc, #96]	; (800eda4 <xTaskPriorityDisinherit+0x110>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4013      	ands	r3, r2
 800ed46:	4a17      	ldr	r2, [pc, #92]	; (800eda4 <xTaskPriorityDisinherit+0x110>)
 800ed48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed56:	f1c3 0207 	rsb	r2, r3, #7
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed62:	2201      	movs	r2, #1
 800ed64:	409a      	lsls	r2, r3
 800ed66:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <xTaskPriorityDisinherit+0x110>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	4a0d      	ldr	r2, [pc, #52]	; (800eda4 <xTaskPriorityDisinherit+0x110>)
 800ed6e:	6013      	str	r3, [r2, #0]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed74:	4613      	mov	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4413      	add	r3, r2
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	4a08      	ldr	r2, [pc, #32]	; (800eda0 <xTaskPriorityDisinherit+0x10c>)
 800ed7e:	441a      	add	r2, r3
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	3304      	adds	r3, #4
 800ed84:	4619      	mov	r1, r3
 800ed86:	4610      	mov	r0, r2
 800ed88:	f7fe f992 	bl	800d0b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed90:	697b      	ldr	r3, [r7, #20]
	}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	200005d4 	.word	0x200005d4
 800eda0:	200005d8 	.word	0x200005d8
 800eda4:	200006dc 	.word	0x200006dc

0800eda8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800edb6:	2301      	movs	r3, #1
 800edb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 8087 	beq.w	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10c      	bne.n	800ede4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	b672      	cpsid	i
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	b662      	cpsie	i
 800edde:	60fb      	str	r3, [r7, #12]
}
 800ede0:	bf00      	nop
 800ede2:	e7fe      	b.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	429a      	cmp	r2, r3
 800edec:	d902      	bls.n	800edf4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	61fb      	str	r3, [r7, #28]
 800edf2:	e002      	b.n	800edfa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edf8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfe:	69fa      	ldr	r2, [r7, #28]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d065      	beq.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee08:	697a      	ldr	r2, [r7, #20]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d160      	bne.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee0e:	4b32      	ldr	r3, [pc, #200]	; (800eed8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	69ba      	ldr	r2, [r7, #24]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d10c      	bne.n	800ee32 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	b672      	cpsid	i
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	b662      	cpsie	i
 800ee2c:	60bb      	str	r3, [r7, #8]
}
 800ee2e:	bf00      	nop
 800ee30:	e7fe      	b.n	800ee30 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee36:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	69fa      	ldr	r2, [r7, #28]
 800ee3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	699b      	ldr	r3, [r3, #24]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	db04      	blt.n	800ee50 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	f1c3 0207 	rsb	r2, r3, #7
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	6959      	ldr	r1, [r3, #20]
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4a1f      	ldr	r2, [pc, #124]	; (800eedc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ee60:	4413      	add	r3, r2
 800ee62:	4299      	cmp	r1, r3
 800ee64:	d134      	bne.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	3304      	adds	r3, #4
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7fe f97d 	bl	800d16a <uxListRemove>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d115      	bne.n	800eea2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7a:	4918      	ldr	r1, [pc, #96]	; (800eedc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4413      	add	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	440b      	add	r3, r1
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee90:	2201      	movs	r2, #1
 800ee92:	fa02 f303 	lsl.w	r3, r2, r3
 800ee96:	43da      	mvns	r2, r3
 800ee98:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	4a10      	ldr	r2, [pc, #64]	; (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eea0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea6:	2201      	movs	r2, #1
 800eea8:	409a      	lsls	r2, r3
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	4a0b      	ldr	r2, [pc, #44]	; (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb8:	4613      	mov	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	4413      	add	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4a06      	ldr	r2, [pc, #24]	; (800eedc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eec2:	441a      	add	r2, r3
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	3304      	adds	r3, #4
 800eec8:	4619      	mov	r1, r3
 800eeca:	4610      	mov	r0, r2
 800eecc:	f7fe f8f0 	bl	800d0b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eed0:	bf00      	nop
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	200005d4 	.word	0x200005d4
 800eedc:	200005d8 	.word	0x200005d8
 800eee0:	200006dc 	.word	0x200006dc

0800eee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eee8:	4b07      	ldr	r3, [pc, #28]	; (800ef08 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d004      	beq.n	800eefa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eef0:	4b05      	ldr	r3, [pc, #20]	; (800ef08 <pvTaskIncrementMutexHeldCount+0x24>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eef6:	3201      	adds	r2, #1
 800eef8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eefa:	4b03      	ldr	r3, [pc, #12]	; (800ef08 <pvTaskIncrementMutexHeldCount+0x24>)
 800eefc:	681b      	ldr	r3, [r3, #0]
	}
 800eefe:	4618      	mov	r0, r3
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	200005d4 	.word	0x200005d4

0800ef0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef16:	4b29      	ldr	r3, [pc, #164]	; (800efbc <prvAddCurrentTaskToDelayedList+0xb0>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef1c:	4b28      	ldr	r3, [pc, #160]	; (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	3304      	adds	r3, #4
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f921 	bl	800d16a <uxListRemove>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10b      	bne.n	800ef46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef2e:	4b24      	ldr	r3, [pc, #144]	; (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef34:	2201      	movs	r2, #1
 800ef36:	fa02 f303 	lsl.w	r3, r2, r3
 800ef3a:	43da      	mvns	r2, r3
 800ef3c:	4b21      	ldr	r3, [pc, #132]	; (800efc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4013      	ands	r3, r2
 800ef42:	4a20      	ldr	r2, [pc, #128]	; (800efc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4c:	d10a      	bne.n	800ef64 <prvAddCurrentTaskToDelayedList+0x58>
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d007      	beq.n	800ef64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef54:	4b1a      	ldr	r3, [pc, #104]	; (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	3304      	adds	r3, #4
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	481a      	ldr	r0, [pc, #104]	; (800efc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef5e:	f7fe f8a7 	bl	800d0b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef62:	e026      	b.n	800efb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4413      	add	r3, r2
 800ef6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef6c:	4b14      	ldr	r3, [pc, #80]	; (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68ba      	ldr	r2, [r7, #8]
 800ef72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef74:	68ba      	ldr	r2, [r7, #8]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d209      	bcs.n	800ef90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef7c:	4b13      	ldr	r3, [pc, #76]	; (800efcc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	4b0f      	ldr	r3, [pc, #60]	; (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3304      	adds	r3, #4
 800ef86:	4619      	mov	r1, r3
 800ef88:	4610      	mov	r0, r2
 800ef8a:	f7fe f8b5 	bl	800d0f8 <vListInsert>
}
 800ef8e:	e010      	b.n	800efb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef90:	4b0f      	ldr	r3, [pc, #60]	; (800efd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	4b0a      	ldr	r3, [pc, #40]	; (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	f7fe f8ab 	bl	800d0f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efa2:	4b0c      	ldr	r3, [pc, #48]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d202      	bcs.n	800efb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800efac:	4a09      	ldr	r2, [pc, #36]	; (800efd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	6013      	str	r3, [r2, #0]
}
 800efb2:	bf00      	nop
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	200006d8 	.word	0x200006d8
 800efc0:	200005d4 	.word	0x200005d4
 800efc4:	200006dc 	.word	0x200006dc
 800efc8:	200006c0 	.word	0x200006c0
 800efcc:	20000690 	.word	0x20000690
 800efd0:	2000068c 	.word	0x2000068c
 800efd4:	200006f4 	.word	0x200006f4

0800efd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efd8:	b480      	push	{r7}
 800efda:	b085      	sub	sp, #20
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3b04      	subs	r3, #4
 800efe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3b04      	subs	r3, #4
 800eff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f023 0201 	bic.w	r2, r3, #1
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3b04      	subs	r3, #4
 800f006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f008:	4a0c      	ldr	r2, [pc, #48]	; (800f03c <pxPortInitialiseStack+0x64>)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3b14      	subs	r3, #20
 800f012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3b04      	subs	r3, #4
 800f01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f06f 0202 	mvn.w	r2, #2
 800f026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3b20      	subs	r3, #32
 800f02c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	0800f041 	.word	0x0800f041

0800f040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f040:	b480      	push	{r7}
 800f042:	b085      	sub	sp, #20
 800f044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f04a:	4b14      	ldr	r3, [pc, #80]	; (800f09c <prvTaskExitError+0x5c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f052:	d00c      	beq.n	800f06e <prvTaskExitError+0x2e>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f058:	b672      	cpsid	i
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	b662      	cpsie	i
 800f068:	60fb      	str	r3, [r7, #12]
}
 800f06a:	bf00      	nop
 800f06c:	e7fe      	b.n	800f06c <prvTaskExitError+0x2c>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	b672      	cpsid	i
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	b662      	cpsie	i
 800f082:	60bb      	str	r3, [r7, #8]
}
 800f084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f086:	bf00      	nop
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d0fc      	beq.n	800f088 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f08e:	bf00      	nop
 800f090:	bf00      	nop
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	2000004c 	.word	0x2000004c

0800f0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0a0:	4b07      	ldr	r3, [pc, #28]	; (800f0c0 <pxCurrentTCBConst2>)
 800f0a2:	6819      	ldr	r1, [r3, #0]
 800f0a4:	6808      	ldr	r0, [r1, #0]
 800f0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0aa:	f380 8809 	msr	PSP, r0
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f04f 0000 	mov.w	r0, #0
 800f0b6:	f380 8811 	msr	BASEPRI, r0
 800f0ba:	4770      	bx	lr
 800f0bc:	f3af 8000 	nop.w

0800f0c0 <pxCurrentTCBConst2>:
 800f0c0:	200005d4 	.word	0x200005d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop

0800f0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0c8:	4808      	ldr	r0, [pc, #32]	; (800f0ec <prvPortStartFirstTask+0x24>)
 800f0ca:	6800      	ldr	r0, [r0, #0]
 800f0cc:	6800      	ldr	r0, [r0, #0]
 800f0ce:	f380 8808 	msr	MSP, r0
 800f0d2:	f04f 0000 	mov.w	r0, #0
 800f0d6:	f380 8814 	msr	CONTROL, r0
 800f0da:	b662      	cpsie	i
 800f0dc:	b661      	cpsie	f
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	df00      	svc	0
 800f0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0ea:	bf00      	nop
 800f0ec:	e000ed08 	.word	0xe000ed08

0800f0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0f6:	4b37      	ldr	r3, [pc, #220]	; (800f1d4 <xPortStartScheduler+0xe4>)
 800f0f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	22ff      	movs	r2, #255	; 0xff
 800f106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	4b2f      	ldr	r3, [pc, #188]	; (800f1d8 <xPortStartScheduler+0xe8>)
 800f11c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f11e:	4b2f      	ldr	r3, [pc, #188]	; (800f1dc <xPortStartScheduler+0xec>)
 800f120:	2207      	movs	r2, #7
 800f122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f124:	e009      	b.n	800f13a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f126:	4b2d      	ldr	r3, [pc, #180]	; (800f1dc <xPortStartScheduler+0xec>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	4a2b      	ldr	r2, [pc, #172]	; (800f1dc <xPortStartScheduler+0xec>)
 800f12e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	b2db      	uxtb	r3, r3
 800f134:	005b      	lsls	r3, r3, #1
 800f136:	b2db      	uxtb	r3, r3
 800f138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f142:	2b80      	cmp	r3, #128	; 0x80
 800f144:	d0ef      	beq.n	800f126 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f146:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <xPortStartScheduler+0xec>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f1c3 0307 	rsb	r3, r3, #7
 800f14e:	2b04      	cmp	r3, #4
 800f150:	d00c      	beq.n	800f16c <xPortStartScheduler+0x7c>
	__asm volatile
 800f152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f156:	b672      	cpsid	i
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	b662      	cpsie	i
 800f166:	60bb      	str	r3, [r7, #8]
}
 800f168:	bf00      	nop
 800f16a:	e7fe      	b.n	800f16a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f16c:	4b1b      	ldr	r3, [pc, #108]	; (800f1dc <xPortStartScheduler+0xec>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	021b      	lsls	r3, r3, #8
 800f172:	4a1a      	ldr	r2, [pc, #104]	; (800f1dc <xPortStartScheduler+0xec>)
 800f174:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f176:	4b19      	ldr	r3, [pc, #100]	; (800f1dc <xPortStartScheduler+0xec>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f17e:	4a17      	ldr	r2, [pc, #92]	; (800f1dc <xPortStartScheduler+0xec>)
 800f180:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	b2da      	uxtb	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f18a:	4b15      	ldr	r3, [pc, #84]	; (800f1e0 <xPortStartScheduler+0xf0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4a14      	ldr	r2, [pc, #80]	; (800f1e0 <xPortStartScheduler+0xf0>)
 800f190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f194:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f196:	4b12      	ldr	r3, [pc, #72]	; (800f1e0 <xPortStartScheduler+0xf0>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a11      	ldr	r2, [pc, #68]	; (800f1e0 <xPortStartScheduler+0xf0>)
 800f19c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1a2:	f000 f8dd 	bl	800f360 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <xPortStartScheduler+0xf4>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1ac:	f000 f8fc 	bl	800f3a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1b0:	4b0d      	ldr	r3, [pc, #52]	; (800f1e8 <xPortStartScheduler+0xf8>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a0c      	ldr	r2, [pc, #48]	; (800f1e8 <xPortStartScheduler+0xf8>)
 800f1b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1bc:	f7ff ff84 	bl	800f0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1c0:	f7ff fa78 	bl	800e6b4 <vTaskSwitchContext>
	prvTaskExitError();
 800f1c4:	f7ff ff3c 	bl	800f040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	e000e400 	.word	0xe000e400
 800f1d8:	20000700 	.word	0x20000700
 800f1dc:	20000704 	.word	0x20000704
 800f1e0:	e000ed20 	.word	0xe000ed20
 800f1e4:	2000004c 	.word	0x2000004c
 800f1e8:	e000ef34 	.word	0xe000ef34

0800f1ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
	__asm volatile
 800f1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f6:	b672      	cpsid	i
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	b662      	cpsie	i
 800f206:	607b      	str	r3, [r7, #4]
}
 800f208:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f20a:	4b10      	ldr	r3, [pc, #64]	; (800f24c <vPortEnterCritical+0x60>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	3301      	adds	r3, #1
 800f210:	4a0e      	ldr	r2, [pc, #56]	; (800f24c <vPortEnterCritical+0x60>)
 800f212:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f214:	4b0d      	ldr	r3, [pc, #52]	; (800f24c <vPortEnterCritical+0x60>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d111      	bne.n	800f240 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f21c:	4b0c      	ldr	r3, [pc, #48]	; (800f250 <vPortEnterCritical+0x64>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00c      	beq.n	800f240 <vPortEnterCritical+0x54>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22a:	b672      	cpsid	i
 800f22c:	f383 8811 	msr	BASEPRI, r3
 800f230:	f3bf 8f6f 	isb	sy
 800f234:	f3bf 8f4f 	dsb	sy
 800f238:	b662      	cpsie	i
 800f23a:	603b      	str	r3, [r7, #0]
}
 800f23c:	bf00      	nop
 800f23e:	e7fe      	b.n	800f23e <vPortEnterCritical+0x52>
	}
}
 800f240:	bf00      	nop
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	2000004c 	.word	0x2000004c
 800f250:	e000ed04 	.word	0xe000ed04

0800f254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f25a:	4b13      	ldr	r3, [pc, #76]	; (800f2a8 <vPortExitCritical+0x54>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10c      	bne.n	800f27c <vPortExitCritical+0x28>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f266:	b672      	cpsid	i
 800f268:	f383 8811 	msr	BASEPRI, r3
 800f26c:	f3bf 8f6f 	isb	sy
 800f270:	f3bf 8f4f 	dsb	sy
 800f274:	b662      	cpsie	i
 800f276:	607b      	str	r3, [r7, #4]
}
 800f278:	bf00      	nop
 800f27a:	e7fe      	b.n	800f27a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f27c:	4b0a      	ldr	r3, [pc, #40]	; (800f2a8 <vPortExitCritical+0x54>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	3b01      	subs	r3, #1
 800f282:	4a09      	ldr	r2, [pc, #36]	; (800f2a8 <vPortExitCritical+0x54>)
 800f284:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f286:	4b08      	ldr	r3, [pc, #32]	; (800f2a8 <vPortExitCritical+0x54>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d105      	bne.n	800f29a <vPortExitCritical+0x46>
 800f28e:	2300      	movs	r3, #0
 800f290:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f298:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	2000004c 	.word	0x2000004c
 800f2ac:	00000000 	.word	0x00000000

0800f2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2b0:	f3ef 8009 	mrs	r0, PSP
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	4b15      	ldr	r3, [pc, #84]	; (800f310 <pxCurrentTCBConst>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	f01e 0f10 	tst.w	lr, #16
 800f2c0:	bf08      	it	eq
 800f2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ca:	6010      	str	r0, [r2, #0]
 800f2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2d4:	b672      	cpsid	i
 800f2d6:	f380 8811 	msr	BASEPRI, r0
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	b662      	cpsie	i
 800f2e4:	f7ff f9e6 	bl	800e6b4 <vTaskSwitchContext>
 800f2e8:	f04f 0000 	mov.w	r0, #0
 800f2ec:	f380 8811 	msr	BASEPRI, r0
 800f2f0:	bc09      	pop	{r0, r3}
 800f2f2:	6819      	ldr	r1, [r3, #0]
 800f2f4:	6808      	ldr	r0, [r1, #0]
 800f2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fa:	f01e 0f10 	tst.w	lr, #16
 800f2fe:	bf08      	it	eq
 800f300:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f304:	f380 8809 	msr	PSP, r0
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop

0800f310 <pxCurrentTCBConst>:
 800f310:	200005d4 	.word	0x200005d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop

0800f318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	b672      	cpsid	i
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	b662      	cpsie	i
 800f332:	607b      	str	r3, [r7, #4]
}
 800f334:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f336:	f7ff f903 	bl	800e540 <xTaskIncrementTick>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d003      	beq.n	800f348 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f340:	4b06      	ldr	r3, [pc, #24]	; (800f35c <SysTick_Handler+0x44>)
 800f342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	2300      	movs	r3, #0
 800f34a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	f383 8811 	msr	BASEPRI, r3
}
 800f352:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	e000ed04 	.word	0xe000ed04

0800f360 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f360:	b480      	push	{r7}
 800f362:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f364:	4b0b      	ldr	r3, [pc, #44]	; (800f394 <vPortSetupTimerInterrupt+0x34>)
 800f366:	2200      	movs	r2, #0
 800f368:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f36a:	4b0b      	ldr	r3, [pc, #44]	; (800f398 <vPortSetupTimerInterrupt+0x38>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f370:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <vPortSetupTimerInterrupt+0x3c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a0a      	ldr	r2, [pc, #40]	; (800f3a0 <vPortSetupTimerInterrupt+0x40>)
 800f376:	fba2 2303 	umull	r2, r3, r2, r3
 800f37a:	099b      	lsrs	r3, r3, #6
 800f37c:	4a09      	ldr	r2, [pc, #36]	; (800f3a4 <vPortSetupTimerInterrupt+0x44>)
 800f37e:	3b01      	subs	r3, #1
 800f380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f382:	4b04      	ldr	r3, [pc, #16]	; (800f394 <vPortSetupTimerInterrupt+0x34>)
 800f384:	2207      	movs	r2, #7
 800f386:	601a      	str	r2, [r3, #0]
}
 800f388:	bf00      	nop
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	e000e010 	.word	0xe000e010
 800f398:	e000e018 	.word	0xe000e018
 800f39c:	20000040 	.word	0x20000040
 800f3a0:	10624dd3 	.word	0x10624dd3
 800f3a4:	e000e014 	.word	0xe000e014

0800f3a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3b8 <vPortEnableVFP+0x10>
 800f3ac:	6801      	ldr	r1, [r0, #0]
 800f3ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f3b2:	6001      	str	r1, [r0, #0]
 800f3b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3b6:	bf00      	nop
 800f3b8:	e000ed88 	.word	0xe000ed88

0800f3bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08a      	sub	sp, #40	; 0x28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3c8:	f7ff f80e 	bl	800e3e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3cc:	4b5b      	ldr	r3, [pc, #364]	; (800f53c <pvPortMalloc+0x180>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d101      	bne.n	800f3d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3d4:	f000 f91a 	bl	800f60c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3d8:	4b59      	ldr	r3, [pc, #356]	; (800f540 <pvPortMalloc+0x184>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4013      	ands	r3, r2
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f040 8092 	bne.w	800f50a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d01f      	beq.n	800f42c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f3ec:	2208      	movs	r2, #8
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f003 0307 	and.w	r3, r3, #7
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d016      	beq.n	800f42c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	3308      	adds	r3, #8
 800f406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f003 0307 	and.w	r3, r3, #7
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00c      	beq.n	800f42c <pvPortMalloc+0x70>
	__asm volatile
 800f412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f416:	b672      	cpsid	i
 800f418:	f383 8811 	msr	BASEPRI, r3
 800f41c:	f3bf 8f6f 	isb	sy
 800f420:	f3bf 8f4f 	dsb	sy
 800f424:	b662      	cpsie	i
 800f426:	617b      	str	r3, [r7, #20]
}
 800f428:	bf00      	nop
 800f42a:	e7fe      	b.n	800f42a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d06b      	beq.n	800f50a <pvPortMalloc+0x14e>
 800f432:	4b44      	ldr	r3, [pc, #272]	; (800f544 <pvPortMalloc+0x188>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d866      	bhi.n	800f50a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f43c:	4b42      	ldr	r3, [pc, #264]	; (800f548 <pvPortMalloc+0x18c>)
 800f43e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f440:	4b41      	ldr	r3, [pc, #260]	; (800f548 <pvPortMalloc+0x18c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f446:	e004      	b.n	800f452 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d903      	bls.n	800f464 <pvPortMalloc+0xa8>
 800f45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1f1      	bne.n	800f448 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f464:	4b35      	ldr	r3, [pc, #212]	; (800f53c <pvPortMalloc+0x180>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d04d      	beq.n	800f50a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f46e:	6a3b      	ldr	r3, [r7, #32]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2208      	movs	r2, #8
 800f474:	4413      	add	r3, r2
 800f476:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	6a3b      	ldr	r3, [r7, #32]
 800f47e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	1ad2      	subs	r2, r2, r3
 800f488:	2308      	movs	r3, #8
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d921      	bls.n	800f4d4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4413      	add	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	f003 0307 	and.w	r3, r3, #7
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00c      	beq.n	800f4bc <pvPortMalloc+0x100>
	__asm volatile
 800f4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a6:	b672      	cpsid	i
 800f4a8:	f383 8811 	msr	BASEPRI, r3
 800f4ac:	f3bf 8f6f 	isb	sy
 800f4b0:	f3bf 8f4f 	dsb	sy
 800f4b4:	b662      	cpsie	i
 800f4b6:	613b      	str	r3, [r7, #16]
}
 800f4b8:	bf00      	nop
 800f4ba:	e7fe      	b.n	800f4ba <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	1ad2      	subs	r2, r2, r3
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4ce:	69b8      	ldr	r0, [r7, #24]
 800f4d0:	f000 f8fe 	bl	800f6d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4d4:	4b1b      	ldr	r3, [pc, #108]	; (800f544 <pvPortMalloc+0x188>)
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	4a19      	ldr	r2, [pc, #100]	; (800f544 <pvPortMalloc+0x188>)
 800f4e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4e2:	4b18      	ldr	r3, [pc, #96]	; (800f544 <pvPortMalloc+0x188>)
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	4b19      	ldr	r3, [pc, #100]	; (800f54c <pvPortMalloc+0x190>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d203      	bcs.n	800f4f6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4ee:	4b15      	ldr	r3, [pc, #84]	; (800f544 <pvPortMalloc+0x188>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a16      	ldr	r2, [pc, #88]	; (800f54c <pvPortMalloc+0x190>)
 800f4f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f8:	685a      	ldr	r2, [r3, #4]
 800f4fa:	4b11      	ldr	r3, [pc, #68]	; (800f540 <pvPortMalloc+0x184>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	431a      	orrs	r2, r3
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f506:	2200      	movs	r2, #0
 800f508:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f50a:	f7fe ff7b 	bl	800e404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	f003 0307 	and.w	r3, r3, #7
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00c      	beq.n	800f532 <pvPortMalloc+0x176>
	__asm volatile
 800f518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51c:	b672      	cpsid	i
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	b662      	cpsie	i
 800f52c:	60fb      	str	r3, [r7, #12]
}
 800f52e:	bf00      	nop
 800f530:	e7fe      	b.n	800f530 <pvPortMalloc+0x174>
	return pvReturn;
 800f532:	69fb      	ldr	r3, [r7, #28]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3728      	adds	r7, #40	; 0x28
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	20007f10 	.word	0x20007f10
 800f540:	20007f1c 	.word	0x20007f1c
 800f544:	20007f14 	.word	0x20007f14
 800f548:	20007f08 	.word	0x20007f08
 800f54c:	20007f18 	.word	0x20007f18

0800f550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d04c      	beq.n	800f5fc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f562:	2308      	movs	r3, #8
 800f564:	425b      	negs	r3, r3
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	4413      	add	r3, r2
 800f56a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	685a      	ldr	r2, [r3, #4]
 800f574:	4b23      	ldr	r3, [pc, #140]	; (800f604 <vPortFree+0xb4>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4013      	ands	r3, r2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10c      	bne.n	800f598 <vPortFree+0x48>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	b672      	cpsid	i
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	b662      	cpsie	i
 800f592:	60fb      	str	r3, [r7, #12]
}
 800f594:	bf00      	nop
 800f596:	e7fe      	b.n	800f596 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00c      	beq.n	800f5ba <vPortFree+0x6a>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	b672      	cpsid	i
 800f5a6:	f383 8811 	msr	BASEPRI, r3
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	f3bf 8f4f 	dsb	sy
 800f5b2:	b662      	cpsie	i
 800f5b4:	60bb      	str	r3, [r7, #8]
}
 800f5b6:	bf00      	nop
 800f5b8:	e7fe      	b.n	800f5b8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	4b11      	ldr	r3, [pc, #68]	; (800f604 <vPortFree+0xb4>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d019      	beq.n	800f5fc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d115      	bne.n	800f5fc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	685a      	ldr	r2, [r3, #4]
 800f5d4:	4b0b      	ldr	r3, [pc, #44]	; (800f604 <vPortFree+0xb4>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	43db      	mvns	r3, r3
 800f5da:	401a      	ands	r2, r3
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5e0:	f7fe ff02 	bl	800e3e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	4b07      	ldr	r3, [pc, #28]	; (800f608 <vPortFree+0xb8>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	4a06      	ldr	r2, [pc, #24]	; (800f608 <vPortFree+0xb8>)
 800f5f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5f2:	6938      	ldr	r0, [r7, #16]
 800f5f4:	f000 f86c 	bl	800f6d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f5f8:	f7fe ff04 	bl	800e404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5fc:	bf00      	nop
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20007f1c 	.word	0x20007f1c
 800f608:	20007f14 	.word	0x20007f14

0800f60c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f60c:	b480      	push	{r7}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f612:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f616:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f618:	4b27      	ldr	r3, [pc, #156]	; (800f6b8 <prvHeapInit+0xac>)
 800f61a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f003 0307 	and.w	r3, r3, #7
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00c      	beq.n	800f640 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	3307      	adds	r3, #7
 800f62a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f023 0307 	bic.w	r3, r3, #7
 800f632:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	4a1f      	ldr	r2, [pc, #124]	; (800f6b8 <prvHeapInit+0xac>)
 800f63c:	4413      	add	r3, r2
 800f63e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f644:	4a1d      	ldr	r2, [pc, #116]	; (800f6bc <prvHeapInit+0xb0>)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f64a:	4b1c      	ldr	r3, [pc, #112]	; (800f6bc <prvHeapInit+0xb0>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	4413      	add	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f658:	2208      	movs	r2, #8
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	1a9b      	subs	r3, r3, r2
 800f65e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f023 0307 	bic.w	r3, r3, #7
 800f666:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	4a15      	ldr	r2, [pc, #84]	; (800f6c0 <prvHeapInit+0xb4>)
 800f66c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f66e:	4b14      	ldr	r3, [pc, #80]	; (800f6c0 <prvHeapInit+0xb4>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2200      	movs	r2, #0
 800f674:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f676:	4b12      	ldr	r3, [pc, #72]	; (800f6c0 <prvHeapInit+0xb4>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2200      	movs	r2, #0
 800f67c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	1ad2      	subs	r2, r2, r3
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f68c:	4b0c      	ldr	r3, [pc, #48]	; (800f6c0 <prvHeapInit+0xb4>)
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	4a0a      	ldr	r2, [pc, #40]	; (800f6c4 <prvHeapInit+0xb8>)
 800f69a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	4a09      	ldr	r2, [pc, #36]	; (800f6c8 <prvHeapInit+0xbc>)
 800f6a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6a4:	4b09      	ldr	r3, [pc, #36]	; (800f6cc <prvHeapInit+0xc0>)
 800f6a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f6aa:	601a      	str	r2, [r3, #0]
}
 800f6ac:	bf00      	nop
 800f6ae:	3714      	adds	r7, #20
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	20000708 	.word	0x20000708
 800f6bc:	20007f08 	.word	0x20007f08
 800f6c0:	20007f10 	.word	0x20007f10
 800f6c4:	20007f18 	.word	0x20007f18
 800f6c8:	20007f14 	.word	0x20007f14
 800f6cc:	20007f1c 	.word	0x20007f1c

0800f6d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6d8:	4b28      	ldr	r3, [pc, #160]	; (800f77c <prvInsertBlockIntoFreeList+0xac>)
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e002      	b.n	800f6e4 <prvInsertBlockIntoFreeList+0x14>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	60fb      	str	r3, [r7, #12]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d8f7      	bhi.n	800f6de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d108      	bne.n	800f712 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	685a      	ldr	r2, [r3, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	441a      	add	r2, r3
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	441a      	add	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	429a      	cmp	r2, r3
 800f724:	d118      	bne.n	800f758 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	4b15      	ldr	r3, [pc, #84]	; (800f780 <prvInsertBlockIntoFreeList+0xb0>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d00d      	beq.n	800f74e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	441a      	add	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	601a      	str	r2, [r3, #0]
 800f74c:	e008      	b.n	800f760 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f74e:	4b0c      	ldr	r3, [pc, #48]	; (800f780 <prvInsertBlockIntoFreeList+0xb0>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	601a      	str	r2, [r3, #0]
 800f756:	e003      	b.n	800f760 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f760:	68fa      	ldr	r2, [r7, #12]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	429a      	cmp	r2, r3
 800f766:	d002      	beq.n	800f76e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f76e:	bf00      	nop
 800f770:	3714      	adds	r7, #20
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop
 800f77c:	20007f08 	.word	0x20007f08
 800f780:	20007f10 	.word	0x20007f10

0800f784 <__libc_init_array>:
 800f784:	b570      	push	{r4, r5, r6, lr}
 800f786:	4d0d      	ldr	r5, [pc, #52]	; (800f7bc <__libc_init_array+0x38>)
 800f788:	4c0d      	ldr	r4, [pc, #52]	; (800f7c0 <__libc_init_array+0x3c>)
 800f78a:	1b64      	subs	r4, r4, r5
 800f78c:	10a4      	asrs	r4, r4, #2
 800f78e:	2600      	movs	r6, #0
 800f790:	42a6      	cmp	r6, r4
 800f792:	d109      	bne.n	800f7a8 <__libc_init_array+0x24>
 800f794:	4d0b      	ldr	r5, [pc, #44]	; (800f7c4 <__libc_init_array+0x40>)
 800f796:	4c0c      	ldr	r4, [pc, #48]	; (800f7c8 <__libc_init_array+0x44>)
 800f798:	f000 f8f6 	bl	800f988 <_init>
 800f79c:	1b64      	subs	r4, r4, r5
 800f79e:	10a4      	asrs	r4, r4, #2
 800f7a0:	2600      	movs	r6, #0
 800f7a2:	42a6      	cmp	r6, r4
 800f7a4:	d105      	bne.n	800f7b2 <__libc_init_array+0x2e>
 800f7a6:	bd70      	pop	{r4, r5, r6, pc}
 800f7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7ac:	4798      	blx	r3
 800f7ae:	3601      	adds	r6, #1
 800f7b0:	e7ee      	b.n	800f790 <__libc_init_array+0xc>
 800f7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7b6:	4798      	blx	r3
 800f7b8:	3601      	adds	r6, #1
 800f7ba:	e7f2      	b.n	800f7a2 <__libc_init_array+0x1e>
 800f7bc:	08035d28 	.word	0x08035d28
 800f7c0:	08035d28 	.word	0x08035d28
 800f7c4:	08035d28 	.word	0x08035d28
 800f7c8:	08035d2c 	.word	0x08035d2c

0800f7cc <__retarget_lock_acquire_recursive>:
 800f7cc:	4770      	bx	lr

0800f7ce <__retarget_lock_release_recursive>:
 800f7ce:	4770      	bx	lr

0800f7d0 <memcpy>:
 800f7d0:	440a      	add	r2, r1
 800f7d2:	4291      	cmp	r1, r2
 800f7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7d8:	d100      	bne.n	800f7dc <memcpy+0xc>
 800f7da:	4770      	bx	lr
 800f7dc:	b510      	push	{r4, lr}
 800f7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7e6:	4291      	cmp	r1, r2
 800f7e8:	d1f9      	bne.n	800f7de <memcpy+0xe>
 800f7ea:	bd10      	pop	{r4, pc}

0800f7ec <memset>:
 800f7ec:	4402      	add	r2, r0
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d100      	bne.n	800f7f6 <memset+0xa>
 800f7f4:	4770      	bx	lr
 800f7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f7fa:	e7f9      	b.n	800f7f0 <memset+0x4>

0800f7fc <cleanup_glue>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	460c      	mov	r4, r1
 800f800:	6809      	ldr	r1, [r1, #0]
 800f802:	4605      	mov	r5, r0
 800f804:	b109      	cbz	r1, 800f80a <cleanup_glue+0xe>
 800f806:	f7ff fff9 	bl	800f7fc <cleanup_glue>
 800f80a:	4621      	mov	r1, r4
 800f80c:	4628      	mov	r0, r5
 800f80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f812:	f000 b869 	b.w	800f8e8 <_free_r>
	...

0800f818 <_reclaim_reent>:
 800f818:	4b2c      	ldr	r3, [pc, #176]	; (800f8cc <_reclaim_reent+0xb4>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4283      	cmp	r3, r0
 800f81e:	b570      	push	{r4, r5, r6, lr}
 800f820:	4604      	mov	r4, r0
 800f822:	d051      	beq.n	800f8c8 <_reclaim_reent+0xb0>
 800f824:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f826:	b143      	cbz	r3, 800f83a <_reclaim_reent+0x22>
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d14a      	bne.n	800f8c4 <_reclaim_reent+0xac>
 800f82e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f830:	6819      	ldr	r1, [r3, #0]
 800f832:	b111      	cbz	r1, 800f83a <_reclaim_reent+0x22>
 800f834:	4620      	mov	r0, r4
 800f836:	f000 f857 	bl	800f8e8 <_free_r>
 800f83a:	6961      	ldr	r1, [r4, #20]
 800f83c:	b111      	cbz	r1, 800f844 <_reclaim_reent+0x2c>
 800f83e:	4620      	mov	r0, r4
 800f840:	f000 f852 	bl	800f8e8 <_free_r>
 800f844:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f846:	b111      	cbz	r1, 800f84e <_reclaim_reent+0x36>
 800f848:	4620      	mov	r0, r4
 800f84a:	f000 f84d 	bl	800f8e8 <_free_r>
 800f84e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f850:	b111      	cbz	r1, 800f858 <_reclaim_reent+0x40>
 800f852:	4620      	mov	r0, r4
 800f854:	f000 f848 	bl	800f8e8 <_free_r>
 800f858:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f85a:	b111      	cbz	r1, 800f862 <_reclaim_reent+0x4a>
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 f843 	bl	800f8e8 <_free_r>
 800f862:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f864:	b111      	cbz	r1, 800f86c <_reclaim_reent+0x54>
 800f866:	4620      	mov	r0, r4
 800f868:	f000 f83e 	bl	800f8e8 <_free_r>
 800f86c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f86e:	b111      	cbz	r1, 800f876 <_reclaim_reent+0x5e>
 800f870:	4620      	mov	r0, r4
 800f872:	f000 f839 	bl	800f8e8 <_free_r>
 800f876:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f878:	b111      	cbz	r1, 800f880 <_reclaim_reent+0x68>
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 f834 	bl	800f8e8 <_free_r>
 800f880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f882:	b111      	cbz	r1, 800f88a <_reclaim_reent+0x72>
 800f884:	4620      	mov	r0, r4
 800f886:	f000 f82f 	bl	800f8e8 <_free_r>
 800f88a:	69a3      	ldr	r3, [r4, #24]
 800f88c:	b1e3      	cbz	r3, 800f8c8 <_reclaim_reent+0xb0>
 800f88e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f890:	4620      	mov	r0, r4
 800f892:	4798      	blx	r3
 800f894:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f896:	b1b9      	cbz	r1, 800f8c8 <_reclaim_reent+0xb0>
 800f898:	4620      	mov	r0, r4
 800f89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f89e:	f7ff bfad 	b.w	800f7fc <cleanup_glue>
 800f8a2:	5949      	ldr	r1, [r1, r5]
 800f8a4:	b941      	cbnz	r1, 800f8b8 <_reclaim_reent+0xa0>
 800f8a6:	3504      	adds	r5, #4
 800f8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8aa:	2d80      	cmp	r5, #128	; 0x80
 800f8ac:	68d9      	ldr	r1, [r3, #12]
 800f8ae:	d1f8      	bne.n	800f8a2 <_reclaim_reent+0x8a>
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 f819 	bl	800f8e8 <_free_r>
 800f8b6:	e7ba      	b.n	800f82e <_reclaim_reent+0x16>
 800f8b8:	680e      	ldr	r6, [r1, #0]
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f000 f814 	bl	800f8e8 <_free_r>
 800f8c0:	4631      	mov	r1, r6
 800f8c2:	e7ef      	b.n	800f8a4 <_reclaim_reent+0x8c>
 800f8c4:	2500      	movs	r5, #0
 800f8c6:	e7ef      	b.n	800f8a8 <_reclaim_reent+0x90>
 800f8c8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20000050 	.word	0x20000050

0800f8d0 <__malloc_lock>:
 800f8d0:	4801      	ldr	r0, [pc, #4]	; (800f8d8 <__malloc_lock+0x8>)
 800f8d2:	f7ff bf7b 	b.w	800f7cc <__retarget_lock_acquire_recursive>
 800f8d6:	bf00      	nop
 800f8d8:	20008ed8 	.word	0x20008ed8

0800f8dc <__malloc_unlock>:
 800f8dc:	4801      	ldr	r0, [pc, #4]	; (800f8e4 <__malloc_unlock+0x8>)
 800f8de:	f7ff bf76 	b.w	800f7ce <__retarget_lock_release_recursive>
 800f8e2:	bf00      	nop
 800f8e4:	20008ed8 	.word	0x20008ed8

0800f8e8 <_free_r>:
 800f8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ea:	2900      	cmp	r1, #0
 800f8ec:	d048      	beq.n	800f980 <_free_r+0x98>
 800f8ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8f2:	9001      	str	r0, [sp, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f8fa:	bfb8      	it	lt
 800f8fc:	18e4      	addlt	r4, r4, r3
 800f8fe:	f7ff ffe7 	bl	800f8d0 <__malloc_lock>
 800f902:	4a20      	ldr	r2, [pc, #128]	; (800f984 <_free_r+0x9c>)
 800f904:	9801      	ldr	r0, [sp, #4]
 800f906:	6813      	ldr	r3, [r2, #0]
 800f908:	4615      	mov	r5, r2
 800f90a:	b933      	cbnz	r3, 800f91a <_free_r+0x32>
 800f90c:	6063      	str	r3, [r4, #4]
 800f90e:	6014      	str	r4, [r2, #0]
 800f910:	b003      	add	sp, #12
 800f912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f916:	f7ff bfe1 	b.w	800f8dc <__malloc_unlock>
 800f91a:	42a3      	cmp	r3, r4
 800f91c:	d90b      	bls.n	800f936 <_free_r+0x4e>
 800f91e:	6821      	ldr	r1, [r4, #0]
 800f920:	1862      	adds	r2, r4, r1
 800f922:	4293      	cmp	r3, r2
 800f924:	bf04      	itt	eq
 800f926:	681a      	ldreq	r2, [r3, #0]
 800f928:	685b      	ldreq	r3, [r3, #4]
 800f92a:	6063      	str	r3, [r4, #4]
 800f92c:	bf04      	itt	eq
 800f92e:	1852      	addeq	r2, r2, r1
 800f930:	6022      	streq	r2, [r4, #0]
 800f932:	602c      	str	r4, [r5, #0]
 800f934:	e7ec      	b.n	800f910 <_free_r+0x28>
 800f936:	461a      	mov	r2, r3
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	b10b      	cbz	r3, 800f940 <_free_r+0x58>
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	d9fa      	bls.n	800f936 <_free_r+0x4e>
 800f940:	6811      	ldr	r1, [r2, #0]
 800f942:	1855      	adds	r5, r2, r1
 800f944:	42a5      	cmp	r5, r4
 800f946:	d10b      	bne.n	800f960 <_free_r+0x78>
 800f948:	6824      	ldr	r4, [r4, #0]
 800f94a:	4421      	add	r1, r4
 800f94c:	1854      	adds	r4, r2, r1
 800f94e:	42a3      	cmp	r3, r4
 800f950:	6011      	str	r1, [r2, #0]
 800f952:	d1dd      	bne.n	800f910 <_free_r+0x28>
 800f954:	681c      	ldr	r4, [r3, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	6053      	str	r3, [r2, #4]
 800f95a:	4421      	add	r1, r4
 800f95c:	6011      	str	r1, [r2, #0]
 800f95e:	e7d7      	b.n	800f910 <_free_r+0x28>
 800f960:	d902      	bls.n	800f968 <_free_r+0x80>
 800f962:	230c      	movs	r3, #12
 800f964:	6003      	str	r3, [r0, #0]
 800f966:	e7d3      	b.n	800f910 <_free_r+0x28>
 800f968:	6825      	ldr	r5, [r4, #0]
 800f96a:	1961      	adds	r1, r4, r5
 800f96c:	428b      	cmp	r3, r1
 800f96e:	bf04      	itt	eq
 800f970:	6819      	ldreq	r1, [r3, #0]
 800f972:	685b      	ldreq	r3, [r3, #4]
 800f974:	6063      	str	r3, [r4, #4]
 800f976:	bf04      	itt	eq
 800f978:	1949      	addeq	r1, r1, r5
 800f97a:	6021      	streq	r1, [r4, #0]
 800f97c:	6054      	str	r4, [r2, #4]
 800f97e:	e7c7      	b.n	800f910 <_free_r+0x28>
 800f980:	b003      	add	sp, #12
 800f982:	bd30      	pop	{r4, r5, pc}
 800f984:	20007f20 	.word	0x20007f20

0800f988 <_init>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	bf00      	nop
 800f98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f98e:	bc08      	pop	{r3}
 800f990:	469e      	mov	lr, r3
 800f992:	4770      	bx	lr

0800f994 <_fini>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	bf00      	nop
 800f998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f99a:	bc08      	pop	{r3}
 800f99c:	469e      	mov	lr, r3
 800f99e:	4770      	bx	lr
