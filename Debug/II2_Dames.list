
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c840  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002624c  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032c5c  08032c5c  000500b0  2**0
                  CONTENTS
  4 .ARM          00000008  08032c5c  08032c5c  00042c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032c64  08032c64  000500b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032c64  08032c64  00042c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08032c68  08032c68  00042c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08032c6c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085b8  200000b0  08032d1c  000500b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008668  08032d1c  00058668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000329ad  00000000  00000000  000500e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d24  00000000  00000000  00082a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002648  00000000  00000000  000887b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023f0  00000000  00000000  0008ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e861  00000000  00000000  0008d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f478  00000000  00000000  000bba51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117861  00000000  00000000  000eaec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020272a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5a0  00000000  00000000  00202780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9f8 	.word	0x0800c9f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800c9f8 	.word	0x0800c9f8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000cc 	.word	0x200000cc
 8000538:	20000180 	.word	0x20000180

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f001 fdb6 	bl	80020b8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 f9b4 	bl	80008b8 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 f998 	bl	80008b8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fd71 	bl	800207c <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f97e 	bl	80008d8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fd3b 	bl	800207c <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000380 	.word	0x20000380

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fc88 	bl	800207c <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fc7a 	bl	800207c <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fc5f 	bl	800207c <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fc51 	bl	800207c <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000380 	.word	0x20000380
 800081c:	20000384 	.word	0x20000384

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fc04 	bl	8002048 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fbf0 	bl	8002048 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000380 	.word	0x20000380

080008b8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008bc:	f7ff fff0 	bl	80008a0 <ft5336_Get_I2C_InitializedStatus>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d104      	bne.n	80008d0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008c6:	f001 fbb5 	bl	8002034 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008ca:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
  }
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000380 	.word	0x20000380

080008d8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	b092      	sub	sp, #72	; 0x48
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//static TS_StateTypeDef  TS_State;
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800090c:	2300      	movs	r3, #0
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f003 f981 	bl	8003c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f8b0 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 fe78 	bl	800160c <MX_GPIO_Init>
  MX_ADC3_Init();
 800091c:	f000 f970 	bl	8000c00 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000920:	f000 f9ea 	bl	8000cf8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000924:	f000 fe22 	bl	800156c <MX_FMC_Init>
  MX_I2C1_Init();
 8000928:	f000 fa18 	bl	8000d5c <MX_I2C1_Init>
  MX_I2C3_Init();
 800092c:	f000 fa56 	bl	8000ddc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000930:	f000 fa94 	bl	8000e5c <MX_LTDC_Init>
  MX_RTC_Init();
 8000934:	f000 fb14 	bl	8000f60 <MX_RTC_Init>
  MX_SPI2_Init();
 8000938:	f000 fbb8 	bl	80010ac <MX_SPI2_Init>
  MX_TIM1_Init();
 800093c:	f000 fbf4 	bl	8001128 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000940:	f000 fc46 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000944:	f000 fc92 	bl	800126c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000948:	f000 fcde 	bl	8001308 <MX_TIM5_Init>
  MX_TIM8_Init();
 800094c:	f000 fd2a 	bl	80013a4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000950:	f000 fdac 	bl	80014ac <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000954:	f000 fdda 	bl	800150c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000958:	f000 f900 	bl	8000b5c <MX_ADC1_Init>
  MX_DAC_Init();
 800095c:	f000 f9a2 	bl	8000ca4 <MX_DAC_Init>
  MX_UART7_Init();
 8000960:	f000 fd74 	bl	800144c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000964:	f001 fbb4 	bl	80020d0 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000968:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800096c:	2000      	movs	r0, #0
 800096e:	f001 fc47 	bl	8002200 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000972:	f001 fc1d 	bl	80021b0 <BSP_LCD_GetXSize>
 8000976:	4604      	mov	r4, r0
 8000978:	f001 fc2e 	bl	80021d8 <BSP_LCD_GetYSize>
 800097c:	4603      	mov	r3, r0
 800097e:	fb03 f304 	mul.w	r3, r3, r4
 8000982:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4619      	mov	r1, r3
 800098a:	2001      	movs	r0, #1
 800098c:	f001 fc38 	bl	8002200 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000990:	f001 fefe 	bl	8002790 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000994:	2000      	movs	r0, #0
 8000996:	f001 fc93 	bl	80022c0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800099a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800099e:	f001 fceb 	bl	8002378 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <main+0x160>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f001 fe40 	bl	800262c <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f001 fc87 	bl	80022c0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f001 fce0 	bl	8002378 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 80009b8:	4827      	ldr	r0, [pc, #156]	; (8000a58 <main+0x164>)
 80009ba:	f001 fcc3 	bl	8002344 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009be:	f04f 30ff 	mov.w	r0, #4294967295
 80009c2:	f001 fc8d 	bl	80022e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80009c6:	4825      	ldr	r0, [pc, #148]	; (8000a5c <main+0x168>)
 80009c8:	f001 fca2 	bl	8002310 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009cc:	f001 fbf0 	bl	80021b0 <BSP_LCD_GetXSize>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29c      	uxth	r4, r3
 80009d4:	f001 fc00 	bl	80021d8 <BSP_LCD_GetYSize>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	4620      	mov	r0, r4
 80009e0:	f002 fa30 	bl	8002e44 <BSP_TS_Init>


	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 80009e4:	2306      	movs	r3, #6
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80009e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ec:	4619      	mov	r1, r3
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <main+0x16c>)
 80009f0:	f003 fa74 	bl	8003edc <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <main+0x16c>)
 80009f6:	f003 f9a3 	bl	8003d40 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 80009fa:	2001      	movs	r0, #1
 80009fc:	f009 febd 	bl	800a77a <xQueueCreateMutex>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <main+0x170>)
 8000a04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityAboveNormal, 0, 1024);
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <main+0x174>)
 8000a08:	f107 041c 	add.w	r4, r7, #28
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f009 fcc4 	bl	800a3ae <osThreadCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <main+0x178>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <main+0x17c>)
 8000a2e:	463c      	mov	r4, r7
 8000a30:	461d      	mov	r5, r3
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f009 fcb3 	bl	800a3ae <osThreadCreate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <main+0x180>)
 8000a4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a4e:	f009 fca7 	bl	800a3a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x15e>
 8000a54:	0800ca68 	.word	0x0800ca68
 8000a58:	20000030 	.word	0x20000030
 8000a5c:	ff0000ff 	.word	0xff0000ff
 8000a60:	2000824c 	.word	0x2000824c
 8000a64:	20008318 	.word	0x20008318
 8000a68:	0800ca28 	.word	0x0800ca28
 8000a6c:	20007fd4 	.word	0x20007fd4
 8000a70:	0800ca44 	.word	0x0800ca44
 8000a74:	20008248 	.word	0x20008248

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00b fee8 	bl	800c85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9c:	f006 f8b8 	bl	8006c10 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <SystemClock_Config+0xe0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <SystemClock_Config+0xe0>)
 8000abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <SystemClock_Config+0xe0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae8:	2319      	movs	r3, #25
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000aec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000af6:	2309      	movs	r3, #9
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 f8e6 	bl	8006cd0 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0a:	f001 f937 	bl	8001d7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b0e:	f006 f88f 	bl	8006c30 <HAL_PWREx_EnableOverDrive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b18:	f001 f930 	bl	8001d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2106      	movs	r1, #6
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fb6c 	bl	8007218 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b46:	f001 f919 	bl	8001d7c <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x9c>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <MX_ADC1_Init+0xa0>)
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bbe:	f003 f87b 	bl	8003cb8 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f001 f8d8 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bde:	f003 f97d 	bl	8003edc <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000be8:	f001 f8c8 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20008200 	.word	0x20008200
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	0f000001 	.word	0x0f000001

08000c00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <MX_ADC3_Init+0x9c>)
 8000c16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <MX_ADC3_Init+0xa0>)
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c62:	f003 f829 	bl	8003cb8 <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f001 f886 	bl	8001d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c70:	2306      	movs	r3, #6
 8000c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c82:	f003 f92b 	bl	8003edc <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c8c:	f001 f876 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000824c 	.word	0x2000824c
 8000c9c:	40012200 	.word	0x40012200
 8000ca0:	0f000001 	.word	0x0f000001

08000ca4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_DAC_Init+0x4c>)
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <MX_DAC_Init+0x50>)
 8000cb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_DAC_Init+0x4c>)
 8000cba:	f003 fc41 	bl	8004540 <HAL_DAC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000cc4:	f001 f85a 	bl	8001d7c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_DAC_Init+0x4c>)
 8000cd8:	f003 fcb8 	bl	800464c <HAL_DAC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ce2:	f001 f84b 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000831c 	.word	0x2000831c
 8000cf4:	40007400 	.word	0x40007400

08000cf8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <MX_DMA2D_Init+0x60>)
 8000d00:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d2e:	f003 ff37 	bl	8004ba0 <HAL_DMA2D_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d38:	f001 f820 	bl	8001d7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d40:	f004 f99c 	bl	800507c <HAL_DMA2D_ConfigLayer>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d4a:	f001 f817 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20008420 	.word	0x20008420
 8000d58:	4002b000 	.word	0x4002b000

08000d5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <MX_I2C1_Init+0x78>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <MX_I2C1_Init+0x7c>)
 8000d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d98:	f004 fd88 	bl	80058ac <HAL_I2C_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000da2:	f000 ffeb 	bl	8001d7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000daa:	f005 fb21 	bl	80063f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db4:	f000 ffe2 	bl	8001d7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000dbc:	f005 fb63 	bl	8006486 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 ffd9 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20008024 	.word	0x20008024
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	00c0eaff 	.word	0x00c0eaff

08000ddc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C3_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C3_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e18:	f004 fd48 	bl	80058ac <HAL_I2C_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e22:	f000 ffab 	bl	8001d7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e2a:	f005 fae1 	bl	80063f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 ffa2 	bl	8001d7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e3c:	f005 fb23 	bl	8006486 <HAL_I2CEx_ConfigDigitalFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 ff99 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20007ea0 	.word	0x20007ea0
 8000e54:	40005c00 	.word	0x40005c00
 8000e58:	00c0eaff 	.word	0x00c0eaff

08000e5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2234      	movs	r2, #52	; 0x34
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00b fcf7 	bl	800c85c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e70:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <MX_LTDC_Init+0x100>)
 8000e72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e94:	2209      	movs	r2, #9
 8000e96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e9a:	2235      	movs	r2, #53	; 0x35
 8000e9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ea0:	220b      	movs	r2, #11
 8000ea2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ea6:	f240 2215 	movw	r2, #533	; 0x215
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000eae:	f240 121b 	movw	r2, #283	; 0x11b
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000eb6:	f240 2235 	movw	r2, #565	; 0x235
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ebe:	f240 121d 	movw	r2, #285	; 0x11d
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ede:	f005 fb1f 	bl	8006520 <HAL_LTDC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ee8:	f000 ff48 	bl	8001d7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ef0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ef4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000efa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000efe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f00:	2302      	movs	r3, #2
 8000f02:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f04:	23ff      	movs	r3, #255	; 0xff
 8000f06:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f10:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000f42:	f005 fc7f 	bl	8006844 <HAL_LTDC_ConfigLayer>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000f4c:	f000 ff16 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20008158 	.word	0x20008158
 8000f5c:	40016800 	.word	0x40016800

08000f60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00b fc6a 	bl	800c85c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f8a:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <MX_RTC_Init+0x148>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f96:	227f      	movs	r2, #127	; 0x7f
 8000f98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f9a:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fb2:	483c      	ldr	r0, [pc, #240]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fb4:	f006 ff28 	bl	8007e08 <HAL_RTC_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000fbe:	f000 fedd 	bl	8001d7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482f      	ldr	r0, [pc, #188]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fe6:	f006 ffa1 	bl	8007f2c <HAL_RTC_SetTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000ff0:	f000 fec4 	bl	8001d7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001000:	2301      	movs	r3, #1
 8001002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	; (80010a4 <MX_RTC_Init+0x144>)
 8001016:	f007 f847 	bl	80080a8 <HAL_RTC_SetDate>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001020:	f000 feac 	bl	8001d7c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001024:	2300      	movs	r3, #0
 8001026:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001028:	2300      	movs	r3, #0
 800102a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800102c:	2300      	movs	r3, #0
 800102e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <MX_RTC_Init+0x144>)
 800105c:	f007 f8cc 	bl	80081f8 <HAL_RTC_SetAlarm>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001066:	f000 fe89 	bl	8001d7c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800106a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MX_RTC_Init+0x144>)
 8001078:	f007 f8be 	bl	80081f8 <HAL_RTC_SetAlarm>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001082:	f000 fe7b 	bl	8001d7c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001086:	2202      	movs	r2, #2
 8001088:	2100      	movs	r1, #0
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_RTC_Init+0x144>)
 800108c:	f007 fa3e 	bl	800850c <HAL_RTCEx_SetTimeStamp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001096:	f000 fe71 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3748      	adds	r7, #72	; 0x48
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20008330 	.word	0x20008330
 80010a8:	40002800 	.word	0x40002800

080010ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_SPI2_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_SPI2_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_SPI2_Init+0x74>)
 80010b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_SPI2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI2_Init+0x74>)
 80010c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_SPI2_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI2_Init+0x74>)
 80010da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI2_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI2_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_SPI2_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI2_Init+0x74>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_SPI2_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI2_Init+0x74>)
 8001106:	2208      	movs	r2, #8
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_SPI2_Init+0x74>)
 800110c:	f007 fae5 	bl	80086da <HAL_SPI_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fe31 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20007eec 	.word	0x20007eec
 8001124:	40003800 	.word	0x40003800

08001128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_TIM1_Init+0xa4>)
 800114a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800115a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001174:	f007 fb5c 	bl	8008830 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800117e:	f000 fdfd 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001190:	f007 fd3e 	bl	8008c10 <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800119a:	f000 fdef 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0xa0>)
 80011b0:	f007 ff5a 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ba:	f000 fddf 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20008350 	.word	0x20008350
 80011cc:	40010000 	.word	0x40010000

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM2_Init+0x98>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM2_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM2_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM2_Init+0x98>)
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_TIM2_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_TIM2_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_TIM2_Init+0x98>)
 8001218:	f007 fb0a 	bl	8008830 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001222:	f000 fdab 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_TIM2_Init+0x98>)
 8001234:	f007 fcec 	bl	8008c10 <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800123e:	f000 fd9d 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM2_Init+0x98>)
 8001250:	f007 ff0a 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800125a:	f000 fd8f 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20008460 	.word	0x20008460

0800126c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM3_Init+0x94>)
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_TIM3_Init+0x98>)
 800128e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM3_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM3_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM3_Init+0x94>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM3_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM3_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM3_Init+0x94>)
 80012b2:	f007 fabd 	bl	8008830 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012bc:	f000 fd5e 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM3_Init+0x94>)
 80012ce:	f007 fc9f 	bl	8008c10 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 fd50 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM3_Init+0x94>)
 80012ea:	f007 febd 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 fd42 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000810c 	.word	0x2000810c
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM5_Init+0x94>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <MX_TIM5_Init+0x98>)
 800132a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM5_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM5_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM5_Init+0x94>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM5_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM5_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM5_Init+0x94>)
 800134e:	f007 fa6f 	bl	8008830 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 fd10 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM5_Init+0x94>)
 800136a:	f007 fc51 	bl	8008c10 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 fd02 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM5_Init+0x94>)
 8001386:	f007 fe6f 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fcf4 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20008070 	.word	0x20008070
 80013a0:	40000c00 	.word	0x40000c00

080013a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <MX_TIM8_Init+0xa4>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013ee:	4815      	ldr	r0, [pc, #84]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013f0:	f007 fa1e 	bl	8008830 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80013fa:	f000 fcbf 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <MX_TIM8_Init+0xa0>)
 800140c:	f007 fc00 	bl	8008c10 <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001416:	f000 fcb1 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM8_Init+0xa0>)
 800142c:	f007 fe1c 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001436:	f000 fca1 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20007fd8 	.word	0x20007fd8
 8001448:	40010400 	.word	0x40010400

0800144c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_UART7_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_UART7_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_UART7_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_UART7_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_UART7_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_UART7_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_UART7_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_UART7_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_UART7_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_UART7_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_UART7_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_UART7_Init+0x58>)
 8001490:	f007 fe96 	bl	80091c0 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 fc6f 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20007f50 	.word	0x20007f50
 80014a8:	40007800 	.word	0x40007800

080014ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <MX_USART1_UART_Init+0x5c>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014f0:	f007 fe66 	bl	80091c0 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014fa:	f000 fc3f 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20008294 	.word	0x20008294
 8001508:	40011000 	.word	0x40011000

0800150c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <MX_USART6_UART_Init+0x5c>)
 8001514:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART6_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART6_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART6_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001550:	f007 fe36 	bl	80091c0 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800155a:	f000 fc0f 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000839c 	.word	0x2000839c
 8001568:	40011400 	.word	0x40011400

0800156c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_FMC_Init+0x98>)
 8001586:	4a20      	ldr	r2, [pc, #128]	; (8001608 <MX_FMC_Init+0x9c>)
 8001588:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_FMC_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_FMC_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_FMC_Init+0x98>)
 8001598:	2204      	movs	r2, #4
 800159a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_FMC_Init+0x98>)
 800159e:	2210      	movs	r2, #16
 80015a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_FMC_Init+0x98>)
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_FMC_Init+0x98>)
 80015aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_FMC_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_FMC_Init+0x98>)
 80015b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_FMC_Init+0x98>)
 80015c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_FMC_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015d0:	2307      	movs	r3, #7
 80015d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80015d8:	2307      	movs	r3, #7
 80015da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80015dc:	2303      	movs	r3, #3
 80015de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_FMC_Init+0x98>)
 80015ee:	f006 ffe3 	bl	80085b8 <HAL_SDRAM_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80015f8:	f000 fbc0 	bl	8001d7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200084fc 	.word	0x200084fc
 8001608:	a0000140 	.word	0xa0000140

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	; 0x40
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	4bae      	ldr	r3, [pc, #696]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4aad      	ldr	r2, [pc, #692]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4bab      	ldr	r3, [pc, #684]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163a:	4ba8      	ldr	r3, [pc, #672]	; (80018dc <MX_GPIO_Init+0x2d0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4aa7      	ldr	r2, [pc, #668]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4ba5      	ldr	r3, [pc, #660]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4ba2      	ldr	r3, [pc, #648]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4aa1      	ldr	r2, [pc, #644]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b9f      	ldr	r3, [pc, #636]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	623b      	str	r3, [r7, #32]
 8001668:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	4b9c      	ldr	r3, [pc, #624]	; (80018dc <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a9b      	ldr	r2, [pc, #620]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b99      	ldr	r3, [pc, #612]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b96      	ldr	r3, [pc, #600]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a95      	ldr	r2, [pc, #596]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b93      	ldr	r3, [pc, #588]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b90      	ldr	r3, [pc, #576]	; (80018dc <MX_GPIO_Init+0x2d0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a8f      	ldr	r2, [pc, #572]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b8d      	ldr	r3, [pc, #564]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016b2:	4b8a      	ldr	r3, [pc, #552]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a89      	ldr	r2, [pc, #548]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b87      	ldr	r3, [pc, #540]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ca:	4b84      	ldr	r3, [pc, #528]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a83      	ldr	r2, [pc, #524]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016e2:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a7d      	ldr	r2, [pc, #500]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b78      	ldr	r3, [pc, #480]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a77      	ldr	r2, [pc, #476]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2160      	movs	r1, #96	; 0x60
 800172e:	486c      	ldr	r0, [pc, #432]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 8001730:	f004 f88a 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2120      	movs	r1, #32
 8001738:	486a      	ldr	r0, [pc, #424]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 800173a:	f004 f885 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2108      	movs	r1, #8
 8001742:	4868      	ldr	r0, [pc, #416]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 8001744:	f004 f880 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2108      	movs	r1, #8
 800174c:	4866      	ldr	r0, [pc, #408]	; (80018e8 <MX_GPIO_Init+0x2dc>)
 800174e:	f004 f87b 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001758:	4864      	ldr	r0, [pc, #400]	; (80018ec <MX_GPIO_Init+0x2e0>)
 800175a:	f004 f875 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800175e:	2200      	movs	r2, #0
 8001760:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001764:	4862      	ldr	r0, [pc, #392]	; (80018f0 <MX_GPIO_Init+0x2e4>)
 8001766:	f004 f86f 	bl	8005848 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	21c8      	movs	r1, #200	; 0xc8
 800176e:	4861      	ldr	r0, [pc, #388]	; (80018f4 <MX_GPIO_Init+0x2e8>)
 8001770:	f004 f86a 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001774:	2308      	movs	r3, #8
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	4856      	ldr	r0, [pc, #344]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 8001788:	f003 fda6 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800178c:	2304      	movs	r3, #4
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800179c:	2309      	movs	r3, #9
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	484e      	ldr	r0, [pc, #312]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 80017a8:	f003 fd96 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80017ac:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017be:	230b      	movs	r3, #11
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	484a      	ldr	r0, [pc, #296]	; (80018f4 <MX_GPIO_Init+0x2e8>)
 80017ca:	f003 fd85 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80017ce:	f643 0323 	movw	r3, #14371	; 0x3823
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017e0:	230a      	movs	r3, #10
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4843      	ldr	r0, [pc, #268]	; (80018f8 <MX_GPIO_Init+0x2ec>)
 80017ec:	f003 fd74 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001800:	2308      	movs	r3, #8
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4836      	ldr	r0, [pc, #216]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 800180c:	f003 fd64 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001810:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001822:	230c      	movs	r3, #12
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	4833      	ldr	r0, [pc, #204]	; (80018fc <MX_GPIO_Init+0x2f0>)
 800182e:	f003 fd53 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001832:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4619      	mov	r1, r3
 8001848:	482d      	ldr	r0, [pc, #180]	; (8001900 <MX_GPIO_Init+0x2f4>)
 800184a:	f003 fd45 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800184e:	2360      	movs	r3, #96	; 0x60
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 8001866:	f003 fd37 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800187a:	230a      	movs	r3, #10
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	481c      	ldr	r0, [pc, #112]	; (80018f8 <MX_GPIO_Init+0x2ec>)
 8001886:	f003 fd27 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	4819      	ldr	r0, [pc, #100]	; (8001904 <MX_GPIO_Init+0x2f8>)
 80018a0:	f003 fd1a 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	480a      	ldr	r0, [pc, #40]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 80018ba:	f003 fd0d 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80018be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d0:	230a      	movs	r3, #10
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	e015      	b.n	8001908 <MX_GPIO_Init+0x2fc>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40022800 	.word	0x40022800
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40022400 	.word	0x40022400
 8001908:	48a6      	ldr	r0, [pc, #664]	; (8001ba4 <MX_GPIO_Init+0x598>)
 800190a:	f003 fce5 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800190e:	23f0      	movs	r3, #240	; 0xf0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800191e:	230a      	movs	r3, #10
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	489f      	ldr	r0, [pc, #636]	; (8001ba8 <MX_GPIO_Init+0x59c>)
 800192a:	f003 fcd5 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001940:	230a      	movs	r3, #10
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4898      	ldr	r0, [pc, #608]	; (8001bac <MX_GPIO_Init+0x5a0>)
 800194c:	f003 fcc4 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001950:	2328      	movs	r3, #40	; 0x28
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4892      	ldr	r0, [pc, #584]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 8001968:	f003 fcb6 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800196c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	488c      	ldr	r0, [pc, #560]	; (8001bb4 <MX_GPIO_Init+0x5a8>)
 8001982:	f003 fca9 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001986:	2308      	movs	r3, #8
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	4886      	ldr	r0, [pc, #536]	; (8001bb8 <MX_GPIO_Init+0x5ac>)
 800199e:	f003 fc9b 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 80019a2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	487d      	ldr	r0, [pc, #500]	; (8001bac <MX_GPIO_Init+0x5a0>)
 80019b8:	f003 fc8e 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019bc:	2310      	movs	r3, #16
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4878      	ldr	r0, [pc, #480]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 80019d0:	f003 fc82 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80019d4:	2304      	movs	r3, #4
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019e4:	230c      	movs	r3, #12
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4870      	ldr	r0, [pc, #448]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 80019f0:	f003 fc72 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80019f4:	f24a 0304 	movw	r3, #40964	; 0xa004
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	486c      	ldr	r0, [pc, #432]	; (8001bbc <MX_GPIO_Init+0x5b0>)
 8001a0a:	f003 fc65 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4860      	ldr	r0, [pc, #384]	; (8001ba8 <MX_GPIO_Init+0x59c>)
 8001a28:	f003 fc56 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a2c:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	485d      	ldr	r0, [pc, #372]	; (8001bbc <MX_GPIO_Init+0x5b0>)
 8001a46:	f003 fc47 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4851      	ldr	r0, [pc, #324]	; (8001ba8 <MX_GPIO_Init+0x59c>)
 8001a62:	f003 fc39 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a66:	2310      	movs	r3, #16
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a76:	230a      	movs	r3, #10
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	484e      	ldr	r0, [pc, #312]	; (8001bbc <MX_GPIO_Init+0x5b0>)
 8001a82:	f003 fc29 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a86:	23c8      	movs	r3, #200	; 0xc8
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4843      	ldr	r0, [pc, #268]	; (8001bac <MX_GPIO_Init+0x5a0>)
 8001a9e:	f003 fc1b 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	483d      	ldr	r0, [pc, #244]	; (8001bb4 <MX_GPIO_Init+0x5a8>)
 8001abe:	f003 fc0b 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad2:	230b      	movs	r3, #11
 8001ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4835      	ldr	r0, [pc, #212]	; (8001bb4 <MX_GPIO_Init+0x5a8>)
 8001ade:	f003 fbfb 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001af2:	2309      	movs	r3, #9
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	4830      	ldr	r0, [pc, #192]	; (8001bc0 <MX_GPIO_Init+0x5b4>)
 8001afe:	f003 fbeb 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001b02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b14:	2309      	movs	r3, #9
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4824      	ldr	r0, [pc, #144]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 8001b20:	f003 fbda 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b24:	2386      	movs	r3, #134	; 0x86
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b34:	230b      	movs	r3, #11
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4819      	ldr	r0, [pc, #100]	; (8001ba4 <MX_GPIO_Init+0x598>)
 8001b40:	f003 fbca 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_GPIO_Init+0x598>)
 8001b58:	f003 fbbe 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b5c:	2328      	movs	r3, #40	; 0x28
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <MX_GPIO_Init+0x598>)
 8001b78:	f003 fbae 	bl	80052d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2017      	movs	r0, #23
 8001b82:	f002 fcb3 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b86:	2017      	movs	r0, #23
 8001b88:	f002 fccc 	bl	8004524 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2105      	movs	r1, #5
 8001b90:	2028      	movs	r0, #40	; 0x28
 8001b92:	f002 fcab 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b96:	2028      	movs	r0, #40	; 0x28
 8001b98:	f002 fcc4 	bl	8004524 <HAL_NVIC_EnableIRQ>

}
 8001b9c:	bf00      	nop
 8001b9e:	3740      	adds	r7, #64	; 0x40
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40022800 	.word	0x40022800
 8001bbc:	40021c00 	.word	0x40021c00
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
	//Message[0] = GPIO_Pin;
	//BP2 32758, BP1 256
	//HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
	//xQueueSendFromISR(myQueueBPHandle, &Message, 0);

}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 8001be4:	2314      	movs	r3, #20
 8001be6:	613b      	str	r3, [r7, #16]
    uint8_t i, j, cpt_lignes = 0, cpt_colonnes = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	757b      	strb	r3, [r7, #21]
 8001bec:	2300      	movs	r3, #0
 8001bee:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  for (i = 0; i < 4; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	e041      	b.n	8001c7a <fonction_init+0x9e>
	  {
		  for (j = 0; j < 5; j++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75bb      	strb	r3, [r7, #22]
 8001bfa:	e02b      	b.n	8001c54 <fonction_init+0x78>
		  {
			  pions_blancs[i + j]->colonne = cpt_colonnes;
 8001bfc:	7dfa      	ldrb	r2, [r7, #23]
 8001bfe:	7dbb      	ldrb	r3, [r7, #22]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <fonction_init+0xb4>)
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	7d3a      	ldrb	r2, [r7, #20]
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	805a      	strh	r2, [r3, #2]
			  pions_blancs[i + j]->ligne = cpt_lignes;
 8001c0e:	7dfa      	ldrb	r2, [r7, #23]
 8001c10:	7dbb      	ldrb	r3, [r7, #22]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <fonction_init+0xb4>)
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	7d7a      	ldrb	r2, [r7, #21]
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	801a      	strh	r2, [r3, #0]
			  pions_noirs[i + j]->colonne = cpt_colonnes;
 8001c20:	7dfa      	ldrb	r2, [r7, #23]
 8001c22:	7dbb      	ldrb	r3, [r7, #22]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <fonction_init+0xb8>)
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	7d3a      	ldrb	r2, [r7, #20]
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	805a      	strh	r2, [r3, #2]
			  pions_noirs[i + j]->ligne = cpt_lignes + 6;
 8001c32:	7d7b      	ldrb	r3, [r7, #21]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	7df9      	ldrb	r1, [r7, #23]
 8001c38:	7dbb      	ldrb	r3, [r7, #22]
 8001c3a:	440b      	add	r3, r1
 8001c3c:	4915      	ldr	r1, [pc, #84]	; (8001c94 <fonction_init+0xb8>)
 8001c3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c42:	3206      	adds	r2, #6
 8001c44:	b292      	uxth	r2, r2
 8001c46:	801a      	strh	r2, [r3, #0]
			  cpt_colonnes += 2;
 8001c48:	7d3b      	ldrb	r3, [r7, #20]
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	753b      	strb	r3, [r7, #20]
		  for (j = 0; j < 5; j++)
 8001c4e:	7dbb      	ldrb	r3, [r7, #22]
 8001c50:	3301      	adds	r3, #1
 8001c52:	75bb      	strb	r3, [r7, #22]
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d9d0      	bls.n	8001bfc <fonction_init+0x20>
		  }
		  cpt_colonnes = (cpt_colonnes % 2 == 0) ? 1 : 0;
 8001c5a:	7d3b      	ldrb	r3, [r7, #20]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	753b      	strb	r3, [r7, #20]
		  cpt_lignes++;
 8001c6e:	7d7b      	ldrb	r3, [r7, #21]
 8001c70:	3301      	adds	r3, #1
 8001c72:	757b      	strb	r3, [r7, #21]
	  for (i = 0; i < 4; i++)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	3301      	adds	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d9ba      	bls.n	8001bf6 <fonction_init+0x1a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	6939      	ldr	r1, [r7, #16]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f009 faf0 	bl	800b26c <vTaskDelayUntil>
	  for (i = 0; i < 4; i++)
 8001c8c:	e7b0      	b.n	8001bf0 <fonction_init+0x14>
 8001c8e:	bf00      	nop
 8001c90:	200080bc 	.word	0x200080bc
 8001c94:	200084ac 	.word	0x200084ac

08001c98 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8001ca0:	2314      	movs	r3, #20
 8001ca2:	617b      	str	r3, [r7, #20]
	const uint8_t pas 			= 30;
 8001ca4:	231e      	movs	r3, #30
 8001ca6:	74fb      	strb	r3, [r7, #19]
	const uint8_t rayon 		= 6;
 8001ca8:	2306      	movs	r3, #6
 8001caa:	74bb      	strb	r3, [r7, #18]
	uint16_t pointeurX 			= 12 + pas / 2;
 8001cac:	7cfb      	ldrb	r3, [r7, #19]
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	83fb      	strh	r3, [r7, #30]
	uint16_t pointeurY 			= 12 + pas / 2;
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	83bb      	strh	r3, [r7, #28]
	vTaskDelete(task_initHandle);
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <fonction_affichage+0xb4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 fa3d 	bl	800b148 <vTaskDelete>

  /* Infinite loop */
  for(;;)
  {
	for(int i = 0; i < 20; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	e031      	b.n	8001d38 <fonction_affichage+0xa0>
	{
		xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <fonction_affichage+0xb8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f008 fe6b 	bl	800a9b8 <xQueueSemaphoreTake>
		pointeurX += pions_blancs[i]->colonne * pas;
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <fonction_affichage+0xbc>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	885a      	ldrh	r2, [r3, #2]
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	fb12 f303 	smulbb	r3, r2, r3
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	8bfb      	ldrh	r3, [r7, #30]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	83fb      	strh	r3, [r7, #30]
		pointeurY += pions_blancs[i]->ligne * pas;
 8001cfc:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <fonction_affichage+0xbc>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	7cfb      	ldrb	r3, [r7, #19]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	fb12 f303 	smulbb	r3, r2, r3
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	8bbb      	ldrh	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	83bb      	strh	r3, [r7, #28]
		BSP_LCD_DrawCircle(pointeurX, pointeurY, rayon);
 8001d16:	7cbb      	ldrb	r3, [r7, #18]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	8bb9      	ldrh	r1, [r7, #28]
 8001d1c:	8bfb      	ldrh	r3, [r7, #30]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fb52 	bl	80023c8 <BSP_LCD_DrawCircle>

		xSemaphoreGive(mutexEcran);
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <fonction_affichage+0xb8>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f008 fd3d 	bl	800a7ac <xQueueGenericSend>
	for(int i = 0; i < 20; i++)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b13      	cmp	r3, #19
 8001d3c:	ddca      	ble.n	8001cd4 <fonction_affichage+0x3c>
	}
    vTaskDelayUntil(xLastWakeTime, xFrequency);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6979      	ldr	r1, [r7, #20]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f009 fa92 	bl	800b26c <vTaskDelayUntil>
	for(int i = 0; i < 20; i++)
 8001d48:	e7c1      	b.n	8001cce <fonction_affichage+0x36>
 8001d4a:	bf00      	nop
 8001d4c:	20007fd4 	.word	0x20007fd4
 8001d50:	20008318 	.word	0x20008318
 8001d54:	200080bc 	.word	0x200080bc

08001d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d6a:	f001 ff61 	bl	8003c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40001000 	.word	0x40001000

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <Error_Handler+0x8>
	...

08001d88 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <I2Cx_MspInit+0x150>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d14d      	bne.n	8001e34 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <I2Cx_MspInit+0x154>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	; (8001edc <I2Cx_MspInit+0x154>)
 8001d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da2:	6313      	str	r3, [r2, #48]	; 0x30
 8001da4:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <I2Cx_MspInit+0x154>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4845      	ldr	r0, [pc, #276]	; (8001ee0 <I2Cx_MspInit+0x158>)
 8001dcc:	f003 fa84 	bl	80052d8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4840      	ldr	r0, [pc, #256]	; (8001ee0 <I2Cx_MspInit+0x158>)
 8001dde:	f003 fa7b 	bl	80052d8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <I2Cx_MspInit+0x154>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a3d      	ldr	r2, [pc, #244]	; (8001edc <I2Cx_MspInit+0x154>)
 8001de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <I2Cx_MspInit+0x154>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <I2Cx_MspInit+0x154>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a37      	ldr	r2, [pc, #220]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e04:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a34      	ldr	r2, [pc, #208]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e10:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	210f      	movs	r1, #15
 8001e16:	2048      	movs	r0, #72	; 0x48
 8001e18:	f002 fb68 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001e1c:	2048      	movs	r0, #72	; 0x48
 8001e1e:	f002 fb81 	bl	8004524 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	210f      	movs	r1, #15
 8001e26:	2049      	movs	r0, #73	; 0x49
 8001e28:	f002 fb60 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001e2c:	2049      	movs	r0, #73	; 0x49
 8001e2e:	f002 fb79 	bl	8004524 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001e32:	e04d      	b.n	8001ed0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a28      	ldr	r2, [pc, #160]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e50:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e52:	2312      	movs	r3, #18
 8001e54:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	481e      	ldr	r0, [pc, #120]	; (8001ee4 <I2Cx_MspInit+0x15c>)
 8001e6a:	f003 fa35 	bl	80052d8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <I2Cx_MspInit+0x15c>)
 8001e7c:	f003 fa2c 	bl	80052d8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a15      	ldr	r2, [pc, #84]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <I2Cx_MspInit+0x154>)
 8001e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <I2Cx_MspInit+0x154>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <I2Cx_MspInit+0x154>)
 8001eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eae:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	201f      	movs	r0, #31
 8001eb6:	f002 fb19 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001eba:	201f      	movs	r0, #31
 8001ebc:	f002 fb32 	bl	8004524 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	2020      	movs	r0, #32
 8001ec6:	f002 fb11 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001eca:	2020      	movs	r0, #32
 8001ecc:	f002 fb2a 	bl	8004524 <HAL_NVIC_EnableIRQ>
}
 8001ed0:	bf00      	nop
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000388 	.word	0x20000388
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40020400 	.word	0x40020400

08001ee8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f003 ffc9 	bl	8005e88 <HAL_I2C_GetState>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d125      	bne.n	8001f48 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <I2Cx_Init+0x68>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <I2Cx_Init+0x6c>)
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e002      	b.n	8001f12 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <I2Cx_Init+0x70>)
 8001f10:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <I2Cx_Init+0x74>)
 8001f16:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff23 	bl	8001d88 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f003 fcb2 	bl	80058ac <HAL_I2C_Init>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000388 	.word	0x20000388
 8001f54:	40005c00 	.word	0x40005c00
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	40912732 	.word	0x40912732

08001f60 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	72fb      	strb	r3, [r7, #11]
 8001f72:	460b      	mov	r3, r1
 8001f74:	813b      	strh	r3, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	b299      	uxth	r1, r3
 8001f82:	88f8      	ldrh	r0, [r7, #6]
 8001f84:	893a      	ldrh	r2, [r7, #8]
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4603      	mov	r3, r0
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f003 fe5c 	bl	8005c54 <HAL_I2C_Mem_Read>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f832 	bl	8002014 <I2Cx_Error>
  }
  return status;    
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b08a      	sub	sp, #40	; 0x28
 8001fbe:	af04      	add	r7, sp, #16
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	72fb      	strb	r3, [r7, #11]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	813b      	strh	r3, [r7, #8]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	b299      	uxth	r1, r3
 8001fdc:	88f8      	ldrh	r0, [r7, #6]
 8001fde:	893a      	ldrh	r2, [r7, #8]
 8001fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4603      	mov	r3, r0
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f003 fd1b 	bl	8005a2c <HAL_I2C_Mem_Write>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d004      	beq.n	800200a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	4619      	mov	r1, r3
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f805 	bl	8002014 <I2Cx_Error>
  }
  return status;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f003 fcd3 	bl	80059cc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff5e 	bl	8001ee8 <I2Cx_Init>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <TS_IO_Init+0x10>)
 800203a:	f7ff ff55 	bl	8001ee8 <I2Cx_Init>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000388 	.word	0x20000388

08002048 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	460b      	mov	r3, r1
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	4613      	mov	r3, r2
 8002058:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	b29a      	uxth	r2, r3
 800205e:	79f9      	ldrb	r1, [r7, #7]
 8002060:	2301      	movs	r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	1d7b      	adds	r3, r7, #5
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2301      	movs	r3, #1
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <TS_IO_Write+0x30>)
 800206c:	f7ff ffa5 	bl	8001fba <I2Cx_WriteMultiple>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000388 	.word	0x20000388

0800207c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	b29a      	uxth	r2, r3
 8002094:	79f9      	ldrb	r1, [r7, #7]
 8002096:	2301      	movs	r3, #1
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	f107 030f 	add.w	r3, r7, #15
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2301      	movs	r3, #1
 80020a2:	4804      	ldr	r0, [pc, #16]	; (80020b4 <TS_IO_Read+0x38>)
 80020a4:	f7ff ff5c 	bl	8001f60 <I2Cx_ReadMultiple>

  return read_value;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000388 	.word	0x20000388

080020b8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f001 fdd5 	bl	8003c70 <HAL_Delay>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <BSP_LCD_Init+0xcc>)
 80020d6:	2228      	movs	r2, #40	; 0x28
 80020d8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <BSP_LCD_Init+0xcc>)
 80020dc:	2209      	movs	r2, #9
 80020de:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80020e0:	4b2e      	ldr	r3, [pc, #184]	; (800219c <BSP_LCD_Init+0xcc>)
 80020e2:	2235      	movs	r2, #53	; 0x35
 80020e4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <BSP_LCD_Init+0xcc>)
 80020e8:	220b      	movs	r2, #11
 80020ea:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <BSP_LCD_Init+0xcc>)
 80020ee:	f240 121b 	movw	r2, #283	; 0x11b
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <BSP_LCD_Init+0xcc>)
 80020f6:	f240 2215 	movw	r2, #533	; 0x215
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <BSP_LCD_Init+0xcc>)
 80020fe:	f240 121d 	movw	r2, #285	; 0x11d
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <BSP_LCD_Init+0xcc>)
 8002106:	f240 2235 	movw	r2, #565	; 0x235
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800210c:	2100      	movs	r1, #0
 800210e:	4823      	ldr	r0, [pc, #140]	; (800219c <BSP_LCD_Init+0xcc>)
 8002110:	f000 fc36 	bl	8002980 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <BSP_LCD_Init+0xcc>)
 8002116:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800211a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <BSP_LCD_Init+0xcc>)
 800211e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002122:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <BSP_LCD_Init+0xcc>)
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <BSP_LCD_Init+0xcc>)
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <BSP_LCD_Init+0xcc>)
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <BSP_LCD_Init+0xcc>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <BSP_LCD_Init+0xcc>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <BSP_LCD_Init+0xcc>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <BSP_LCD_Init+0xcc>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <BSP_LCD_Init+0xcc>)
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <BSP_LCD_Init+0xd0>)
 8002158:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800215a:	4810      	ldr	r0, [pc, #64]	; (800219c <BSP_LCD_Init+0xcc>)
 800215c:	f004 fbb0 	bl	80068c0 <HAL_LTDC_GetState>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002166:	2100      	movs	r1, #0
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <BSP_LCD_Init+0xcc>)
 800216a:	f000 fb2f 	bl	80027cc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800216e:	480b      	ldr	r0, [pc, #44]	; (800219c <BSP_LCD_Init+0xcc>)
 8002170:	f004 f9d6 	bl	8006520 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <BSP_LCD_Init+0xd4>)
 800217c:	f003 fb64 	bl	8005848 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	2108      	movs	r1, #8
 8002184:	4808      	ldr	r0, [pc, #32]	; (80021a8 <BSP_LCD_Init+0xd8>)
 8002186:	f003 fb5f 	bl	8005848 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800218a:	f000 fca5 	bl	8002ad8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800218e:	4807      	ldr	r0, [pc, #28]	; (80021ac <BSP_LCD_Init+0xdc>)
 8002190:	f000 f8d8 	bl	8002344 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20008530 	.word	0x20008530
 80021a0:	40016800 	.word	0x40016800
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40022800 	.word	0x40022800
 80021ac:	20000028 	.word	0x20000028

080021b0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <BSP_LCD_GetXSize+0x20>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <BSP_LCD_GetXSize+0x24>)
 80021ba:	2134      	movs	r1, #52	; 0x34
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3360      	adds	r3, #96	; 0x60
 80021c4:	681b      	ldr	r3, [r3, #0]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000414 	.word	0x20000414
 80021d4:	20008530 	.word	0x20008530

080021d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <BSP_LCD_GetYSize+0x20>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <BSP_LCD_GetYSize+0x24>)
 80021e2:	2134      	movs	r1, #52	; 0x34
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3364      	adds	r3, #100	; 0x64
 80021ec:	681b      	ldr	r3, [r3, #0]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	20000414 	.word	0x20000414
 80021fc:	20008530 	.word	0x20008530

08002200 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002200:	b580      	push	{r7, lr}
 8002202:	b090      	sub	sp, #64	; 0x40
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002210:	f7ff ffce 	bl	80021b0 <BSP_LCD_GetXSize>
 8002214:	4603      	mov	r3, r0
 8002216:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800221c:	f7ff ffdc 	bl	80021d8 <BSP_LCD_GetYSize>
 8002220:	4603      	mov	r3, r0
 8002222:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800222c:	23ff      	movs	r3, #255	; 0xff
 800222e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002246:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800224c:	2307      	movs	r3, #7
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002250:	f7ff ffae 	bl	80021b0 <BSP_LCD_GetXSize>
 8002254:	4603      	mov	r3, r0
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002258:	f7ff ffbe 	bl	80021d8 <BSP_LCD_GetYSize>
 800225c:	4603      	mov	r3, r0
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	4619      	mov	r1, r3
 8002268:	4812      	ldr	r0, [pc, #72]	; (80022b4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800226a:	f004 faeb 	bl	8006844 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	4911      	ldr	r1, [pc, #68]	; (80022b8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3304      	adds	r3, #4
 800227e:	f04f 32ff 	mov.w	r2, #4294967295
 8002282:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	490c      	ldr	r1, [pc, #48]	; (80022b8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3308      	adds	r3, #8
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002296:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002298:	88fa      	ldrh	r2, [r7, #6]
 800229a:	4907      	ldr	r1, [pc, #28]	; (80022b8 <BSP_LCD_LayerDefaultInit+0xb8>)
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	3740      	adds	r7, #64	; 0x40
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20008530 	.word	0x20008530
 80022b8:	20000418 	.word	0x20000418
 80022bc:	20000028 	.word	0x20000028

080022c0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <BSP_LCD_SelectLayer+0x1c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
} 
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000414 	.word	0x20000414

080022e0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <BSP_LCD_SetTextColor+0x28>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <BSP_LCD_SetTextColor+0x2c>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000414 	.word	0x20000414
 800230c:	20000418 	.word	0x20000418

08002310 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <BSP_LCD_SetBackColor+0x2c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4908      	ldr	r1, [pc, #32]	; (8002340 <BSP_LCD_SetBackColor+0x30>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	3304      	adds	r3, #4
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000414 	.word	0x20000414
 8002340:	20000418 	.word	0x20000418

08002344 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <BSP_LCD_SetFont+0x2c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4908      	ldr	r1, [pc, #32]	; (8002374 <BSP_LCD_SetFont+0x30>)
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3308      	adds	r3, #8
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	601a      	str	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000414 	.word	0x20000414
 8002374:	20000418 	.word	0x20000418

08002378 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <BSP_LCD_Clear+0x48>)
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <BSP_LCD_Clear+0x48>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <BSP_LCD_Clear+0x4c>)
 800238a:	2134      	movs	r1, #52	; 0x34
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	335c      	adds	r3, #92	; 0x5c
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461e      	mov	r6, r3
 8002398:	f7ff ff0a 	bl	80021b0 <BSP_LCD_GetXSize>
 800239c:	4605      	mov	r5, r0
 800239e:	f7ff ff1b 	bl	80021d8 <BSP_LCD_GetYSize>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	462a      	mov	r2, r5
 80023b0:	4631      	mov	r1, r6
 80023b2:	4620      	mov	r0, r4
 80023b4:	f000 fb00 	bl	80029b8 <LL_FillBuffer>
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c0:	20000414 	.word	0x20000414
 80023c4:	20008530 	.word	0x20008530

080023c8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
 80023d2:	460b      	mov	r3, r1
 80023d4:	80bb      	strh	r3, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	f1c3 0303 	rsb	r3, r3, #3
 80023e2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80023ec:	e0c7      	b.n	800257e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4413      	add	r3, r2
 80023f6:	b298      	uxth	r0, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	88ba      	ldrh	r2, [r7, #4]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	b299      	uxth	r1, r3
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4c64      	ldr	r4, [pc, #400]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4423      	add	r3, r4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	f000 f8c1 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	b29b      	uxth	r3, r3
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	b298      	uxth	r0, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	b29b      	uxth	r3, r3
 8002428:	88ba      	ldrh	r2, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b299      	uxth	r1, r3
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4c59      	ldr	r4, [pc, #356]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4423      	add	r3, r4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f000 f8ab 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	b29a      	uxth	r2, r3
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4413      	add	r3, r2
 800244e:	b298      	uxth	r0, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	b29b      	uxth	r3, r3
 8002454:	88ba      	ldrh	r2, [r7, #4]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	b299      	uxth	r1, r3
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4c4e      	ldr	r4, [pc, #312]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4423      	add	r3, r4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	f000 f895 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	b29b      	uxth	r3, r3
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	b298      	uxth	r0, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	b29b      	uxth	r3, r3
 8002480:	88ba      	ldrh	r2, [r7, #4]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	b299      	uxth	r1, r3
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4c43      	ldr	r4, [pc, #268]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4423      	add	r3, r4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	f000 f87f 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4413      	add	r3, r2
 80024a6:	b298      	uxth	r0, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	b299      	uxth	r1, r3
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4c38      	ldr	r4, [pc, #224]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4423      	add	r3, r4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f000 f869 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	b298      	uxth	r0, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	88bb      	ldrh	r3, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	b299      	uxth	r1, r3
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4c2d      	ldr	r4, [pc, #180]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4423      	add	r3, r4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f000 f853 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4413      	add	r3, r2
 80024fe:	b298      	uxth	r0, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	b29a      	uxth	r2, r3
 8002504:	88bb      	ldrh	r3, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	b299      	uxth	r1, r3
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4c22      	ldr	r4, [pc, #136]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4423      	add	r3, r4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	f000 f83d 	bl	800259c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	b29b      	uxth	r3, r3
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b298      	uxth	r0, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	b29a      	uxth	r2, r3
 8002530:	88bb      	ldrh	r3, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	b299      	uxth	r1, r3
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <BSP_LCD_DrawCircle+0x1cc>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4c17      	ldr	r4, [pc, #92]	; (8002598 <BSP_LCD_DrawCircle+0x1d0>)
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4423      	add	r3, r4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	f000 f827 	bl	800259c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da06      	bge.n	8002562 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4413      	add	r3, r2
 800255c:	3306      	adds	r3, #6
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4413      	add	r3, r2
 800256e:	330a      	adds	r3, #10
 8002570:	617b      	str	r3, [r7, #20]
      current_y--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3b01      	subs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	3301      	adds	r3, #1
 800257c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	429a      	cmp	r2, r3
 8002584:	f67f af33 	bls.w	80023ee <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	20000414 	.word	0x20000414
 8002598:	20000418 	.word	0x20000418

0800259c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	603a      	str	r2, [r7, #0]
 80025a6:	80fb      	strh	r3, [r7, #6]
 80025a8:	460b      	mov	r3, r1
 80025aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <BSP_LCD_DrawPixel+0x88>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <BSP_LCD_DrawPixel+0x8c>)
 80025b2:	2134      	movs	r1, #52	; 0x34
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3348      	adds	r3, #72	; 0x48
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d116      	bne.n	80025f0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <BSP_LCD_DrawPixel+0x88>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <BSP_LCD_DrawPixel+0x8c>)
 80025c8:	2134      	movs	r1, #52	; 0x34
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	335c      	adds	r3, #92	; 0x5c
 80025d2:	681c      	ldr	r4, [r3, #0]
 80025d4:	88bd      	ldrh	r5, [r7, #4]
 80025d6:	f7ff fdeb 	bl	80021b0 <BSP_LCD_GetXSize>
 80025da:	4603      	mov	r3, r0
 80025dc:	fb03 f205 	mul.w	r2, r3, r5
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	4413      	add	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4423      	add	r3, r4
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b292      	uxth	r2, r2
 80025ec:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80025ee:	e015      	b.n	800261c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <BSP_LCD_DrawPixel+0x88>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <BSP_LCD_DrawPixel+0x8c>)
 80025f6:	2134      	movs	r1, #52	; 0x34
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	681c      	ldr	r4, [r3, #0]
 8002602:	88bd      	ldrh	r5, [r7, #4]
 8002604:	f7ff fdd4 	bl	80021b0 <BSP_LCD_GetXSize>
 8002608:	4603      	mov	r3, r0
 800260a:	fb03 f205 	mul.w	r2, r3, r5
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4423      	add	r3, r4
 8002616:	461a      	mov	r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bdb0      	pop	{r4, r5, r7, pc}
 8002624:	20000414 	.word	0x20000414
 8002628:	20008530 	.word	0x20008530

0800262c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b08b      	sub	sp, #44	; 0x2c
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	330a      	adds	r3, #10
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	330b      	adds	r3, #11
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	441a      	add	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	330c      	adds	r3, #12
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	041b      	lsls	r3, r3, #16
 8002666:	441a      	add	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	330d      	adds	r3, #13
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	4413      	add	r3, r2
 8002672:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3312      	adds	r3, #18
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3313      	adds	r3, #19
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3314      	adds	r3, #20
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	441a      	add	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3315      	adds	r3, #21
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	4413      	add	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3316      	adds	r3, #22
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3317      	adds	r3, #23
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	441a      	add	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3318      	adds	r3, #24
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	441a      	add	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3319      	adds	r3, #25
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	4413      	add	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	331c      	adds	r3, #28
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	331d      	adds	r3, #29
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	4413      	add	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <BSP_LCD_DrawBitmap+0x15c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2b      	ldr	r2, [pc, #172]	; (800278c <BSP_LCD_DrawBitmap+0x160>)
 80026de:	2134      	movs	r1, #52	; 0x34
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	681c      	ldr	r4, [r3, #0]
 80026ea:	f7ff fd61 	bl	80021b0 <BSP_LCD_GetXSize>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	fb03 f202 	mul.w	r2, r3, r2
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4423      	add	r3, r4
 80026fe:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	3b20      	subs	r3, #32
 8002704:	2b07      	cmp	r3, #7
 8002706:	d802      	bhi.n	800270e <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e008      	b.n	8002720 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3b10      	subs	r3, #16
 8002712:	2b07      	cmp	r3, #7
 8002714:	d802      	bhi.n	800271c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002716:	2302      	movs	r3, #2
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e001      	b.n	8002720 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 800271c:	2301      	movs	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3b01      	subs	r3, #1
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	08d2      	lsrs	r2, r2, #3
 800272e:	fb02 f203 	mul.w	r2, r2, r3
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	4413      	add	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e018      	b.n	8002774 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002742:	6a39      	ldr	r1, [r7, #32]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f981 	bl	8002a50 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800274e:	f7ff fd2f 	bl	80021b0 <BSP_LCD_GetXSize>
 8002752:	4603      	mov	r3, r0
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	6a3a      	ldr	r2, [r7, #32]
 8002758:	4413      	add	r3, r2
 800275a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	425b      	negs	r3, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	3301      	adds	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	d3e2      	bcc.n	8002742 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	372c      	adds	r7, #44	; 0x2c
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	20000414 	.word	0x20000414
 800278c:	20008530 	.word	0x20008530

08002790 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <BSP_LCD_DisplayOn+0x30>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <BSP_LCD_DisplayOn+0x30>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <BSP_LCD_DisplayOn+0x34>)
 80027ac:	f003 f84c 	bl	8005848 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80027b0:	2201      	movs	r2, #1
 80027b2:	2108      	movs	r1, #8
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <BSP_LCD_DisplayOn+0x38>)
 80027b6:	f003 f847 	bl	8005848 <HAL_GPIO_WritePin>
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20008530 	.word	0x20008530
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022800 	.word	0x40022800

080027cc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	; 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80027d6:	4b64      	ldr	r3, [pc, #400]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a63      	ldr	r2, [pc, #396]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80027dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80027f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002806:	4b58      	ldr	r3, [pc, #352]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a57      	ldr	r2, [pc, #348]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800280c:	f043 0310 	orr.w	r3, r3, #16
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b55      	ldr	r3, [pc, #340]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800281e:	4b52      	ldr	r3, [pc, #328]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a51      	ldr	r2, [pc, #324]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a4b      	ldr	r2, [pc, #300]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a45      	ldr	r2, [pc, #276]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b43      	ldr	r3, [pc, #268]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a3f      	ldr	r2, [pc, #252]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800286c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800287e:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a39      	ldr	r2, [pc, #228]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002896:	4b34      	ldr	r3, [pc, #208]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a33      	ldr	r2, [pc, #204]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 800289c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b31      	ldr	r3, [pc, #196]	; (8002968 <BSP_LCD_MspInit+0x19c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80028ae:	2310      	movs	r3, #16
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80028ba:	2302      	movs	r3, #2
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80028be:	230e      	movs	r3, #14
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80028c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c6:	4619      	mov	r1, r3
 80028c8:	4828      	ldr	r0, [pc, #160]	; (800296c <BSP_LCD_MspInit+0x1a0>)
 80028ca:	f002 fd05 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80028ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80028d8:	2309      	movs	r3, #9
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4823      	ldr	r0, [pc, #140]	; (8002970 <BSP_LCD_MspInit+0x1a4>)
 80028e4:	f002 fcf8 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80028e8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80028f2:	230e      	movs	r3, #14
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80028f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	481d      	ldr	r0, [pc, #116]	; (8002974 <BSP_LCD_MspInit+0x1a8>)
 80028fe:	f002 fceb 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002902:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800290c:	230e      	movs	r3, #14
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	4619      	mov	r1, r3
 8002916:	4818      	ldr	r0, [pc, #96]	; (8002978 <BSP_LCD_MspInit+0x1ac>)
 8002918:	f002 fcde 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800291c:	23f7      	movs	r3, #247	; 0xf7
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002924:	230e      	movs	r3, #14
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292c:	4619      	mov	r1, r3
 800292e:	4813      	ldr	r0, [pc, #76]	; (800297c <BSP_LCD_MspInit+0x1b0>)
 8002930:	f002 fcd2 	bl	80052d8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800293e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002942:	4619      	mov	r1, r3
 8002944:	480b      	ldr	r0, [pc, #44]	; (8002974 <BSP_LCD_MspInit+0x1a8>)
 8002946:	f002 fcc7 	bl	80052d8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800294a:	2308      	movs	r3, #8
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002956:	4619      	mov	r1, r3
 8002958:	4808      	ldr	r0, [pc, #32]	; (800297c <BSP_LCD_MspInit+0x1b0>)
 800295a:	f002 fcbd 	bl	80052d8 <HAL_GPIO_Init>
}
 800295e:	bf00      	nop
 8002960:	3740      	adds	r7, #64	; 0x40
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40021000 	.word	0x40021000
 8002970:	40021800 	.word	0x40021800
 8002974:	40022000 	.word	0x40022000
 8002978:	40022400 	.word	0x40022400
 800297c:	40022800 	.word	0x40022800

08002980 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <BSP_LCD_ClockConfig+0x34>)
 800298c:	2208      	movs	r2, #8
 800298e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <BSP_LCD_ClockConfig+0x34>)
 8002992:	22c0      	movs	r2, #192	; 0xc0
 8002994:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <BSP_LCD_ClockConfig+0x34>)
 8002998:	2205      	movs	r2, #5
 800299a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <BSP_LCD_ClockConfig+0x34>)
 800299e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80029a4:	4803      	ldr	r0, [pc, #12]	; (80029b4 <BSP_LCD_ClockConfig+0x34>)
 80029a6:	f004 fe3f 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000430 	.word	0x20000430

080029b8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <LL_FillBuffer+0x88>)
 80029c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029cc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <LL_FillBuffer+0x8c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <LL_FillBuffer+0x90>)
 80029d4:	2134      	movs	r1, #52	; 0x34
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3348      	adds	r3, #72	; 0x48
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d103      	bne.n	80029ec <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <LL_FillBuffer+0x88>)
 80029e6:	2202      	movs	r2, #2
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e002      	b.n	80029f2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <LL_FillBuffer+0x88>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <LL_FillBuffer+0x88>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <LL_FillBuffer+0x88>)
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <LL_FillBuffer+0x94>)
 80029fc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80029fe:	4810      	ldr	r0, [pc, #64]	; (8002a40 <LL_FillBuffer+0x88>)
 8002a00:	f002 f8ce 	bl	8004ba0 <HAL_DMA2D_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002a0a:	68f9      	ldr	r1, [r7, #12]
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <LL_FillBuffer+0x88>)
 8002a0e:	f002 fb35 	bl	800507c <HAL_DMA2D_ConfigLayer>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10e      	bne.n	8002a36 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69f9      	ldr	r1, [r7, #28]
 8002a22:	4807      	ldr	r0, [pc, #28]	; (8002a40 <LL_FillBuffer+0x88>)
 8002a24:	f002 f906 	bl	8004c34 <HAL_DMA2D_Start>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002a2e:	210a      	movs	r1, #10
 8002a30:	4803      	ldr	r0, [pc, #12]	; (8002a40 <LL_FillBuffer+0x88>)
 8002a32:	f002 f92a 	bl	8004c8a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200003d4 	.word	0x200003d4
 8002a44:	20000414 	.word	0x20000414
 8002a48:	20008530 	.word	0x20008530
 8002a4c:	4002b000 	.word	0x4002b000

08002a50 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a64:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <LL_ConvertLineToARGB8888+0x84>)
 8002a8e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002a90:	480f      	ldr	r0, [pc, #60]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002a92:	f002 f885 	bl	8004ba0 <HAL_DMA2D_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d115      	bne.n	8002ac8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002aa0:	f002 faec 	bl	800507c <HAL_DMA2D_ConfigLayer>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002aaa:	68f9      	ldr	r1, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002ab6:	f002 f8bd 	bl	8004c34 <HAL_DMA2D_Start>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002ac0:	210a      	movs	r1, #10
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <LL_ConvertLineToARGB8888+0x80>)
 8002ac4:	f002 f8e1 	bl	8004c8a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200003d4 	.word	0x200003d4
 8002ad4:	4002b000 	.word	0x4002b000

08002ad8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002ade:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <BSP_SDRAM_Init+0xb0>)
 8002ae0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002aea:	2207      	movs	r2, #7
 8002aec:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002aee:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002af0:	2204      	movs	r2, #4
 8002af2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002af6:	2207      	movs	r2, #7
 8002af8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002afc:	2202      	movs	r2, #2
 8002afe:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002b08:	2202      	movs	r2, #2
 8002b0a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b20:	2210      	movs	r2, #16
 8002b22:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b30:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002b4e:	2100      	movs	r1, #0
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b52:	f000 f87f 	bl	8002c54 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002b56:	490d      	ldr	r1, [pc, #52]	; (8002b8c <BSP_SDRAM_Init+0xb4>)
 8002b58:	480a      	ldr	r0, [pc, #40]	; (8002b84 <BSP_SDRAM_Init+0xac>)
 8002b5a:	f005 fd2d 	bl	80085b8 <HAL_SDRAM_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <BSP_SDRAM_Init+0xb8>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e002      	b.n	8002b72 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <BSP_SDRAM_Init+0xb8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002b72:	f240 6003 	movw	r0, #1539	; 0x603
 8002b76:	f000 f80d 	bl	8002b94 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002b7a:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <BSP_SDRAM_Init+0xb8>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200085d8 	.word	0x200085d8
 8002b88:	a0000140 	.word	0xa0000140
 8002b8c:	200004b4 	.word	0x200004b4
 8002b90:	20000038 	.word	0x20000038

08002b94 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ba6:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ba8:	2210      	movs	r2, #16
 8002baa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bbc:	4923      	ldr	r1, [pc, #140]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bbe:	4824      	ldr	r0, [pc, #144]	; (8002c50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bc0:	f005 fd2e 	bl	8008620 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f001 f853 	bl	8003c70 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bcc:	2202      	movs	r2, #2
 8002bce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be6:	4919      	ldr	r1, [pc, #100]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be8:	4819      	ldr	r0, [pc, #100]	; (8002c50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bea:	f005 fd19 	bl	8008620 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0a:	4910      	ldr	r1, [pc, #64]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c0c:	4810      	ldr	r0, [pc, #64]	; (8002c50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c0e:	f005 fd07 	bl	8008620 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002c12:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002c16:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c20:	2210      	movs	r2, #16
 8002c22:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c2e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c34:	4905      	ldr	r1, [pc, #20]	; (8002c4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c38:	f005 fcf2 	bl	8008620 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4804      	ldr	r0, [pc, #16]	; (8002c50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c40:	f005 fd23 	bl	800868a <HAL_SDRAM_ProgramRefreshRate>
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200004d0 	.word	0x200004d0
 8002c50:	200085d8 	.word	0x200085d8

08002c54 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b090      	sub	sp, #64	; 0x40
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	4a6f      	ldr	r2, [pc, #444]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6393      	str	r3, [r2, #56]	; 0x38
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8e:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a63      	ldr	r2, [pc, #396]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cbe:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cc4:	f043 0310 	orr.w	r3, r3, #16
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd6:	4b52      	ldr	r3, [pc, #328]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cee:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <BSP_SDRAM_MspInit+0x1cc>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d22:	2301      	movs	r3, #1
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002d26:	2302      	movs	r3, #2
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002d2e:	2308      	movs	r3, #8
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d36:	4619      	mov	r1, r3
 8002d38:	483a      	ldr	r0, [pc, #232]	; (8002e24 <BSP_SDRAM_MspInit+0x1d0>)
 8002d3a:	f002 facd 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002d3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4837      	ldr	r0, [pc, #220]	; (8002e28 <BSP_SDRAM_MspInit+0x1d4>)
 8002d4c:	f002 fac4 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d50:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4833      	ldr	r0, [pc, #204]	; (8002e2c <BSP_SDRAM_MspInit+0x1d8>)
 8002d5e:	f002 fabb 	bl	80052d8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d62:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4830      	ldr	r0, [pc, #192]	; (8002e30 <BSP_SDRAM_MspInit+0x1dc>)
 8002d70:	f002 fab2 	bl	80052d8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d74:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	482c      	ldr	r0, [pc, #176]	; (8002e34 <BSP_SDRAM_MspInit+0x1e0>)
 8002d82:	f002 faa9 	bl	80052d8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002d86:	2328      	movs	r3, #40	; 0x28
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4829      	ldr	r0, [pc, #164]	; (8002e38 <BSP_SDRAM_MspInit+0x1e4>)
 8002d92:	f002 faa1 	bl	80052d8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002db8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dc0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dce:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dd8:	2203      	movs	r2, #3
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <BSP_SDRAM_MspInit+0x1ec>)
 8002dec:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002dfa:	4810      	ldr	r0, [pc, #64]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002dfc:	f001 fd2e 	bl	800485c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002e00:	480e      	ldr	r0, [pc, #56]	; (8002e3c <BSP_SDRAM_MspInit+0x1e8>)
 8002e02:	f001 fc7d 	bl	8004700 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	210f      	movs	r1, #15
 8002e0a:	2038      	movs	r0, #56	; 0x38
 8002e0c:	f001 fb6e 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e10:	2038      	movs	r0, #56	; 0x38
 8002e12:	f001 fb87 	bl	8004524 <HAL_NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3740      	adds	r7, #64	; 0x40
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020c00 	.word	0x40020c00
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40021400 	.word	0x40021400
 8002e34:	40021800 	.word	0x40021800
 8002e38:	40021c00 	.word	0x40021c00
 8002e3c:	200004e0 	.word	0x200004e0
 8002e40:	40026410 	.word	0x40026410

08002e44 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	80fb      	strh	r3, [r7, #6]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <BSP_TS_Init+0x68>)
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <BSP_TS_Init+0x6c>)
 8002e60:	88bb      	ldrh	r3, [r7, #4]
 8002e62:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <BSP_TS_Init+0x70>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2070      	movs	r0, #112	; 0x70
 8002e6a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <BSP_TS_Init+0x70>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2070      	movs	r0, #112	; 0x70
 8002e72:	4798      	blx	r3
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b51      	cmp	r3, #81	; 0x51
 8002e78:	d111      	bne.n	8002e9e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <BSP_TS_Init+0x74>)
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	; (8002eb4 <BSP_TS_Init+0x70>)
 8002e7e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <BSP_TS_Init+0x78>)
 8002e82:	2270      	movs	r2, #112	; 0x70
 8002e84:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <BSP_TS_Init+0x7c>)
 8002e88:	2208      	movs	r2, #8
 8002e8a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <BSP_TS_Init+0x74>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <BSP_TS_Init+0x78>)
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	b292      	uxth	r2, r2
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4798      	blx	r3
 8002e9c:	e001      	b.n	8002ea2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000544 	.word	0x20000544
 8002eb0:	20000546 	.word	0x20000546
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000540 	.word	0x20000540
 8002ebc:	20000549 	.word	0x20000549
 8002ec0:	20000548 	.word	0x20000548

08002ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_MspInit+0x4c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_MspInit+0x4c>)
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_MspInit+0x4c>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_MspInit+0x4c>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_MspInit+0x4c>)
 8002ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_MspInit+0x4c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	210f      	movs	r1, #15
 8002efe:	f06f 0001 	mvn.w	r0, #1
 8002f02:	f001 faf3 	bl	80044ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	; 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <HAL_ADC_MspInit+0xc8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d124      	bne.n	8002f80 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f66:	2301      	movs	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	4619      	mov	r1, r3
 8002f78:	481a      	ldr	r0, [pc, #104]	; (8002fe4 <HAL_ADC_MspInit+0xd0>)
 8002f7a:	f002 f9ad 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f7e:	e029      	b.n	8002fd4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d124      	bne.n	8002fd4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002fa8:	f043 0320 	orr.w	r3, r3, #32
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_ADC_MspInit+0xcc>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8002fba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4807      	ldr	r0, [pc, #28]	; (8002fec <HAL_ADC_MspInit+0xd8>)
 8002fd0:	f002 f982 	bl	80052d8 <HAL_GPIO_Init>
}
 8002fd4:	bf00      	nop
 8002fd6:	3730      	adds	r7, #48	; 0x30
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40012000 	.word	0x40012000
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40012200 	.word	0x40012200
 8002fec:	40021400 	.word	0x40021400

08002ff0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <HAL_DAC_MspInit+0x84>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d12b      	bne.n	800306a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_DAC_MspInit+0x88>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_DAC_MspInit+0x88>)
 8003018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <HAL_DAC_MspInit+0x88>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_DAC_MspInit+0x88>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_DAC_MspInit+0x88>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_DAC_MspInit+0x88>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003042:	2310      	movs	r3, #16
 8003044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003046:	2303      	movs	r3, #3
 8003048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4809      	ldr	r0, [pc, #36]	; (800307c <HAL_DAC_MspInit+0x8c>)
 8003056:	f002 f93f 	bl	80052d8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	210f      	movs	r1, #15
 800305e:	2036      	movs	r0, #54	; 0x36
 8003060:	f001 fa44 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003064:	2036      	movs	r0, #54	; 0x36
 8003066:	f001 fa5d 	bl	8004524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800306a:	bf00      	nop
 800306c:	3728      	adds	r7, #40	; 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40007400 	.word	0x40007400
 8003078:	40023800 	.word	0x40023800
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_DMA2D_MspInit+0x44>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d113      	bne.n	80030ba <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_DMA2D_MspInit+0x48>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <HAL_DMA2D_MspInit+0x48>)
 8003098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_DMA2D_MspInit+0x48>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2105      	movs	r1, #5
 80030ae:	205a      	movs	r0, #90	; 0x5a
 80030b0:	f001 fa1c 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80030b4:	205a      	movs	r0, #90	; 0x5a
 80030b6:	f001 fa35 	bl	8004524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	4002b000 	.word	0x4002b000
 80030c8:	40023800 	.word	0x40023800

080030cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b0ac      	sub	sp, #176	; 0xb0
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e4:	f107 0318 	add.w	r3, r7, #24
 80030e8:	2284      	movs	r2, #132	; 0x84
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f009 fbb5 	bl	800c85c <memset>
  if(hi2c->Instance==I2C1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a44      	ldr	r2, [pc, #272]	; (8003208 <HAL_I2C_MspInit+0x13c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d13d      	bne.n	8003178 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003100:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003102:	2300      	movs	r3, #0
 8003104:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003106:	f107 0318 	add.w	r3, r7, #24
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fa8c 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003116:	f7fe fe31 	bl	8001d7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_I2C_MspInit+0x140>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a3b      	ldr	r2, [pc, #236]	; (800320c <HAL_I2C_MspInit+0x140>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <HAL_I2C_MspInit+0x140>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313a:	2312      	movs	r3, #18
 800313c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800314c:	2304      	movs	r3, #4
 800314e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003152:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003156:	4619      	mov	r1, r3
 8003158:	482d      	ldr	r0, [pc, #180]	; (8003210 <HAL_I2C_MspInit+0x144>)
 800315a:	f002 f8bd 	bl	80052d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_I2C_MspInit+0x140>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a2a      	ldr	r2, [pc, #168]	; (800320c <HAL_I2C_MspInit+0x140>)
 8003164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_I2C_MspInit+0x140>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003176:	e042      	b.n	80031fe <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_I2C_MspInit+0x148>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d13d      	bne.n	80031fe <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003186:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800318e:	f107 0318 	add.w	r3, r7, #24
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fa48 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800319e:	f7fe fded 	bl	8001d7c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_I2C_MspInit+0x140>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_I2C_MspInit+0x140>)
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_I2C_MspInit+0x140>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80031ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c2:	2312      	movs	r3, #18
 80031c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ce:	2303      	movs	r3, #3
 80031d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031d4:	2304      	movs	r3, #4
 80031d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031de:	4619      	mov	r1, r3
 80031e0:	480d      	ldr	r0, [pc, #52]	; (8003218 <HAL_I2C_MspInit+0x14c>)
 80031e2:	f002 f879 	bl	80052d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_I2C_MspInit+0x140>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <HAL_I2C_MspInit+0x140>)
 80031ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_I2C_MspInit+0x140>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
}
 80031fe:	bf00      	nop
 8003200:	37b0      	adds	r7, #176	; 0xb0
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40005400 	.word	0x40005400
 800320c:	40023800 	.word	0x40023800
 8003210:	40020400 	.word	0x40020400
 8003214:	40005c00 	.word	0x40005c00
 8003218:	40021c00 	.word	0x40021c00

0800321c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_I2C_MspDeInit+0x64>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d110      	bne.n	8003250 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_I2C_MspDeInit+0x68>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <HAL_I2C_MspDeInit+0x68>)
 8003234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800323a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800323e:	4812      	ldr	r0, [pc, #72]	; (8003288 <HAL_I2C_MspDeInit+0x6c>)
 8003240:	f002 f9f6 	bl	8005630 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003248:	480f      	ldr	r0, [pc, #60]	; (8003288 <HAL_I2C_MspDeInit+0x6c>)
 800324a:	f002 f9f1 	bl	8005630 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800324e:	e013      	b.n	8003278 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_I2C_MspDeInit+0x70>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10e      	bne.n	8003278 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_I2C_MspDeInit+0x68>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_I2C_MspDeInit+0x68>)
 8003260:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	4809      	ldr	r0, [pc, #36]	; (8003290 <HAL_I2C_MspDeInit+0x74>)
 800326a:	f002 f9e1 	bl	8005630 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800326e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003272:	4807      	ldr	r0, [pc, #28]	; (8003290 <HAL_I2C_MspDeInit+0x74>)
 8003274:	f002 f9dc 	bl	8005630 <HAL_GPIO_DeInit>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40005400 	.word	0x40005400
 8003284:	40023800 	.word	0x40023800
 8003288:	40020400 	.word	0x40020400
 800328c:	40005c00 	.word	0x40005c00
 8003290:	40021c00 	.word	0x40021c00

08003294 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0ae      	sub	sp, #184	; 0xb8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ac:	f107 0320 	add.w	r3, r7, #32
 80032b0:	2284      	movs	r2, #132	; 0x84
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f009 fad1 	bl	800c85c <memset>
  if(hltdc->Instance==LTDC)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6f      	ldr	r2, [pc, #444]	; (800347c <HAL_LTDC_MspInit+0x1e8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f040 80d6 	bne.w	8003472 <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80032c6:	2308      	movs	r3, #8
 80032c8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80032ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80032d0:	2305      	movs	r3, #5
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80032d8:	2303      	movs	r3, #3
 80032da:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80032dc:	2301      	movs	r3, #1
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032e6:	f107 0320 	add.w	r3, r7, #32
 80032ea:	4618      	mov	r0, r3
 80032ec:	f004 f99c 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80032f6:	f7fe fd41 	bl	8001d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80032fa:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a60      	ldr	r2, [pc, #384]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003312:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003318:	f043 0310 	orr.w	r3, r3, #16
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b58      	ldr	r3, [pc, #352]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800332a:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a54      	ldr	r2, [pc, #336]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b52      	ldr	r3, [pc, #328]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003342:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a4e      	ldr	r2, [pc, #312]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800335a:	4b49      	ldr	r3, [pc, #292]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a48      	ldr	r2, [pc, #288]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a42      	ldr	r2, [pc, #264]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b40      	ldr	r3, [pc, #256]	; (8003480 <HAL_LTDC_MspInit+0x1ec>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800338a:	2310      	movs	r3, #16
 800338c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033a2:	230e      	movs	r3, #14
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80033a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4835      	ldr	r0, [pc, #212]	; (8003484 <HAL_LTDC_MspInit+0x1f0>)
 80033b0:	f001 ff92 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80033b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80033b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ce:	230e      	movs	r3, #14
 80033d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80033d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033d8:	4619      	mov	r1, r3
 80033da:	482b      	ldr	r0, [pc, #172]	; (8003488 <HAL_LTDC_MspInit+0x1f4>)
 80033dc:	f001 ff7c 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80033e0:	23f7      	movs	r3, #247	; 0xf7
 80033e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033f8:	230e      	movs	r3, #14
 80033fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80033fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003402:	4619      	mov	r1, r3
 8003404:	4821      	ldr	r0, [pc, #132]	; (800348c <HAL_LTDC_MspInit+0x1f8>)
 8003406:	f001 ff67 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800340a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800340e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003424:	2309      	movs	r3, #9
 8003426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800342e:	4619      	mov	r1, r3
 8003430:	4817      	ldr	r0, [pc, #92]	; (8003490 <HAL_LTDC_MspInit+0x1fc>)
 8003432:	f001 ff51 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003436:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800343a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003450:	230e      	movs	r3, #14
 8003452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003456:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800345a:	4619      	mov	r1, r3
 800345c:	480d      	ldr	r0, [pc, #52]	; (8003494 <HAL_LTDC_MspInit+0x200>)
 800345e:	f001 ff3b 	bl	80052d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	2105      	movs	r1, #5
 8003466:	2058      	movs	r0, #88	; 0x58
 8003468:	f001 f840 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800346c:	2058      	movs	r0, #88	; 0x58
 800346e:	f001 f859 	bl	8004524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003472:	bf00      	nop
 8003474:	37b8      	adds	r7, #184	; 0xb8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40016800 	.word	0x40016800
 8003480:	40023800 	.word	0x40023800
 8003484:	40021000 	.word	0x40021000
 8003488:	40022400 	.word	0x40022400
 800348c:	40022800 	.word	0x40022800
 8003490:	40021800 	.word	0x40021800
 8003494:	40022000 	.word	0x40022000

08003498 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b0a4      	sub	sp, #144	; 0x90
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	2284      	movs	r2, #132	; 0x84
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f009 f9d7 	bl	800c85c <memset>
  if(hrtc->Instance==RTC)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a0e      	ldr	r2, [pc, #56]	; (80034ec <HAL_RTC_MspInit+0x54>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d114      	bne.n	80034e2 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034b8:	2320      	movs	r3, #32
 80034ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80034bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	4618      	mov	r0, r3
 80034c8:	f004 f8ae 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80034d2:	f7fe fc53 	bl	8001d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RTC_MspInit+0x58>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <HAL_RTC_MspInit+0x58>)
 80034dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3790      	adds	r7, #144	; 0x90
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40002800 	.word	0x40002800
 80034f0:	40023800 	.word	0x40023800

080034f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <HAL_SPI_MspInit+0xb4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d144      	bne.n	80035a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003516:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a24      	ldr	r2, [pc, #144]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <HAL_SPI_MspInit+0xb8>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800355e:	2303      	movs	r3, #3
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800356e:	2305      	movs	r3, #5
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	480d      	ldr	r0, [pc, #52]	; (80035b0 <HAL_SPI_MspInit+0xbc>)
 800357a:	f001 fead 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800357e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003590:	2305      	movs	r3, #5
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4619      	mov	r1, r3
 800359a:	4806      	ldr	r0, [pc, #24]	; (80035b4 <HAL_SPI_MspInit+0xc0>)
 800359c:	f001 fe9c 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40003800 	.word	0x40003800
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40020400 	.word	0x40020400

080035b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	; 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_TIM_Base_MspInit+0x10c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10c      	bne.n	80035f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	4a3a      	ldr	r2, [pc, #232]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6453      	str	r3, [r2, #68]	; 0x44
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80035f2:	e062      	b.n	80036ba <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d10c      	bne.n	8003618 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
}
 8003616:	e050      	b.n	80036ba <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <HAL_TIM_Base_MspInit+0x114>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10c      	bne.n	800363c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a28      	ldr	r2, [pc, #160]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]
}
 800363a:	e03e      	b.n	80036ba <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <HAL_TIM_Base_MspInit+0x118>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10c      	bne.n	8003660 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 800364c:	f043 0308 	orr.w	r3, r3, #8
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
}
 800365e:	e02c      	b.n	80036ba <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_TIM_Base_MspInit+0x11c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d127      	bne.n	80036ba <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	6453      	str	r3, [r2, #68]	; 0x44
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_TIM_Base_MspInit+0x110>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800369a:	2304      	movs	r3, #4
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036aa:	2303      	movs	r3, #3
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b2:	4619      	mov	r1, r3
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <HAL_TIM_Base_MspInit+0x120>)
 80036b6:	f001 fe0f 	bl	80052d8 <HAL_GPIO_Init>
}
 80036ba:	bf00      	nop
 80036bc:	3738      	adds	r7, #56	; 0x38
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40010400 	.word	0x40010400
 80036d8:	40022000 	.word	0x40022000

080036dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b0b0      	sub	sp, #192	; 0xc0
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f8:	2284      	movs	r2, #132	; 0x84
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f009 f8ad 	bl	800c85c <memset>
  if(huart->Instance==UART7)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a79      	ldr	r2, [pc, #484]	; (80038ec <HAL_UART_MspInit+0x210>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d13d      	bne.n	8003788 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800370c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800371c:	4618      	mov	r0, r3
 800371e:	f003 ff83 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003728:	f7fe fb28 	bl	8001d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800372c:	4b70      	ldr	r3, [pc, #448]	; (80038f0 <HAL_UART_MspInit+0x214>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	4a6f      	ldr	r2, [pc, #444]	; (80038f0 <HAL_UART_MspInit+0x214>)
 8003732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003736:	6413      	str	r3, [r2, #64]	; 0x40
 8003738:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <HAL_UART_MspInit+0x214>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_UART_MspInit+0x214>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a69      	ldr	r2, [pc, #420]	; (80038f0 <HAL_UART_MspInit+0x214>)
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	6313      	str	r3, [r2, #48]	; 0x30
 8003750:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <HAL_UART_MspInit+0x214>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800375c:	23c0      	movs	r3, #192	; 0xc0
 800375e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	2302      	movs	r3, #2
 8003764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376e:	2303      	movs	r3, #3
 8003770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003774:	2308      	movs	r3, #8
 8003776:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800377a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800377e:	4619      	mov	r1, r3
 8003780:	485c      	ldr	r0, [pc, #368]	; (80038f4 <HAL_UART_MspInit+0x218>)
 8003782:	f001 fda9 	bl	80052d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003786:	e0ac      	b.n	80038e2 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5a      	ldr	r2, [pc, #360]	; (80038f8 <HAL_UART_MspInit+0x21c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d165      	bne.n	800385e <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003792:	2340      	movs	r3, #64	; 0x40
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003796:	2300      	movs	r3, #0
 8003798:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800379a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 ff42 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80037aa:	f7fe fae7 	bl	8001d7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037ae:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	4a4f      	ldr	r2, [pc, #316]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037b4:	f043 0310 	orr.w	r3, r3, #16
 80037b8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a49      	ldr	r2, [pc, #292]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a43      	ldr	r2, [pc, #268]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800380e:	2307      	movs	r3, #7
 8003810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003814:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003818:	4619      	mov	r1, r3
 800381a:	4838      	ldr	r0, [pc, #224]	; (80038fc <HAL_UART_MspInit+0x220>)
 800381c:	f001 fd5c 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800383a:	2307      	movs	r3, #7
 800383c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003840:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003844:	4619      	mov	r1, r3
 8003846:	482e      	ldr	r0, [pc, #184]	; (8003900 <HAL_UART_MspInit+0x224>)
 8003848:	f001 fd46 	bl	80052d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2107      	movs	r1, #7
 8003850:	2025      	movs	r0, #37	; 0x25
 8003852:	f000 fe4b 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003856:	2025      	movs	r0, #37	; 0x25
 8003858:	f000 fe64 	bl	8004524 <HAL_NVIC_EnableIRQ>
}
 800385c:	e041      	b.n	80038e2 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a28      	ldr	r2, [pc, #160]	; (8003904 <HAL_UART_MspInit+0x228>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d13c      	bne.n	80038e2 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003878:	4618      	mov	r0, r3
 800387a:	f003 fed5 	bl	8007628 <HAL_RCCEx_PeriphCLKConfig>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8003884:	f7fe fa7a 	bl	8001d7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_UART_MspInit+0x214>)
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_UART_MspInit+0x214>)
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	6453      	str	r3, [r2, #68]	; 0x44
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_UART_MspInit+0x214>)
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	6313      	str	r3, [r2, #48]	; 0x30
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_UART_MspInit+0x214>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80038b8:	23c0      	movs	r3, #192	; 0xc0
 80038ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038d0:	2308      	movs	r3, #8
 80038d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038da:	4619      	mov	r1, r3
 80038dc:	480a      	ldr	r0, [pc, #40]	; (8003908 <HAL_UART_MspInit+0x22c>)
 80038de:	f001 fcfb 	bl	80052d8 <HAL_GPIO_Init>
}
 80038e2:	bf00      	nop
 80038e4:	37c0      	adds	r7, #192	; 0xc0
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40007800 	.word	0x40007800
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40021400 	.word	0x40021400
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40020400 	.word	0x40020400
 8003900:	40020000 	.word	0x40020000
 8003904:	40011400 	.word	0x40011400
 8003908:	40020800 	.word	0x40020800

0800390c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003920:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <HAL_FMC_MspInit+0x100>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d16d      	bne.n	8003a04 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003928:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <HAL_FMC_MspInit+0x100>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800392e:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <HAL_FMC_MspInit+0x104>)
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <HAL_FMC_MspInit+0x104>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6393      	str	r3, [r2, #56]	; 0x38
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <HAL_FMC_MspInit+0x104>)
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003946:	f64f 7383 	movw	r3, #65411	; 0xff83
 800394a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003958:	230c      	movs	r3, #12
 800395a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	4619      	mov	r1, r3
 8003960:	482c      	ldr	r0, [pc, #176]	; (8003a14 <HAL_FMC_MspInit+0x108>)
 8003962:	f001 fcb9 	bl	80052d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003966:	f248 1333 	movw	r3, #33075	; 0x8133
 800396a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003978:	230c      	movs	r3, #12
 800397a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	4619      	mov	r1, r3
 8003980:	4825      	ldr	r0, [pc, #148]	; (8003a18 <HAL_FMC_MspInit+0x10c>)
 8003982:	f001 fca9 	bl	80052d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003986:	f24c 7303 	movw	r3, #50947	; 0xc703
 800398a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003998:	230c      	movs	r3, #12
 800399a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	481e      	ldr	r0, [pc, #120]	; (8003a1c <HAL_FMC_MspInit+0x110>)
 80039a2:	f001 fc99 	bl	80052d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80039a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039aa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039b8:	230c      	movs	r3, #12
 80039ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	4817      	ldr	r0, [pc, #92]	; (8003a20 <HAL_FMC_MspInit+0x114>)
 80039c2:	f001 fc89 	bl	80052d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80039c6:	2328      	movs	r3, #40	; 0x28
 80039c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039d6:	230c      	movs	r3, #12
 80039d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4811      	ldr	r0, [pc, #68]	; (8003a24 <HAL_FMC_MspInit+0x118>)
 80039e0:	f001 fc7a 	bl	80052d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80039e4:	2308      	movs	r3, #8
 80039e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f0:	2303      	movs	r3, #3
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039f4:	230c      	movs	r3, #12
 80039f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	480a      	ldr	r0, [pc, #40]	; (8003a28 <HAL_FMC_MspInit+0x11c>)
 80039fe:	f001 fc6b 	bl	80052d8 <HAL_GPIO_Init>
 8003a02:	e000      	b.n	8003a06 <HAL_FMC_MspInit+0xfa>
    return;
 8003a04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	2000054c 	.word	0x2000054c
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40021800 	.word	0x40021800
 8003a1c:	40020c00 	.word	0x40020c00
 8003a20:	40021400 	.word	0x40021400
 8003a24:	40021c00 	.word	0x40021c00
 8003a28:	40020800 	.word	0x40020800

08003a2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003a34:	f7ff ff6a 	bl	800390c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	2036      	movs	r0, #54	; 0x36
 8003a56:	f000 fd49 	bl	80044ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a5a:	2036      	movs	r0, #54	; 0x36
 8003a5c:	f000 fd62 	bl	8004524 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a60:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <HAL_InitTick+0xa0>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_InitTick+0xa0>)
 8003a66:	f043 0310 	orr.w	r3, r3, #16
 8003a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_InitTick+0xa0>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a78:	f107 0210 	add.w	r2, r7, #16
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fd9e 	bl	80075c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a88:	f003 fd74 	bl	8007574 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_InitTick+0xa4>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	0c9b      	lsrs	r3, r3, #18
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_InitTick+0xac>)
 8003aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003aac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003ac0:	4809      	ldr	r0, [pc, #36]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003ac2:	f004 feb5 	bl	8008830 <HAL_TIM_Base_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003acc:	4806      	ldr	r0, [pc, #24]	; (8003ae8 <HAL_InitTick+0xa8>)
 8003ace:	f004 ff07 	bl	80088e0 <HAL_TIM_Base_Start_IT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	e000      	b.n	8003ad8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3730      	adds	r7, #48	; 0x30
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	2000860c 	.word	0x2000860c
 8003aec:	40001000 	.word	0x40001000

08003af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <NMI_Handler+0x4>

08003af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <HardFault_Handler+0x4>

08003afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <MemManage_Handler+0x4>

08003b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <BusFault_Handler+0x4>

08003b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <UsageFault_Handler+0x4>

08003b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NC1_Pin);
 8003b20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b24:	f001 feaa 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <USART1_IRQHandler+0x10>)
 8003b32:	f005 fb93 	bl	800925c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20008294 	.word	0x20008294

08003b40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP2_Pin);
 8003b44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b48:	f001 fe98 	bl	800587c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <TIM6_DAC_IRQHandler+0x20>)
 8003b56:	791b      	ldrb	r3, [r3, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003b5e:	4804      	ldr	r0, [pc, #16]	; (8003b70 <TIM6_DAC_IRQHandler+0x20>)
 8003b60:	f000 fd10 	bl	8004584 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <TIM6_DAC_IRQHandler+0x24>)
 8003b66:	f004 ff33 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000831c 	.word	0x2000831c
 8003b74:	2000860c 	.word	0x2000860c

08003b78 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <LTDC_IRQHandler+0x10>)
 8003b7e:	f002 fd9f 	bl	80066c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20008158 	.word	0x20008158

08003b8c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <DMA2D_IRQHandler+0x10>)
 8003b92:	f001 f963 	bl	8004e5c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20008420 	.word	0x20008420

08003ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <SystemInit+0x20>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <SystemInit+0x20>)
 8003bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bc8:	480d      	ldr	r0, [pc, #52]	; (8003c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bca:	490e      	ldr	r1, [pc, #56]	; (8003c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003be0:	4c0b      	ldr	r4, [pc, #44]	; (8003c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bee:	f7ff ffd7 	bl	8003ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bf2:	f008 fdff 	bl	800c7f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bf6:	f7fc fe7d 	bl	80008f4 <main>
  bx  lr    
 8003bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bfc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c04:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003c08:	08032c6c 	.word	0x08032c6c
  ldr r2, =_sbss
 8003c0c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003c10:	20008668 	.word	0x20008668

08003c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c14:	e7fe      	b.n	8003c14 <ADC_IRQHandler>

08003c16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f000 fc5b 	bl	80044d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c20:	200f      	movs	r0, #15
 8003c22:	f7ff ff0d 	bl	8003a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c26:	f7ff f94d 	bl	8002ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x20>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_IncTick+0x24>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_IncTick+0x24>)
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000044 	.word	0x20000044
 8003c54:	20008658 	.word	0x20008658

08003c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_GetTick+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20008658 	.word	0x20008658

08003c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff ffee 	bl	8003c58 <HAL_GetTick>
 8003c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d005      	beq.n	8003c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_Delay+0x44>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c96:	bf00      	nop
 8003c98:	f7ff ffde 	bl	8003c58 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d8f7      	bhi.n	8003c98 <HAL_Delay+0x28>
  {
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000044 	.word	0x20000044

08003cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e031      	b.n	8003d32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff f91c 	bl	8002f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <HAL_ADC_Init+0x84>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa3e 	bl	8004188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
 8003d22:	e001      	b.n	8003d28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	ffffeefd 	.word	0xffffeefd

08003d40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Start+0x1a>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0ad      	b.n	8003eb6 <HAL_ADC_Start+0x176>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d018      	beq.n	8003da2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003d80:	4b50      	ldr	r3, [pc, #320]	; (8003ec4 <HAL_ADC_Start+0x184>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a50      	ldr	r2, [pc, #320]	; (8003ec8 <HAL_ADC_Start+0x188>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9a      	lsrs	r2, r3, #18
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003d94:	e002      	b.n	8003d9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f9      	bne.n	8003d96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d175      	bne.n	8003e9c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db4:	4b45      	ldr	r3, [pc, #276]	; (8003ecc <HAL_ADC_Start+0x18c>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d106      	bne.n	8003dfa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f023 0206 	bic.w	r2, r3, #6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
 8003df8:	e002      	b.n	8003e00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_ADC_Start+0x190>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d143      	bne.n	8003eb4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	e03a      	b.n	8003eb4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <HAL_ADC_Start+0x194>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d10e      	bne.n	8003e66 <HAL_ADC_Start+0x126>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_ADC_Start+0x190>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d120      	bne.n	8003eb4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_ADC_Start+0x198>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_ADC_Start+0x174>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d114      	bne.n	8003eb4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	e00b      	b.n	8003eb4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f043 0210 	orr.w	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f043 0201 	orr.w	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	2000003c 	.word	0x2000003c
 8003ec8:	431bde83 	.word	0x431bde83
 8003ecc:	fffff8fe 	.word	0xfffff8fe
 8003ed0:	40012300 	.word	0x40012300
 8003ed4:	40012000 	.word	0x40012000
 8003ed8:	40012200 	.word	0x40012200

08003edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x1c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e136      	b.n	8004166 <HAL_ADC_ConfigChannel+0x28a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	d93a      	bls.n	8003f7e <HAL_ADC_ConfigChannel+0xa2>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f10:	d035      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68d9      	ldr	r1, [r3, #12]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	3b1e      	subs	r3, #30
 8003f28:	2207      	movs	r2, #7
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	400a      	ands	r2, r1
 8003f36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a8d      	ldr	r2, [pc, #564]	; (8004174 <HAL_ADC_ConfigChannel+0x298>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10a      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68d9      	ldr	r1, [r3, #12]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	061a      	lsls	r2, r3, #24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f56:	e035      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68d9      	ldr	r1, [r3, #12]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4403      	add	r3, r0
 8003f70:	3b1e      	subs	r3, #30
 8003f72:	409a      	lsls	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f7c:	e022      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6919      	ldr	r1, [r3, #16]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	2207      	movs	r2, #7
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6919      	ldr	r1, [r3, #16]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4403      	add	r3, r0
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d824      	bhi.n	8004016 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b05      	subs	r3, #5
 8003fde:	221f      	movs	r2, #31
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	400a      	ands	r2, r1
 8003fec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	3b05      	subs	r3, #5
 8004008:	fa00 f203 	lsl.w	r2, r0, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	635a      	str	r2, [r3, #52]	; 0x34
 8004014:	e04c      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d824      	bhi.n	8004068 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	3b23      	subs	r3, #35	; 0x23
 8004030:	221f      	movs	r2, #31
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43da      	mvns	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	400a      	ands	r2, r1
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	4618      	mov	r0, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	3b23      	subs	r3, #35	; 0x23
 800405a:	fa00 f203 	lsl.w	r2, r0, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
 8004066:	e023      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	3b41      	subs	r3, #65	; 0x41
 800407a:	221f      	movs	r2, #31
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43da      	mvns	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	400a      	ands	r2, r1
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	4618      	mov	r0, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	3b41      	subs	r3, #65	; 0x41
 80040a4:	fa00 f203 	lsl.w	r2, r0, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	; (8004178 <HAL_ADC_ConfigChannel+0x29c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10a      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1f4>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c2:	d105      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80040c4:	4b2d      	ldr	r3, [pc, #180]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a2c      	ldr	r2, [pc, #176]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 80040ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80040ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a28      	ldr	r2, [pc, #160]	; (8004178 <HAL_ADC_ConfigChannel+0x29c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10f      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x21e>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b12      	cmp	r3, #18
 80040e0:	d10b      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4a25      	ldr	r2, [pc, #148]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 80040e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 80040f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_ADC_ConfigChannel+0x29c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d12b      	bne.n	800415c <HAL_ADC_ConfigChannel+0x280>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <HAL_ADC_ConfigChannel+0x298>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <HAL_ADC_ConfigChannel+0x23a>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b11      	cmp	r3, #17
 8004114:	d122      	bne.n	800415c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 800411c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004120:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <HAL_ADC_ConfigChannel+0x2a0>)
 8004128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a10      	ldr	r2, [pc, #64]	; (8004174 <HAL_ADC_ConfigChannel+0x298>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d111      	bne.n	800415c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_ADC_ConfigChannel+0x2a4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_ADC_ConfigChannel+0x2a8>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0c9a      	lsrs	r2, r3, #18
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800414e:	e002      	b.n	8004156 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f9      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	10000012 	.word	0x10000012
 8004178:	40012000 	.word	0x40012000
 800417c:	40012300 	.word	0x40012300
 8004180:	2000003c 	.word	0x2000003c
 8004184:	431bde83 	.word	0x431bde83

08004188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004190:	4b78      	ldr	r3, [pc, #480]	; (8004374 <ADC_Init+0x1ec>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a77      	ldr	r2, [pc, #476]	; (8004374 <ADC_Init+0x1ec>)
 8004196:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800419a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800419c:	4b75      	ldr	r3, [pc, #468]	; (8004374 <ADC_Init+0x1ec>)
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4973      	ldr	r1, [pc, #460]	; (8004374 <ADC_Init+0x1ec>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	021a      	lsls	r2, r3, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	4a58      	ldr	r2, [pc, #352]	; (8004378 <ADC_Init+0x1f0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800422a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800424c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	e00f      	b.n	8004282 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004280:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0202 	bic.w	r2, r2, #2
 8004290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	005a      	lsls	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01b      	beq.n	80042e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	3b01      	subs	r3, #1
 80042dc:	035a      	lsls	r2, r3, #13
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e007      	b.n	80042f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	3b01      	subs	r3, #1
 8004314:	051a      	lsls	r2, r3, #20
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800432c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800433a:	025a      	lsls	r2, r3, #9
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	029a      	lsls	r2, r3, #10
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40012300 	.word	0x40012300
 8004378:	0f000001 	.word	0x0f000001

0800437c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <__NVIC_SetPriorityGrouping+0x40>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004398:	4013      	ands	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <__NVIC_SetPriorityGrouping+0x40>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00
 80043c0:	05fa0000 	.word	0x05fa0000

080043c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <__NVIC_GetPriorityGrouping+0x18>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	f003 0307 	and.w	r3, r3, #7
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	db0b      	blt.n	800440a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	f003 021f 	and.w	r2, r3, #31
 80043f8:	4907      	ldr	r1, [pc, #28]	; (8004418 <__NVIC_EnableIRQ+0x38>)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2001      	movs	r0, #1
 8004402:	fa00 f202 	lsl.w	r2, r0, r2
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000e100 	.word	0xe000e100

0800441c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	2b00      	cmp	r3, #0
 800442e:	db0a      	blt.n	8004446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	490c      	ldr	r1, [pc, #48]	; (8004468 <__NVIC_SetPriority+0x4c>)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	440b      	add	r3, r1
 8004440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004444:	e00a      	b.n	800445c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <__NVIC_SetPriority+0x50>)
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	3b04      	subs	r3, #4
 8004454:	0112      	lsls	r2, r2, #4
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	440b      	add	r3, r1
 800445a:	761a      	strb	r2, [r3, #24]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000e100 	.word	0xe000e100
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f1c3 0307 	rsb	r3, r3, #7
 800448a:	2b04      	cmp	r3, #4
 800448c:	bf28      	it	cs
 800448e:	2304      	movcs	r3, #4
 8004490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3304      	adds	r3, #4
 8004496:	2b06      	cmp	r3, #6
 8004498:	d902      	bls.n	80044a0 <NVIC_EncodePriority+0x30>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3b03      	subs	r3, #3
 800449e:	e000      	b.n	80044a2 <NVIC_EncodePriority+0x32>
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43da      	mvns	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	401a      	ands	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b8:	f04f 31ff 	mov.w	r1, #4294967295
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	fa01 f303 	lsl.w	r3, r1, r3
 80044c2:	43d9      	mvns	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c8:	4313      	orrs	r3, r2
         );
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff4c 	bl	800437c <__NVIC_SetPriorityGrouping>
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044fe:	f7ff ff61 	bl	80043c4 <__NVIC_GetPriorityGrouping>
 8004502:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f7ff ffb1 	bl	8004470 <NVIC_EncodePriority>
 800450e:	4602      	mov	r2, r0
 8004510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff ff80 	bl	800441c <__NVIC_SetPriority>
}
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff54 	bl	80043e0 <__NVIC_EnableIRQ>
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e014      	b.n	800457c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	791b      	ldrb	r3, [r3, #4]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fe fd44 	bl	8002ff0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	d120      	bne.n	80045de <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d118      	bne.n	80045de <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045d6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f82d 	bl	8004638 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ec:	d120      	bne.n	8004630 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045fc:	d118      	bne.n	8004630 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f043 0202 	orr.w	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004618:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f85d 	bl	80046ea <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	795b      	ldrb	r3, [r3, #5]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_DAC_ConfigChannel+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e03c      	b.n	80046de <HAL_DAC_ConfigChannel+0x92>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4013      	ands	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	22c0      	movs	r2, #192	; 0xc0
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	400a      	ands	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800470c:	f7ff faa4 	bl	8003c58 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e099      	b.n	8004850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473c:	e00f      	b.n	800475e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800473e:	f7ff fa8b 	bl	8003c58 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b05      	cmp	r3, #5
 800474a:	d908      	bls.n	800475e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2203      	movs	r2, #3
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e078      	b.n	8004850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e8      	bne.n	800473e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <HAL_DMA_Init+0x158>)
 8004778:	4013      	ands	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4313      	orrs	r3, r2
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d117      	bne.n	8004822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f94f 	bl	8004aa8 <DMA_CheckFifoParam>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800481e:	2301      	movs	r3, #1
 8004820:	e016      	b.n	8004850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f906 	bl	8004a3c <DMA_CalcBaseAndBitshift>
 8004830:	4603      	mov	r3, r0
 8004832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	223f      	movs	r2, #63	; 0x3f
 800483a:	409a      	lsls	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	f010803f 	.word	0xf010803f

0800485c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e050      	b.n	8004910 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d101      	bne.n	800487e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	e048      	b.n	8004910 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2221      	movs	r2, #33	; 0x21
 80048bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8bc 	bl	8004a3c <DMA_CalcBaseAndBitshift>
 80048c4:	4603      	mov	r3, r0
 80048c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	223f      	movs	r2, #63	; 0x3f
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004926:	f7ff f997 	bl	8003c58 <HAL_GetTick>
 800492a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d008      	beq.n	800494a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e052      	b.n	80049f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0216 	bic.w	r2, r2, #22
 8004958:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004968:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_DMA_Abort+0x62>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0208 	bic.w	r2, r2, #8
 8004988:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499a:	e013      	b.n	80049c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800499c:	f7ff f95c 	bl	8003c58 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d90c      	bls.n	80049c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2203      	movs	r2, #3
 80049b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e015      	b.n	80049f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e4      	bne.n	800499c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d6:	223f      	movs	r2, #63	; 0x3f
 80049d8:	409a      	lsls	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d004      	beq.n	8004a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00c      	b.n	8004a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2205      	movs	r2, #5
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	3b10      	subs	r3, #16
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <DMA_CalcBaseAndBitshift+0x60>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d908      	bls.n	8004a7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	1d1a      	adds	r2, r3, #4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	659a      	str	r2, [r3, #88]	; 0x58
 8004a7a:	e006      	b.n	8004a8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	aaaaaaab 	.word	0xaaaaaaab
 8004aa0:	08032bf4 	.word	0x08032bf4
 8004aa4:	fffffc00 	.word	0xfffffc00

08004aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11f      	bne.n	8004b02 <DMA_CheckFifoParam+0x5a>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d856      	bhi.n	8004b76 <DMA_CheckFifoParam+0xce>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <DMA_CheckFifoParam+0x28>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af3 	.word	0x08004af3
 8004ad8:	08004ae1 	.word	0x08004ae1
 8004adc:	08004b77 	.word	0x08004b77
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d046      	beq.n	8004b7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af0:	e043      	b.n	8004b7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004afa:	d140      	bne.n	8004b7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b00:	e03d      	b.n	8004b7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	d121      	bne.n	8004b50 <DMA_CheckFifoParam+0xa8>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d837      	bhi.n	8004b82 <DMA_CheckFifoParam+0xda>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <DMA_CheckFifoParam+0x70>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b2f 	.word	0x08004b2f
 8004b20:	08004b29 	.word	0x08004b29
 8004b24:	08004b41 	.word	0x08004b41
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2c:	e030      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d025      	beq.n	8004b86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3e:	e022      	b.n	8004b86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b48:	d11f      	bne.n	8004b8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b4e:	e01c      	b.n	8004b8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d903      	bls.n	8004b5e <DMA_CheckFifoParam+0xb6>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d003      	beq.n	8004b64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b5c:	e018      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
      break;
 8004b62:	e015      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      break;
 8004b74:	e00b      	b.n	8004b8e <DMA_CheckFifoParam+0xe6>
      break;
 8004b76:	bf00      	nop
 8004b78:	e00a      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e008      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e006      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
 8004b84:	e004      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <DMA_CheckFifoParam+0xe8>
      break;
 8004b8e:	bf00      	nop
    }
  } 
  
  return status; 
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop

08004ba0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e039      	b.n	8004c26 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe fa5a 	bl	8003080 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	f023 0107 	bic.w	r1, r3, #7
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_DMA2D_Init+0x90>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d1      	ldr	r1, [r2, #12]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	430b      	orrs	r3, r1
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	ffffc000 	.word	0xffffc000

08004c34 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_DMA2D_Start+0x1c>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e018      	b.n	8004c82 <HAL_DMA2D_Start+0x4e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa98 	bl	80051a0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d056      	beq.n	8004d54 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca6:	f7fe ffd7 	bl	8003c58 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004cac:	e04b      	b.n	8004d46 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d023      	beq.n	8004d08 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	f043 0202 	orr.w	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	f043 0201 	orr.w	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2221      	movs	r2, #33	; 0x21
 8004cf2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0a5      	b.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d01a      	beq.n	8004d46 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fe ffa2 	bl	8003c58 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <HAL_DMA2D_PollForTransfer+0x9c>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2203      	movs	r2, #3
 8004d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e086      	b.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ac      	beq.n	8004cae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d061      	beq.n	8004e3a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d76:	f7fe ff6f 	bl	8003c58 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d7c:	e056      	b.n	8004e2c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02e      	beq.n	8004dee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	f043 0204 	orr.w	r2, r3, #4
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	f043 0202 	orr.w	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2229      	movs	r2, #41	; 0x29
 8004dd8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e032      	b.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d01a      	beq.n	8004e2c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fe ff2f 	bl	8003c58 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <HAL_DMA2D_PollForTransfer+0x182>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e013      	b.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0a1      	beq.n	8004d7e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2212      	movs	r2, #18
 8004e40:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d026      	beq.n	8004ecc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d021      	beq.n	8004ecc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e96:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d026      	beq.n	8004f24 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d021      	beq.n	8004f24 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eee:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	f043 0202 	orr.w	r2, r3, #2
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2204      	movs	r2, #4
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d026      	beq.n	8004f7c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d021      	beq.n	8004f7c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	f043 0204 	orr.w	r2, r3, #4
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f853 	bl	8005054 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d024      	beq.n	8005002 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01f      	beq.n	8005002 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01a      	beq.n	800504c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005024:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2210      	movs	r2, #16
 800502c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f80e 	bl	8005068 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_DMA2D_ConfigLayer+0x20>
 8005098:	2302      	movs	r3, #2
 800509a:	e079      	b.n	8005190 <HAL_DMA2D_ConfigLayer+0x114>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	3318      	adds	r3, #24
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80050c6:	4b35      	ldr	r3, [pc, #212]	; (800519c <HAL_DMA2D_ConfigLayer+0x120>)
 80050c8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b0a      	cmp	r3, #10
 80050d0:	d003      	beq.n	80050da <HAL_DMA2D_ConfigLayer+0x5e>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d107      	bne.n	80050ea <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e005      	b.n	80050f6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	061b      	lsls	r3, r3, #24
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d120      	bne.n	800513e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	43db      	mvns	r3, r3
 8005106:	ea02 0103 	and.w	r1, r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	430a      	orrs	r2, r1
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b0a      	cmp	r3, #10
 8005124:	d003      	beq.n	800512e <HAL_DMA2D_ConfigLayer+0xb2>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b09      	cmp	r3, #9
 800512c:	d127      	bne.n	800517e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
 800513c:	e01f      	b.n	800517e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	43db      	mvns	r3, r3
 8005148:	ea02 0103 	and.w	r1, r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	430a      	orrs	r2, r1
 8005154:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b0a      	cmp	r3, #10
 8005166:	d003      	beq.n	8005170 <HAL_DMA2D_ConfigLayer+0xf4>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b09      	cmp	r3, #9
 800516e:	d106      	bne.n	800517e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800517c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	ff03000f 	.word	0xff03000f

080051a0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b08b      	sub	sp, #44	; 0x2c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	041a      	lsls	r2, r3, #16
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	431a      	orrs	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051d8:	d174      	bne.n	80052c4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051e0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051e8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051f0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	431a      	orrs	r2, r3
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	4313      	orrs	r3, r2
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
 8005210:	e053      	b.n	80052ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d106      	bne.n	8005228 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	4313      	orrs	r3, r2
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e048      	b.n	80052ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d111      	bne.n	8005254 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	0cdb      	lsrs	r3, r3, #19
 8005234:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	0a9b      	lsrs	r3, r3, #10
 800523a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	02db      	lsls	r3, r3, #11
 800524a:	4313      	orrs	r3, r2
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
 8005252:	e032      	b.n	80052ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d117      	bne.n	800528c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	0fdb      	lsrs	r3, r3, #31
 8005260:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	0cdb      	lsrs	r3, r3, #19
 8005266:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	0adb      	lsrs	r3, r3, #11
 800526c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	08db      	lsrs	r3, r3, #3
 8005272:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	029b      	lsls	r3, r3, #10
 800527c:	431a      	orrs	r2, r3
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	03db      	lsls	r3, r3, #15
 8005282:	4313      	orrs	r3, r2
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	e016      	b.n	80052ba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	0f1b      	lsrs	r3, r3, #28
 8005290:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	0d1b      	lsrs	r3, r3, #20
 8005296:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	0b1b      	lsrs	r3, r3, #12
 800529c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	011a      	lsls	r2, r3, #4
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	431a      	orrs	r2, r3
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	4313      	orrs	r3, r2
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80052c2:	e003      	b.n	80052cc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	60da      	str	r2, [r3, #12]
}
 80052cc:	bf00      	nop
 80052ce:	372c      	adds	r7, #44	; 0x2c
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	; 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e175      	b.n	80055e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052f8:	2201      	movs	r2, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	429a      	cmp	r2, r3
 8005312:	f040 8164 	bne.w	80055de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d005      	beq.n	800532e <HAL_GPIO_Init+0x56>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d130      	bne.n	8005390 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	2203      	movs	r2, #3
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005364:	2201      	movs	r2, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 0201 	and.w	r2, r3, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b03      	cmp	r3, #3
 800539a:	d017      	beq.n	80053cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d123      	bne.n	8005420 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	08da      	lsrs	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3208      	adds	r2, #8
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	220f      	movs	r2, #15
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	08da      	lsrs	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3208      	adds	r2, #8
 800541a:	69b9      	ldr	r1, [r7, #24]
 800541c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2203      	movs	r2, #3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0203 	and.w	r2, r3, #3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80be 	beq.w	80055de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005462:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_GPIO_Init+0x324>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_GPIO_Init+0x324>)
 8005468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800546c:	6453      	str	r3, [r2, #68]	; 0x44
 800546e:	4b63      	ldr	r3, [pc, #396]	; (80055fc <HAL_GPIO_Init+0x324>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800547a:	4a61      	ldr	r2, [pc, #388]	; (8005600 <HAL_GPIO_Init+0x328>)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	220f      	movs	r2, #15
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_GPIO_Init+0x32c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d037      	beq.n	8005516 <HAL_GPIO_Init+0x23e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a57      	ldr	r2, [pc, #348]	; (8005608 <HAL_GPIO_Init+0x330>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d031      	beq.n	8005512 <HAL_GPIO_Init+0x23a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a56      	ldr	r2, [pc, #344]	; (800560c <HAL_GPIO_Init+0x334>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d02b      	beq.n	800550e <HAL_GPIO_Init+0x236>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a55      	ldr	r2, [pc, #340]	; (8005610 <HAL_GPIO_Init+0x338>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d025      	beq.n	800550a <HAL_GPIO_Init+0x232>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a54      	ldr	r2, [pc, #336]	; (8005614 <HAL_GPIO_Init+0x33c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01f      	beq.n	8005506 <HAL_GPIO_Init+0x22e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a53      	ldr	r2, [pc, #332]	; (8005618 <HAL_GPIO_Init+0x340>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d019      	beq.n	8005502 <HAL_GPIO_Init+0x22a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_GPIO_Init+0x344>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_GPIO_Init+0x226>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a51      	ldr	r2, [pc, #324]	; (8005620 <HAL_GPIO_Init+0x348>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00d      	beq.n	80054fa <HAL_GPIO_Init+0x222>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a50      	ldr	r2, [pc, #320]	; (8005624 <HAL_GPIO_Init+0x34c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <HAL_GPIO_Init+0x21e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a4f      	ldr	r2, [pc, #316]	; (8005628 <HAL_GPIO_Init+0x350>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_GPIO_Init+0x21a>
 80054ee:	2309      	movs	r3, #9
 80054f0:	e012      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054f2:	230a      	movs	r3, #10
 80054f4:	e010      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054f6:	2308      	movs	r3, #8
 80054f8:	e00e      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054fa:	2307      	movs	r3, #7
 80054fc:	e00c      	b.n	8005518 <HAL_GPIO_Init+0x240>
 80054fe:	2306      	movs	r3, #6
 8005500:	e00a      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005502:	2305      	movs	r3, #5
 8005504:	e008      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005506:	2304      	movs	r3, #4
 8005508:	e006      	b.n	8005518 <HAL_GPIO_Init+0x240>
 800550a:	2303      	movs	r3, #3
 800550c:	e004      	b.n	8005518 <HAL_GPIO_Init+0x240>
 800550e:	2302      	movs	r3, #2
 8005510:	e002      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_GPIO_Init+0x240>
 8005516:	2300      	movs	r3, #0
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	f002 0203 	and.w	r2, r2, #3
 800551e:	0092      	lsls	r2, r2, #2
 8005520:	4093      	lsls	r3, r2
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005528:	4935      	ldr	r1, [pc, #212]	; (8005600 <HAL_GPIO_Init+0x328>)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	3302      	adds	r3, #2
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005536:	4b3d      	ldr	r3, [pc, #244]	; (800562c <HAL_GPIO_Init+0x354>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800555a:	4a34      	ldr	r2, [pc, #208]	; (800562c <HAL_GPIO_Init+0x354>)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_GPIO_Init+0x354>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005584:	4a29      	ldr	r2, [pc, #164]	; (800562c <HAL_GPIO_Init+0x354>)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800558a:	4b28      	ldr	r3, [pc, #160]	; (800562c <HAL_GPIO_Init+0x354>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_GPIO_Init+0x354>)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055b4:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_GPIO_Init+0x354>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <HAL_GPIO_Init+0x354>)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	f67f ae86 	bls.w	80052f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	40013800 	.word	0x40013800
 8005604:	40020000 	.word	0x40020000
 8005608:	40020400 	.word	0x40020400
 800560c:	40020800 	.word	0x40020800
 8005610:	40020c00 	.word	0x40020c00
 8005614:	40021000 	.word	0x40021000
 8005618:	40021400 	.word	0x40021400
 800561c:	40021800 	.word	0x40021800
 8005620:	40021c00 	.word	0x40021c00
 8005624:	40022000 	.word	0x40022000
 8005628:	40022400 	.word	0x40022400
 800562c:	40013c00 	.word	0x40013c00

08005630 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e0d9      	b.n	8005800 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800564c:	2201      	movs	r2, #1
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4013      	ands	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	f040 80c9 	bne.w	80057fa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005668:	4a6b      	ldr	r2, [pc, #428]	; (8005818 <HAL_GPIO_DeInit+0x1e8>)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	3302      	adds	r3, #2
 8005670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005674:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	220f      	movs	r2, #15
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a63      	ldr	r2, [pc, #396]	; (800581c <HAL_GPIO_DeInit+0x1ec>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d037      	beq.n	8005702 <HAL_GPIO_DeInit+0xd2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a62      	ldr	r2, [pc, #392]	; (8005820 <HAL_GPIO_DeInit+0x1f0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d031      	beq.n	80056fe <HAL_GPIO_DeInit+0xce>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a61      	ldr	r2, [pc, #388]	; (8005824 <HAL_GPIO_DeInit+0x1f4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <HAL_GPIO_DeInit+0xca>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a60      	ldr	r2, [pc, #384]	; (8005828 <HAL_GPIO_DeInit+0x1f8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d025      	beq.n	80056f6 <HAL_GPIO_DeInit+0xc6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a5f      	ldr	r2, [pc, #380]	; (800582c <HAL_GPIO_DeInit+0x1fc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01f      	beq.n	80056f2 <HAL_GPIO_DeInit+0xc2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a5e      	ldr	r2, [pc, #376]	; (8005830 <HAL_GPIO_DeInit+0x200>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d019      	beq.n	80056ee <HAL_GPIO_DeInit+0xbe>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a5d      	ldr	r2, [pc, #372]	; (8005834 <HAL_GPIO_DeInit+0x204>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_GPIO_DeInit+0xba>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a5c      	ldr	r2, [pc, #368]	; (8005838 <HAL_GPIO_DeInit+0x208>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00d      	beq.n	80056e6 <HAL_GPIO_DeInit+0xb6>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a5b      	ldr	r2, [pc, #364]	; (800583c <HAL_GPIO_DeInit+0x20c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <HAL_GPIO_DeInit+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a5a      	ldr	r2, [pc, #360]	; (8005840 <HAL_GPIO_DeInit+0x210>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_GPIO_DeInit+0xae>
 80056da:	2309      	movs	r3, #9
 80056dc:	e012      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056de:	230a      	movs	r3, #10
 80056e0:	e010      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056e2:	2308      	movs	r3, #8
 80056e4:	e00e      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056e6:	2307      	movs	r3, #7
 80056e8:	e00c      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056ea:	2306      	movs	r3, #6
 80056ec:	e00a      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056ee:	2305      	movs	r3, #5
 80056f0:	e008      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056f2:	2304      	movs	r3, #4
 80056f4:	e006      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056f6:	2303      	movs	r3, #3
 80056f8:	e004      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e002      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_GPIO_DeInit+0xd4>
 8005702:	2300      	movs	r3, #0
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	f002 0203 	and.w	r2, r2, #3
 800570a:	0092      	lsls	r2, r2, #2
 800570c:	4093      	lsls	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	d132      	bne.n	800577a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005714:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	43db      	mvns	r3, r3
 800571c:	4949      	ldr	r1, [pc, #292]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 800571e:	4013      	ands	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005722:	4b48      	ldr	r3, [pc, #288]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	43db      	mvns	r3, r3
 800572a:	4946      	ldr	r1, [pc, #280]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 800572c:	4013      	ands	r3, r2
 800572e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005730:	4b44      	ldr	r3, [pc, #272]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	43db      	mvns	r3, r3
 8005738:	4942      	ldr	r1, [pc, #264]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 800573a:	4013      	ands	r3, r2
 800573c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800573e:	4b41      	ldr	r3, [pc, #260]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	43db      	mvns	r3, r3
 8005746:	493f      	ldr	r1, [pc, #252]	; (8005844 <HAL_GPIO_DeInit+0x214>)
 8005748:	4013      	ands	r3, r2
 800574a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800575c:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <HAL_GPIO_DeInit+0x1e8>)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	089b      	lsrs	r3, r3, #2
 8005762:	3302      	adds	r3, #2
 8005764:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	43da      	mvns	r2, r3
 800576c:	482a      	ldr	r0, [pc, #168]	; (8005818 <HAL_GPIO_DeInit+0x1e8>)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	400a      	ands	r2, r1
 8005774:	3302      	adds	r3, #2
 8005776:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2103      	movs	r1, #3
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	08da      	lsrs	r2, r3, #3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3208      	adds	r2, #8
 8005798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	220f      	movs	r2, #15
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	08d2      	lsrs	r2, r2, #3
 80057b0:	4019      	ands	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3208      	adds	r2, #8
 80057b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	2103      	movs	r1, #3
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	401a      	ands	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	2101      	movs	r1, #1
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	401a      	ands	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	2103      	movs	r1, #3
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	401a      	ands	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3301      	adds	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	f67f af22 	bls.w	800564c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40013800 	.word	0x40013800
 800581c:	40020000 	.word	0x40020000
 8005820:	40020400 	.word	0x40020400
 8005824:	40020800 	.word	0x40020800
 8005828:	40020c00 	.word	0x40020c00
 800582c:	40021000 	.word	0x40021000
 8005830:	40021400 	.word	0x40021400
 8005834:	40021800 	.word	0x40021800
 8005838:	40021c00 	.word	0x40021c00
 800583c:	40022000 	.word	0x40022000
 8005840:	40022400 	.word	0x40022400
 8005844:	40013c00 	.word	0x40013c00

08005848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005858:	787b      	ldrb	r3, [r7, #1]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005864:	e003      	b.n	800586e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005866:	887b      	ldrh	r3, [r7, #2]
 8005868:	041a      	lsls	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc f992 	bl	8001bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40013c00 	.word	0x40013c00

080058ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fd fbfa 	bl	80030cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800590c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d107      	bne.n	8005926 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	e006      	b.n	8005934 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005932:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d104      	bne.n	8005946 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005944:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_I2C_Init+0x11c>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69d9      	ldr	r1, [r3, #28]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	02008000 	.word	0x02008000

080059cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e021      	b.n	8005a22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2224      	movs	r2, #36	; 0x24
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fd fc10 	bl	800321c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	f040 80f9 	bne.w	8005c46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_I2C_Mem_Write+0x34>
 8005a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0ed      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Mem_Write+0x4e>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e0e6      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a82:	f7fe f8e9 	bl	8003c58 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2319      	movs	r3, #25
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fad1 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0d1      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2221      	movs	r2, #33	; 0x21
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005acc:	88f8      	ldrh	r0, [r7, #6]
 8005ace:	893a      	ldrh	r2, [r7, #8]
 8005ad0:	8979      	ldrh	r1, [r7, #10]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4603      	mov	r3, r0
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f9e1 	bl	8005ea4 <I2C_RequestMemoryWrite>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0a9      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d90e      	bls.n	8005b1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	8979      	ldrh	r1, [r7, #10]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fc39 	bl	800638c <I2C_TransferConfig>
 8005b1a:	e00f      	b.n	8005b3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	8979      	ldrh	r1, [r7, #10]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fc28 	bl	800638c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fabb 	bl	80060bc <I2C_WaitOnTXISFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e07b      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d034      	beq.n	8005bf4 <HAL_I2C_Mem_Write+0x1c8>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d130      	bne.n	8005bf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa4d 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e04d      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2bff      	cmp	r3, #255	; 0xff
 8005bb4:	d90e      	bls.n	8005bd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	22ff      	movs	r2, #255	; 0xff
 8005bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	8979      	ldrh	r1, [r7, #10]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fbdd 	bl	800638c <I2C_TransferConfig>
 8005bd2:	e00f      	b.n	8005bf4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	8979      	ldrh	r1, [r7, #10]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fbcc 	bl	800638c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d19e      	bne.n	8005b3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa9a 	bl	800613c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e01a      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2220      	movs	r2, #32
 8005c18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_I2C_Mem_Write+0x224>)
 8005c26:	400b      	ands	r3, r1
 8005c28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e000      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	fe00e800 	.word	0xfe00e800

08005c54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	817b      	strh	r3, [r7, #10]
 8005c66:	460b      	mov	r3, r1
 8005c68:	813b      	strh	r3, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	f040 80fd 	bne.w	8005e76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_I2C_Mem_Read+0x34>
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0f1      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_I2C_Mem_Read+0x4e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e0ea      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005caa:	f7fd ffd5 	bl	8003c58 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2319      	movs	r3, #25
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f9bd 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0d5      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2222      	movs	r2, #34	; 0x22
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cf4:	88f8      	ldrh	r0, [r7, #6]
 8005cf6:	893a      	ldrh	r2, [r7, #8]
 8005cf8:	8979      	ldrh	r1, [r7, #10]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4603      	mov	r3, r0
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f921 	bl	8005f4c <I2C_RequestMemoryRead>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0ad      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2bff      	cmp	r3, #255	; 0xff
 8005d24:	d90e      	bls.n	8005d44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	8979      	ldrh	r1, [r7, #10]
 8005d34:	4b52      	ldr	r3, [pc, #328]	; (8005e80 <HAL_I2C_Mem_Read+0x22c>)
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fb25 	bl	800638c <I2C_TransferConfig>
 8005d42:	e00f      	b.n	8005d64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	8979      	ldrh	r1, [r7, #10]
 8005d56:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <HAL_I2C_Mem_Read+0x22c>)
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fb14 	bl	800638c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2104      	movs	r1, #4
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f964 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07c      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d034      	beq.n	8005e24 <HAL_I2C_Mem_Read+0x1d0>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d130      	bne.n	8005e24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	; 0x80
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f935 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e04d      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2bff      	cmp	r3, #255	; 0xff
 8005de4:	d90e      	bls.n	8005e04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	22ff      	movs	r2, #255	; 0xff
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	8979      	ldrh	r1, [r7, #10]
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fac5 	bl	800638c <I2C_TransferConfig>
 8005e02:	e00f      	b.n	8005e24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	8979      	ldrh	r1, [r7, #10]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fab4 	bl	800638c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d19a      	bne.n	8005d64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f982 	bl	800613c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e01a      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2220      	movs	r2, #32
 8005e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_I2C_Mem_Read+0x230>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e000      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e76:	2302      	movs	r3, #2
  }
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	80002400 	.word	0x80002400
 8005e84:	fe00e800 	.word	0xfe00e800

08005e88 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e96:	b2db      	uxtb	r3, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	817b      	strh	r3, [r7, #10]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	813b      	strh	r3, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	8979      	ldrh	r1, [r7, #10]
 8005ec4:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <I2C_RequestMemoryWrite+0xa4>)
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fa5d 	bl	800638c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 f8f0 	bl	80060bc <I2C_WaitOnTXISFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e02c      	b.n	8005f40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ef6:	e015      	b.n	8005f24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ef8:	893b      	ldrh	r3, [r7, #8]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f8d6 	bl	80060bc <I2C_WaitOnTXISFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e012      	b.n	8005f40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1a:	893b      	ldrh	r3, [r7, #8]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2180      	movs	r1, #128	; 0x80
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f884 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	80002000 	.word	0x80002000

08005f4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	817b      	strh	r3, [r7, #10]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	813b      	strh	r3, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	8979      	ldrh	r1, [r7, #10]
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <I2C_RequestMemoryRead+0xa4>)
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fa0a 	bl	800638c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f89d 	bl	80060bc <I2C_WaitOnTXISFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e02c      	b.n	8005fe6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f92:	893b      	ldrh	r3, [r7, #8]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f9c:	e015      	b.n	8005fca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f9e:	893b      	ldrh	r3, [r7, #8]
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f883 	bl	80060bc <I2C_WaitOnTXISFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e012      	b.n	8005fe6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc0:	893b      	ldrh	r3, [r7, #8]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2140      	movs	r1, #64	; 0x40
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f831 	bl	800603c <I2C_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	80002000 	.word	0x80002000

08005ff4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d103      	bne.n	8006012 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2200      	movs	r2, #0
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d007      	beq.n	8006030 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	619a      	str	r2, [r3, #24]
  }
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800604c:	e022      	b.n	8006094 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d01e      	beq.n	8006094 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fd fdff 	bl	8003c58 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d113      	bne.n	8006094 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e00f      	b.n	80060b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4013      	ands	r3, r2
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d0cd      	beq.n	800604e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060c8:	e02c      	b.n	8006124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f870 	bl	80061b4 <I2C_IsErrorOccurred>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e02a      	b.n	8006134 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d01e      	beq.n	8006124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fd fdb7 	bl	8003c58 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d113      	bne.n	8006124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e007      	b.n	8006134 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b02      	cmp	r3, #2
 8006130:	d1cb      	bne.n	80060ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006148:	e028      	b.n	800619c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f830 	bl	80061b4 <I2C_IsErrorOccurred>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e026      	b.n	80061ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fd fd7b 	bl	8003c58 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d113      	bne.n	800619c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e007      	b.n	80061ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d1cf      	bne.n	800614a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d075      	beq.n	80062cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2210      	movs	r2, #16
 80061e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061e8:	e056      	b.n	8006298 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d052      	beq.n	8006298 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061f2:	f7fd fd31 	bl	8003c58 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <I2C_IsErrorOccurred+0x54>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d147      	bne.n	8006298 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006212:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622a:	d12e      	bne.n	800628a <I2C_IsErrorOccurred+0xd6>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006232:	d02a      	beq.n	800628a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006234:	7cfb      	ldrb	r3, [r7, #19]
 8006236:	2b20      	cmp	r3, #32
 8006238:	d027      	beq.n	800628a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006248:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800624a:	f7fd fd05 	bl	8003c58 <HAL_GetTick>
 800624e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006250:	e01b      	b.n	800628a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006252:	f7fd fd01 	bl	8003c58 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b19      	cmp	r3, #25
 800625e:	d914      	bls.n	800628a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b20      	cmp	r3, #32
 8006296:	d1dc      	bne.n	8006252 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d003      	beq.n	80062ae <I2C_IsErrorOccurred+0xfa>
 80062a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d09d      	beq.n	80061ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2220      	movs	r2, #32
 80062bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f043 0304 	orr.w	r3, r3, #4
 80062c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f043 0308 	orr.w	r3, r3, #8
 8006306:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f043 0302 	orr.w	r3, r3, #2
 8006328:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800633a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01c      	beq.n	800637c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fe56 	bl	8005ff4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <I2C_IsErrorOccurred+0x1d4>)
 8006354:	400b      	ands	r3, r1
 8006356:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	431a      	orrs	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800637c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006380:	4618      	mov	r0, r3
 8006382:	3728      	adds	r7, #40	; 0x28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	fe00e800 	.word	0xfe00e800

0800638c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	4613      	mov	r3, r2
 800639c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800639e:	897b      	ldrh	r3, [r7, #10]
 80063a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063a4:	7a7b      	ldrb	r3, [r7, #9]
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063ac:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ba:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	0d5b      	lsrs	r3, r3, #21
 80063c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <I2C_TransferConfig+0x60>)
 80063cc:	430b      	orrs	r3, r1
 80063ce:	43db      	mvns	r3, r3
 80063d0:	ea02 0103 	and.w	r1, r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	03ff63ff 	.word	0x03ff63ff

080063f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b20      	cmp	r3, #32
 8006404:	d138      	bne.n	8006478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006410:	2302      	movs	r3, #2
 8006412:	e032      	b.n	800647a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2224      	movs	r2, #36	; 0x24
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6819      	ldr	r1, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b20      	cmp	r3, #32
 800649a:	d139      	bne.n	8006510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e033      	b.n	8006512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2224      	movs	r2, #36	; 0x24
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0bf      	b.n	80066b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fc fea4 	bl	8003294 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006562:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6999      	ldr	r1, [r3, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006578:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6899      	ldr	r1, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b4a      	ldr	r3, [pc, #296]	; (80066bc <HAL_LTDC_Init+0x19c>)
 8006594:	400b      	ands	r3, r1
 8006596:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6899      	ldr	r1, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68d9      	ldr	r1, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4b3e      	ldr	r3, [pc, #248]	; (80066bc <HAL_LTDC_Init+0x19c>)
 80065c2:	400b      	ands	r3, r1
 80065c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	041b      	lsls	r3, r3, #16
 80065cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68d9      	ldr	r1, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1a      	ldr	r2, [r3, #32]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6919      	ldr	r1, [r3, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b33      	ldr	r3, [pc, #204]	; (80066bc <HAL_LTDC_Init+0x19c>)
 80065f0:	400b      	ands	r3, r1
 80065f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6919      	ldr	r1, [r3, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6959      	ldr	r1, [r3, #20]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	4b27      	ldr	r3, [pc, #156]	; (80066bc <HAL_LTDC_Init+0x19c>)
 800661e:	400b      	ands	r3, r1
 8006620:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	041b      	lsls	r3, r3, #16
 8006628:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6959      	ldr	r1, [r3, #20]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006662:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0206 	orr.w	r2, r2, #6
 800668e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	f000f800 	.word	0xf000f800

080066c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d023      	beq.n	800672a <HAL_LTDC_IRQHandler+0x6a>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01e      	beq.n	800672a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2204      	movs	r2, #4
 8006702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2204      	movs	r2, #4
 8006718:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f86f 	bl	8006808 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d023      	beq.n	800677c <HAL_LTDC_IRQHandler+0xbc>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01e      	beq.n	800677c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0202 	bic.w	r2, r2, #2
 800674c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2202      	movs	r2, #2
 8006754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800675c:	f043 0202 	orr.w	r2, r3, #2
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2204      	movs	r2, #4
 800676a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f846 	bl	8006808 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01b      	beq.n	80067be <HAL_LTDC_IRQHandler+0xfe>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d016      	beq.n	80067be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f82f 	bl	800681c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01b      	beq.n	8006800 <HAL_LTDC_IRQHandler+0x140>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0208 	bic.w	r2, r2, #8
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2208      	movs	r2, #8
 80067e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f818 	bl	8006830 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006844:	b5b0      	push	{r4, r5, r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_LTDC_ConfigLayer+0x1a>
 800685a:	2302      	movs	r3, #2
 800685c:	e02c      	b.n	80068b8 <HAL_LTDC_ConfigLayer+0x74>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2134      	movs	r1, #52	; 0x34
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	4413      	add	r3, r2
 800687a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4614      	mov	r4, r2
 8006882:	461d      	mov	r5, r3
 8006884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800688e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f81f 	bl	80068dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bdb0      	pop	{r4, r5, r7, pc}

080068c0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068ce:	b2db      	uxtb	r3, r3
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b089      	sub	sp, #36	; 0x24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	4413      	add	r3, r2
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	01db      	lsls	r3, r3, #7
 8006908:	4413      	add	r3, r2
 800690a:	3384      	adds	r3, #132	; 0x84
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	4611      	mov	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	01d2      	lsls	r2, r2, #7
 8006918:	440a      	add	r2, r1
 800691a:	3284      	adds	r2, #132	; 0x84
 800691c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006920:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006932:	4413      	add	r3, r2
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	440b      	add	r3, r1
 8006942:	3384      	adds	r3, #132	; 0x84
 8006944:	4619      	mov	r1, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4313      	orrs	r3, r2
 800694a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800695a:	4413      	add	r3, r2
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	01db      	lsls	r3, r3, #7
 800696a:	4413      	add	r3, r2
 800696c:	3384      	adds	r3, #132	; 0x84
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	4611      	mov	r1, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	01d2      	lsls	r2, r2, #7
 800697a:	440a      	add	r2, r1
 800697c:	3284      	adds	r2, #132	; 0x84
 800697e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006982:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006992:	4413      	add	r3, r2
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	440b      	add	r3, r1
 80069a2:	3384      	adds	r3, #132	; 0x84
 80069a4:	4619      	mov	r1, r3
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	01db      	lsls	r3, r3, #7
 80069b6:	4413      	add	r3, r2
 80069b8:	3384      	adds	r3, #132	; 0x84
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	4611      	mov	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	01d2      	lsls	r2, r2, #7
 80069c6:	440a      	add	r2, r1
 80069c8:	3284      	adds	r2, #132	; 0x84
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	01db      	lsls	r3, r3, #7
 80069da:	4413      	add	r3, r2
 80069dc:	3384      	adds	r3, #132	; 0x84
 80069de:	461a      	mov	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	061b      	lsls	r3, r3, #24
 8006a00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3384      	adds	r3, #132	; 0x84
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	01db      	lsls	r3, r3, #7
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3384      	adds	r3, #132	; 0x84
 8006a20:	461a      	mov	r2, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	01db      	lsls	r3, r3, #7
 8006a40:	440b      	add	r3, r1
 8006a42:	3384      	adds	r3, #132	; 0x84
 8006a44:	4619      	mov	r1, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	01db      	lsls	r3, r3, #7
 8006a56:	4413      	add	r3, r2
 8006a58:	3384      	adds	r3, #132	; 0x84
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	4611      	mov	r1, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	01d2      	lsls	r2, r2, #7
 8006a66:	440a      	add	r2, r1
 8006a68:	3284      	adds	r2, #132	; 0x84
 8006a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	01db      	lsls	r3, r3, #7
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3384      	adds	r3, #132	; 0x84
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	01db      	lsls	r3, r3, #7
 8006a90:	4413      	add	r3, r2
 8006a92:	3384      	adds	r3, #132	; 0x84
 8006a94:	69da      	ldr	r2, [r3, #28]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	01db      	lsls	r3, r3, #7
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3384      	adds	r3, #132	; 0x84
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <LTDC_SetConfig+0x32c>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	68f9      	ldr	r1, [r7, #12]
 8006ab6:	6809      	ldr	r1, [r1, #0]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	01c9      	lsls	r1, r1, #7
 8006abe:	4401      	add	r1, r0
 8006ac0:	3184      	adds	r1, #132	; 0x84
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3384      	adds	r3, #132	; 0x84
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	01db      	lsls	r3, r3, #7
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3384      	adds	r3, #132	; 0x84
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	4413      	add	r3, r2
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006b08:	2304      	movs	r3, #4
 8006b0a:	61fb      	str	r3, [r7, #28]
 8006b0c:	e01b      	b.n	8006b46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d102      	bne.n	8006b1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006b16:	2303      	movs	r3, #3
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	e014      	b.n	8006b46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d00b      	beq.n	8006b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d007      	beq.n	8006b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d003      	beq.n	8006b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d102      	bne.n	8006b42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e001      	b.n	8006b46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006b42:	2301      	movs	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	01db      	lsls	r3, r3, #7
 8006b50:	4413      	add	r3, r2
 8006b52:	3384      	adds	r3, #132	; 0x84
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	01d2      	lsls	r2, r2, #7
 8006b60:	440a      	add	r2, r1
 8006b62:	3284      	adds	r2, #132	; 0x84
 8006b64:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006b68:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	fb02 f303 	mul.w	r3, r2, r3
 8006b74:	041a      	lsls	r2, r3, #16
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6859      	ldr	r1, [r3, #4]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1acb      	subs	r3, r1, r3
 8006b80:	69f9      	ldr	r1, [r7, #28]
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	3303      	adds	r3, #3
 8006b88:	68f9      	ldr	r1, [r7, #12]
 8006b8a:	6809      	ldr	r1, [r1, #0]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	01c9      	lsls	r1, r1, #7
 8006b92:	4401      	add	r1, r0
 8006b94:	3184      	adds	r1, #132	; 0x84
 8006b96:	4313      	orrs	r3, r2
 8006b98:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	01db      	lsls	r3, r3, #7
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3384      	adds	r3, #132	; 0x84
 8006ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	01db      	lsls	r3, r3, #7
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3384      	adds	r3, #132	; 0x84
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <LTDC_SetConfig+0x330>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	01db      	lsls	r3, r3, #7
 8006bca:	4413      	add	r3, r2
 8006bcc:	3384      	adds	r3, #132	; 0x84
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	4413      	add	r3, r2
 8006be2:	3384      	adds	r3, #132	; 0x84
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	4611      	mov	r1, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	01d2      	lsls	r2, r2, #7
 8006bf0:	440a      	add	r2, r1
 8006bf2:	3284      	adds	r2, #132	; 0x84
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	fffff8f8 	.word	0xfffff8f8
 8006c0c:	fffff800 	.word	0xfffff800

08006c10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a04      	ldr	r2, [pc, #16]	; (8006c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1e:	6013      	str	r3, [r2, #0]
}
 8006c20:	bf00      	nop
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40007000 	.word	0x40007000

08006c30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006c3a:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	4a22      	ldr	r2, [pc, #136]	; (8006cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6413      	str	r3, [r2, #64]	; 0x40
 8006c46:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006c52:	4b1e      	ldr	r3, [pc, #120]	; (8006ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c5e:	f7fc fffb 	bl	8003c58 <HAL_GetTick>
 8006c62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c64:	e009      	b.n	8006c7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c66:	f7fc fff7 	bl	8003c58 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c74:	d901      	bls.n	8006c7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e022      	b.n	8006cc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c86:	d1ee      	bne.n	8006c66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c88:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a0f      	ldr	r2, [pc, #60]	; (8006ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c94:	f7fc ffe0 	bl	8003c58 <HAL_GetTick>
 8006c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c9a:	e009      	b.n	8006cb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c9c:	f7fc ffdc 	bl	8003c58 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006caa:	d901      	bls.n	8006cb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e007      	b.n	8006cc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cbc:	d1ee      	bne.n	8006c9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40007000 	.word	0x40007000

08006cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e291      	b.n	800720a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8087 	beq.w	8006e02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf4:	4b96      	ldr	r3, [pc, #600]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 030c 	and.w	r3, r3, #12
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d00c      	beq.n	8006d1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d00:	4b93      	ldr	r3, [pc, #588]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 030c 	and.w	r3, r3, #12
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d112      	bne.n	8006d32 <HAL_RCC_OscConfig+0x62>
 8006d0c:	4b90      	ldr	r3, [pc, #576]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d18:	d10b      	bne.n	8006d32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1a:	4b8d      	ldr	r3, [pc, #564]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d06c      	beq.n	8006e00 <HAL_RCC_OscConfig+0x130>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d168      	bne.n	8006e00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e26b      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d106      	bne.n	8006d4a <HAL_RCC_OscConfig+0x7a>
 8006d3c:	4b84      	ldr	r3, [pc, #528]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a83      	ldr	r2, [pc, #524]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e02e      	b.n	8006da8 <HAL_RCC_OscConfig+0xd8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10c      	bne.n	8006d6c <HAL_RCC_OscConfig+0x9c>
 8006d52:	4b7f      	ldr	r3, [pc, #508]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7e      	ldr	r2, [pc, #504]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	4b7c      	ldr	r3, [pc, #496]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a7b      	ldr	r2, [pc, #492]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e01d      	b.n	8006da8 <HAL_RCC_OscConfig+0xd8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0xc0>
 8006d76:	4b76      	ldr	r3, [pc, #472]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a75      	ldr	r2, [pc, #468]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	4b73      	ldr	r3, [pc, #460]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a72      	ldr	r2, [pc, #456]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0xd8>
 8006d90:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6e      	ldr	r2, [pc, #440]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b6c      	ldr	r3, [pc, #432]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a6b      	ldr	r2, [pc, #428]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d013      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fc ff52 	bl	8003c58 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db8:	f7fc ff4e 	bl	8003c58 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e21f      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dca:	4b61      	ldr	r3, [pc, #388]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0xe8>
 8006dd6:	e014      	b.n	8006e02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fc ff3e 	bl	8003c58 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de0:	f7fc ff3a 	bl	8003c58 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b64      	cmp	r3, #100	; 0x64
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e20b      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006df2:	4b57      	ldr	r3, [pc, #348]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0x110>
 8006dfe:	e000      	b.n	8006e02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d069      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e0e:	4b50      	ldr	r3, [pc, #320]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e1a:	4b4d      	ldr	r3, [pc, #308]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d11c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x190>
 8006e26:	4b4a      	ldr	r3, [pc, #296]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d116      	bne.n	8006e60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e32:	4b47      	ldr	r3, [pc, #284]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_RCC_OscConfig+0x17a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d001      	beq.n	8006e4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e1df      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4a:	4b41      	ldr	r3, [pc, #260]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	493d      	ldr	r1, [pc, #244]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5e:	e040      	b.n	8006ee2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e68:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a38      	ldr	r2, [pc, #224]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e74:	f7fc fef0 	bl	8003c58 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e7c:	f7fc feec 	bl	8003c58 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e1bd      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8e:	4b30      	ldr	r3, [pc, #192]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9a:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4929      	ldr	r1, [pc, #164]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]
 8006eae:	e018      	b.n	8006ee2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb0:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a26      	ldr	r2, [pc, #152]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fc fecc 	bl	8003c58 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec4:	f7fc fec8 	bl	8003c58 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e199      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed6:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d038      	beq.n	8006f60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d019      	beq.n	8006f2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef6:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efa:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006efc:	f043 0301 	orr.w	r3, r3, #1
 8006f00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f02:	f7fc fea9 	bl	8003c58 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f0a:	f7fc fea5 	bl	8003c58 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e176      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_RCC_OscConfig+0x23a>
 8006f28:	e01a      	b.n	8006f60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f2a:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2e:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <HAL_RCC_OscConfig+0x280>)
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f36:	f7fc fe8f 	bl	8003c58 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f3c:	e00a      	b.n	8006f54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3e:	f7fc fe8b 	bl	8003c58 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d903      	bls.n	8006f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e15c      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
 8006f50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f54:	4b91      	ldr	r3, [pc, #580]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1ee      	bne.n	8006f3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80a4 	beq.w	80070b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f6e:	4b8b      	ldr	r3, [pc, #556]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7a:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	4a87      	ldr	r2, [pc, #540]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f84:	6413      	str	r3, [r2, #64]	; 0x40
 8006f86:	4b85      	ldr	r3, [pc, #532]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f96:	4b82      	ldr	r3, [pc, #520]	; (80071a0 <HAL_RCC_OscConfig+0x4d0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d118      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006fa2:	4b7f      	ldr	r3, [pc, #508]	; (80071a0 <HAL_RCC_OscConfig+0x4d0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a7e      	ldr	r2, [pc, #504]	; (80071a0 <HAL_RCC_OscConfig+0x4d0>)
 8006fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fae:	f7fc fe53 	bl	8003c58 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb6:	f7fc fe4f 	bl	8003c58 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b64      	cmp	r3, #100	; 0x64
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e120      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc8:	4b75      	ldr	r3, [pc, #468]	; (80071a0 <HAL_RCC_OscConfig+0x4d0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d106      	bne.n	8006fea <HAL_RCC_OscConfig+0x31a>
 8006fdc:	4b6f      	ldr	r3, [pc, #444]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe0:	4a6e      	ldr	r2, [pc, #440]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe8:	e02d      	b.n	8007046 <HAL_RCC_OscConfig+0x376>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10c      	bne.n	800700c <HAL_RCC_OscConfig+0x33c>
 8006ff2:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	4a69      	ldr	r2, [pc, #420]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffe:	4b67      	ldr	r3, [pc, #412]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	4a66      	ldr	r2, [pc, #408]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	6713      	str	r3, [r2, #112]	; 0x70
 800700a:	e01c      	b.n	8007046 <HAL_RCC_OscConfig+0x376>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b05      	cmp	r3, #5
 8007012:	d10c      	bne.n	800702e <HAL_RCC_OscConfig+0x35e>
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	4a60      	ldr	r2, [pc, #384]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800701a:	f043 0304 	orr.w	r3, r3, #4
 800701e:	6713      	str	r3, [r2, #112]	; 0x70
 8007020:	4b5e      	ldr	r3, [pc, #376]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	4a5d      	ldr	r2, [pc, #372]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	6713      	str	r3, [r2, #112]	; 0x70
 800702c:	e00b      	b.n	8007046 <HAL_RCC_OscConfig+0x376>
 800702e:	4b5b      	ldr	r3, [pc, #364]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	4a5a      	ldr	r2, [pc, #360]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	6713      	str	r3, [r2, #112]	; 0x70
 800703a:	4b58      	ldr	r3, [pc, #352]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	4a57      	ldr	r2, [pc, #348]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007040:	f023 0304 	bic.w	r3, r3, #4
 8007044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d015      	beq.n	800707a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704e:	f7fc fe03 	bl	8003c58 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007054:	e00a      	b.n	800706c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007056:	f7fc fdff 	bl	8003c58 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	f241 3288 	movw	r2, #5000	; 0x1388
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e0ce      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706c:	4b4b      	ldr	r3, [pc, #300]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ee      	beq.n	8007056 <HAL_RCC_OscConfig+0x386>
 8007078:	e014      	b.n	80070a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707a:	f7fc fded 	bl	8003c58 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007080:	e00a      	b.n	8007098 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007082:	f7fc fde9 	bl	8003c58 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007090:	4293      	cmp	r3, r2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e0b8      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007098:	4b40      	ldr	r3, [pc, #256]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ee      	bne.n	8007082 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d105      	bne.n	80070b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070aa:	4b3c      	ldr	r3, [pc, #240]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	4a3b      	ldr	r2, [pc, #236]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 80070b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80a4 	beq.w	8007208 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070c0:	4b36      	ldr	r3, [pc, #216]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 030c 	and.w	r3, r3, #12
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d06b      	beq.n	80071a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d149      	bne.n	8007168 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d4:	4b31      	ldr	r3, [pc, #196]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a30      	ldr	r2, [pc, #192]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 80070da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fc fdba 	bl	8003c58 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e8:	f7fc fdb6 	bl	8003c58 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e087      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fa:	4b28      	ldr	r3, [pc, #160]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	019b      	lsls	r3, r3, #6
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	3b01      	subs	r3, #1
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	4313      	orrs	r3, r2
 800712c:	4a1b      	ldr	r2, [pc, #108]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800712e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007132:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007134:	4b19      	ldr	r3, [pc, #100]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a18      	ldr	r2, [pc, #96]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800713a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800713e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fc fd8a 	bl	8003c58 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fc fd86 	bl	8003c58 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e057      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f0      	beq.n	8007148 <HAL_RCC_OscConfig+0x478>
 8007166:	e04f      	b.n	8007208 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a0b      	ldr	r2, [pc, #44]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 800716e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007174:	f7fc fd70 	bl	8003c58 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717c:	f7fc fd6c 	bl	8003c58 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e03d      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718e:	4b03      	ldr	r3, [pc, #12]	; (800719c <HAL_RCC_OscConfig+0x4cc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x4ac>
 800719a:	e035      	b.n	8007208 <HAL_RCC_OscConfig+0x538>
 800719c:	40023800 	.word	0x40023800
 80071a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <HAL_RCC_OscConfig+0x544>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d028      	beq.n	8007204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071bc:	429a      	cmp	r2, r3
 80071be:	d121      	bne.n	8007204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d11a      	bne.n	8007204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071d4:	4013      	ands	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071dc:	4293      	cmp	r3, r2
 80071de:	d111      	bne.n	8007204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	3b01      	subs	r3, #1
 80071ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d107      	bne.n	8007204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d001      	beq.n	8007208 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800

08007218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0d0      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007230:	4b6a      	ldr	r3, [pc, #424]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d910      	bls.n	8007260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723e:	4b67      	ldr	r3, [pc, #412]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f023 020f 	bic.w	r2, r3, #15
 8007246:	4965      	ldr	r1, [pc, #404]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	4313      	orrs	r3, r2
 800724c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724e:	4b63      	ldr	r3, [pc, #396]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d001      	beq.n	8007260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e0b8      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d020      	beq.n	80072ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007278:	4b59      	ldr	r3, [pc, #356]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4a58      	ldr	r2, [pc, #352]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 800727e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007290:	4b53      	ldr	r3, [pc, #332]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	4a52      	ldr	r2, [pc, #328]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800729a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800729c:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	494d      	ldr	r1, [pc, #308]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d040      	beq.n	800733c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d107      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c2:	4b47      	ldr	r3, [pc, #284]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d115      	bne.n	80072fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e07f      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d107      	bne.n	80072ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072da:	4b41      	ldr	r3, [pc, #260]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e073      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ea:	4b3d      	ldr	r3, [pc, #244]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e06b      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072fa:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f023 0203 	bic.w	r2, r3, #3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4936      	ldr	r1, [pc, #216]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007308:	4313      	orrs	r3, r2
 800730a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730c:	f7fc fca4 	bl	8003c58 <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007312:	e00a      	b.n	800732a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007314:	f7fc fca0 	bl	8003c58 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e053      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 020c 	and.w	r2, r3, #12
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	429a      	cmp	r2, r3
 800733a:	d1eb      	bne.n	8007314 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800733c:	4b27      	ldr	r3, [pc, #156]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d210      	bcs.n	800736c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	4922      	ldr	r1, [pc, #136]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800735a:	4b20      	ldr	r3, [pc, #128]	; (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e032      	b.n	80073d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d008      	beq.n	800738a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007378:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4916      	ldr	r1, [pc, #88]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007386:	4313      	orrs	r3, r2
 8007388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d009      	beq.n	80073aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	490e      	ldr	r1, [pc, #56]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073aa:	f000 f821 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	490a      	ldr	r1, [pc, #40]	; (80073e4 <HAL_RCC_ClockConfig+0x1cc>)
 80073bc:	5ccb      	ldrb	r3, [r1, r3]
 80073be:	fa22 f303 	lsr.w	r3, r2, r3
 80073c2:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <HAL_RCC_ClockConfig+0x1d0>)
 80073c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <HAL_RCC_ClockConfig+0x1d4>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fc fb38 	bl	8003a40 <HAL_InitTick>

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40023c00 	.word	0x40023c00
 80073e0:	40023800 	.word	0x40023800
 80073e4:	08032bdc 	.word	0x08032bdc
 80073e8:	2000003c 	.word	0x2000003c
 80073ec:	20000040 	.word	0x20000040

080073f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f0:	b5b0      	push	{r4, r5, r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073f6:	2100      	movs	r1, #0
 80073f8:	6079      	str	r1, [r7, #4]
 80073fa:	2100      	movs	r1, #0
 80073fc:	60f9      	str	r1, [r7, #12]
 80073fe:	2100      	movs	r1, #0
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007402:	2100      	movs	r1, #0
 8007404:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007406:	4952      	ldr	r1, [pc, #328]	; (8007550 <HAL_RCC_GetSysClockFreq+0x160>)
 8007408:	6889      	ldr	r1, [r1, #8]
 800740a:	f001 010c 	and.w	r1, r1, #12
 800740e:	2908      	cmp	r1, #8
 8007410:	d00d      	beq.n	800742e <HAL_RCC_GetSysClockFreq+0x3e>
 8007412:	2908      	cmp	r1, #8
 8007414:	f200 8094 	bhi.w	8007540 <HAL_RCC_GetSysClockFreq+0x150>
 8007418:	2900      	cmp	r1, #0
 800741a:	d002      	beq.n	8007422 <HAL_RCC_GetSysClockFreq+0x32>
 800741c:	2904      	cmp	r1, #4
 800741e:	d003      	beq.n	8007428 <HAL_RCC_GetSysClockFreq+0x38>
 8007420:	e08e      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007422:	4b4c      	ldr	r3, [pc, #304]	; (8007554 <HAL_RCC_GetSysClockFreq+0x164>)
 8007424:	60bb      	str	r3, [r7, #8]
      break;
 8007426:	e08e      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007428:	4b4b      	ldr	r3, [pc, #300]	; (8007558 <HAL_RCC_GetSysClockFreq+0x168>)
 800742a:	60bb      	str	r3, [r7, #8]
      break;
 800742c:	e08b      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800742e:	4948      	ldr	r1, [pc, #288]	; (8007550 <HAL_RCC_GetSysClockFreq+0x160>)
 8007430:	6849      	ldr	r1, [r1, #4]
 8007432:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007436:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007438:	4945      	ldr	r1, [pc, #276]	; (8007550 <HAL_RCC_GetSysClockFreq+0x160>)
 800743a:	6849      	ldr	r1, [r1, #4]
 800743c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007440:	2900      	cmp	r1, #0
 8007442:	d024      	beq.n	800748e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007444:	4942      	ldr	r1, [pc, #264]	; (8007550 <HAL_RCC_GetSysClockFreq+0x160>)
 8007446:	6849      	ldr	r1, [r1, #4]
 8007448:	0989      	lsrs	r1, r1, #6
 800744a:	4608      	mov	r0, r1
 800744c:	f04f 0100 	mov.w	r1, #0
 8007450:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007454:	f04f 0500 	mov.w	r5, #0
 8007458:	ea00 0204 	and.w	r2, r0, r4
 800745c:	ea01 0305 	and.w	r3, r1, r5
 8007460:	493d      	ldr	r1, [pc, #244]	; (8007558 <HAL_RCC_GetSysClockFreq+0x168>)
 8007462:	fb01 f003 	mul.w	r0, r1, r3
 8007466:	2100      	movs	r1, #0
 8007468:	fb01 f102 	mul.w	r1, r1, r2
 800746c:	1844      	adds	r4, r0, r1
 800746e:	493a      	ldr	r1, [pc, #232]	; (8007558 <HAL_RCC_GetSysClockFreq+0x168>)
 8007470:	fba2 0101 	umull	r0, r1, r2, r1
 8007474:	1863      	adds	r3, r4, r1
 8007476:	4619      	mov	r1, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	461a      	mov	r2, r3
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	f7f8 fec6 	bl	8000210 <__aeabi_uldivmod>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4613      	mov	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e04a      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800748e:	4b30      	ldr	r3, [pc, #192]	; (8007550 <HAL_RCC_GetSysClockFreq+0x160>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	099b      	lsrs	r3, r3, #6
 8007494:	461a      	mov	r2, r3
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800749e:	f04f 0100 	mov.w	r1, #0
 80074a2:	ea02 0400 	and.w	r4, r2, r0
 80074a6:	ea03 0501 	and.w	r5, r3, r1
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	014b      	lsls	r3, r1, #5
 80074b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074bc:	0142      	lsls	r2, r0, #5
 80074be:	4610      	mov	r0, r2
 80074c0:	4619      	mov	r1, r3
 80074c2:	1b00      	subs	r0, r0, r4
 80074c4:	eb61 0105 	sbc.w	r1, r1, r5
 80074c8:	f04f 0200 	mov.w	r2, #0
 80074cc:	f04f 0300 	mov.w	r3, #0
 80074d0:	018b      	lsls	r3, r1, #6
 80074d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074d6:	0182      	lsls	r2, r0, #6
 80074d8:	1a12      	subs	r2, r2, r0
 80074da:	eb63 0301 	sbc.w	r3, r3, r1
 80074de:	f04f 0000 	mov.w	r0, #0
 80074e2:	f04f 0100 	mov.w	r1, #0
 80074e6:	00d9      	lsls	r1, r3, #3
 80074e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074ec:	00d0      	lsls	r0, r2, #3
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	1912      	adds	r2, r2, r4
 80074f4:	eb45 0303 	adc.w	r3, r5, r3
 80074f8:	f04f 0000 	mov.w	r0, #0
 80074fc:	f04f 0100 	mov.w	r1, #0
 8007500:	0299      	lsls	r1, r3, #10
 8007502:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007506:	0290      	lsls	r0, r2, #10
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	461a      	mov	r2, r3
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	f7f8 fe7a 	bl	8000210 <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4613      	mov	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <HAL_RCC_GetSysClockFreq+0x160>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	3301      	adds	r3, #1
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	60bb      	str	r3, [r7, #8]
      break;
 800753e:	e002      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007540:	4b04      	ldr	r3, [pc, #16]	; (8007554 <HAL_RCC_GetSysClockFreq+0x164>)
 8007542:	60bb      	str	r3, [r7, #8]
      break;
 8007544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007546:	68bb      	ldr	r3, [r7, #8]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bdb0      	pop	{r4, r5, r7, pc}
 8007550:	40023800 	.word	0x40023800
 8007554:	00f42400 	.word	0x00f42400
 8007558:	017d7840 	.word	0x017d7840

0800755c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007560:	4b03      	ldr	r3, [pc, #12]	; (8007570 <HAL_RCC_GetHCLKFreq+0x14>)
 8007562:	681b      	ldr	r3, [r3, #0]
}
 8007564:	4618      	mov	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	2000003c 	.word	0x2000003c

08007574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007578:	f7ff fff0 	bl	800755c <HAL_RCC_GetHCLKFreq>
 800757c:	4602      	mov	r2, r0
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	0a9b      	lsrs	r3, r3, #10
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	4903      	ldr	r1, [pc, #12]	; (8007598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800758a:	5ccb      	ldrb	r3, [r1, r3]
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40023800 	.word	0x40023800
 8007598:	08032bec 	.word	0x08032bec

0800759c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075a0:	f7ff ffdc 	bl	800755c <HAL_RCC_GetHCLKFreq>
 80075a4:	4602      	mov	r2, r0
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	0b5b      	lsrs	r3, r3, #13
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	4903      	ldr	r1, [pc, #12]	; (80075c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075b2:	5ccb      	ldrb	r3, [r1, r3]
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	40023800 	.word	0x40023800
 80075c0:	08032bec 	.word	0x08032bec

080075c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	220f      	movs	r2, #15
 80075d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075d4:	4b12      	ldr	r3, [pc, #72]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0203 	and.w	r2, r3, #3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80075e0:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80075ec:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80075f8:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCC_GetClockConfig+0x5c>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	08db      	lsrs	r3, r3, #3
 80075fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <HAL_RCC_GetClockConfig+0x60>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 020f 	and.w	r2, r3, #15
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800
 8007624:	40023c00 	.word	0x40023c00

08007628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007650:	4b69      	ldr	r3, [pc, #420]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	4a68      	ldr	r2, [pc, #416]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007656:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800765a:	6093      	str	r3, [r2, #8]
 800765c:	4b66      	ldr	r3, [pc, #408]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007664:	4964      	ldr	r1, [pc, #400]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007672:	2301      	movs	r3, #1
 8007674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d017      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007682:	4b5d      	ldr	r3, [pc, #372]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	4959      	ldr	r1, [pc, #356]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a0:	d101      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80076a2:	2301      	movs	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80076ae:	2301      	movs	r3, #1
 80076b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d017      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80076be:	4b4e      	ldr	r3, [pc, #312]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	494a      	ldr	r1, [pc, #296]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076dc:	d101      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80076fa:	2301      	movs	r3, #1
 80076fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 808b 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800770c:	4b3a      	ldr	r3, [pc, #232]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	4a39      	ldr	r2, [pc, #228]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007716:	6413      	str	r3, [r2, #64]	; 0x40
 8007718:	4b37      	ldr	r3, [pc, #220]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007724:	4b35      	ldr	r3, [pc, #212]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a34      	ldr	r2, [pc, #208]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800772a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007730:	f7fc fa92 	bl	8003c58 <HAL_GetTick>
 8007734:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007736:	e008      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007738:	f7fc fa8e 	bl	8003c58 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d901      	bls.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e357      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800774a:	4b2c      	ldr	r3, [pc, #176]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007756:	4b28      	ldr	r3, [pc, #160]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d035      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d02e      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007774:	4b20      	ldr	r3, [pc, #128]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800777e:	4b1e      	ldr	r3, [pc, #120]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	4a1d      	ldr	r2, [pc, #116]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007788:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800778a:	4b1b      	ldr	r3, [pc, #108]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778e:	4a1a      	ldr	r2, [pc, #104]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007796:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800779c:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800779e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d114      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a8:	f7fc fa56 	bl	8003c58 <HAL_GetTick>
 80077ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ae:	e00a      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077b0:	f7fc fa52 	bl	8003c58 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80077be:	4293      	cmp	r3, r2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e319      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0ee      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077de:	d111      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80077ec:	4b04      	ldr	r3, [pc, #16]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077ee:	400b      	ands	r3, r1
 80077f0:	4901      	ldr	r1, [pc, #4]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	608b      	str	r3, [r1, #8]
 80077f6:	e00b      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80077f8:	40023800 	.word	0x40023800
 80077fc:	40007000 	.word	0x40007000
 8007800:	0ffffcff 	.word	0x0ffffcff
 8007804:	4bb1      	ldr	r3, [pc, #708]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4ab0      	ldr	r2, [pc, #704]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800780a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800780e:	6093      	str	r3, [r2, #8]
 8007810:	4bae      	ldr	r3, [pc, #696]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781c:	49ab      	ldr	r1, [pc, #684]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800781e:	4313      	orrs	r3, r2
 8007820:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	2b00      	cmp	r3, #0
 800782c:	d010      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800782e:	4ba7      	ldr	r3, [pc, #668]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007834:	4aa5      	ldr	r2, [pc, #660]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800783e:	4ba3      	ldr	r3, [pc, #652]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007840:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	49a0      	ldr	r1, [pc, #640]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800785c:	4b9b      	ldr	r3, [pc, #620]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800785e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800786a:	4998      	ldr	r1, [pc, #608]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800787e:	4b93      	ldr	r3, [pc, #588]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800788c:	498f      	ldr	r1, [pc, #572]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078a0:	4b8a      	ldr	r3, [pc, #552]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	4987      	ldr	r1, [pc, #540]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078c2:	4b82      	ldr	r3, [pc, #520]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d0:	497e      	ldr	r1, [pc, #504]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078e4:	4b79      	ldr	r3, [pc, #484]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ea:	f023 0203 	bic.w	r2, r3, #3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4976      	ldr	r1, [pc, #472]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007906:	4b71      	ldr	r3, [pc, #452]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790c:	f023 020c 	bic.w	r2, r3, #12
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007914:	496d      	ldr	r1, [pc, #436]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007916:	4313      	orrs	r3, r2
 8007918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007928:	4b68      	ldr	r3, [pc, #416]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007936:	4965      	ldr	r1, [pc, #404]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007938:	4313      	orrs	r3, r2
 800793a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800794a:	4b60      	ldr	r3, [pc, #384]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007950:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	495c      	ldr	r1, [pc, #368]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800796c:	4b57      	ldr	r3, [pc, #348]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	4954      	ldr	r1, [pc, #336]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800798e:	4b4f      	ldr	r3, [pc, #316]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	494b      	ldr	r1, [pc, #300]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80079b0:	4b46      	ldr	r3, [pc, #280]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079be:	4943      	ldr	r1, [pc, #268]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80079d2:	4b3e      	ldr	r3, [pc, #248]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e0:	493a      	ldr	r1, [pc, #232]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079f4:	4b35      	ldr	r3, [pc, #212]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a02:	4932      	ldr	r1, [pc, #200]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d011      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a16:	4b2d      	ldr	r3, [pc, #180]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a24:	4929      	ldr	r1, [pc, #164]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a34:	d101      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a56:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a64:	4919      	ldr	r1, [pc, #100]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a78:	4b14      	ldr	r3, [pc, #80]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a88:	4910      	ldr	r1, [pc, #64]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d006      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80d9 	beq.w	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007aa4:	4b09      	ldr	r3, [pc, #36]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a08      	ldr	r2, [pc, #32]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fc f8d2 	bl	8003c58 <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ab6:	e00b      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ab8:	f7fc f8ce 	bl	8003c58 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d904      	bls.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e197      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007aca:	bf00      	nop
 8007acc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ad0:	4b6c      	ldr	r3, [pc, #432]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1ed      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d021      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11d      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007af0:	4b64      	ldr	r3, [pc, #400]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af6:	0c1b      	lsrs	r3, r3, #16
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007afe:	4b61      	ldr	r3, [pc, #388]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b04:	0e1b      	lsrs	r3, r3, #24
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	019a      	lsls	r2, r3, #6
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	431a      	orrs	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	071b      	lsls	r3, r3, #28
 8007b24:	4957      	ldr	r1, [pc, #348]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b40:	d00a      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d02e      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b56:	d129      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b58:	4b4a      	ldr	r3, [pc, #296]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b66:	4b47      	ldr	r3, [pc, #284]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b6c:	0f1b      	lsrs	r3, r3, #28
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	019a      	lsls	r2, r3, #6
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	061b      	lsls	r3, r3, #24
 8007b86:	431a      	orrs	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	071b      	lsls	r3, r3, #28
 8007b8c:	493d      	ldr	r1, [pc, #244]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b94:	4b3b      	ldr	r3, [pc, #236]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9a:	f023 021f 	bic.w	r2, r3, #31
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	4937      	ldr	r1, [pc, #220]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bb8:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bbe:	0e1b      	lsrs	r3, r3, #24
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bcc:	0f1b      	lsrs	r3, r3, #28
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	019a      	lsls	r2, r3, #6
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	431a      	orrs	r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	061b      	lsls	r3, r3, #24
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	071b      	lsls	r3, r3, #28
 8007bec:	4925      	ldr	r1, [pc, #148]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d011      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	019a      	lsls	r2, r3, #6
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	041b      	lsls	r3, r3, #16
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	061b      	lsls	r3, r3, #24
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	071b      	lsls	r3, r3, #28
 8007c1c:	4919      	ldr	r1, [pc, #100]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c24:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a16      	ldr	r2, [pc, #88]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c30:	f7fc f812 	bl	8003c58 <HAL_GetTick>
 8007c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c36:	e008      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c38:	f7fc f80e 	bl	8003c58 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b64      	cmp	r3, #100	; 0x64
 8007c44:	d901      	bls.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e0d7      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	f040 80cd 	bne.w	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c6a:	f7fb fff5 	bl	8003c58 <HAL_GetTick>
 8007c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c70:	e00a      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c72:	f7fb fff1 	bl	8003c58 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b64      	cmp	r3, #100	; 0x64
 8007c7e:	d903      	bls.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e0ba      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c88:	4b5e      	ldr	r3, [pc, #376]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c94:	d0ed      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02e      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d12a      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cbe:	4b51      	ldr	r3, [pc, #324]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc4:	0c1b      	lsrs	r3, r3, #16
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ccc:	4b4d      	ldr	r3, [pc, #308]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	0f1b      	lsrs	r3, r3, #28
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	019a      	lsls	r2, r3, #6
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	041b      	lsls	r3, r3, #16
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	061b      	lsls	r3, r3, #24
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	4944      	ldr	r1, [pc, #272]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007cfa:	4b42      	ldr	r3, [pc, #264]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	493d      	ldr	r1, [pc, #244]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d022      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d28:	d11d      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d2a:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d30:	0e1b      	lsrs	r3, r3, #24
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d38:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	0f1b      	lsrs	r3, r3, #28
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	019a      	lsls	r2, r3, #6
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	431a      	orrs	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	071b      	lsls	r3, r3, #28
 8007d5e:	4929      	ldr	r1, [pc, #164]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d028      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	0e1b      	lsrs	r3, r3, #24
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d80:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d86:	0c1b      	lsrs	r3, r3, #16
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	019a      	lsls	r2, r3, #6
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	061b      	lsls	r3, r3, #24
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	071b      	lsls	r3, r3, #28
 8007da6:	4917      	ldr	r1, [pc, #92]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007dae:	4b15      	ldr	r3, [pc, #84]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4911      	ldr	r1, [pc, #68]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a0e      	ldr	r2, [pc, #56]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd0:	f7fb ff42 	bl	8003c58 <HAL_GetTick>
 8007dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dd8:	f7fb ff3e 	bl	8003c58 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b64      	cmp	r3, #100	; 0x64
 8007de4:	d901      	bls.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e007      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dea:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df6:	d1ef      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40023800 	.word	0x40023800

08007e08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e081      	b.n	8007f1e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	7f5b      	ldrb	r3, [r3, #29]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fb fb34 	bl	8003498 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	22ca      	movs	r2, #202	; 0xca
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2253      	movs	r2, #83	; 0x53
 8007e44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fb16 	bl	8008478 <RTC_EnterInitMode>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	22ff      	movs	r2, #255	; 0xff
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e05c      	b.n	8007f1e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6899      	ldr	r1, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	4b2e      	ldr	r3, [pc, #184]	; (8007f28 <HAL_RTC_Init+0x120>)
 8007e70:	400b      	ands	r3, r1
 8007e72:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6899      	ldr	r1, [r3, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68d2      	ldr	r2, [r2, #12]
 8007e9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6919      	ldr	r1, [r3, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	041a      	lsls	r2, r3, #16
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ebe:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10e      	bne.n	8007eec <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 faaa 	bl	8008428 <HAL_RTC_WaitForSynchro>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	22ff      	movs	r2, #255	; 0xff
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e018      	b.n	8007f1e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0208 	bic.w	r2, r2, #8
 8007efa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	22ff      	movs	r2, #255	; 0xff
 8007f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	ff8fffbf 	.word	0xff8fffbf

08007f2c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	7f1b      	ldrb	r3, [r3, #28]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_RTC_SetTime+0x1c>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e0a8      	b.n	800809a <HAL_RTC_SetTime+0x16e>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2202      	movs	r2, #2
 8007f52:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d126      	bne.n	8007fa8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d102      	bne.n	8007f6e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 faac 	bl	80084d0 <RTC_ByteToBcd2>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 faa5 	bl	80084d0 <RTC_ByteToBcd2>
 8007f86:	4603      	mov	r3, r0
 8007f88:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f8a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	789b      	ldrb	r3, [r3, #2]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fa9d 	bl	80084d0 <RTC_ByteToBcd2>
 8007f96:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f98:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	7b1b      	ldrb	r3, [r3, #12]
 8007fa0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e018      	b.n	8007fda <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	785b      	ldrb	r3, [r3, #1]
 8007fc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007fc8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007fce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	7b1b      	ldrb	r3, [r3, #12]
 8007fd4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	22ca      	movs	r2, #202	; 0xca
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2253      	movs	r2, #83	; 0x53
 8007fe8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fa44 	bl	8008478 <RTC_EnterInitMode>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	22ff      	movs	r2, #255	; 0xff
 8007ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2204      	movs	r2, #4
 8008002:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e045      	b.n	800809a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	6979      	ldr	r1, [r7, #20]
 8008014:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <HAL_RTC_SetTime+0x178>)
 8008016:	400b      	ands	r3, r1
 8008018:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008028:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6899      	ldr	r1, [r3, #8]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	431a      	orrs	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008050:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d111      	bne.n	8008084 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f9e1 	bl	8008428 <HAL_RTC_WaitForSynchro>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2204      	movs	r2, #4
 8008078:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e00a      	b.n	800809a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	22ff      	movs	r2, #255	; 0xff
 800808a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008098:	2300      	movs	r3, #0
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd90      	pop	{r4, r7, pc}
 80080a2:	bf00      	nop
 80080a4:	007f7f7f 	.word	0x007f7f7f

080080a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080a8:	b590      	push	{r4, r7, lr}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	7f1b      	ldrb	r3, [r3, #28]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_RTC_SetDate+0x1c>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e092      	b.n	80081ea <HAL_RTC_SetDate+0x142>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2202      	movs	r2, #2
 80080ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10e      	bne.n	80080f4 <HAL_RTC_SetDate+0x4c>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	f023 0310 	bic.w	r3, r3, #16
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	330a      	adds	r3, #10
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11c      	bne.n	8008134 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	78db      	ldrb	r3, [r3, #3]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f9e6 	bl	80084d0 <RTC_ByteToBcd2>
 8008104:	4603      	mov	r3, r0
 8008106:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	785b      	ldrb	r3, [r3, #1]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f9df 	bl	80084d0 <RTC_ByteToBcd2>
 8008112:	4603      	mov	r3, r0
 8008114:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008116:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	789b      	ldrb	r3, [r3, #2]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f9d7 	bl	80084d0 <RTC_ByteToBcd2>
 8008122:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008124:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e00e      	b.n	8008152 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	78db      	ldrb	r3, [r3, #3]
 8008138:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008140:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008146:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	22ca      	movs	r2, #202	; 0xca
 8008158:	625a      	str	r2, [r3, #36]	; 0x24
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2253      	movs	r2, #83	; 0x53
 8008160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f988 	bl	8008478 <RTC_EnterInitMode>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00b      	beq.n	8008186 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	22ff      	movs	r2, #255	; 0xff
 8008174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2204      	movs	r2, #4
 800817a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e031      	b.n	80081ea <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	6979      	ldr	r1, [r7, #20]
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <HAL_RTC_SetDate+0x14c>)
 800818e:	400b      	ands	r3, r1
 8008190:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d111      	bne.n	80081d4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f939 	bl	8008428 <HAL_RTC_WaitForSynchro>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	22ff      	movs	r2, #255	; 0xff
 80081c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2204      	movs	r2, #4
 80081c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e00a      	b.n	80081ea <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	22ff      	movs	r2, #255	; 0xff
 80081da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80081e8:	2300      	movs	r3, #0
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd90      	pop	{r4, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	00ffff3f 	.word	0x00ffff3f

080081f8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b089      	sub	sp, #36	; 0x24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	7f1b      	ldrb	r3, [r3, #28]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_RTC_SetAlarm+0x24>
 8008218:	2302      	movs	r3, #2
 800821a:	e101      	b.n	8008420 <HAL_RTC_SetAlarm+0x228>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2202      	movs	r2, #2
 8008226:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d137      	bne.n	800829e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2200      	movs	r2, #0
 8008240:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f942 	bl	80084d0 <RTC_ByteToBcd2>
 800824c:	4603      	mov	r3, r0
 800824e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 f93b 	bl	80084d0 <RTC_ByteToBcd2>
 800825a:	4603      	mov	r3, r0
 800825c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800825e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	789b      	ldrb	r3, [r3, #2]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 f933 	bl	80084d0 <RTC_ByteToBcd2>
 800826a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800826c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	7b1b      	ldrb	r3, [r3, #12]
 8008274:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008276:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f925 	bl	80084d0 <RTC_ByteToBcd2>
 8008286:	4603      	mov	r3, r0
 8008288:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800828a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008292:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008298:	4313      	orrs	r3, r2
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	e023      	b.n	80082e6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d102      	bne.n	80082b2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2200      	movs	r2, #0
 80082b0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80082be:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80082c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	7b1b      	ldrb	r3, [r3, #12]
 80082ca:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80082cc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80082d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80082dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	22ca      	movs	r2, #202	; 0xca
 80082f8:	625a      	str	r2, [r3, #36]	; 0x24
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2253      	movs	r2, #83	; 0x53
 8008300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830a:	d13f      	bne.n	800838c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800831a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800832a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800832c:	f7fb fc94 	bl	8003c58 <HAL_GetTick>
 8008330:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008332:	e013      	b.n	800835c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008334:	f7fb fc90 	bl	8003c58 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008342:	d90b      	bls.n	800835c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	22ff      	movs	r2, #255	; 0xff
 800834a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2203      	movs	r2, #3
 8008350:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e061      	b.n	8008420 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0e4      	beq.n	8008334 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008388:	609a      	str	r2, [r3, #8]
 800838a:	e03e      	b.n	800840a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800839a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083aa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083ac:	f7fb fc54 	bl	8003c58 <HAL_GetTick>
 80083b0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80083b2:	e013      	b.n	80083dc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083b4:	f7fb fc50 	bl	8003c58 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083c2:	d90b      	bls.n	80083dc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	22ff      	movs	r2, #255	; 0xff
 80083ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2203      	movs	r2, #3
 80083d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e021      	b.n	8008420 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0e4      	beq.n	80083b4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008408:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	22ff      	movs	r2, #255	; 0xff
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2201      	movs	r2, #1
 8008416:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3724      	adds	r7, #36	; 0x24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd90      	pop	{r4, r7, pc}

08008428 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008442:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008444:	f7fb fc08 	bl	8003c58 <HAL_GetTick>
 8008448:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800844a:	e009      	b.n	8008460 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800844c:	f7fb fc04 	bl	8003c58 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800845a:	d901      	bls.n	8008460 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e007      	b.n	8008470 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ee      	beq.n	800844c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	d119      	bne.n	80084c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f04f 32ff 	mov.w	r2, #4294967295
 800849a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800849c:	f7fb fbdc 	bl	8003c58 <HAL_GetTick>
 80084a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084a2:	e009      	b.n	80084b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80084a4:	f7fb fbd8 	bl	8003c58 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084b2:	d901      	bls.n	80084b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e007      	b.n	80084c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0ee      	beq.n	80084a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80084de:	e005      	b.n	80084ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	3b0a      	subs	r3, #10
 80084ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d8f6      	bhi.n	80084e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b2db      	uxtb	r3, r3
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7f1b      	ldrb	r3, [r3, #28]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008524:	2302      	movs	r3, #2
 8008526:	e03e      	b.n	80085a6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2202      	movs	r2, #2
 8008532:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800853c:	4013      	ands	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	22ca      	movs	r2, #202	; 0xca
 800854e:	625a      	str	r2, [r3, #36]	; 0x24
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2253      	movs	r2, #83	; 0x53
 8008556:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0206 	bic.w	r2, r2, #6
 8008566:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	430a      	orrs	r2, r1
 8008576:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800858e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	fffff7f7 	.word	0xfffff7f7

080085b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e025      	b.n	8008618 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d106      	bne.n	80085e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fb fa23 	bl	8003a2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f001 fdb7 	bl	800a16c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	461a      	mov	r2, r3
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	f001 fe0b 	bl	800a224 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008632:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d101      	bne.n	800863e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
 800863c:	e021      	b.n	8008682 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d002      	beq.n	800864a <HAL_SDRAM_SendCommand+0x2a>
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	2b05      	cmp	r3, #5
 8008648:	d118      	bne.n	800867c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2202      	movs	r2, #2
 800864e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fe4c 	bl	800a2f8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d104      	bne.n	8008672 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2205      	movs	r2, #5
 800866c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008670:	e006      	b.n	8008680 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800867a:	e001      	b.n	8008680 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d101      	bne.n	80086a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80086a0:	2302      	movs	r3, #2
 80086a2:	e016      	b.n	80086d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d10f      	bne.n	80086d0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 fe3e 	bl	800a340 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e09d      	b.n	8008828 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086fc:	d009      	beq.n	8008712 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	61da      	str	r2, [r3, #28]
 8008704:	e005      	b.n	8008712 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7fa fee1 	bl	80034f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008748:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008752:	d902      	bls.n	800875a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e002      	b.n	8008760 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800875a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800875e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008768:	d007      	beq.n	800877a <HAL_SPI_Init+0xa0>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008772:	d002      	beq.n	800877a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a8:	431a      	orrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087bc:	ea42 0103 	orr.w	r1, r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	f003 0204 	and.w	r2, r3, #4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80087f6:	ea42 0103 	orr.w	r1, r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69da      	ldr	r2, [r3, #28]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e049      	b.n	80088d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fa feae 	bl	80035b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3304      	adds	r3, #4
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f000 fac0 	bl	8008df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d001      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e054      	b.n	80089a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0201 	orr.w	r2, r2, #1
 800890e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a26      	ldr	r2, [pc, #152]	; (80089b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d022      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008922:	d01d      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a22      	ldr	r2, [pc, #136]	; (80089b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d018      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a21      	ldr	r2, [pc, #132]	; (80089b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d013      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a1f      	ldr	r2, [pc, #124]	; (80089bc <HAL_TIM_Base_Start_IT+0xdc>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00e      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a1e      	ldr	r2, [pc, #120]	; (80089c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d009      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a1c      	ldr	r2, [pc, #112]	; (80089c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <HAL_TIM_Base_Start_IT+0x80>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a1b      	ldr	r2, [pc, #108]	; (80089c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d115      	bne.n	800898c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	4b19      	ldr	r3, [pc, #100]	; (80089cc <HAL_TIM_Base_Start_IT+0xec>)
 8008968:	4013      	ands	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b06      	cmp	r3, #6
 8008970:	d015      	beq.n	800899e <HAL_TIM_Base_Start_IT+0xbe>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008978:	d011      	beq.n	800899e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898a:	e008      	b.n	800899e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	e000      	b.n	80089a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00
 80089c0:	40010400 	.word	0x40010400
 80089c4:	40014000 	.word	0x40014000
 80089c8:	40001800 	.word	0x40001800
 80089cc:	00010007 	.word	0x00010007

080089d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0202 	mvn.w	r2, #2
 80089fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9d0 	bl	8008db8 <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9c2 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9d3 	bl	8008dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d122      	bne.n	8008a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d11b      	bne.n	8008a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0204 	mvn.w	r2, #4
 8008a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f9a6 	bl	8008db8 <HAL_TIM_IC_CaptureCallback>
 8008a6c:	e005      	b.n	8008a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f998 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f9a9 	bl	8008dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0208 	mvn.w	r2, #8
 8008aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f97c 	bl	8008db8 <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f96e 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f97f 	bl	8008dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0310 	and.w	r3, r3, #16
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0210 	mvn.w	r2, #16
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2208      	movs	r2, #8
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f952 	bl	8008db8 <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f944 	bl	8008da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f955 	bl	8008dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d10e      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d107      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0201 	mvn.w	r2, #1
 8008b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f9 f902 	bl	8001d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d10e      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fb0c 	bl	8009198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8e:	d10e      	bne.n	8008bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d107      	bne.n	8008bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 faff 	bl	80091ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d10e      	bne.n	8008bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d107      	bne.n	8008bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f903 	bl	8008de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b20      	cmp	r3, #32
 8008be6:	d10e      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d107      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f06f 0220 	mvn.w	r2, #32
 8008bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fabf 	bl	8009184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_TIM_ConfigClockSource+0x1c>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e0b4      	b.n	8008d96 <HAL_TIM_ConfigClockSource+0x186>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	4b56      	ldr	r3, [pc, #344]	; (8008da0 <HAL_TIM_ConfigClockSource+0x190>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c64:	d03e      	beq.n	8008ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8008c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6a:	f200 8087 	bhi.w	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c72:	f000 8086 	beq.w	8008d82 <HAL_TIM_ConfigClockSource+0x172>
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7a:	d87f      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008c7c:	2b70      	cmp	r3, #112	; 0x70
 8008c7e:	d01a      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8008c80:	2b70      	cmp	r3, #112	; 0x70
 8008c82:	d87b      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008c84:	2b60      	cmp	r3, #96	; 0x60
 8008c86:	d050      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x11a>
 8008c88:	2b60      	cmp	r3, #96	; 0x60
 8008c8a:	d877      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008c8c:	2b50      	cmp	r3, #80	; 0x50
 8008c8e:	d03c      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0xfa>
 8008c90:	2b50      	cmp	r3, #80	; 0x50
 8008c92:	d873      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008c94:	2b40      	cmp	r3, #64	; 0x40
 8008c96:	d058      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x13a>
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d86f      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008c9c:	2b30      	cmp	r3, #48	; 0x30
 8008c9e:	d064      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x15a>
 8008ca0:	2b30      	cmp	r3, #48	; 0x30
 8008ca2:	d86b      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	d060      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x15a>
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d867      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d05c      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x15a>
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d05a      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x15a>
 8008cb4:	e062      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f000 f9af 	bl	8009028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	609a      	str	r2, [r3, #8]
      break;
 8008ce2:	e04f      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6899      	ldr	r1, [r3, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f000 f998 	bl	8009028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d06:	609a      	str	r2, [r3, #8]
      break;
 8008d08:	e03c      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6859      	ldr	r1, [r3, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f000 f90c 	bl	8008f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2150      	movs	r1, #80	; 0x50
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f965 	bl	8008ff2 <TIM_ITRx_SetConfig>
      break;
 8008d28:	e02c      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6859      	ldr	r1, [r3, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f000 f92b 	bl	8008f92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2160      	movs	r1, #96	; 0x60
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f955 	bl	8008ff2 <TIM_ITRx_SetConfig>
      break;
 8008d48:	e01c      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6859      	ldr	r1, [r3, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f000 f8ec 	bl	8008f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2140      	movs	r1, #64	; 0x40
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f945 	bl	8008ff2 <TIM_ITRx_SetConfig>
      break;
 8008d68:	e00c      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f000 f93c 	bl	8008ff2 <TIM_ITRx_SetConfig>
      break;
 8008d7a:	e003      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d80:	e000      	b.n	8008d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	fffeff88 	.word	0xfffeff88

08008da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a40      	ldr	r2, [pc, #256]	; (8008f08 <TIM_Base_SetConfig+0x114>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e12:	d00f      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a3d      	ldr	r2, [pc, #244]	; (8008f0c <TIM_Base_SetConfig+0x118>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00b      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a3c      	ldr	r2, [pc, #240]	; (8008f10 <TIM_Base_SetConfig+0x11c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <TIM_Base_SetConfig+0x120>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a3a      	ldr	r2, [pc, #232]	; (8008f18 <TIM_Base_SetConfig+0x124>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a2f      	ldr	r2, [pc, #188]	; (8008f08 <TIM_Base_SetConfig+0x114>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d02b      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e54:	d027      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a2c      	ldr	r2, [pc, #176]	; (8008f0c <TIM_Base_SetConfig+0x118>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d023      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a2b      	ldr	r2, [pc, #172]	; (8008f10 <TIM_Base_SetConfig+0x11c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01f      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a2a      	ldr	r2, [pc, #168]	; (8008f14 <TIM_Base_SetConfig+0x120>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01b      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a29      	ldr	r2, [pc, #164]	; (8008f18 <TIM_Base_SetConfig+0x124>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d017      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a28      	ldr	r2, [pc, #160]	; (8008f1c <TIM_Base_SetConfig+0x128>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d013      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a27      	ldr	r2, [pc, #156]	; (8008f20 <TIM_Base_SetConfig+0x12c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00f      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a26      	ldr	r2, [pc, #152]	; (8008f24 <TIM_Base_SetConfig+0x130>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00b      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a25      	ldr	r2, [pc, #148]	; (8008f28 <TIM_Base_SetConfig+0x134>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d007      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a24      	ldr	r2, [pc, #144]	; (8008f2c <TIM_Base_SetConfig+0x138>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d003      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a23      	ldr	r2, [pc, #140]	; (8008f30 <TIM_Base_SetConfig+0x13c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d108      	bne.n	8008eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a0a      	ldr	r2, [pc, #40]	; (8008f08 <TIM_Base_SetConfig+0x114>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d003      	beq.n	8008eec <TIM_Base_SetConfig+0xf8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <TIM_Base_SetConfig+0x124>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d103      	bne.n	8008ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	615a      	str	r2, [r3, #20]
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40014400 	.word	0x40014400
 8008f24:	40014800 	.word	0x40014800
 8008f28:	40001800 	.word	0x40001800
 8008f2c:	40001c00 	.word	0x40001c00
 8008f30:	40002000 	.word	0x40002000

08008f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f023 0201 	bic.w	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f023 030a 	bic.w	r3, r3, #10
 8008f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b087      	sub	sp, #28
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	f023 0210 	bic.w	r2, r3, #16
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	031b      	lsls	r3, r3, #12
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	621a      	str	r2, [r3, #32]
}
 8008fe6:	bf00      	nop
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	f043 0307 	orr.w	r3, r3, #7
 8009014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	609a      	str	r2, [r3, #8]
}
 800901c:	bf00      	nop
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	021a      	lsls	r2, r3, #8
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	431a      	orrs	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	4313      	orrs	r3, r2
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	609a      	str	r2, [r3, #8]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800907c:	2302      	movs	r3, #2
 800907e:	e06d      	b.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a30      	ldr	r2, [pc, #192]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d004      	beq.n	80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2f      	ldr	r2, [pc, #188]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d108      	bne.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a20      	ldr	r2, [pc, #128]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d022      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f2:	d01d      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1d      	ldr	r2, [pc, #116]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d018      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1c      	ldr	r2, [pc, #112]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d013      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1a      	ldr	r2, [pc, #104]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00e      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a15      	ldr	r2, [pc, #84]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d009      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a16      	ldr	r2, [pc, #88]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d004      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a15      	ldr	r2, [pc, #84]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d10c      	bne.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009136:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	4313      	orrs	r3, r2
 8009140:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	40010000 	.word	0x40010000
 800916c:	40010400 	.word	0x40010400
 8009170:	40000400 	.word	0x40000400
 8009174:	40000800 	.word	0x40000800
 8009178:	40000c00 	.word	0x40000c00
 800917c:	40014000 	.word	0x40014000
 8009180:	40001800 	.word	0x40001800

08009184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e040      	b.n	8009254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7fa fa7a 	bl	80036dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2224      	movs	r2, #36	; 0x24
 80091ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0201 	bic.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb16 	bl	8009830 <UART_SetConfig>
 8009204:	4603      	mov	r3, r0
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e022      	b.n	8009254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fd6c 	bl	8009cf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800922a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800923a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fdf3 	bl	8009e38 <UART_CheckIdleState>
 8009252:	4603      	mov	r3, r0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b0ba      	sub	sp, #232	; 0xe8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009282:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009286:	f640 030f 	movw	r3, #2063	; 0x80f
 800928a:	4013      	ands	r3, r2
 800928c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009294:	2b00      	cmp	r3, #0
 8009296:	d115      	bne.n	80092c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 828f 	beq.w	80097d8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
      }
      return;
 80092c2:	e289      	b.n	80097d8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8117 	beq.w	80094fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80092ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80092da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80092de:	4b85      	ldr	r3, [pc, #532]	; (80094f4 <HAL_UART_IRQHandler+0x298>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 810a 	beq.w	80094fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ec:	f003 0301 	and.w	r3, r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d011      	beq.n	8009318 <HAL_UART_IRQHandler+0xbc>
 80092f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2201      	movs	r2, #1
 8009306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800930e:	f043 0201 	orr.w	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d011      	beq.n	8009348 <HAL_UART_IRQHandler+0xec>
 8009324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2202      	movs	r2, #2
 8009336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800933e:	f043 0204 	orr.w	r2, r3, #4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d011      	beq.n	8009378 <HAL_UART_IRQHandler+0x11c>
 8009354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2204      	movs	r2, #4
 8009366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800936e:	f043 0202 	orr.w	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d017      	beq.n	80093b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b00      	cmp	r3, #0
 800938e:	d105      	bne.n	800939c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009394:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2208      	movs	r2, #8
 80093a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093aa:	f043 0208 	orr.w	r2, r3, #8
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d012      	beq.n	80093e6 <HAL_UART_IRQHandler+0x18a>
 80093c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00c      	beq.n	80093e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093dc:	f043 0220 	orr.w	r2, r3, #32
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 81f5 	beq.w	80097dc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80093f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942e:	2b40      	cmp	r3, #64	; 0x40
 8009430:	d005      	beq.n	800943e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009436:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800943a:	2b00      	cmp	r3, #0
 800943c:	d04f      	beq.n	80094de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fdf1 	bl	800a026 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d141      	bne.n	80094d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800946c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800947e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800948a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1d9      	bne.n	8009452 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d013      	beq.n	80094ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094aa:	4a13      	ldr	r2, [pc, #76]	; (80094f8 <HAL_UART_IRQHandler+0x29c>)
 80094ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fb faa0 	bl	80049f8 <HAL_DMA_Abort_IT>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d017      	beq.n	80094ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094cc:	e00f      	b.n	80094ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f998 	bl	8009804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d4:	e00b      	b.n	80094ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f994 	bl	8009804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094dc:	e007      	b.n	80094ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f990 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80094ec:	e176      	b.n	80097dc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ee:	bf00      	nop
    return;
 80094f0:	e174      	b.n	80097dc <HAL_UART_IRQHandler+0x580>
 80094f2:	bf00      	nop
 80094f4:	04000120 	.word	0x04000120
 80094f8:	0800a0ed 	.word	0x0800a0ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009500:	2b01      	cmp	r3, #1
 8009502:	f040 8144 	bne.w	800978e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 813d 	beq.w	800978e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009518:	f003 0310 	and.w	r3, r3, #16
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 8136 	beq.w	800978e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2210      	movs	r2, #16
 8009528:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	f040 80b2 	bne.w	800969e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009546:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8148 	beq.w	80097e0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800955a:	429a      	cmp	r2, r3
 800955c:	f080 8140 	bcs.w	80097e0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009566:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009574:	f000 8085 	beq.w	8009682 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800958c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80095ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1da      	bne.n	8009578 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3308      	adds	r3, #8
 80095c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3308      	adds	r3, #8
 80095e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e1      	bne.n	80095c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3308      	adds	r3, #8
 8009604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800960e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3308      	adds	r3, #8
 800961e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e3      	bne.n	80095fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009664:	65bb      	str	r3, [r7, #88]	; 0x58
 8009666:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800966a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e4      	bne.n	8009642 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967c:	4618      	mov	r0, r3
 800967e:	f7fb f94b 	bl	8004918 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800968e:	b29b      	uxth	r3, r3
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	b29b      	uxth	r3, r3
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f8be 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800969c:	e0a0      	b.n	80097e0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 8092 	beq.w	80097e4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80096c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 808d 	beq.w	80097e4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ec:	647b      	str	r3, [r7, #68]	; 0x44
 80096ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e4      	bne.n	80096ca <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3308      	adds	r3, #8
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	623b      	str	r3, [r7, #32]
   return(result);
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	f023 0301 	bic.w	r3, r3, #1
 8009716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009724:	633a      	str	r2, [r7, #48]	; 0x30
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800972a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e3      	bne.n	8009700 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2220      	movs	r2, #32
 800973c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	60fb      	str	r3, [r7, #12]
   return(result);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0310 	bic.w	r3, r3, #16
 800975e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	69b9      	ldr	r1, [r7, #24]
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	617b      	str	r3, [r7, #20]
   return(result);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e4      	bne.n	800974a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f846 	bl	8009818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800978c:	e02a      	b.n	80097e4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00e      	beq.n	80097b8 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800979a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01c      	beq.n	80097e8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
    }
    return;
 80097b6:	e017      	b.n	80097e8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d012      	beq.n	80097ea <HAL_UART_IRQHandler+0x58e>
 80097c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00c      	beq.n	80097ea <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fca1 	bl	800a118 <UART_EndTransmit_IT>
    return;
 80097d6:	e008      	b.n	80097ea <HAL_UART_IRQHandler+0x58e>
      return;
 80097d8:	bf00      	nop
 80097da:	e006      	b.n	80097ea <HAL_UART_IRQHandler+0x58e>
    return;
 80097dc:	bf00      	nop
 80097de:	e004      	b.n	80097ea <HAL_UART_IRQHandler+0x58e>
      return;
 80097e0:	bf00      	nop
 80097e2:	e002      	b.n	80097ea <HAL_UART_IRQHandler+0x58e>
      return;
 80097e4:	bf00      	nop
 80097e6:	e000      	b.n	80097ea <HAL_UART_IRQHandler+0x58e>
    return;
 80097e8:	bf00      	nop
  }

}
 80097ea:	37e8      	adds	r7, #232	; 0xe8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4ba7      	ldr	r3, [pc, #668]	; (8009af8 <UART_SetConfig+0x2c8>)
 800985c:	4013      	ands	r3, r2
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	6979      	ldr	r1, [r7, #20]
 8009864:	430b      	orrs	r3, r1
 8009866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	430a      	orrs	r2, r1
 80098a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a95      	ldr	r2, [pc, #596]	; (8009afc <UART_SetConfig+0x2cc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d120      	bne.n	80098ee <UART_SetConfig+0xbe>
 80098ac:	4b94      	ldr	r3, [pc, #592]	; (8009b00 <UART_SetConfig+0x2d0>)
 80098ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d816      	bhi.n	80098e8 <UART_SetConfig+0xb8>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <UART_SetConfig+0x90>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098dd 	.word	0x080098dd
 80098c8:	080098d7 	.word	0x080098d7
 80098cc:	080098e3 	.word	0x080098e3
 80098d0:	2301      	movs	r3, #1
 80098d2:	77fb      	strb	r3, [r7, #31]
 80098d4:	e14f      	b.n	8009b76 <UART_SetConfig+0x346>
 80098d6:	2302      	movs	r3, #2
 80098d8:	77fb      	strb	r3, [r7, #31]
 80098da:	e14c      	b.n	8009b76 <UART_SetConfig+0x346>
 80098dc:	2304      	movs	r3, #4
 80098de:	77fb      	strb	r3, [r7, #31]
 80098e0:	e149      	b.n	8009b76 <UART_SetConfig+0x346>
 80098e2:	2308      	movs	r3, #8
 80098e4:	77fb      	strb	r3, [r7, #31]
 80098e6:	e146      	b.n	8009b76 <UART_SetConfig+0x346>
 80098e8:	2310      	movs	r3, #16
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	e143      	b.n	8009b76 <UART_SetConfig+0x346>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a84      	ldr	r2, [pc, #528]	; (8009b04 <UART_SetConfig+0x2d4>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d132      	bne.n	800995e <UART_SetConfig+0x12e>
 80098f8:	4b81      	ldr	r3, [pc, #516]	; (8009b00 <UART_SetConfig+0x2d0>)
 80098fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098fe:	f003 030c 	and.w	r3, r3, #12
 8009902:	2b0c      	cmp	r3, #12
 8009904:	d828      	bhi.n	8009958 <UART_SetConfig+0x128>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <UART_SetConfig+0xdc>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009941 	.word	0x08009941
 8009910:	08009959 	.word	0x08009959
 8009914:	08009959 	.word	0x08009959
 8009918:	08009959 	.word	0x08009959
 800991c:	0800994d 	.word	0x0800994d
 8009920:	08009959 	.word	0x08009959
 8009924:	08009959 	.word	0x08009959
 8009928:	08009959 	.word	0x08009959
 800992c:	08009947 	.word	0x08009947
 8009930:	08009959 	.word	0x08009959
 8009934:	08009959 	.word	0x08009959
 8009938:	08009959 	.word	0x08009959
 800993c:	08009953 	.word	0x08009953
 8009940:	2300      	movs	r3, #0
 8009942:	77fb      	strb	r3, [r7, #31]
 8009944:	e117      	b.n	8009b76 <UART_SetConfig+0x346>
 8009946:	2302      	movs	r3, #2
 8009948:	77fb      	strb	r3, [r7, #31]
 800994a:	e114      	b.n	8009b76 <UART_SetConfig+0x346>
 800994c:	2304      	movs	r3, #4
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	e111      	b.n	8009b76 <UART_SetConfig+0x346>
 8009952:	2308      	movs	r3, #8
 8009954:	77fb      	strb	r3, [r7, #31]
 8009956:	e10e      	b.n	8009b76 <UART_SetConfig+0x346>
 8009958:	2310      	movs	r3, #16
 800995a:	77fb      	strb	r3, [r7, #31]
 800995c:	e10b      	b.n	8009b76 <UART_SetConfig+0x346>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a69      	ldr	r2, [pc, #420]	; (8009b08 <UART_SetConfig+0x2d8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d120      	bne.n	80099aa <UART_SetConfig+0x17a>
 8009968:	4b65      	ldr	r3, [pc, #404]	; (8009b00 <UART_SetConfig+0x2d0>)
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009972:	2b30      	cmp	r3, #48	; 0x30
 8009974:	d013      	beq.n	800999e <UART_SetConfig+0x16e>
 8009976:	2b30      	cmp	r3, #48	; 0x30
 8009978:	d814      	bhi.n	80099a4 <UART_SetConfig+0x174>
 800997a:	2b20      	cmp	r3, #32
 800997c:	d009      	beq.n	8009992 <UART_SetConfig+0x162>
 800997e:	2b20      	cmp	r3, #32
 8009980:	d810      	bhi.n	80099a4 <UART_SetConfig+0x174>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <UART_SetConfig+0x15c>
 8009986:	2b10      	cmp	r3, #16
 8009988:	d006      	beq.n	8009998 <UART_SetConfig+0x168>
 800998a:	e00b      	b.n	80099a4 <UART_SetConfig+0x174>
 800998c:	2300      	movs	r3, #0
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e0f1      	b.n	8009b76 <UART_SetConfig+0x346>
 8009992:	2302      	movs	r3, #2
 8009994:	77fb      	strb	r3, [r7, #31]
 8009996:	e0ee      	b.n	8009b76 <UART_SetConfig+0x346>
 8009998:	2304      	movs	r3, #4
 800999a:	77fb      	strb	r3, [r7, #31]
 800999c:	e0eb      	b.n	8009b76 <UART_SetConfig+0x346>
 800999e:	2308      	movs	r3, #8
 80099a0:	77fb      	strb	r3, [r7, #31]
 80099a2:	e0e8      	b.n	8009b76 <UART_SetConfig+0x346>
 80099a4:	2310      	movs	r3, #16
 80099a6:	77fb      	strb	r3, [r7, #31]
 80099a8:	e0e5      	b.n	8009b76 <UART_SetConfig+0x346>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a57      	ldr	r2, [pc, #348]	; (8009b0c <UART_SetConfig+0x2dc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d120      	bne.n	80099f6 <UART_SetConfig+0x1c6>
 80099b4:	4b52      	ldr	r3, [pc, #328]	; (8009b00 <UART_SetConfig+0x2d0>)
 80099b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099be:	2bc0      	cmp	r3, #192	; 0xc0
 80099c0:	d013      	beq.n	80099ea <UART_SetConfig+0x1ba>
 80099c2:	2bc0      	cmp	r3, #192	; 0xc0
 80099c4:	d814      	bhi.n	80099f0 <UART_SetConfig+0x1c0>
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d009      	beq.n	80099de <UART_SetConfig+0x1ae>
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d810      	bhi.n	80099f0 <UART_SetConfig+0x1c0>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <UART_SetConfig+0x1a8>
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d006      	beq.n	80099e4 <UART_SetConfig+0x1b4>
 80099d6:	e00b      	b.n	80099f0 <UART_SetConfig+0x1c0>
 80099d8:	2300      	movs	r3, #0
 80099da:	77fb      	strb	r3, [r7, #31]
 80099dc:	e0cb      	b.n	8009b76 <UART_SetConfig+0x346>
 80099de:	2302      	movs	r3, #2
 80099e0:	77fb      	strb	r3, [r7, #31]
 80099e2:	e0c8      	b.n	8009b76 <UART_SetConfig+0x346>
 80099e4:	2304      	movs	r3, #4
 80099e6:	77fb      	strb	r3, [r7, #31]
 80099e8:	e0c5      	b.n	8009b76 <UART_SetConfig+0x346>
 80099ea:	2308      	movs	r3, #8
 80099ec:	77fb      	strb	r3, [r7, #31]
 80099ee:	e0c2      	b.n	8009b76 <UART_SetConfig+0x346>
 80099f0:	2310      	movs	r3, #16
 80099f2:	77fb      	strb	r3, [r7, #31]
 80099f4:	e0bf      	b.n	8009b76 <UART_SetConfig+0x346>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a45      	ldr	r2, [pc, #276]	; (8009b10 <UART_SetConfig+0x2e0>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d125      	bne.n	8009a4c <UART_SetConfig+0x21c>
 8009a00:	4b3f      	ldr	r3, [pc, #252]	; (8009b00 <UART_SetConfig+0x2d0>)
 8009a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a0e:	d017      	beq.n	8009a40 <UART_SetConfig+0x210>
 8009a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a14:	d817      	bhi.n	8009a46 <UART_SetConfig+0x216>
 8009a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a1a:	d00b      	beq.n	8009a34 <UART_SetConfig+0x204>
 8009a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a20:	d811      	bhi.n	8009a46 <UART_SetConfig+0x216>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <UART_SetConfig+0x1fe>
 8009a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2a:	d006      	beq.n	8009a3a <UART_SetConfig+0x20a>
 8009a2c:	e00b      	b.n	8009a46 <UART_SetConfig+0x216>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e0a0      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a34:	2302      	movs	r3, #2
 8009a36:	77fb      	strb	r3, [r7, #31]
 8009a38:	e09d      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a3a:	2304      	movs	r3, #4
 8009a3c:	77fb      	strb	r3, [r7, #31]
 8009a3e:	e09a      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a40:	2308      	movs	r3, #8
 8009a42:	77fb      	strb	r3, [r7, #31]
 8009a44:	e097      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a46:	2310      	movs	r3, #16
 8009a48:	77fb      	strb	r3, [r7, #31]
 8009a4a:	e094      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a30      	ldr	r2, [pc, #192]	; (8009b14 <UART_SetConfig+0x2e4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d125      	bne.n	8009aa2 <UART_SetConfig+0x272>
 8009a56:	4b2a      	ldr	r3, [pc, #168]	; (8009b00 <UART_SetConfig+0x2d0>)
 8009a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a64:	d017      	beq.n	8009a96 <UART_SetConfig+0x266>
 8009a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a6a:	d817      	bhi.n	8009a9c <UART_SetConfig+0x26c>
 8009a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a70:	d00b      	beq.n	8009a8a <UART_SetConfig+0x25a>
 8009a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a76:	d811      	bhi.n	8009a9c <UART_SetConfig+0x26c>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <UART_SetConfig+0x254>
 8009a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a80:	d006      	beq.n	8009a90 <UART_SetConfig+0x260>
 8009a82:	e00b      	b.n	8009a9c <UART_SetConfig+0x26c>
 8009a84:	2301      	movs	r3, #1
 8009a86:	77fb      	strb	r3, [r7, #31]
 8009a88:	e075      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	77fb      	strb	r3, [r7, #31]
 8009a8e:	e072      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a90:	2304      	movs	r3, #4
 8009a92:	77fb      	strb	r3, [r7, #31]
 8009a94:	e06f      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a96:	2308      	movs	r3, #8
 8009a98:	77fb      	strb	r3, [r7, #31]
 8009a9a:	e06c      	b.n	8009b76 <UART_SetConfig+0x346>
 8009a9c:	2310      	movs	r3, #16
 8009a9e:	77fb      	strb	r3, [r7, #31]
 8009aa0:	e069      	b.n	8009b76 <UART_SetConfig+0x346>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1c      	ldr	r2, [pc, #112]	; (8009b18 <UART_SetConfig+0x2e8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d137      	bne.n	8009b1c <UART_SetConfig+0x2ec>
 8009aac:	4b14      	ldr	r3, [pc, #80]	; (8009b00 <UART_SetConfig+0x2d0>)
 8009aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009aba:	d017      	beq.n	8009aec <UART_SetConfig+0x2bc>
 8009abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac0:	d817      	bhi.n	8009af2 <UART_SetConfig+0x2c2>
 8009ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ac6:	d00b      	beq.n	8009ae0 <UART_SetConfig+0x2b0>
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009acc:	d811      	bhi.n	8009af2 <UART_SetConfig+0x2c2>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <UART_SetConfig+0x2aa>
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad6:	d006      	beq.n	8009ae6 <UART_SetConfig+0x2b6>
 8009ad8:	e00b      	b.n	8009af2 <UART_SetConfig+0x2c2>
 8009ada:	2300      	movs	r3, #0
 8009adc:	77fb      	strb	r3, [r7, #31]
 8009ade:	e04a      	b.n	8009b76 <UART_SetConfig+0x346>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	77fb      	strb	r3, [r7, #31]
 8009ae4:	e047      	b.n	8009b76 <UART_SetConfig+0x346>
 8009ae6:	2304      	movs	r3, #4
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e044      	b.n	8009b76 <UART_SetConfig+0x346>
 8009aec:	2308      	movs	r3, #8
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e041      	b.n	8009b76 <UART_SetConfig+0x346>
 8009af2:	2310      	movs	r3, #16
 8009af4:	77fb      	strb	r3, [r7, #31]
 8009af6:	e03e      	b.n	8009b76 <UART_SetConfig+0x346>
 8009af8:	efff69f3 	.word	0xefff69f3
 8009afc:	40011000 	.word	0x40011000
 8009b00:	40023800 	.word	0x40023800
 8009b04:	40004400 	.word	0x40004400
 8009b08:	40004800 	.word	0x40004800
 8009b0c:	40004c00 	.word	0x40004c00
 8009b10:	40005000 	.word	0x40005000
 8009b14:	40011400 	.word	0x40011400
 8009b18:	40007800 	.word	0x40007800
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a71      	ldr	r2, [pc, #452]	; (8009ce8 <UART_SetConfig+0x4b8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d125      	bne.n	8009b72 <UART_SetConfig+0x342>
 8009b26:	4b71      	ldr	r3, [pc, #452]	; (8009cec <UART_SetConfig+0x4bc>)
 8009b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b34:	d017      	beq.n	8009b66 <UART_SetConfig+0x336>
 8009b36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b3a:	d817      	bhi.n	8009b6c <UART_SetConfig+0x33c>
 8009b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b40:	d00b      	beq.n	8009b5a <UART_SetConfig+0x32a>
 8009b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b46:	d811      	bhi.n	8009b6c <UART_SetConfig+0x33c>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <UART_SetConfig+0x324>
 8009b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b50:	d006      	beq.n	8009b60 <UART_SetConfig+0x330>
 8009b52:	e00b      	b.n	8009b6c <UART_SetConfig+0x33c>
 8009b54:	2300      	movs	r3, #0
 8009b56:	77fb      	strb	r3, [r7, #31]
 8009b58:	e00d      	b.n	8009b76 <UART_SetConfig+0x346>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	77fb      	strb	r3, [r7, #31]
 8009b5e:	e00a      	b.n	8009b76 <UART_SetConfig+0x346>
 8009b60:	2304      	movs	r3, #4
 8009b62:	77fb      	strb	r3, [r7, #31]
 8009b64:	e007      	b.n	8009b76 <UART_SetConfig+0x346>
 8009b66:	2308      	movs	r3, #8
 8009b68:	77fb      	strb	r3, [r7, #31]
 8009b6a:	e004      	b.n	8009b76 <UART_SetConfig+0x346>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	77fb      	strb	r3, [r7, #31]
 8009b70:	e001      	b.n	8009b76 <UART_SetConfig+0x346>
 8009b72:	2310      	movs	r3, #16
 8009b74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b7e:	d15a      	bne.n	8009c36 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009b80:	7ffb      	ldrb	r3, [r7, #31]
 8009b82:	2b08      	cmp	r3, #8
 8009b84:	d827      	bhi.n	8009bd6 <UART_SetConfig+0x3a6>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0x35c>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	08009bd7 	.word	0x08009bd7
 8009b9c:	08009bc7 	.word	0x08009bc7
 8009ba0:	08009bd7 	.word	0x08009bd7
 8009ba4:	08009bd7 	.word	0x08009bd7
 8009ba8:	08009bd7 	.word	0x08009bd7
 8009bac:	08009bcf 	.word	0x08009bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb0:	f7fd fce0 	bl	8007574 <HAL_RCC_GetPCLK1Freq>
 8009bb4:	61b8      	str	r0, [r7, #24]
        break;
 8009bb6:	e013      	b.n	8009be0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bb8:	f7fd fcf0 	bl	800759c <HAL_RCC_GetPCLK2Freq>
 8009bbc:	61b8      	str	r0, [r7, #24]
        break;
 8009bbe:	e00f      	b.n	8009be0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc0:	4b4b      	ldr	r3, [pc, #300]	; (8009cf0 <UART_SetConfig+0x4c0>)
 8009bc2:	61bb      	str	r3, [r7, #24]
        break;
 8009bc4:	e00c      	b.n	8009be0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bc6:	f7fd fc13 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 8009bca:	61b8      	str	r0, [r7, #24]
        break;
 8009bcc:	e008      	b.n	8009be0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bd2:	61bb      	str	r3, [r7, #24]
        break;
 8009bd4:	e004      	b.n	8009be0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	77bb      	strb	r3, [r7, #30]
        break;
 8009bde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d074      	beq.n	8009cd0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	005a      	lsls	r2, r3, #1
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	085b      	lsrs	r3, r3, #1
 8009bf0:	441a      	add	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	2b0f      	cmp	r3, #15
 8009c00:	d916      	bls.n	8009c30 <UART_SetConfig+0x400>
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c08:	d212      	bcs.n	8009c30 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f023 030f 	bic.w	r3, r3, #15
 8009c12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	085b      	lsrs	r3, r3, #1
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	89fb      	ldrh	r3, [r7, #14]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	89fa      	ldrh	r2, [r7, #14]
 8009c2c:	60da      	str	r2, [r3, #12]
 8009c2e:	e04f      	b.n	8009cd0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	77bb      	strb	r3, [r7, #30]
 8009c34:	e04c      	b.n	8009cd0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c36:	7ffb      	ldrb	r3, [r7, #31]
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d828      	bhi.n	8009c8e <UART_SetConfig+0x45e>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0x414>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c69 	.word	0x08009c69
 8009c48:	08009c71 	.word	0x08009c71
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	08009c8f 	.word	0x08009c8f
 8009c54:	08009c7f 	.word	0x08009c7f
 8009c58:	08009c8f 	.word	0x08009c8f
 8009c5c:	08009c8f 	.word	0x08009c8f
 8009c60:	08009c8f 	.word	0x08009c8f
 8009c64:	08009c87 	.word	0x08009c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c68:	f7fd fc84 	bl	8007574 <HAL_RCC_GetPCLK1Freq>
 8009c6c:	61b8      	str	r0, [r7, #24]
        break;
 8009c6e:	e013      	b.n	8009c98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c70:	f7fd fc94 	bl	800759c <HAL_RCC_GetPCLK2Freq>
 8009c74:	61b8      	str	r0, [r7, #24]
        break;
 8009c76:	e00f      	b.n	8009c98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c78:	4b1d      	ldr	r3, [pc, #116]	; (8009cf0 <UART_SetConfig+0x4c0>)
 8009c7a:	61bb      	str	r3, [r7, #24]
        break;
 8009c7c:	e00c      	b.n	8009c98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c7e:	f7fd fbb7 	bl	80073f0 <HAL_RCC_GetSysClockFreq>
 8009c82:	61b8      	str	r0, [r7, #24]
        break;
 8009c84:	e008      	b.n	8009c98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c8a:	61bb      	str	r3, [r7, #24]
        break;
 8009c8c:	e004      	b.n	8009c98 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	77bb      	strb	r3, [r7, #30]
        break;
 8009c96:	bf00      	nop
    }

    if (pclk != 0U)
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d018      	beq.n	8009cd0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	085a      	lsrs	r2, r3, #1
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	441a      	add	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b0f      	cmp	r3, #15
 8009cb6:	d909      	bls.n	8009ccc <UART_SetConfig+0x49c>
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cbe:	d205      	bcs.n	8009ccc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60da      	str	r2, [r3, #12]
 8009cca:	e001      	b.n	8009cd0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009cdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3720      	adds	r7, #32
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40007c00 	.word	0x40007c00
 8009cec:	40023800 	.word	0x40023800
 8009cf0:	00f42400 	.word	0x00f42400

08009cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00a      	beq.n	8009d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	f003 0310 	and.w	r3, r3, #16
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00a      	beq.n	8009da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01a      	beq.n	8009e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df2:	d10a      	bne.n	8009e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	605a      	str	r2, [r3, #4]
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e48:	f7f9 ff06 	bl	8003c58 <HAL_GetTick>
 8009e4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0308 	and.w	r3, r3, #8
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d10e      	bne.n	8009e7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f817 	bl	8009e9e <UART_WaitOnFlagUntilTimeout>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e00d      	b.n	8009e96 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b09c      	sub	sp, #112	; 0x70
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	603b      	str	r3, [r7, #0]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eae:	e0a5      	b.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	f000 80a1 	beq.w	8009ffc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eba:	f7f9 fecd 	bl	8003c58 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d302      	bcc.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d13e      	bne.n	8009f4e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ef0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ef4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e6      	bne.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3308      	adds	r3, #8
 8009f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	f023 0301 	bic.w	r3, r3, #1
 8009f18:	663b      	str	r3, [r7, #96]	; 0x60
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f22:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e5      	bne.n	8009f02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2220      	movs	r2, #32
 8009f3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e067      	b.n	800a01e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d04f      	beq.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f6a:	d147      	bne.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f94:	637b      	str	r3, [r7, #52]	; 0x34
 8009f96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e6      	bne.n	8009f76 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3308      	adds	r3, #8
 8009fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	e853 3f00 	ldrex	r3, [r3]
 8009fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f023 0301 	bic.w	r3, r3, #1
 8009fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fc8:	623a      	str	r2, [r7, #32]
 8009fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	69f9      	ldr	r1, [r7, #28]
 8009fce:	6a3a      	ldr	r2, [r7, #32]
 8009fd0:	e841 2300 	strex	r3, r2, [r1]
 8009fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e5      	bne.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e010      	b.n	800a01e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	69da      	ldr	r2, [r3, #28]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4013      	ands	r3, r2
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	461a      	mov	r2, r3
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	429a      	cmp	r2, r3
 800a018:	f43f af4a 	beq.w	8009eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3770      	adds	r7, #112	; 0x70
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a026:	b480      	push	{r7}
 800a028:	b095      	sub	sp, #84	; 0x54
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a042:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a04c:	643b      	str	r3, [r7, #64]	; 0x40
 800a04e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e6      	bne.n	800a02e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3308      	adds	r3, #8
 800a066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	e853 3f00 	ldrex	r3, [r3]
 800a06e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	64bb      	str	r3, [r7, #72]	; 0x48
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3308      	adds	r3, #8
 800a07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a080:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e5      	bne.n	800a060 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d118      	bne.n	800a0ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f023 0310 	bic.w	r3, r3, #16
 800a0b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ba:	61bb      	str	r3, [r7, #24]
 800a0bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e6      	bne.n	800a09c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a0e0:	bf00      	nop
 800a0e2:	3754      	adds	r7, #84	; 0x54
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fb7a 	bl	8009804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	61bb      	str	r3, [r7, #24]
 800a140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6979      	ldr	r1, [r7, #20]
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	613b      	str	r3, [r7, #16]
   return(result);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e6      	bne.n	800a120 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fb46 	bl	80097f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a164:	bf00      	nop
 800a166:	3720      	adds	r7, #32
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d121      	bne.n	800a1c2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b27      	ldr	r3, [pc, #156]	; (800a220 <FMC_SDRAM_Init+0xb4>)
 800a184:	4013      	ands	r3, r2
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	6851      	ldr	r1, [r2, #4]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	6892      	ldr	r2, [r2, #8]
 800a18e:	4311      	orrs	r1, r2
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	68d2      	ldr	r2, [r2, #12]
 800a194:	4311      	orrs	r1, r2
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	6912      	ldr	r2, [r2, #16]
 800a19a:	4311      	orrs	r1, r2
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	6952      	ldr	r2, [r2, #20]
 800a1a0:	4311      	orrs	r1, r2
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	6992      	ldr	r2, [r2, #24]
 800a1a6:	4311      	orrs	r1, r2
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	69d2      	ldr	r2, [r2, #28]
 800a1ac:	4311      	orrs	r1, r2
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	6a12      	ldr	r2, [r2, #32]
 800a1b2:	4311      	orrs	r1, r2
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	e026      	b.n	800a210 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	69d9      	ldr	r1, [r3, #28]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	4319      	orrs	r1, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	; (800a220 <FMC_SDRAM_Init+0xb4>)
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	6851      	ldr	r1, [r2, #4]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	6892      	ldr	r2, [r2, #8]
 800a1f0:	4311      	orrs	r1, r2
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	68d2      	ldr	r2, [r2, #12]
 800a1f6:	4311      	orrs	r1, r2
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	6912      	ldr	r2, [r2, #16]
 800a1fc:	4311      	orrs	r1, r2
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	6952      	ldr	r2, [r2, #20]
 800a202:	4311      	orrs	r1, r2
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	6992      	ldr	r2, [r2, #24]
 800a208:	430a      	orrs	r2, r1
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	ffff8000 	.word	0xffff8000

0800a224 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d128      	bne.n	800a288 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	1e59      	subs	r1, r3, #1
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	3b01      	subs	r3, #1
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4319      	orrs	r1, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	4319      	orrs	r1, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	031b      	lsls	r3, r3, #12
 800a260:	4319      	orrs	r1, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	3b01      	subs	r3, #1
 800a268:	041b      	lsls	r3, r3, #16
 800a26a:	4319      	orrs	r1, r3
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	3b01      	subs	r3, #1
 800a272:	051b      	lsls	r3, r3, #20
 800a274:	4319      	orrs	r1, r3
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	061b      	lsls	r3, r3, #24
 800a27e:	430b      	orrs	r3, r1
 800a280:	431a      	orrs	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	609a      	str	r2, [r3, #8]
 800a286:	e02d      	b.n	800a2e4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	4b19      	ldr	r3, [pc, #100]	; (800a2f4 <FMC_SDRAM_Timing_Init+0xd0>)
 800a28e:	4013      	ands	r3, r2
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	68d2      	ldr	r2, [r2, #12]
 800a294:	3a01      	subs	r2, #1
 800a296:	0311      	lsls	r1, r2, #12
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	6952      	ldr	r2, [r2, #20]
 800a29c:	3a01      	subs	r2, #1
 800a29e:	0512      	lsls	r2, r2, #20
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	1e59      	subs	r1, r3, #1
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	4319      	orrs	r1, r3
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	4319      	orrs	r1, r3
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	041b      	lsls	r3, r3, #16
 800a2d2:	4319      	orrs	r1, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	061b      	lsls	r3, r3, #24
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	ff0f0fff 	.word	0xff0f0fff

0800a2f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <FMC_SDRAM_SendCommand+0x44>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	6811      	ldr	r1, [r2, #0]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	6852      	ldr	r2, [r2, #4]
 800a314:	4311      	orrs	r1, r2
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	6892      	ldr	r2, [r2, #8]
 800a31a:	3a01      	subs	r2, #1
 800a31c:	0152      	lsls	r2, r2, #5
 800a31e:	4311      	orrs	r1, r2
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	68d2      	ldr	r2, [r2, #12]
 800a324:	0252      	lsls	r2, r2, #9
 800a326:	430a      	orrs	r2, r1
 800a328:	431a      	orrs	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	ffc00000 	.word	0xffc00000

0800a340 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	695a      	ldr	r2, [r3, #20]
 800a34e:	4b07      	ldr	r3, [pc, #28]	; (800a36c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a350:	4013      	ands	r3, r2
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	ffffc001 	.word	0xffffc001

0800a370 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a37e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a382:	2b84      	cmp	r3, #132	; 0x84
 800a384:	d005      	beq.n	800a392 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	3303      	adds	r3, #3
 800a390:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a392:	68fb      	ldr	r3, [r7, #12]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a3a4:	f000 ffe6 	bl	800b374 <vTaskStartScheduler>
  
  return osOK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b0:	b089      	sub	sp, #36	; 0x24
 800a3b2:	af04      	add	r7, sp, #16
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d020      	beq.n	800a402 <osThreadCreate+0x54>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01c      	beq.n	800a402 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685c      	ldr	r4, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681d      	ldr	r5, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691e      	ldr	r6, [r3, #16]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff ffc8 	bl	800a370 <makeFreeRtosPriority>
 800a3e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3ea:	9202      	str	r2, [sp, #8]
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	9100      	str	r1, [sp, #0]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 fcf4 	bl	800ade4 <xTaskCreateStatic>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	e01c      	b.n	800a43c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685c      	ldr	r4, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a40e:	b29e      	uxth	r6, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ffaa 	bl	800a370 <makeFreeRtosPriority>
 800a41c:	4602      	mov	r2, r0
 800a41e:	f107 030c 	add.w	r3, r7, #12
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	9200      	str	r2, [sp, #0]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	4632      	mov	r2, r6
 800a42a:	4629      	mov	r1, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 fd3c 	bl	800aeaa <xTaskCreate>
 800a432:	4603      	mov	r3, r0
 800a434:	2b01      	cmp	r3, #1
 800a436:	d001      	beq.n	800a43c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a43c:	68fb      	ldr	r3, [r7, #12]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a446 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a446:	b480      	push	{r7}
 800a448:	b083      	sub	sp, #12
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f103 0208 	add.w	r2, r3, #8
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f04f 32ff 	mov.w	r2, #4294967295
 800a45e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f103 0208 	add.w	r2, r3, #8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f103 0208 	add.w	r2, r3, #8
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	601a      	str	r2, [r3, #0]
}
 800a4dc:	bf00      	nop
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d103      	bne.n	800a508 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	e00c      	b.n	800a522 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3308      	adds	r3, #8
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e002      	b.n	800a516 <vListInsert+0x2e>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d2f6      	bcs.n	800a510 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	601a      	str	r2, [r3, #0]
}
 800a54e:	bf00      	nop
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a55a:	b480      	push	{r7}
 800a55c:	b085      	sub	sp, #20
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	6892      	ldr	r2, [r2, #8]
 800a570:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	6852      	ldr	r2, [r2, #4]
 800a57a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d103      	bne.n	800a58e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1e5a      	subs	r2, r3, #1
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10c      	bne.n	800a5de <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	b672      	cpsid	i
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	b662      	cpsie	i
 800a5d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a5de:	f001 fe3d 	bl	800c25c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	68f9      	ldr	r1, [r7, #12]
 800a5ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5ee:	fb01 f303 	mul.w	r3, r1, r3
 800a5f2:	441a      	add	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	3b01      	subs	r3, #1
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a614:	fb01 f303 	mul.w	r3, r1, r3
 800a618:	441a      	add	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	22ff      	movs	r2, #255	; 0xff
 800a622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	22ff      	movs	r2, #255	; 0xff
 800a62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d114      	bne.n	800a65e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01a      	beq.n	800a672 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3310      	adds	r3, #16
 800a640:	4618      	mov	r0, r3
 800a642:	f001 f8f5 	bl	800b830 <xTaskRemoveFromEventList>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d012      	beq.n	800a672 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a64c:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <xQueueGenericReset+0xd0>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	e009      	b.n	800a672 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3310      	adds	r3, #16
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff feef 	bl	800a446 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3324      	adds	r3, #36	; 0x24
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff feea 	bl	800a446 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a672:	f001 fe27 	bl	800c2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a676:	2301      	movs	r3, #1
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	e000ed04 	.word	0xe000ed04

0800a684 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08a      	sub	sp, #40	; 0x28
 800a688:	af02      	add	r7, sp, #8
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	4613      	mov	r3, r2
 800a690:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10c      	bne.n	800a6b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69c:	b672      	cpsid	i
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	b662      	cpsie	i
 800a6ac:	613b      	str	r3, [r7, #16]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	e004      	b.n	800a6c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	3348      	adds	r3, #72	; 0x48
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 fead 	bl	800c42c <pvPortMalloc>
 800a6d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d011      	beq.n	800a6fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	3348      	adds	r3, #72	; 0x48
 800a6e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6ec:	79fa      	ldrb	r2, [r7, #7]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	68b9      	ldr	r1, [r7, #8]
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f805 	bl	800a708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6fe:	69bb      	ldr	r3, [r7, #24]
	}
 800a700:	4618      	mov	r0, r3
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d103      	bne.n	800a724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	e002      	b.n	800a72a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a736:	2101      	movs	r1, #1
 800a738:	69b8      	ldr	r0, [r7, #24]
 800a73a:	f7ff ff39 	bl	800a5b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a73e:	bf00      	nop
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00e      	beq.n	800a772 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a766:	2300      	movs	r3, #0
 800a768:	2200      	movs	r2, #0
 800a76a:	2100      	movs	r1, #0
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f81d 	bl	800a7ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	4603      	mov	r3, r0
 800a782:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a784:	2301      	movs	r3, #1
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	461a      	mov	r2, r3
 800a790:	6939      	ldr	r1, [r7, #16]
 800a792:	6978      	ldr	r0, [r7, #20]
 800a794:	f7ff ff76 	bl	800a684 <xQueueGenericCreate>
 800a798:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff ffd3 	bl	800a746 <prvInitialiseMutex>

		return xNewQueue;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
	}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08e      	sub	sp, #56	; 0x38
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10c      	bne.n	800a7e2 <xQueueGenericSend+0x36>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	b672      	cpsid	i
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	b662      	cpsie	i
 800a7dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7de:	bf00      	nop
 800a7e0:	e7fe      	b.n	800a7e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <xQueueGenericSend+0x44>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <xQueueGenericSend+0x48>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <xQueueGenericSend+0x4a>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10c      	bne.n	800a814 <xQueueGenericSend+0x68>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	b672      	cpsid	i
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	b662      	cpsie	i
 800a80e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d103      	bne.n	800a822 <xQueueGenericSend+0x76>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d101      	bne.n	800a826 <xQueueGenericSend+0x7a>
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <xQueueGenericSend+0x7c>
 800a826:	2300      	movs	r3, #0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10c      	bne.n	800a846 <xQueueGenericSend+0x9a>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	b672      	cpsid	i
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	b662      	cpsie	i
 800a840:	623b      	str	r3, [r7, #32]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a846:	f001 f9bb 	bl	800bbc0 <xTaskGetSchedulerState>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <xQueueGenericSend+0xaa>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <xQueueGenericSend+0xae>
 800a856:	2301      	movs	r3, #1
 800a858:	e000      	b.n	800a85c <xQueueGenericSend+0xb0>
 800a85a:	2300      	movs	r3, #0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10c      	bne.n	800a87a <xQueueGenericSend+0xce>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	b672      	cpsid	i
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	b662      	cpsie	i
 800a874:	61fb      	str	r3, [r7, #28]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a87a:	f001 fcef 	bl	800c25c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	429a      	cmp	r2, r3
 800a888:	d302      	bcc.n	800a890 <xQueueGenericSend+0xe4>
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d129      	bne.n	800a8e4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a896:	f000 f9bb 	bl	800ac10 <prvCopyDataToQueue>
 800a89a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d010      	beq.n	800a8c6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 ffc1 	bl	800b830 <xTaskRemoveFromEventList>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d013      	beq.n	800a8dc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8b4:	4b3f      	ldr	r3, [pc, #252]	; (800a9b4 <xQueueGenericSend+0x208>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	e00a      	b.n	800a8dc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d007      	beq.n	800a8dc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8cc:	4b39      	ldr	r3, [pc, #228]	; (800a9b4 <xQueueGenericSend+0x208>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8dc:	f001 fcf2 	bl	800c2c4 <vPortExitCritical>
				return pdPASS;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e063      	b.n	800a9ac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d103      	bne.n	800a8f2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8ea:	f001 fceb 	bl	800c2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e05c      	b.n	800a9ac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fffb 	bl	800b8f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a902:	2301      	movs	r3, #1
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a906:	f001 fcdd 	bl	800c2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a90a:	f000 fda1 	bl	800b450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a90e:	f001 fca5 	bl	800c25c <vPortEnterCritical>
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a918:	b25b      	sxtb	r3, r3
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d103      	bne.n	800a928 <xQueueGenericSend+0x17c>
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a92e:	b25b      	sxtb	r3, r3
 800a930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a934:	d103      	bne.n	800a93e <xQueueGenericSend+0x192>
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a93e:	f001 fcc1 	bl	800c2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a942:	1d3a      	adds	r2, r7, #4
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 ffea 	bl	800b924 <xTaskCheckForTimeOut>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d124      	bne.n	800a9a0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a958:	f000 fa2c 	bl	800adb4 <prvIsQueueFull>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d018      	beq.n	800a994 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	3310      	adds	r3, #16
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 ff3a 	bl	800b7e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a972:	f000 f9b7 	bl	800ace4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a976:	f000 fd79 	bl	800b46c <xTaskResumeAll>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f47f af7c 	bne.w	800a87a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <xQueueGenericSend+0x208>)
 800a984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	e772      	b.n	800a87a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a996:	f000 f9a5 	bl	800ace4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a99a:	f000 fd67 	bl	800b46c <xTaskResumeAll>
 800a99e:	e76c      	b.n	800a87a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a2:	f000 f99f 	bl	800ace4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9a6:	f000 fd61 	bl	800b46c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3738      	adds	r7, #56	; 0x38
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	e000ed04 	.word	0xe000ed04

0800a9b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08e      	sub	sp, #56	; 0x38
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10c      	bne.n	800a9ee <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	b672      	cpsid	i
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	b662      	cpsie	i
 800a9e8:	623b      	str	r3, [r7, #32]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00c      	beq.n	800aa10 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	b672      	cpsid	i
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	b662      	cpsie	i
 800aa0a:	61fb      	str	r3, [r7, #28]
}
 800aa0c:	bf00      	nop
 800aa0e:	e7fe      	b.n	800aa0e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa10:	f001 f8d6 	bl	800bbc0 <xTaskGetSchedulerState>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <xQueueSemaphoreTake+0x68>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <xQueueSemaphoreTake+0x6c>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <xQueueSemaphoreTake+0x6e>
 800aa24:	2300      	movs	r3, #0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10c      	bne.n	800aa44 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	b672      	cpsid	i
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	b662      	cpsie	i
 800aa3e:	61bb      	str	r3, [r7, #24]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa44:	f001 fc0a 	bl	800c25c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d024      	beq.n	800aa9e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	1e5a      	subs	r2, r3, #1
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d104      	bne.n	800aa6e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa64:	f001 fa72 	bl	800bf4c <pvTaskIncrementMutexHeldCount>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00f      	beq.n	800aa96 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	3310      	adds	r3, #16
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 fed8 	bl	800b830 <xTaskRemoveFromEventList>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa86:	4b55      	ldr	r3, [pc, #340]	; (800abdc <xQueueSemaphoreTake+0x224>)
 800aa88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa96:	f001 fc15 	bl	800c2c4 <vPortExitCritical>
				return pdPASS;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e099      	b.n	800abd2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d113      	bne.n	800aacc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00c      	beq.n	800aac4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	b672      	cpsid	i
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	b662      	cpsie	i
 800aabe:	617b      	str	r3, [r7, #20]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aac4:	f001 fbfe 	bl	800c2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aac8:	2300      	movs	r3, #0
 800aaca:	e082      	b.n	800abd2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d106      	bne.n	800aae0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aad2:	f107 030c 	add.w	r3, r7, #12
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 ff0e 	bl	800b8f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aadc:	2301      	movs	r3, #1
 800aade:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aae0:	f001 fbf0 	bl	800c2c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aae4:	f000 fcb4 	bl	800b450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aae8:	f001 fbb8 	bl	800c25c <vPortEnterCritical>
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaf2:	b25b      	sxtb	r3, r3
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d103      	bne.n	800ab02 <xQueueSemaphoreTake+0x14a>
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0e:	d103      	bne.n	800ab18 <xQueueSemaphoreTake+0x160>
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab18:	f001 fbd4 	bl	800c2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab1c:	463a      	mov	r2, r7
 800ab1e:	f107 030c 	add.w	r3, r7, #12
 800ab22:	4611      	mov	r1, r2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fefd 	bl	800b924 <xTaskCheckForTimeOut>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d132      	bne.n	800ab96 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab32:	f000 f929 	bl	800ad88 <prvIsQueueEmpty>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d026      	beq.n	800ab8a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d109      	bne.n	800ab58 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ab44:	f001 fb8a 	bl	800c25c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f001 f855 	bl	800bbfc <xTaskPriorityInherit>
 800ab52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ab54:	f001 fbb6 	bl	800c2c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	3324      	adds	r3, #36	; 0x24
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	4611      	mov	r1, r2
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 fe3f 	bl	800b7e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab68:	f000 f8bc 	bl	800ace4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab6c:	f000 fc7e 	bl	800b46c <xTaskResumeAll>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f47f af66 	bne.w	800aa44 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ab78:	4b18      	ldr	r3, [pc, #96]	; (800abdc <xQueueSemaphoreTake+0x224>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	e75c      	b.n	800aa44 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab8c:	f000 f8aa 	bl	800ace4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab90:	f000 fc6c 	bl	800b46c <xTaskResumeAll>
 800ab94:	e756      	b.n	800aa44 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab98:	f000 f8a4 	bl	800ace4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab9c:	f000 fc66 	bl	800b46c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aba2:	f000 f8f1 	bl	800ad88 <prvIsQueueEmpty>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f43f af4b 	beq.w	800aa44 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00d      	beq.n	800abd0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800abb4:	f001 fb52 	bl	800c25c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800abb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abba:	f000 f811 	bl	800abe0 <prvGetDisinheritPriorityAfterTimeout>
 800abbe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abc6:	4618      	mov	r0, r3
 800abc8:	f001 f922 	bl	800be10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800abcc:	f001 fb7a 	bl	800c2c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3738      	adds	r7, #56	; 0x38
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	2b00      	cmp	r3, #0
 800abee:	d006      	beq.n	800abfe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f1c3 0307 	rsb	r3, r3, #7
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e001      	b.n	800ac02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac02:	68fb      	ldr	r3, [r7, #12]
	}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10d      	bne.n	800ac4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d14d      	bne.n	800acd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 f85e 	bl	800bcfc <xTaskPriorityDisinherit>
 800ac40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	609a      	str	r2, [r3, #8]
 800ac48:	e043      	b.n	800acd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d119      	bne.n	800ac84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6858      	ldr	r0, [r3, #4]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac58:	461a      	mov	r2, r3
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	f001 fdf0 	bl	800c840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	441a      	add	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d32b      	bcc.n	800acd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	605a      	str	r2, [r3, #4]
 800ac82:	e026      	b.n	800acd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68d8      	ldr	r0, [r3, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	f001 fdd6 	bl	800c840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68da      	ldr	r2, [r3, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9c:	425b      	negs	r3, r3
 800ac9e:	441a      	add	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d207      	bcs.n	800acc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb8:	425b      	negs	r3, r3
 800acba:	441a      	add	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d105      	bne.n	800acd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3b01      	subs	r3, #1
 800acd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acda:	697b      	ldr	r3, [r7, #20]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acec:	f001 fab6 	bl	800c25c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acf8:	e011      	b.n	800ad1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d012      	beq.n	800ad28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3324      	adds	r3, #36	; 0x24
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 fd92 	bl	800b830 <xTaskRemoveFromEventList>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad12:	f000 fe6d 	bl	800b9f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dce9      	bgt.n	800acfa <prvUnlockQueue+0x16>
 800ad26:	e000      	b.n	800ad2a <prvUnlockQueue+0x46>
					break;
 800ad28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	22ff      	movs	r2, #255	; 0xff
 800ad2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad32:	f001 fac7 	bl	800c2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad36:	f001 fa91 	bl	800c25c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad42:	e011      	b.n	800ad68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d012      	beq.n	800ad72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3310      	adds	r3, #16
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fd6d 	bl	800b830 <xTaskRemoveFromEventList>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad5c:	f000 fe48 	bl	800b9f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dce9      	bgt.n	800ad44 <prvUnlockQueue+0x60>
 800ad70:	e000      	b.n	800ad74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	22ff      	movs	r2, #255	; 0xff
 800ad78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad7c:	f001 faa2 	bl	800c2c4 <vPortExitCritical>
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad90:	f001 fa64 	bl	800c25c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e001      	b.n	800ada6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ada6:	f001 fa8d 	bl	800c2c4 <vPortExitCritical>

	return xReturn;
 800adaa:	68fb      	ldr	r3, [r7, #12]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adbc:	f001 fa4e 	bl	800c25c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d102      	bne.n	800add2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adcc:	2301      	movs	r3, #1
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	e001      	b.n	800add6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800add6:	f001 fa75 	bl	800c2c4 <vPortExitCritical>

	return xReturn;
 800adda:	68fb      	ldr	r3, [r7, #12]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08e      	sub	sp, #56	; 0x38
 800ade8:	af04      	add	r7, sp, #16
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10c      	bne.n	800ae12 <xTaskCreateStatic+0x2e>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfc:	b672      	cpsid	i
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	b662      	cpsie	i
 800ae0c:	623b      	str	r3, [r7, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ae12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10c      	bne.n	800ae32 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	b672      	cpsid	i
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	b662      	cpsie	i
 800ae2c:	61fb      	str	r3, [r7, #28]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae32:	23b4      	movs	r3, #180	; 0xb4
 800ae34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2bb4      	cmp	r3, #180	; 0xb4
 800ae3a:	d00c      	beq.n	800ae56 <xTaskCreateStatic+0x72>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	b672      	cpsid	i
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	b662      	cpsie	i
 800ae50:	61bb      	str	r3, [r7, #24]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01e      	beq.n	800ae9c <xTaskCreateStatic+0xb8>
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01b      	beq.n	800ae9c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae76:	2300      	movs	r3, #0
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	f107 0314 	add.w	r3, r7, #20
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f850 	bl	800af34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae96:	f000 f8ed 	bl	800b074 <prvAddNewTaskToReadyList>
 800ae9a:	e001      	b.n	800aea0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aea0:	697b      	ldr	r3, [r7, #20]
	}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3728      	adds	r7, #40	; 0x28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b08c      	sub	sp, #48	; 0x30
 800aeae:	af04      	add	r7, sp, #16
 800aeb0:	60f8      	str	r0, [r7, #12]
 800aeb2:	60b9      	str	r1, [r7, #8]
 800aeb4:	603b      	str	r3, [r7, #0]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeba:	88fb      	ldrh	r3, [r7, #6]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f001 fab4 	bl	800c42c <pvPortMalloc>
 800aec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00e      	beq.n	800aeea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aecc:	20b4      	movs	r0, #180	; 0xb4
 800aece:	f001 faad 	bl	800c42c <pvPortMalloc>
 800aed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	631a      	str	r2, [r3, #48]	; 0x30
 800aee0:	e005      	b.n	800aeee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aee2:	6978      	ldr	r0, [r7, #20]
 800aee4:	f001 fb6c 	bl	800c5c0 <vPortFree>
 800aee8:	e001      	b.n	800aeee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d017      	beq.n	800af24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aefc:	88fa      	ldrh	r2, [r7, #6]
 800aefe:	2300      	movs	r3, #0
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	9302      	str	r3, [sp, #8]
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 f80e 	bl	800af34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af18:	69f8      	ldr	r0, [r7, #28]
 800af1a:	f000 f8ab 	bl	800b074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af1e:	2301      	movs	r3, #1
 800af20:	61bb      	str	r3, [r7, #24]
 800af22:	e002      	b.n	800af2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af2a:	69bb      	ldr	r3, [r7, #24]
	}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3720      	adds	r7, #32
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800af4c:	440b      	add	r3, r1
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00c      	beq.n	800af80 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	b672      	cpsid	i
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	b662      	cpsie	i
 800af7a:	617b      	str	r3, [r7, #20]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d01f      	beq.n	800afc6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af86:	2300      	movs	r3, #0
 800af88:	61fb      	str	r3, [r7, #28]
 800af8a:	e012      	b.n	800afb2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	4413      	add	r3, r2
 800af92:	7819      	ldrb	r1, [r3, #0]
 800af94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	4413      	add	r3, r2
 800af9a:	3334      	adds	r3, #52	; 0x34
 800af9c:	460a      	mov	r2, r1
 800af9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d006      	beq.n	800afba <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	3301      	adds	r3, #1
 800afb0:	61fb      	str	r3, [r7, #28]
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	2b0f      	cmp	r3, #15
 800afb6:	d9e9      	bls.n	800af8c <prvInitialiseNewTask+0x58>
 800afb8:	e000      	b.n	800afbc <prvInitialiseNewTask+0x88>
			{
				break;
 800afba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afc4:	e003      	b.n	800afce <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	2b06      	cmp	r3, #6
 800afd2:	d901      	bls.n	800afd8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afd4:	2306      	movs	r3, #6
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afe2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	2200      	movs	r2, #0
 800afe8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	3304      	adds	r3, #4
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff fa49 	bl	800a486 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	3318      	adds	r3, #24
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff fa44 	bl	800a486 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	f1c3 0207 	rsb	r2, r3, #7
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	334c      	adds	r3, #76	; 0x4c
 800b028:	2260      	movs	r2, #96	; 0x60
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f001 fc15 	bl	800c85c <memset>
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	4a0c      	ldr	r2, [pc, #48]	; (800b068 <prvInitialiseNewTask+0x134>)
 800b036:	651a      	str	r2, [r3, #80]	; 0x50
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	4a0c      	ldr	r2, [pc, #48]	; (800b06c <prvInitialiseNewTask+0x138>)
 800b03c:	655a      	str	r2, [r3, #84]	; 0x54
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	4a0b      	ldr	r2, [pc, #44]	; (800b070 <prvInitialiseNewTask+0x13c>)
 800b042:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	68f9      	ldr	r1, [r7, #12]
 800b048:	69b8      	ldr	r0, [r7, #24]
 800b04a:	f000 fff9 	bl	800c040 <pxPortInitialiseStack>
 800b04e:	4602      	mov	r2, r0
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d002      	beq.n	800b060 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b060:	bf00      	nop
 800b062:	3720      	adds	r7, #32
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	08032c1c 	.word	0x08032c1c
 800b06c:	08032c3c 	.word	0x08032c3c
 800b070:	08032bfc 	.word	0x08032bfc

0800b074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b07c:	f001 f8ee 	bl	800c25c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b080:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <prvAddNewTaskToReadyList+0xb8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	4a29      	ldr	r2, [pc, #164]	; (800b12c <prvAddNewTaskToReadyList+0xb8>)
 800b088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b08a:	4b29      	ldr	r3, [pc, #164]	; (800b130 <prvAddNewTaskToReadyList+0xbc>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b092:	4a27      	ldr	r2, [pc, #156]	; (800b130 <prvAddNewTaskToReadyList+0xbc>)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b098:	4b24      	ldr	r3, [pc, #144]	; (800b12c <prvAddNewTaskToReadyList+0xb8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d110      	bne.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0a0:	f000 fcca 	bl	800ba38 <prvInitialiseTaskLists>
 800b0a4:	e00d      	b.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0a6:	4b23      	ldr	r3, [pc, #140]	; (800b134 <prvAddNewTaskToReadyList+0xc0>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d109      	bne.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0ae:	4b20      	ldr	r3, [pc, #128]	; (800b130 <prvAddNewTaskToReadyList+0xbc>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d802      	bhi.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0bc:	4a1c      	ldr	r2, [pc, #112]	; (800b130 <prvAddNewTaskToReadyList+0xbc>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	4a1b      	ldr	r2, [pc, #108]	; (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b0ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	409a      	lsls	r2, r3
 800b0d4:	4b19      	ldr	r3, [pc, #100]	; (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	4a18      	ldr	r2, [pc, #96]	; (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4a15      	ldr	r2, [pc, #84]	; (800b140 <prvAddNewTaskToReadyList+0xcc>)
 800b0ec:	441a      	add	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f7ff f9d3 	bl	800a4a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0fa:	f001 f8e3 	bl	800c2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <prvAddNewTaskToReadyList+0xc0>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00e      	beq.n	800b124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b106:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <prvAddNewTaskToReadyList+0xbc>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	429a      	cmp	r2, r3
 800b112:	d207      	bcs.n	800b124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b114:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <prvAddNewTaskToReadyList+0xd0>)
 800b116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20000650 	.word	0x20000650
 800b130:	20000550 	.word	0x20000550
 800b134:	2000065c 	.word	0x2000065c
 800b138:	2000066c 	.word	0x2000066c
 800b13c:	20000658 	.word	0x20000658
 800b140:	20000554 	.word	0x20000554
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b150:	f001 f884 	bl	800c25c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d102      	bne.n	800b160 <vTaskDelete+0x18>
 800b15a:	4b3a      	ldr	r3, [pc, #232]	; (800b244 <vTaskDelete+0xfc>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	e000      	b.n	800b162 <vTaskDelete+0x1a>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3304      	adds	r3, #4
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff f9f6 	bl	800a55a <uxListRemove>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d115      	bne.n	800b1a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4933      	ldr	r1, [pc, #204]	; (800b248 <vTaskDelete+0x100>)
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <vTaskDelete+0x58>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	2201      	movs	r2, #1
 800b190:	fa02 f303 	lsl.w	r3, r2, r3
 800b194:	43da      	mvns	r2, r3
 800b196:	4b2d      	ldr	r3, [pc, #180]	; (800b24c <vTaskDelete+0x104>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4013      	ands	r3, r2
 800b19c:	4a2b      	ldr	r2, [pc, #172]	; (800b24c <vTaskDelete+0x104>)
 800b19e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3318      	adds	r3, #24
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff f9d4 	bl	800a55a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b1b2:	4b27      	ldr	r3, [pc, #156]	; (800b250 <vTaskDelete+0x108>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	4a25      	ldr	r2, [pc, #148]	; (800b250 <vTaskDelete+0x108>)
 800b1ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b1bc:	4b21      	ldr	r3, [pc, #132]	; (800b244 <vTaskDelete+0xfc>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d10b      	bne.n	800b1de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4821      	ldr	r0, [pc, #132]	; (800b254 <vTaskDelete+0x10c>)
 800b1ce:	f7ff f967 	bl	800a4a0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b1d2:	4b21      	ldr	r3, [pc, #132]	; (800b258 <vTaskDelete+0x110>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	4a1f      	ldr	r2, [pc, #124]	; (800b258 <vTaskDelete+0x110>)
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	e009      	b.n	800b1f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b1de:	4b1f      	ldr	r3, [pc, #124]	; (800b25c <vTaskDelete+0x114>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	4a1d      	ldr	r2, [pc, #116]	; (800b25c <vTaskDelete+0x114>)
 800b1e6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 fc93 	bl	800bb14 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b1ee:	f000 fcc7 	bl	800bb80 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b1f2:	f001 f867 	bl	800c2c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b1f6:	4b1a      	ldr	r3, [pc, #104]	; (800b260 <vTaskDelete+0x118>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d01d      	beq.n	800b23a <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800b1fe:	4b11      	ldr	r3, [pc, #68]	; (800b244 <vTaskDelete+0xfc>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	429a      	cmp	r2, r3
 800b206:	d118      	bne.n	800b23a <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b208:	4b16      	ldr	r3, [pc, #88]	; (800b264 <vTaskDelete+0x11c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00c      	beq.n	800b22a <vTaskDelete+0xe2>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	b672      	cpsid	i
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	b662      	cpsie	i
 800b224:	60bb      	str	r3, [r7, #8]
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800b22a:	4b0f      	ldr	r3, [pc, #60]	; (800b268 <vTaskDelete+0x120>)
 800b22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b23a:	bf00      	nop
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000550 	.word	0x20000550
 800b248:	20000554 	.word	0x20000554
 800b24c:	20000658 	.word	0x20000658
 800b250:	2000066c 	.word	0x2000066c
 800b254:	20000624 	.word	0x20000624
 800b258:	20000638 	.word	0x20000638
 800b25c:	20000650 	.word	0x20000650
 800b260:	2000065c 	.word	0x2000065c
 800b264:	20000678 	.word	0x20000678
 800b268:	e000ed04 	.word	0xe000ed04

0800b26c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08a      	sub	sp, #40	; 0x28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b276:	2300      	movs	r3, #0
 800b278:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10c      	bne.n	800b29a <vTaskDelayUntil+0x2e>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	b672      	cpsid	i
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	b662      	cpsie	i
 800b294:	617b      	str	r3, [r7, #20]
}
 800b296:	bf00      	nop
 800b298:	e7fe      	b.n	800b298 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10c      	bne.n	800b2ba <vTaskDelayUntil+0x4e>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	b672      	cpsid	i
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	b662      	cpsie	i
 800b2b4:	613b      	str	r3, [r7, #16]
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800b2ba:	4b2b      	ldr	r3, [pc, #172]	; (800b368 <vTaskDelayUntil+0xfc>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00c      	beq.n	800b2dc <vTaskDelayUntil+0x70>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	b672      	cpsid	i
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	b662      	cpsie	i
 800b2d6:	60fb      	str	r3, [r7, #12]
}
 800b2d8:	bf00      	nop
 800b2da:	e7fe      	b.n	800b2da <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800b2dc:	f000 f8b8 	bl	800b450 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b2e0:	4b22      	ldr	r3, [pc, #136]	; (800b36c <vTaskDelayUntil+0x100>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6a3a      	ldr	r2, [r7, #32]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d20b      	bcs.n	800b312 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69fa      	ldr	r2, [r7, #28]
 800b300:	429a      	cmp	r2, r3
 800b302:	d211      	bcs.n	800b328 <vTaskDelayUntil+0xbc>
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d90d      	bls.n	800b328 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b30c:	2301      	movs	r3, #1
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
 800b310:	e00a      	b.n	800b328 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	69fa      	ldr	r2, [r7, #28]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d303      	bcc.n	800b324 <vTaskDelayUntil+0xb8>
 800b31c:	69fa      	ldr	r2, [r7, #28]
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	429a      	cmp	r2, r3
 800b322:	d901      	bls.n	800b328 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b324:	2301      	movs	r3, #1
 800b326:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	69fa      	ldr	r2, [r7, #28]
 800b32c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	2100      	movs	r1, #0
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 fe19 	bl	800bf74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b342:	f000 f893 	bl	800b46c <xTaskResumeAll>
 800b346:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d107      	bne.n	800b35e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800b34e:	4b08      	ldr	r3, [pc, #32]	; (800b370 <vTaskDelayUntil+0x104>)
 800b350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b35e:	bf00      	nop
 800b360:	3728      	adds	r7, #40	; 0x28
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20000678 	.word	0x20000678
 800b36c:	20000654 	.word	0x20000654
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	; 0x28
 800b378:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b37a:	2300      	movs	r3, #0
 800b37c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b382:	463a      	mov	r2, r7
 800b384:	1d39      	adds	r1, r7, #4
 800b386:	f107 0308 	add.w	r3, r7, #8
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f5 f8bc 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	9202      	str	r2, [sp, #8]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	2300      	movs	r3, #0
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	460a      	mov	r2, r1
 800b3a2:	4923      	ldr	r1, [pc, #140]	; (800b430 <vTaskStartScheduler+0xbc>)
 800b3a4:	4823      	ldr	r0, [pc, #140]	; (800b434 <vTaskStartScheduler+0xc0>)
 800b3a6:	f7ff fd1d 	bl	800ade4 <xTaskCreateStatic>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4a22      	ldr	r2, [pc, #136]	; (800b438 <vTaskStartScheduler+0xc4>)
 800b3ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b3b0:	4b21      	ldr	r3, [pc, #132]	; (800b438 <vTaskStartScheduler+0xc4>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e001      	b.n	800b3c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d11d      	bne.n	800b404 <vTaskStartScheduler+0x90>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	b672      	cpsid	i
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	b662      	cpsie	i
 800b3dc:	613b      	str	r3, [r7, #16]
}
 800b3de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3e0:	4b16      	ldr	r3, [pc, #88]	; (800b43c <vTaskStartScheduler+0xc8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	334c      	adds	r3, #76	; 0x4c
 800b3e6:	4a16      	ldr	r2, [pc, #88]	; (800b440 <vTaskStartScheduler+0xcc>)
 800b3e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3ea:	4b16      	ldr	r3, [pc, #88]	; (800b444 <vTaskStartScheduler+0xd0>)
 800b3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <vTaskStartScheduler+0xd4>)
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b3f8:	4b14      	ldr	r3, [pc, #80]	; (800b44c <vTaskStartScheduler+0xd8>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b3fe:	f000 feaf 	bl	800c160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b402:	e010      	b.n	800b426 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40a:	d10c      	bne.n	800b426 <vTaskStartScheduler+0xb2>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	b672      	cpsid	i
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	b662      	cpsie	i
 800b420:	60fb      	str	r3, [r7, #12]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <vTaskStartScheduler+0xb0>
}
 800b426:	bf00      	nop
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	0800ca60 	.word	0x0800ca60
 800b434:	0800ba09 	.word	0x0800ba09
 800b438:	20000674 	.word	0x20000674
 800b43c:	20000550 	.word	0x20000550
 800b440:	2000004c 	.word	0x2000004c
 800b444:	20000670 	.word	0x20000670
 800b448:	2000065c 	.word	0x2000065c
 800b44c:	20000654 	.word	0x20000654

0800b450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b454:	4b04      	ldr	r3, [pc, #16]	; (800b468 <vTaskSuspendAll+0x18>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3301      	adds	r3, #1
 800b45a:	4a03      	ldr	r2, [pc, #12]	; (800b468 <vTaskSuspendAll+0x18>)
 800b45c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b45e:	bf00      	nop
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	20000678 	.word	0x20000678

0800b46c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b47a:	4b42      	ldr	r3, [pc, #264]	; (800b584 <xTaskResumeAll+0x118>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10c      	bne.n	800b49c <xTaskResumeAll+0x30>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	b672      	cpsid	i
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	b662      	cpsie	i
 800b496:	603b      	str	r3, [r7, #0]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b49c:	f000 fede 	bl	800c25c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4a0:	4b38      	ldr	r3, [pc, #224]	; (800b584 <xTaskResumeAll+0x118>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	4a37      	ldr	r2, [pc, #220]	; (800b584 <xTaskResumeAll+0x118>)
 800b4a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4aa:	4b36      	ldr	r3, [pc, #216]	; (800b584 <xTaskResumeAll+0x118>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d161      	bne.n	800b576 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4b2:	4b35      	ldr	r3, [pc, #212]	; (800b588 <xTaskResumeAll+0x11c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d05d      	beq.n	800b576 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4ba:	e02e      	b.n	800b51a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4bc:	4b33      	ldr	r3, [pc, #204]	; (800b58c <xTaskResumeAll+0x120>)
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff f846 	bl	800a55a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff f841 	bl	800a55a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4dc:	2201      	movs	r2, #1
 800b4de:	409a      	lsls	r2, r3
 800b4e0:	4b2b      	ldr	r3, [pc, #172]	; (800b590 <xTaskResumeAll+0x124>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	4a2a      	ldr	r2, [pc, #168]	; (800b590 <xTaskResumeAll+0x124>)
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4a27      	ldr	r2, [pc, #156]	; (800b594 <xTaskResumeAll+0x128>)
 800b4f8:	441a      	add	r2, r3
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f7fe ffcd 	bl	800a4a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <xTaskResumeAll+0x12c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b510:	429a      	cmp	r2, r3
 800b512:	d302      	bcc.n	800b51a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b514:	4b21      	ldr	r3, [pc, #132]	; (800b59c <xTaskResumeAll+0x130>)
 800b516:	2201      	movs	r2, #1
 800b518:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b51a:	4b1c      	ldr	r3, [pc, #112]	; (800b58c <xTaskResumeAll+0x120>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1cc      	bne.n	800b4bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b528:	f000 fb2a 	bl	800bb80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b52c:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <xTaskResumeAll+0x134>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d010      	beq.n	800b55a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b538:	f000 f836 	bl	800b5a8 <xTaskIncrementTick>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b542:	4b16      	ldr	r3, [pc, #88]	; (800b59c <xTaskResumeAll+0x130>)
 800b544:	2201      	movs	r2, #1
 800b546:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1f1      	bne.n	800b538 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b554:	4b12      	ldr	r3, [pc, #72]	; (800b5a0 <xTaskResumeAll+0x134>)
 800b556:	2200      	movs	r2, #0
 800b558:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b55a:	4b10      	ldr	r3, [pc, #64]	; (800b59c <xTaskResumeAll+0x130>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d009      	beq.n	800b576 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b562:	2301      	movs	r3, #1
 800b564:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <xTaskResumeAll+0x138>)
 800b568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b576:	f000 fea5 	bl	800c2c4 <vPortExitCritical>

	return xAlreadyYielded;
 800b57a:	68bb      	ldr	r3, [r7, #8]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000678 	.word	0x20000678
 800b588:	20000650 	.word	0x20000650
 800b58c:	20000610 	.word	0x20000610
 800b590:	20000658 	.word	0x20000658
 800b594:	20000554 	.word	0x20000554
 800b598:	20000550 	.word	0x20000550
 800b59c:	20000664 	.word	0x20000664
 800b5a0:	20000660 	.word	0x20000660
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b2:	4b4f      	ldr	r3, [pc, #316]	; (800b6f0 <xTaskIncrementTick+0x148>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f040 808a 	bne.w	800b6d0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b5bc:	4b4d      	ldr	r3, [pc, #308]	; (800b6f4 <xTaskIncrementTick+0x14c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b5c4:	4a4b      	ldr	r2, [pc, #300]	; (800b6f4 <xTaskIncrementTick+0x14c>)
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d122      	bne.n	800b616 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b5d0:	4b49      	ldr	r3, [pc, #292]	; (800b6f8 <xTaskIncrementTick+0x150>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00c      	beq.n	800b5f4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	b672      	cpsid	i
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	b662      	cpsie	i
 800b5ee:	603b      	str	r3, [r7, #0]
}
 800b5f0:	bf00      	nop
 800b5f2:	e7fe      	b.n	800b5f2 <xTaskIncrementTick+0x4a>
 800b5f4:	4b40      	ldr	r3, [pc, #256]	; (800b6f8 <xTaskIncrementTick+0x150>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	4b40      	ldr	r3, [pc, #256]	; (800b6fc <xTaskIncrementTick+0x154>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a3e      	ldr	r2, [pc, #248]	; (800b6f8 <xTaskIncrementTick+0x150>)
 800b600:	6013      	str	r3, [r2, #0]
 800b602:	4a3e      	ldr	r2, [pc, #248]	; (800b6fc <xTaskIncrementTick+0x154>)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	4b3d      	ldr	r3, [pc, #244]	; (800b700 <xTaskIncrementTick+0x158>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3301      	adds	r3, #1
 800b60e:	4a3c      	ldr	r2, [pc, #240]	; (800b700 <xTaskIncrementTick+0x158>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	f000 fab5 	bl	800bb80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b616:	4b3b      	ldr	r3, [pc, #236]	; (800b704 <xTaskIncrementTick+0x15c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d348      	bcc.n	800b6b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b620:	4b35      	ldr	r3, [pc, #212]	; (800b6f8 <xTaskIncrementTick+0x150>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d104      	bne.n	800b634 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62a:	4b36      	ldr	r3, [pc, #216]	; (800b704 <xTaskIncrementTick+0x15c>)
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	601a      	str	r2, [r3, #0]
					break;
 800b632:	e03e      	b.n	800b6b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b634:	4b30      	ldr	r3, [pc, #192]	; (800b6f8 <xTaskIncrementTick+0x150>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d203      	bcs.n	800b654 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b64c:	4a2d      	ldr	r2, [pc, #180]	; (800b704 <xTaskIncrementTick+0x15c>)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b652:	e02e      	b.n	800b6b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe ff7e 	bl	800a55a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b662:	2b00      	cmp	r3, #0
 800b664:	d004      	beq.n	800b670 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	3318      	adds	r3, #24
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe ff75 	bl	800a55a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	2201      	movs	r2, #1
 800b676:	409a      	lsls	r2, r3
 800b678:	4b23      	ldr	r3, [pc, #140]	; (800b708 <xTaskIncrementTick+0x160>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	4a22      	ldr	r2, [pc, #136]	; (800b708 <xTaskIncrementTick+0x160>)
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	4613      	mov	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4a1f      	ldr	r2, [pc, #124]	; (800b70c <xTaskIncrementTick+0x164>)
 800b690:	441a      	add	r2, r3
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	3304      	adds	r3, #4
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7fe ff01 	bl	800a4a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a2:	4b1b      	ldr	r3, [pc, #108]	; (800b710 <xTaskIncrementTick+0x168>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d3b9      	bcc.n	800b620 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6b0:	e7b6      	b.n	800b620 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b6b2:	4b17      	ldr	r3, [pc, #92]	; (800b710 <xTaskIncrementTick+0x168>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b8:	4914      	ldr	r1, [pc, #80]	; (800b70c <xTaskIncrementTick+0x164>)
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d907      	bls.n	800b6da <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	617b      	str	r3, [r7, #20]
 800b6ce:	e004      	b.n	800b6da <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b6d0:	4b10      	ldr	r3, [pc, #64]	; (800b714 <xTaskIncrementTick+0x16c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a0f      	ldr	r2, [pc, #60]	; (800b714 <xTaskIncrementTick+0x16c>)
 800b6d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b6da:	4b0f      	ldr	r3, [pc, #60]	; (800b718 <xTaskIncrementTick+0x170>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b6e6:	697b      	ldr	r3, [r7, #20]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000678 	.word	0x20000678
 800b6f4:	20000654 	.word	0x20000654
 800b6f8:	20000608 	.word	0x20000608
 800b6fc:	2000060c 	.word	0x2000060c
 800b700:	20000668 	.word	0x20000668
 800b704:	20000670 	.word	0x20000670
 800b708:	20000658 	.word	0x20000658
 800b70c:	20000554 	.word	0x20000554
 800b710:	20000550 	.word	0x20000550
 800b714:	20000660 	.word	0x20000660
 800b718:	20000664 	.word	0x20000664

0800b71c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b722:	4b2a      	ldr	r3, [pc, #168]	; (800b7cc <vTaskSwitchContext+0xb0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b72a:	4b29      	ldr	r3, [pc, #164]	; (800b7d0 <vTaskSwitchContext+0xb4>)
 800b72c:	2201      	movs	r2, #1
 800b72e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b730:	e046      	b.n	800b7c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b732:	4b27      	ldr	r3, [pc, #156]	; (800b7d0 <vTaskSwitchContext+0xb4>)
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b738:	4b26      	ldr	r3, [pc, #152]	; (800b7d4 <vTaskSwitchContext+0xb8>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	fab3 f383 	clz	r3, r3
 800b744:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b746:	7afb      	ldrb	r3, [r7, #11]
 800b748:	f1c3 031f 	rsb	r3, r3, #31
 800b74c:	617b      	str	r3, [r7, #20]
 800b74e:	4922      	ldr	r1, [pc, #136]	; (800b7d8 <vTaskSwitchContext+0xbc>)
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	4613      	mov	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	440b      	add	r3, r1
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10c      	bne.n	800b77c <vTaskSwitchContext+0x60>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	b672      	cpsid	i
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	b662      	cpsie	i
 800b776:	607b      	str	r3, [r7, #4]
}
 800b778:	bf00      	nop
 800b77a:	e7fe      	b.n	800b77a <vTaskSwitchContext+0x5e>
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4a14      	ldr	r2, [pc, #80]	; (800b7d8 <vTaskSwitchContext+0xbc>)
 800b788:	4413      	add	r3, r2
 800b78a:	613b      	str	r3, [r7, #16]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	605a      	str	r2, [r3, #4]
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	3308      	adds	r3, #8
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d104      	bne.n	800b7ac <vTaskSwitchContext+0x90>
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	605a      	str	r2, [r3, #4]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <vTaskSwitchContext+0xc0>)
 800b7b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7b6:	4b09      	ldr	r3, [pc, #36]	; (800b7dc <vTaskSwitchContext+0xc0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	334c      	adds	r3, #76	; 0x4c
 800b7bc:	4a08      	ldr	r2, [pc, #32]	; (800b7e0 <vTaskSwitchContext+0xc4>)
 800b7be:	6013      	str	r3, [r2, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	20000678 	.word	0x20000678
 800b7d0:	20000664 	.word	0x20000664
 800b7d4:	20000658 	.word	0x20000658
 800b7d8:	20000554 	.word	0x20000554
 800b7dc:	20000550 	.word	0x20000550
 800b7e0:	2000004c 	.word	0x2000004c

0800b7e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10c      	bne.n	800b80e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	b672      	cpsid	i
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	b662      	cpsie	i
 800b808:	60fb      	str	r3, [r7, #12]
}
 800b80a:	bf00      	nop
 800b80c:	e7fe      	b.n	800b80c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b80e:	4b07      	ldr	r3, [pc, #28]	; (800b82c <vTaskPlaceOnEventList+0x48>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3318      	adds	r3, #24
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7fe fe66 	bl	800a4e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b81c:	2101      	movs	r1, #1
 800b81e:	6838      	ldr	r0, [r7, #0]
 800b820:	f000 fba8 	bl	800bf74 <prvAddCurrentTaskToDelayedList>
}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20000550 	.word	0x20000550

0800b830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10c      	bne.n	800b860 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	b672      	cpsid	i
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	b662      	cpsie	i
 800b85a:	60fb      	str	r3, [r7, #12]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	3318      	adds	r3, #24
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe fe78 	bl	800a55a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86a:	4b1d      	ldr	r3, [pc, #116]	; (800b8e0 <xTaskRemoveFromEventList+0xb0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d11c      	bne.n	800b8ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	3304      	adds	r3, #4
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fe6f 	bl	800a55a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	2201      	movs	r2, #1
 800b882:	409a      	lsls	r2, r3
 800b884:	4b17      	ldr	r3, [pc, #92]	; (800b8e4 <xTaskRemoveFromEventList+0xb4>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4313      	orrs	r3, r2
 800b88a:	4a16      	ldr	r2, [pc, #88]	; (800b8e4 <xTaskRemoveFromEventList+0xb4>)
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4a13      	ldr	r2, [pc, #76]	; (800b8e8 <xTaskRemoveFromEventList+0xb8>)
 800b89c:	441a      	add	r2, r3
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f7fe fdfb 	bl	800a4a0 <vListInsertEnd>
 800b8aa:	e005      	b.n	800b8b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	3318      	adds	r3, #24
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	480e      	ldr	r0, [pc, #56]	; (800b8ec <xTaskRemoveFromEventList+0xbc>)
 800b8b4:	f7fe fdf4 	bl	800a4a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8bc:	4b0c      	ldr	r3, [pc, #48]	; (800b8f0 <xTaskRemoveFromEventList+0xc0>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d905      	bls.n	800b8d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8ca:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <xTaskRemoveFromEventList+0xc4>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	e001      	b.n	800b8d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8d6:	697b      	ldr	r3, [r7, #20]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20000678 	.word	0x20000678
 800b8e4:	20000658 	.word	0x20000658
 800b8e8:	20000554 	.word	0x20000554
 800b8ec:	20000610 	.word	0x20000610
 800b8f0:	20000550 	.word	0x20000550
 800b8f4:	20000664 	.word	0x20000664

0800b8f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b900:	4b06      	ldr	r3, [pc, #24]	; (800b91c <vTaskInternalSetTimeOutState+0x24>)
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b908:	4b05      	ldr	r3, [pc, #20]	; (800b920 <vTaskInternalSetTimeOutState+0x28>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	605a      	str	r2, [r3, #4]
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20000668 	.word	0x20000668
 800b920:	20000654 	.word	0x20000654

0800b924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10c      	bne.n	800b94e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	b672      	cpsid	i
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	b662      	cpsie	i
 800b948:	613b      	str	r3, [r7, #16]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10c      	bne.n	800b96e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	b672      	cpsid	i
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	b662      	cpsie	i
 800b968:	60fb      	str	r3, [r7, #12]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b96e:	f000 fc75 	bl	800c25c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b972:	4b1d      	ldr	r3, [pc, #116]	; (800b9e8 <xTaskCheckForTimeOut+0xc4>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98a:	d102      	bne.n	800b992 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e023      	b.n	800b9da <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <xTaskCheckForTimeOut+0xc8>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d007      	beq.n	800b9ae <xTaskCheckForTimeOut+0x8a>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d302      	bcc.n	800b9ae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e015      	b.n	800b9da <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d20b      	bcs.n	800b9d0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff97 	bl	800b8f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e004      	b.n	800b9da <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9da:	f000 fc73 	bl	800c2c4 <vPortExitCritical>

	return xReturn;
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000654 	.word	0x20000654
 800b9ec:	20000668 	.word	0x20000668

0800b9f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9f4:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <vTaskMissedYield+0x14>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20000664 	.word	0x20000664

0800ba08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba10:	f000 f852 	bl	800bab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba14:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <prvIdleTask+0x28>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d9f9      	bls.n	800ba10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <prvIdleTask+0x2c>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba2c:	e7f0      	b.n	800ba10 <prvIdleTask+0x8>
 800ba2e:	bf00      	nop
 800ba30:	20000554 	.word	0x20000554
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e00c      	b.n	800ba5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4a12      	ldr	r2, [pc, #72]	; (800ba98 <prvInitialiseTaskLists+0x60>)
 800ba50:	4413      	add	r3, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fcf7 	bl	800a446 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b06      	cmp	r3, #6
 800ba62:	d9ef      	bls.n	800ba44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba64:	480d      	ldr	r0, [pc, #52]	; (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba66:	f7fe fcee 	bl	800a446 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba6a:	480d      	ldr	r0, [pc, #52]	; (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba6c:	f7fe fceb 	bl	800a446 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba70:	480c      	ldr	r0, [pc, #48]	; (800baa4 <prvInitialiseTaskLists+0x6c>)
 800ba72:	f7fe fce8 	bl	800a446 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba76:	480c      	ldr	r0, [pc, #48]	; (800baa8 <prvInitialiseTaskLists+0x70>)
 800ba78:	f7fe fce5 	bl	800a446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba7c:	480b      	ldr	r0, [pc, #44]	; (800baac <prvInitialiseTaskLists+0x74>)
 800ba7e:	f7fe fce2 	bl	800a446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <prvInitialiseTaskLists+0x78>)
 800ba84:	4a05      	ldr	r2, [pc, #20]	; (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <prvInitialiseTaskLists+0x7c>)
 800ba8a:	4a05      	ldr	r2, [pc, #20]	; (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba8c:	601a      	str	r2, [r3, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000554 	.word	0x20000554
 800ba9c:	200005e0 	.word	0x200005e0
 800baa0:	200005f4 	.word	0x200005f4
 800baa4:	20000610 	.word	0x20000610
 800baa8:	20000624 	.word	0x20000624
 800baac:	2000063c 	.word	0x2000063c
 800bab0:	20000608 	.word	0x20000608
 800bab4:	2000060c 	.word	0x2000060c

0800bab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800babe:	e019      	b.n	800baf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bac0:	f000 fbcc 	bl	800c25c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac4:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <prvCheckTasksWaitingTermination+0x50>)
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3304      	adds	r3, #4
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe fd42 	bl	800a55a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3b01      	subs	r3, #1
 800badc:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bae0:	4b0b      	ldr	r3, [pc, #44]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	4a0a      	ldr	r2, [pc, #40]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baea:	f000 fbeb 	bl	800c2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f810 	bl	800bb14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e1      	bne.n	800bac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bafc:	bf00      	nop
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000624 	.word	0x20000624
 800bb0c:	20000650 	.word	0x20000650
 800bb10:	20000638 	.word	0x20000638

0800bb14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	334c      	adds	r3, #76	; 0x4c
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 feb1 	bl	800c888 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d108      	bne.n	800bb42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fd43 	bl	800c5c0 <vPortFree>
				vPortFree( pxTCB );
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 fd40 	bl	800c5c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb40:	e01a      	b.n	800bb78 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d103      	bne.n	800bb54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fd37 	bl	800c5c0 <vPortFree>
	}
 800bb52:	e011      	b.n	800bb78 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d00c      	beq.n	800bb78 <prvDeleteTCB+0x64>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	b672      	cpsid	i
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	b662      	cpsie	i
 800bb72:	60fb      	str	r3, [r7, #12]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <prvDeleteTCB+0x62>
	}
 800bb78:	bf00      	nop
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb86:	4b0c      	ldr	r3, [pc, #48]	; (800bbb8 <prvResetNextTaskUnblockTime+0x38>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d104      	bne.n	800bb9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb90:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <prvResetNextTaskUnblockTime+0x3c>)
 800bb92:	f04f 32ff 	mov.w	r2, #4294967295
 800bb96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb98:	e008      	b.n	800bbac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <prvResetNextTaskUnblockTime+0x38>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	4a04      	ldr	r2, [pc, #16]	; (800bbbc <prvResetNextTaskUnblockTime+0x3c>)
 800bbaa:	6013      	str	r3, [r2, #0]
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20000608 	.word	0x20000608
 800bbbc:	20000670 	.word	0x20000670

0800bbc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <xTaskGetSchedulerState+0x34>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	e008      	b.n	800bbe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd4:	4b08      	ldr	r3, [pc, #32]	; (800bbf8 <xTaskGetSchedulerState+0x38>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	607b      	str	r3, [r7, #4]
 800bbe0:	e001      	b.n	800bbe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbe6:	687b      	ldr	r3, [r7, #4]
	}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	2000065c 	.word	0x2000065c
 800bbf8:	20000678 	.word	0x20000678

0800bbfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d069      	beq.n	800bce6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc16:	4b36      	ldr	r3, [pc, #216]	; (800bcf0 <xTaskPriorityInherit+0xf4>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d259      	bcs.n	800bcd4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	db06      	blt.n	800bc36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc28:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <xTaskPriorityInherit+0xf4>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2e:	f1c3 0207 	rsb	r2, r3, #7
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6959      	ldr	r1, [r3, #20]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3e:	4613      	mov	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4a2b      	ldr	r2, [pc, #172]	; (800bcf4 <xTaskPriorityInherit+0xf8>)
 800bc48:	4413      	add	r3, r2
 800bc4a:	4299      	cmp	r1, r3
 800bc4c:	d13a      	bne.n	800bcc4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fc81 	bl	800a55a <uxListRemove>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d115      	bne.n	800bc8a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	4924      	ldr	r1, [pc, #144]	; (800bcf4 <xTaskPriorityInherit+0xf8>)
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xTaskPriorityInherit+0x8e>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	2201      	movs	r2, #1
 800bc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7e:	43da      	mvns	r2, r3
 800bc80:	4b1d      	ldr	r3, [pc, #116]	; (800bcf8 <xTaskPriorityInherit+0xfc>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4013      	ands	r3, r2
 800bc86:	4a1c      	ldr	r2, [pc, #112]	; (800bcf8 <xTaskPriorityInherit+0xfc>)
 800bc88:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc8a:	4b19      	ldr	r3, [pc, #100]	; (800bcf0 <xTaskPriorityInherit+0xf4>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	2201      	movs	r2, #1
 800bc9a:	409a      	lsls	r2, r3
 800bc9c:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <xTaskPriorityInherit+0xfc>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	4a15      	ldr	r2, [pc, #84]	; (800bcf8 <xTaskPriorityInherit+0xfc>)
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4a10      	ldr	r2, [pc, #64]	; (800bcf4 <xTaskPriorityInherit+0xf8>)
 800bcb4:	441a      	add	r2, r3
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	3304      	adds	r3, #4
 800bcba:	4619      	mov	r1, r3
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	f7fe fbef 	bl	800a4a0 <vListInsertEnd>
 800bcc2:	e004      	b.n	800bcce <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <xTaskPriorityInherit+0xf4>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e008      	b.n	800bce6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcd8:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <xTaskPriorityInherit+0xf4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d201      	bcs.n	800bce6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bce6:	68fb      	ldr	r3, [r7, #12]
	}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000550 	.word	0x20000550
 800bcf4:	20000554 	.word	0x20000554
 800bcf8:	20000658 	.word	0x20000658

0800bcfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d072      	beq.n	800bdf8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd12:	4b3c      	ldr	r3, [pc, #240]	; (800be04 <xTaskPriorityDisinherit+0x108>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d00c      	beq.n	800bd36 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	b672      	cpsid	i
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	b662      	cpsie	i
 800bd30:	60fb      	str	r3, [r7, #12]
}
 800bd32:	bf00      	nop
 800bd34:	e7fe      	b.n	800bd34 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10c      	bne.n	800bd58 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	b672      	cpsid	i
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	b662      	cpsie	i
 800bd52:	60bb      	str	r3, [r7, #8]
}
 800bd54:	bf00      	nop
 800bd56:	e7fe      	b.n	800bd56 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd5c:	1e5a      	subs	r2, r3, #1
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d044      	beq.n	800bdf8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d140      	bne.n	800bdf8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fbed 	bl	800a55a <uxListRemove>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d115      	bne.n	800bdb2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8a:	491f      	ldr	r1, [pc, #124]	; (800be08 <xTaskPriorityDisinherit+0x10c>)
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	440b      	add	r3, r1
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <xTaskPriorityDisinherit+0xb6>
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	2201      	movs	r2, #1
 800bda2:	fa02 f303 	lsl.w	r3, r2, r3
 800bda6:	43da      	mvns	r2, r3
 800bda8:	4b18      	ldr	r3, [pc, #96]	; (800be0c <xTaskPriorityDisinherit+0x110>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4013      	ands	r3, r2
 800bdae:	4a17      	ldr	r2, [pc, #92]	; (800be0c <xTaskPriorityDisinherit+0x110>)
 800bdb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbe:	f1c3 0207 	rsb	r2, r3, #7
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	2201      	movs	r2, #1
 800bdcc:	409a      	lsls	r2, r3
 800bdce:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <xTaskPriorityDisinherit+0x110>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	4a0d      	ldr	r2, [pc, #52]	; (800be0c <xTaskPriorityDisinherit+0x110>)
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bddc:	4613      	mov	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4a08      	ldr	r2, [pc, #32]	; (800be08 <xTaskPriorityDisinherit+0x10c>)
 800bde6:	441a      	add	r2, r3
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7fe fb56 	bl	800a4a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdf8:	697b      	ldr	r3, [r7, #20]
	}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	20000550 	.word	0x20000550
 800be08:	20000554 	.word	0x20000554
 800be0c:	20000658 	.word	0x20000658

0800be10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be1e:	2301      	movs	r3, #1
 800be20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 8087 	beq.w	800bf38 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10c      	bne.n	800be4c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	b672      	cpsid	i
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	b662      	cpsie	i
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d902      	bls.n	800be5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	61fb      	str	r3, [r7, #28]
 800be5a:	e002      	b.n	800be62 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d065      	beq.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	429a      	cmp	r2, r3
 800be74:	d160      	bne.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be76:	4b32      	ldr	r3, [pc, #200]	; (800bf40 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69ba      	ldr	r2, [r7, #24]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d10c      	bne.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	b672      	cpsid	i
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	b662      	cpsie	i
 800be94:	60bb      	str	r3, [r7, #8]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	69fa      	ldr	r2, [r7, #28]
 800bea4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	db04      	blt.n	800beb8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	f1c3 0207 	rsb	r2, r3, #7
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	6959      	ldr	r1, [r3, #20]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	4613      	mov	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4a1f      	ldr	r2, [pc, #124]	; (800bf44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bec8:	4413      	add	r3, r2
 800beca:	4299      	cmp	r1, r3
 800becc:	d134      	bne.n	800bf38 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe fb41 	bl	800a55a <uxListRemove>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d115      	bne.n	800bf0a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee2:	4918      	ldr	r1, [pc, #96]	; (800bf44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bee4:	4613      	mov	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef8:	2201      	movs	r2, #1
 800befa:	fa02 f303 	lsl.w	r3, r2, r3
 800befe:	43da      	mvns	r2, r3
 800bf00:	4b11      	ldr	r3, [pc, #68]	; (800bf48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4013      	ands	r3, r2
 800bf06:	4a10      	ldr	r2, [pc, #64]	; (800bf48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bf08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	2201      	movs	r2, #1
 800bf10:	409a      	lsls	r2, r3
 800bf12:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	4a0b      	ldr	r2, [pc, #44]	; (800bf48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf20:	4613      	mov	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4a06      	ldr	r2, [pc, #24]	; (800bf44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bf2a:	441a      	add	r2, r3
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7fe fab4 	bl	800a4a0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf38:	bf00      	nop
 800bf3a:	3720      	adds	r7, #32
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	20000550 	.word	0x20000550
 800bf44:	20000554 	.word	0x20000554
 800bf48:	20000658 	.word	0x20000658

0800bf4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf4c:	b480      	push	{r7}
 800bf4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf50:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf58:	4b05      	ldr	r3, [pc, #20]	; (800bf70 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf5e:	3201      	adds	r2, #1
 800bf60:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bf62:	4b03      	ldr	r3, [pc, #12]	; (800bf70 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf64:	681b      	ldr	r3, [r3, #0]
	}
 800bf66:	4618      	mov	r0, r3
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	20000550 	.word	0x20000550

0800bf74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf7e:	4b29      	ldr	r3, [pc, #164]	; (800c024 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf84:	4b28      	ldr	r3, [pc, #160]	; (800c028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fae5 	bl	800a55a <uxListRemove>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10b      	bne.n	800bfae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf96:	4b24      	ldr	r3, [pc, #144]	; (800c028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa2:	43da      	mvns	r2, r3
 800bfa4:	4b21      	ldr	r3, [pc, #132]	; (800c02c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	4a20      	ldr	r2, [pc, #128]	; (800c02c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb4:	d10a      	bne.n	800bfcc <prvAddCurrentTaskToDelayedList+0x58>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d007      	beq.n	800bfcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfbc:	4b1a      	ldr	r3, [pc, #104]	; (800c028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	481a      	ldr	r0, [pc, #104]	; (800c030 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bfc6:	f7fe fa6b 	bl	800a4a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfca:	e026      	b.n	800c01a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bfd4:	4b14      	ldr	r3, [pc, #80]	; (800c028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d209      	bcs.n	800bff8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfe4:	4b13      	ldr	r3, [pc, #76]	; (800c034 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	4b0f      	ldr	r3, [pc, #60]	; (800c028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3304      	adds	r3, #4
 800bfee:	4619      	mov	r1, r3
 800bff0:	4610      	mov	r0, r2
 800bff2:	f7fe fa79 	bl	800a4e8 <vListInsert>
}
 800bff6:	e010      	b.n	800c01a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3304      	adds	r3, #4
 800c002:	4619      	mov	r1, r3
 800c004:	4610      	mov	r0, r2
 800c006:	f7fe fa6f 	bl	800a4e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c00a:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	429a      	cmp	r2, r3
 800c012:	d202      	bcs.n	800c01a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c014:	4a09      	ldr	r2, [pc, #36]	; (800c03c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	6013      	str	r3, [r2, #0]
}
 800c01a:	bf00      	nop
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20000654 	.word	0x20000654
 800c028:	20000550 	.word	0x20000550
 800c02c:	20000658 	.word	0x20000658
 800c030:	2000063c 	.word	0x2000063c
 800c034:	2000060c 	.word	0x2000060c
 800c038:	20000608 	.word	0x20000608
 800c03c:	20000670 	.word	0x20000670

0800c040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3b04      	subs	r3, #4
 800c050:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3b04      	subs	r3, #4
 800c05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f023 0201 	bic.w	r2, r3, #1
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3b04      	subs	r3, #4
 800c06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c070:	4a0c      	ldr	r2, [pc, #48]	; (800c0a4 <pxPortInitialiseStack+0x64>)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3b14      	subs	r3, #20
 800c07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3b04      	subs	r3, #4
 800c086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f06f 0202 	mvn.w	r2, #2
 800c08e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3b20      	subs	r3, #32
 800c094:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c096:	68fb      	ldr	r3, [r7, #12]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	0800c0a9 	.word	0x0800c0a9

0800c0a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0b2:	4b14      	ldr	r3, [pc, #80]	; (800c104 <prvTaskExitError+0x5c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ba:	d00c      	beq.n	800c0d6 <prvTaskExitError+0x2e>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	b672      	cpsid	i
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	b662      	cpsie	i
 800c0d0:	60fb      	str	r3, [r7, #12]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <prvTaskExitError+0x2c>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	b672      	cpsid	i
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	b662      	cpsie	i
 800c0ea:	60bb      	str	r3, [r7, #8]
}
 800c0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0ee:	bf00      	nop
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d0fc      	beq.n	800c0f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	20000048 	.word	0x20000048
	...

0800c110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c110:	4b07      	ldr	r3, [pc, #28]	; (800c130 <pxCurrentTCBConst2>)
 800c112:	6819      	ldr	r1, [r3, #0]
 800c114:	6808      	ldr	r0, [r1, #0]
 800c116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11a:	f380 8809 	msr	PSP, r0
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f04f 0000 	mov.w	r0, #0
 800c126:	f380 8811 	msr	BASEPRI, r0
 800c12a:	4770      	bx	lr
 800c12c:	f3af 8000 	nop.w

0800c130 <pxCurrentTCBConst2>:
 800c130:	20000550 	.word	0x20000550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c134:	bf00      	nop
 800c136:	bf00      	nop

0800c138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c138:	4808      	ldr	r0, [pc, #32]	; (800c15c <prvPortStartFirstTask+0x24>)
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	6800      	ldr	r0, [r0, #0]
 800c13e:	f380 8808 	msr	MSP, r0
 800c142:	f04f 0000 	mov.w	r0, #0
 800c146:	f380 8814 	msr	CONTROL, r0
 800c14a:	b662      	cpsie	i
 800c14c:	b661      	cpsie	f
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	df00      	svc	0
 800c158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c15a:	bf00      	nop
 800c15c:	e000ed08 	.word	0xe000ed08

0800c160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c166:	4b37      	ldr	r3, [pc, #220]	; (800c244 <xPortStartScheduler+0xe4>)
 800c168:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	22ff      	movs	r2, #255	; 0xff
 800c176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	b2db      	uxtb	r3, r3
 800c184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	4b2f      	ldr	r3, [pc, #188]	; (800c248 <xPortStartScheduler+0xe8>)
 800c18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c18e:	4b2f      	ldr	r3, [pc, #188]	; (800c24c <xPortStartScheduler+0xec>)
 800c190:	2207      	movs	r2, #7
 800c192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c194:	e009      	b.n	800c1aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c196:	4b2d      	ldr	r3, [pc, #180]	; (800c24c <xPortStartScheduler+0xec>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	4a2b      	ldr	r2, [pc, #172]	; (800c24c <xPortStartScheduler+0xec>)
 800c19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b2:	2b80      	cmp	r3, #128	; 0x80
 800c1b4:	d0ef      	beq.n	800c196 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1b6:	4b25      	ldr	r3, [pc, #148]	; (800c24c <xPortStartScheduler+0xec>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f1c3 0307 	rsb	r3, r3, #7
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d00c      	beq.n	800c1dc <xPortStartScheduler+0x7c>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	b672      	cpsid	i
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	b662      	cpsie	i
 800c1d6:	60bb      	str	r3, [r7, #8]
}
 800c1d8:	bf00      	nop
 800c1da:	e7fe      	b.n	800c1da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1dc:	4b1b      	ldr	r3, [pc, #108]	; (800c24c <xPortStartScheduler+0xec>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	021b      	lsls	r3, r3, #8
 800c1e2:	4a1a      	ldr	r2, [pc, #104]	; (800c24c <xPortStartScheduler+0xec>)
 800c1e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1e6:	4b19      	ldr	r3, [pc, #100]	; (800c24c <xPortStartScheduler+0xec>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1ee:	4a17      	ldr	r2, [pc, #92]	; (800c24c <xPortStartScheduler+0xec>)
 800c1f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1fa:	4b15      	ldr	r3, [pc, #84]	; (800c250 <xPortStartScheduler+0xf0>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a14      	ldr	r2, [pc, #80]	; (800c250 <xPortStartScheduler+0xf0>)
 800c200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c204:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <xPortStartScheduler+0xf0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a11      	ldr	r2, [pc, #68]	; (800c250 <xPortStartScheduler+0xf0>)
 800c20c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c210:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c212:	f000 f8dd 	bl	800c3d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c216:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <xPortStartScheduler+0xf4>)
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c21c:	f000 f8fc 	bl	800c418 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c220:	4b0d      	ldr	r3, [pc, #52]	; (800c258 <xPortStartScheduler+0xf8>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a0c      	ldr	r2, [pc, #48]	; (800c258 <xPortStartScheduler+0xf8>)
 800c226:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c22a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c22c:	f7ff ff84 	bl	800c138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c230:	f7ff fa74 	bl	800b71c <vTaskSwitchContext>
	prvTaskExitError();
 800c234:	f7ff ff38 	bl	800c0a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	e000e400 	.word	0xe000e400
 800c248:	2000067c 	.word	0x2000067c
 800c24c:	20000680 	.word	0x20000680
 800c250:	e000ed20 	.word	0xe000ed20
 800c254:	20000048 	.word	0x20000048
 800c258:	e000ef34 	.word	0xe000ef34

0800c25c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	b672      	cpsid	i
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	b662      	cpsie	i
 800c276:	607b      	str	r3, [r7, #4]
}
 800c278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c27a:	4b10      	ldr	r3, [pc, #64]	; (800c2bc <vPortEnterCritical+0x60>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3301      	adds	r3, #1
 800c280:	4a0e      	ldr	r2, [pc, #56]	; (800c2bc <vPortEnterCritical+0x60>)
 800c282:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c284:	4b0d      	ldr	r3, [pc, #52]	; (800c2bc <vPortEnterCritical+0x60>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d111      	bne.n	800c2b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c28c:	4b0c      	ldr	r3, [pc, #48]	; (800c2c0 <vPortEnterCritical+0x64>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00c      	beq.n	800c2b0 <vPortEnterCritical+0x54>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29a:	b672      	cpsid	i
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	b662      	cpsie	i
 800c2aa:	603b      	str	r3, [r7, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <vPortEnterCritical+0x52>
	}
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	20000048 	.word	0x20000048
 800c2c0:	e000ed04 	.word	0xe000ed04

0800c2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2ca:	4b13      	ldr	r3, [pc, #76]	; (800c318 <vPortExitCritical+0x54>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10c      	bne.n	800c2ec <vPortExitCritical+0x28>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	b672      	cpsid	i
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	b662      	cpsie	i
 800c2e6:	607b      	str	r3, [r7, #4]
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	; (800c318 <vPortExitCritical+0x54>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	4a09      	ldr	r2, [pc, #36]	; (800c318 <vPortExitCritical+0x54>)
 800c2f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2f6:	4b08      	ldr	r3, [pc, #32]	; (800c318 <vPortExitCritical+0x54>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d105      	bne.n	800c30a <vPortExitCritical+0x46>
 800c2fe:	2300      	movs	r3, #0
 800c300:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c308:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c30a:	bf00      	nop
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	20000048 	.word	0x20000048
 800c31c:	00000000 	.word	0x00000000

0800c320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c320:	f3ef 8009 	mrs	r0, PSP
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	4b15      	ldr	r3, [pc, #84]	; (800c380 <pxCurrentTCBConst>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	f01e 0f10 	tst.w	lr, #16
 800c330:	bf08      	it	eq
 800c332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33a:	6010      	str	r0, [r2, #0]
 800c33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c344:	b672      	cpsid	i
 800c346:	f380 8811 	msr	BASEPRI, r0
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	b662      	cpsie	i
 800c354:	f7ff f9e2 	bl	800b71c <vTaskSwitchContext>
 800c358:	f04f 0000 	mov.w	r0, #0
 800c35c:	f380 8811 	msr	BASEPRI, r0
 800c360:	bc09      	pop	{r0, r3}
 800c362:	6819      	ldr	r1, [r3, #0]
 800c364:	6808      	ldr	r0, [r1, #0]
 800c366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36a:	f01e 0f10 	tst.w	lr, #16
 800c36e:	bf08      	it	eq
 800c370:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c374:	f380 8809 	msr	PSP, r0
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop

0800c380 <pxCurrentTCBConst>:
 800c380:	20000550 	.word	0x20000550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop

0800c388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	b672      	cpsid	i
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	b662      	cpsie	i
 800c3a2:	607b      	str	r3, [r7, #4]
}
 800c3a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3a6:	f7ff f8ff 	bl	800b5a8 <xTaskIncrementTick>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d003      	beq.n	800c3b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3b0:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <SysTick_Handler+0x44>)
 800c3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	f383 8811 	msr	BASEPRI, r3
}
 800c3c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3d4:	4b0b      	ldr	r3, [pc, #44]	; (800c404 <vPortSetupTimerInterrupt+0x34>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3da:	4b0b      	ldr	r3, [pc, #44]	; (800c408 <vPortSetupTimerInterrupt+0x38>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <vPortSetupTimerInterrupt+0x3c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a0a      	ldr	r2, [pc, #40]	; (800c410 <vPortSetupTimerInterrupt+0x40>)
 800c3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ea:	099b      	lsrs	r3, r3, #6
 800c3ec:	4a09      	ldr	r2, [pc, #36]	; (800c414 <vPortSetupTimerInterrupt+0x44>)
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3f2:	4b04      	ldr	r3, [pc, #16]	; (800c404 <vPortSetupTimerInterrupt+0x34>)
 800c3f4:	2207      	movs	r2, #7
 800c3f6:	601a      	str	r2, [r3, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	e000e010 	.word	0xe000e010
 800c408:	e000e018 	.word	0xe000e018
 800c40c:	2000003c 	.word	0x2000003c
 800c410:	10624dd3 	.word	0x10624dd3
 800c414:	e000e014 	.word	0xe000e014

0800c418 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c418:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c428 <vPortEnableVFP+0x10>
 800c41c:	6801      	ldr	r1, [r0, #0]
 800c41e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c422:	6001      	str	r1, [r0, #0]
 800c424:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c426:	bf00      	nop
 800c428:	e000ed88 	.word	0xe000ed88

0800c42c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08a      	sub	sp, #40	; 0x28
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c438:	f7ff f80a 	bl	800b450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c43c:	4b5b      	ldr	r3, [pc, #364]	; (800c5ac <pvPortMalloc+0x180>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c444:	f000 f91a 	bl	800c67c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c448:	4b59      	ldr	r3, [pc, #356]	; (800c5b0 <pvPortMalloc+0x184>)
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4013      	ands	r3, r2
 800c450:	2b00      	cmp	r3, #0
 800c452:	f040 8092 	bne.w	800c57a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01f      	beq.n	800c49c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c45c:	2208      	movs	r2, #8
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4413      	add	r3, r2
 800c462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d016      	beq.n	800c49c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f023 0307 	bic.w	r3, r3, #7
 800c474:	3308      	adds	r3, #8
 800c476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00c      	beq.n	800c49c <pvPortMalloc+0x70>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	b672      	cpsid	i
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	b662      	cpsie	i
 800c496:	617b      	str	r3, [r7, #20]
}
 800c498:	bf00      	nop
 800c49a:	e7fe      	b.n	800c49a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d06b      	beq.n	800c57a <pvPortMalloc+0x14e>
 800c4a2:	4b44      	ldr	r3, [pc, #272]	; (800c5b4 <pvPortMalloc+0x188>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d866      	bhi.n	800c57a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4ac:	4b42      	ldr	r3, [pc, #264]	; (800c5b8 <pvPortMalloc+0x18c>)
 800c4ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4b0:	4b41      	ldr	r3, [pc, #260]	; (800c5b8 <pvPortMalloc+0x18c>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4b6:	e004      	b.n	800c4c2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d903      	bls.n	800c4d4 <pvPortMalloc+0xa8>
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1f1      	bne.n	800c4b8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4d4:	4b35      	ldr	r3, [pc, #212]	; (800c5ac <pvPortMalloc+0x180>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d04d      	beq.n	800c57a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2208      	movs	r2, #8
 800c4e4:	4413      	add	r3, r2
 800c4e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	1ad2      	subs	r2, r2, r3
 800c4f8:	2308      	movs	r3, #8
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d921      	bls.n	800c544 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4413      	add	r3, r2
 800c506:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00c      	beq.n	800c52c <pvPortMalloc+0x100>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	b672      	cpsid	i
 800c518:	f383 8811 	msr	BASEPRI, r3
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	b662      	cpsie	i
 800c526:	613b      	str	r3, [r7, #16]
}
 800c528:	bf00      	nop
 800c52a:	e7fe      	b.n	800c52a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	1ad2      	subs	r2, r2, r3
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c53e:	69b8      	ldr	r0, [r7, #24]
 800c540:	f000 f8fe 	bl	800c740 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c544:	4b1b      	ldr	r3, [pc, #108]	; (800c5b4 <pvPortMalloc+0x188>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	4a19      	ldr	r2, [pc, #100]	; (800c5b4 <pvPortMalloc+0x188>)
 800c550:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c552:	4b18      	ldr	r3, [pc, #96]	; (800c5b4 <pvPortMalloc+0x188>)
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	4b19      	ldr	r3, [pc, #100]	; (800c5bc <pvPortMalloc+0x190>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d203      	bcs.n	800c566 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c55e:	4b15      	ldr	r3, [pc, #84]	; (800c5b4 <pvPortMalloc+0x188>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a16      	ldr	r2, [pc, #88]	; (800c5bc <pvPortMalloc+0x190>)
 800c564:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <pvPortMalloc+0x184>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	431a      	orrs	r2, r3
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c57a:	f7fe ff77 	bl	800b46c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	f003 0307 	and.w	r3, r3, #7
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00c      	beq.n	800c5a2 <pvPortMalloc+0x176>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	b672      	cpsid	i
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	b662      	cpsie	i
 800c59c:	60fb      	str	r3, [r7, #12]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <pvPortMalloc+0x174>
	return pvReturn;
 800c5a2:	69fb      	ldr	r3, [r7, #28]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3728      	adds	r7, #40	; 0x28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20007e8c 	.word	0x20007e8c
 800c5b0:	20007e98 	.word	0x20007e98
 800c5b4:	20007e90 	.word	0x20007e90
 800c5b8:	20007e84 	.word	0x20007e84
 800c5bc:	20007e94 	.word	0x20007e94

0800c5c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d04c      	beq.n	800c66c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5d2:	2308      	movs	r3, #8
 800c5d4:	425b      	negs	r3, r3
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	4413      	add	r3, r2
 800c5da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	4b23      	ldr	r3, [pc, #140]	; (800c674 <vPortFree+0xb4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10c      	bne.n	800c608 <vPortFree+0x48>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	b672      	cpsid	i
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	b662      	cpsie	i
 800c602:	60fb      	str	r3, [r7, #12]
}
 800c604:	bf00      	nop
 800c606:	e7fe      	b.n	800c606 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00c      	beq.n	800c62a <vPortFree+0x6a>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	b672      	cpsid	i
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	b662      	cpsie	i
 800c624:	60bb      	str	r3, [r7, #8]
}
 800c626:	bf00      	nop
 800c628:	e7fe      	b.n	800c628 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	4b11      	ldr	r3, [pc, #68]	; (800c674 <vPortFree+0xb4>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4013      	ands	r3, r2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d019      	beq.n	800c66c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d115      	bne.n	800c66c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	685a      	ldr	r2, [r3, #4]
 800c644:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <vPortFree+0xb4>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	43db      	mvns	r3, r3
 800c64a:	401a      	ands	r2, r3
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c650:	f7fe fefe 	bl	800b450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <vPortFree+0xb8>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4413      	add	r3, r2
 800c65e:	4a06      	ldr	r2, [pc, #24]	; (800c678 <vPortFree+0xb8>)
 800c660:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c662:	6938      	ldr	r0, [r7, #16]
 800c664:	f000 f86c 	bl	800c740 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c668:	f7fe ff00 	bl	800b46c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c66c:	bf00      	nop
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20007e98 	.word	0x20007e98
 800c678:	20007e90 	.word	0x20007e90

0800c67c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c682:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800c686:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c688:	4b27      	ldr	r3, [pc, #156]	; (800c728 <prvHeapInit+0xac>)
 800c68a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00c      	beq.n	800c6b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3307      	adds	r3, #7
 800c69a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f023 0307 	bic.w	r3, r3, #7
 800c6a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	4a1f      	ldr	r2, [pc, #124]	; (800c728 <prvHeapInit+0xac>)
 800c6ac:	4413      	add	r3, r2
 800c6ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6b4:	4a1d      	ldr	r2, [pc, #116]	; (800c72c <prvHeapInit+0xb0>)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6ba:	4b1c      	ldr	r3, [pc, #112]	; (800c72c <prvHeapInit+0xb0>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f023 0307 	bic.w	r3, r3, #7
 800c6d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	4a15      	ldr	r2, [pc, #84]	; (800c730 <prvHeapInit+0xb4>)
 800c6dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6de:	4b14      	ldr	r3, [pc, #80]	; (800c730 <prvHeapInit+0xb4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6e6:	4b12      	ldr	r3, [pc, #72]	; (800c730 <prvHeapInit+0xb4>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6fc:	4b0c      	ldr	r3, [pc, #48]	; (800c730 <prvHeapInit+0xb4>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	4a0a      	ldr	r2, [pc, #40]	; (800c734 <prvHeapInit+0xb8>)
 800c70a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	4a09      	ldr	r2, [pc, #36]	; (800c738 <prvHeapInit+0xbc>)
 800c712:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c714:	4b09      	ldr	r3, [pc, #36]	; (800c73c <prvHeapInit+0xc0>)
 800c716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c71a:	601a      	str	r2, [r3, #0]
}
 800c71c:	bf00      	nop
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	20000684 	.word	0x20000684
 800c72c:	20007e84 	.word	0x20007e84
 800c730:	20007e8c 	.word	0x20007e8c
 800c734:	20007e94 	.word	0x20007e94
 800c738:	20007e90 	.word	0x20007e90
 800c73c:	20007e98 	.word	0x20007e98

0800c740 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c748:	4b28      	ldr	r3, [pc, #160]	; (800c7ec <prvInsertBlockIntoFreeList+0xac>)
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	e002      	b.n	800c754 <prvInsertBlockIntoFreeList+0x14>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d8f7      	bhi.n	800c74e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	4413      	add	r3, r2
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d108      	bne.n	800c782 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	441a      	add	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	441a      	add	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	429a      	cmp	r2, r3
 800c794:	d118      	bne.n	800c7c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <prvInsertBlockIntoFreeList+0xb0>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d00d      	beq.n	800c7be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	441a      	add	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	e008      	b.n	800c7d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7be:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <prvInsertBlockIntoFreeList+0xb0>)
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	e003      	b.n	800c7d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d002      	beq.n	800c7de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7de:	bf00      	nop
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	20007e84 	.word	0x20007e84
 800c7f0:	20007e8c 	.word	0x20007e8c

0800c7f4 <__libc_init_array>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	4d0d      	ldr	r5, [pc, #52]	; (800c82c <__libc_init_array+0x38>)
 800c7f8:	4c0d      	ldr	r4, [pc, #52]	; (800c830 <__libc_init_array+0x3c>)
 800c7fa:	1b64      	subs	r4, r4, r5
 800c7fc:	10a4      	asrs	r4, r4, #2
 800c7fe:	2600      	movs	r6, #0
 800c800:	42a6      	cmp	r6, r4
 800c802:	d109      	bne.n	800c818 <__libc_init_array+0x24>
 800c804:	4d0b      	ldr	r5, [pc, #44]	; (800c834 <__libc_init_array+0x40>)
 800c806:	4c0c      	ldr	r4, [pc, #48]	; (800c838 <__libc_init_array+0x44>)
 800c808:	f000 f8f6 	bl	800c9f8 <_init>
 800c80c:	1b64      	subs	r4, r4, r5
 800c80e:	10a4      	asrs	r4, r4, #2
 800c810:	2600      	movs	r6, #0
 800c812:	42a6      	cmp	r6, r4
 800c814:	d105      	bne.n	800c822 <__libc_init_array+0x2e>
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	f855 3b04 	ldr.w	r3, [r5], #4
 800c81c:	4798      	blx	r3
 800c81e:	3601      	adds	r6, #1
 800c820:	e7ee      	b.n	800c800 <__libc_init_array+0xc>
 800c822:	f855 3b04 	ldr.w	r3, [r5], #4
 800c826:	4798      	blx	r3
 800c828:	3601      	adds	r6, #1
 800c82a:	e7f2      	b.n	800c812 <__libc_init_array+0x1e>
 800c82c:	08032c64 	.word	0x08032c64
 800c830:	08032c64 	.word	0x08032c64
 800c834:	08032c64 	.word	0x08032c64
 800c838:	08032c68 	.word	0x08032c68

0800c83c <__retarget_lock_acquire_recursive>:
 800c83c:	4770      	bx	lr

0800c83e <__retarget_lock_release_recursive>:
 800c83e:	4770      	bx	lr

0800c840 <memcpy>:
 800c840:	440a      	add	r2, r1
 800c842:	4291      	cmp	r1, r2
 800c844:	f100 33ff 	add.w	r3, r0, #4294967295
 800c848:	d100      	bne.n	800c84c <memcpy+0xc>
 800c84a:	4770      	bx	lr
 800c84c:	b510      	push	{r4, lr}
 800c84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c856:	4291      	cmp	r1, r2
 800c858:	d1f9      	bne.n	800c84e <memcpy+0xe>
 800c85a:	bd10      	pop	{r4, pc}

0800c85c <memset>:
 800c85c:	4402      	add	r2, r0
 800c85e:	4603      	mov	r3, r0
 800c860:	4293      	cmp	r3, r2
 800c862:	d100      	bne.n	800c866 <memset+0xa>
 800c864:	4770      	bx	lr
 800c866:	f803 1b01 	strb.w	r1, [r3], #1
 800c86a:	e7f9      	b.n	800c860 <memset+0x4>

0800c86c <cleanup_glue>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	6809      	ldr	r1, [r1, #0]
 800c872:	4605      	mov	r5, r0
 800c874:	b109      	cbz	r1, 800c87a <cleanup_glue+0xe>
 800c876:	f7ff fff9 	bl	800c86c <cleanup_glue>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4628      	mov	r0, r5
 800c87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c882:	f000 b869 	b.w	800c958 <_free_r>
	...

0800c888 <_reclaim_reent>:
 800c888:	4b2c      	ldr	r3, [pc, #176]	; (800c93c <_reclaim_reent+0xb4>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4283      	cmp	r3, r0
 800c88e:	b570      	push	{r4, r5, r6, lr}
 800c890:	4604      	mov	r4, r0
 800c892:	d051      	beq.n	800c938 <_reclaim_reent+0xb0>
 800c894:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c896:	b143      	cbz	r3, 800c8aa <_reclaim_reent+0x22>
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d14a      	bne.n	800c934 <_reclaim_reent+0xac>
 800c89e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8a0:	6819      	ldr	r1, [r3, #0]
 800c8a2:	b111      	cbz	r1, 800c8aa <_reclaim_reent+0x22>
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 f857 	bl	800c958 <_free_r>
 800c8aa:	6961      	ldr	r1, [r4, #20]
 800c8ac:	b111      	cbz	r1, 800c8b4 <_reclaim_reent+0x2c>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 f852 	bl	800c958 <_free_r>
 800c8b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c8b6:	b111      	cbz	r1, 800c8be <_reclaim_reent+0x36>
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f000 f84d 	bl	800c958 <_free_r>
 800c8be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c8c0:	b111      	cbz	r1, 800c8c8 <_reclaim_reent+0x40>
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 f848 	bl	800c958 <_free_r>
 800c8c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c8ca:	b111      	cbz	r1, 800c8d2 <_reclaim_reent+0x4a>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 f843 	bl	800c958 <_free_r>
 800c8d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c8d4:	b111      	cbz	r1, 800c8dc <_reclaim_reent+0x54>
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 f83e 	bl	800c958 <_free_r>
 800c8dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c8de:	b111      	cbz	r1, 800c8e6 <_reclaim_reent+0x5e>
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 f839 	bl	800c958 <_free_r>
 800c8e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c8e8:	b111      	cbz	r1, 800c8f0 <_reclaim_reent+0x68>
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 f834 	bl	800c958 <_free_r>
 800c8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8f2:	b111      	cbz	r1, 800c8fa <_reclaim_reent+0x72>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 f82f 	bl	800c958 <_free_r>
 800c8fa:	69a3      	ldr	r3, [r4, #24]
 800c8fc:	b1e3      	cbz	r3, 800c938 <_reclaim_reent+0xb0>
 800c8fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c900:	4620      	mov	r0, r4
 800c902:	4798      	blx	r3
 800c904:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c906:	b1b9      	cbz	r1, 800c938 <_reclaim_reent+0xb0>
 800c908:	4620      	mov	r0, r4
 800c90a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c90e:	f7ff bfad 	b.w	800c86c <cleanup_glue>
 800c912:	5949      	ldr	r1, [r1, r5]
 800c914:	b941      	cbnz	r1, 800c928 <_reclaim_reent+0xa0>
 800c916:	3504      	adds	r5, #4
 800c918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c91a:	2d80      	cmp	r5, #128	; 0x80
 800c91c:	68d9      	ldr	r1, [r3, #12]
 800c91e:	d1f8      	bne.n	800c912 <_reclaim_reent+0x8a>
 800c920:	4620      	mov	r0, r4
 800c922:	f000 f819 	bl	800c958 <_free_r>
 800c926:	e7ba      	b.n	800c89e <_reclaim_reent+0x16>
 800c928:	680e      	ldr	r6, [r1, #0]
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 f814 	bl	800c958 <_free_r>
 800c930:	4631      	mov	r1, r6
 800c932:	e7ef      	b.n	800c914 <_reclaim_reent+0x8c>
 800c934:	2500      	movs	r5, #0
 800c936:	e7ef      	b.n	800c918 <_reclaim_reent+0x90>
 800c938:	bd70      	pop	{r4, r5, r6, pc}
 800c93a:	bf00      	nop
 800c93c:	2000004c 	.word	0x2000004c

0800c940 <__malloc_lock>:
 800c940:	4801      	ldr	r0, [pc, #4]	; (800c948 <__malloc_lock+0x8>)
 800c942:	f7ff bf7b 	b.w	800c83c <__retarget_lock_acquire_recursive>
 800c946:	bf00      	nop
 800c948:	20008660 	.word	0x20008660

0800c94c <__malloc_unlock>:
 800c94c:	4801      	ldr	r0, [pc, #4]	; (800c954 <__malloc_unlock+0x8>)
 800c94e:	f7ff bf76 	b.w	800c83e <__retarget_lock_release_recursive>
 800c952:	bf00      	nop
 800c954:	20008660 	.word	0x20008660

0800c958 <_free_r>:
 800c958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c95a:	2900      	cmp	r1, #0
 800c95c:	d048      	beq.n	800c9f0 <_free_r+0x98>
 800c95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c962:	9001      	str	r0, [sp, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f1a1 0404 	sub.w	r4, r1, #4
 800c96a:	bfb8      	it	lt
 800c96c:	18e4      	addlt	r4, r4, r3
 800c96e:	f7ff ffe7 	bl	800c940 <__malloc_lock>
 800c972:	4a20      	ldr	r2, [pc, #128]	; (800c9f4 <_free_r+0x9c>)
 800c974:	9801      	ldr	r0, [sp, #4]
 800c976:	6813      	ldr	r3, [r2, #0]
 800c978:	4615      	mov	r5, r2
 800c97a:	b933      	cbnz	r3, 800c98a <_free_r+0x32>
 800c97c:	6063      	str	r3, [r4, #4]
 800c97e:	6014      	str	r4, [r2, #0]
 800c980:	b003      	add	sp, #12
 800c982:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c986:	f7ff bfe1 	b.w	800c94c <__malloc_unlock>
 800c98a:	42a3      	cmp	r3, r4
 800c98c:	d90b      	bls.n	800c9a6 <_free_r+0x4e>
 800c98e:	6821      	ldr	r1, [r4, #0]
 800c990:	1862      	adds	r2, r4, r1
 800c992:	4293      	cmp	r3, r2
 800c994:	bf04      	itt	eq
 800c996:	681a      	ldreq	r2, [r3, #0]
 800c998:	685b      	ldreq	r3, [r3, #4]
 800c99a:	6063      	str	r3, [r4, #4]
 800c99c:	bf04      	itt	eq
 800c99e:	1852      	addeq	r2, r2, r1
 800c9a0:	6022      	streq	r2, [r4, #0]
 800c9a2:	602c      	str	r4, [r5, #0]
 800c9a4:	e7ec      	b.n	800c980 <_free_r+0x28>
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	b10b      	cbz	r3, 800c9b0 <_free_r+0x58>
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	d9fa      	bls.n	800c9a6 <_free_r+0x4e>
 800c9b0:	6811      	ldr	r1, [r2, #0]
 800c9b2:	1855      	adds	r5, r2, r1
 800c9b4:	42a5      	cmp	r5, r4
 800c9b6:	d10b      	bne.n	800c9d0 <_free_r+0x78>
 800c9b8:	6824      	ldr	r4, [r4, #0]
 800c9ba:	4421      	add	r1, r4
 800c9bc:	1854      	adds	r4, r2, r1
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	6011      	str	r1, [r2, #0]
 800c9c2:	d1dd      	bne.n	800c980 <_free_r+0x28>
 800c9c4:	681c      	ldr	r4, [r3, #0]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	6053      	str	r3, [r2, #4]
 800c9ca:	4421      	add	r1, r4
 800c9cc:	6011      	str	r1, [r2, #0]
 800c9ce:	e7d7      	b.n	800c980 <_free_r+0x28>
 800c9d0:	d902      	bls.n	800c9d8 <_free_r+0x80>
 800c9d2:	230c      	movs	r3, #12
 800c9d4:	6003      	str	r3, [r0, #0]
 800c9d6:	e7d3      	b.n	800c980 <_free_r+0x28>
 800c9d8:	6825      	ldr	r5, [r4, #0]
 800c9da:	1961      	adds	r1, r4, r5
 800c9dc:	428b      	cmp	r3, r1
 800c9de:	bf04      	itt	eq
 800c9e0:	6819      	ldreq	r1, [r3, #0]
 800c9e2:	685b      	ldreq	r3, [r3, #4]
 800c9e4:	6063      	str	r3, [r4, #4]
 800c9e6:	bf04      	itt	eq
 800c9e8:	1949      	addeq	r1, r1, r5
 800c9ea:	6021      	streq	r1, [r4, #0]
 800c9ec:	6054      	str	r4, [r2, #4]
 800c9ee:	e7c7      	b.n	800c980 <_free_r+0x28>
 800c9f0:	b003      	add	sp, #12
 800c9f2:	bd30      	pop	{r4, r5, pc}
 800c9f4:	20007e9c 	.word	0x20007e9c

0800c9f8 <_init>:
 800c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fa:	bf00      	nop
 800c9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fe:	bc08      	pop	{r3}
 800ca00:	469e      	mov	lr, r3
 800ca02:	4770      	bx	lr

0800ca04 <_fini>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	bf00      	nop
 800ca08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0a:	bc08      	pop	{r3}
 800ca0c:	469e      	mov	lr, r3
 800ca0e:	4770      	bx	lr
